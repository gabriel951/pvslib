%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Authors: 
%          Mauricio Ayala-Rincon(1)
%          Maribel Fernandez (2)
%          Gabriel Ferreira Silva (1) 
%          Temur Kutsia (3)
%          Daniele Nantes Sobrinho (1)
%
%          (1) Universidade de Brasilia, (2) King's College London
%          (3) Johannes Kepler University 
% 
% Paper: "Nominal AC-Matching"
% 
% This theory contains the function and lemmas about function "inst_step" (in our paper it's refered as
% instStep). 
%
% 
% Some proofs in this theory follow the same line of corresponding proofs in the 
% theory of first-order AC-unification.
% However, since the grammar of the terms is different, reusing these
% proofs is done manually (it's interactive theorem proving not fully automated reasoning). 
% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
nominal_AC_inst_step: THEORY
BEGIN
	IMPORTING nominal_AC_unification, nominal_AC_fresh_subs, diophantine, 
      list_aux_equational_reasoning[number], list_aux_equational_reasoning[args], list_aux_equational_reasoning[basic_sub], 
	  aux_nominal_AC_unification

sigma, sigma1, delta, sigma2, gamma, gamma1, del: VAR sub
rho: VAR renaming

X, Y: VAR variable

G, G1, G2, Delta, nabla, Del: VAR fresh_context 
pi: VAR perm

i, j: VAR nat

f, sym: VAR string

t, s, t1, t2, s1, tsigma: VAR nominal_AC_term
args, args1: VAR args
lst_args, lst_args1, lst_args2: VAR list[args]

unif_pair, unif_pair2, up, up1: VAR unif_pair

% P stands for "unification Problem". Pu stands for "Unseen unification Problem".
% Ps stands for "Seen unification Problem". 
P, P1, P2, Ps, Pu: VAR unif_prb
lst_P, lst_P1, lst_P2: VAR list[unif_prb]

V, PV, FV: VAR finite_set[variable]

% check if either one of the terms "s" or "t" are variables and whether we can solve {s =? t} by instantiating.
% returns
%   1 - the new context we must work with 
%   1 - the substitution "sigma" computed (if a instantiation happened)
%   2 - a boolean "skip" indicating that the terms can't be unified via a instantiation of s
%   3 - a boolean "impossible" indicating that the terms can't be unified
inst_step(PV, G, t, s): [fresh_context, sub, bool, bool] =  
   IF var?(s) THEN
        IF (NOT member(V(s), vars(t))) AND (NOT member(V(s), PV)) THEN LET
	    % instantiate s to t
	    sigma = cons((V(s), ext(reverse(p(s)))(t)), null),
	    (G1, bool1) = nominal_AC_fresh_subs?(sigma, G), 
	    skip = FALSE IN 
	    IF bool1 THEN (append(G1, G), sigma, skip, FALSE)
	    ELSE (G, null, skip, TRUE)
	    ENDIF 

	ELSIF var?(t) AND (NOT member(V(t), vars(s))) AND (NOT member(V(t), PV))  THEN LET
	    %instantiate t to s 
	    sigma = cons((V(t), ext(reverse(p(t)))(s)), null),
	    (G1, bool1) = nominal_AC_fresh_subs?(sigma, G), 
	    skip = FALSE IN 
	    IF bool1 THEN (append(G1, G), sigma, skip, FALSE)
	    ELSE (G, null, skip, TRUE)
	    ENDIF 

	ELSIF var?(t) AND V(s) = V(t) THEN LET 
	    % since we are in matching, we solve the "fixpoint equation" by enlarging the context
	    G1 = append(fc(DS(p(t), p(s)), V(t)), G), 
	    sigma = null, skip = FALSE, impossible = FALSE IN 
	    (G1, sigma, skip, impossible) 

	% no solution
	ELSE LET sigma = null, skip = FALSE, impossible = TRUE IN 
	    	 (G, sigma, skip, impossible)
	ENDIF
	

   ELSIF var?(t) THEN
        IF (NOT member(V(t), PV)) AND (NOT member(V(t), vars(s))) THEN LET 
	    %instantiate t to s 
	    sigma = cons((V(t), ext(reverse(p(t)))(s)), null),
	    (G1, bool1) = nominal_AC_fresh_subs?(sigma, G), 
	    skip = FALSE IN 
	    IF bool1 THEN (append(G1, G), sigma, skip, FALSE)
	    ELSE (G, null, skip, TRUE)
	    ENDIF 

	ELSE LET sigma = null, skip = FALSE, impossible = TRUE IN 
	    	 (G, sigma, skip, impossible)
	ENDIF
       
   % none of them are variables, we skip  
   ELSE LET sigma = null, skip = TRUE, impossible = FALSE IN 
        (G, sigma, skip, impossible) 

   ENDIF

% this function is refered in our paper as "instStep"
% receives:
%       1 - the context Gamma (G) that we are working with
%	    2 - list of unification problem we still have not tried to instantiate
%       3 - list of unification problem we already have tried to instantiate
% 	    4 - the substitution "sigma" computed so far
%       5 - list of protected variables we cannot instantiate
% returns:
%       1 - the new context we will work with 
%	    2 - the unification problem after we make all the instantiations
% 	    3 - the substitution computed
% 	    4 - a boolean that is TRUE if one of the unification pairs
% 	    gave an impossible substitution
inst_step(PV, G, Pu, Ps, sigma): RECURSIVE [fresh_context, unif_prb, sub, bool] =
   IF null?(Pu) THEN (G, Ps, sigma, FALSE) 
   ELSE LET 
   	(t, s) = car(Pu), 
   	(G1, delta, skip, fail) = inst_step(PV, G, t, s) IN
	IF fail THEN (G, null, sigma, TRUE)
	ELSIF skip THEN  
	     inst_step(PV, G, cdr(Pu), cons((t, s), Ps), sigma)
	ELSE LET
	     new_Pu = apply_sub(delta, cdr(Pu)), 
	     new_Ps = apply_sub(delta, Ps), 
	     new_sigma = append(delta, sigma) IN
	     inst_step(PV, G1, new_Pu, new_Ps, new_sigma)
	ENDIF
   ENDIF
MEASURE length(Pu)

% extends "inst_step" to a list of unification problems
% if a unification problem fails when we try to instantiate it, it is removed from the list
inst_step(PV, G, lst_P): RECURSIVE list[[fresh_context, unif_prb, sub]] =
    IF null?(lst_P) THEN null
    ELSE LET
    	 P = car(lst_P),
    	 (G1, new_P, sigma, fail) = inst_step(PV, G, P, null, null) IN 
	 IF fail THEN inst_step(PV, G, cdr(lst_P))
	 ELSE cons((G1, new_P, sigma), inst_step(PV, G, cdr(lst_P)))
	 ENDIF
    ENDIF
MEASURE lst_P BY << 

% skip index 
% i is a skip index if when we apply instStep, the 
% the function assumes inst_step does not fail and that i < length(P)
skip_index?(i, PV, G, P): RECURSIVE bool = 
    IF null?(P) THEN FALSE
    ELSE LET 
   	(t, s) = car(P), 
   	(G1, delta, skip, fail) = inst_step(PV, G, t, s) IN
	IF i = 0 THEN skip 
	ELSIF skip THEN  skip_index?(i-1, PV, G, cdr(P))
	ELSE LET new_P = apply_sub(delta, cdr(P)) IN skip_index?(i-1, PV, G1, new_P)
	ENDIF
    ENDIF
MEASURE length(P) 

% this function mimics inst_step(PV, G, t, s) but returns only the context added, instead
% of the whole context
inst_step_ctx(PV, G, t, s): fresh_context = 
   IF var?(s) THEN
        IF (NOT member(V(s), vars(t))) AND (NOT member(V(s), PV)) THEN LET
	    sigma = cons((V(s), ext(reverse(p(s)))(t)), null),
	    (G1, bool1) = nominal_AC_fresh_subs?(sigma, G) IN
	    IF bool1 THEN G1
	    ELSE null
	    ENDIF 
	ELSIF var?(t) AND (NOT member(V(t), vars(s))) AND (NOT member(V(t), PV))  THEN LET
	    sigma = cons((V(t), ext(reverse(p(t)))(s)), null),
	    (G1, bool1) = nominal_AC_fresh_subs?(sigma, G) IN
	    IF bool1 THEN G1
	    ELSE null
	    ENDIF 
	ELSIF var?(t) AND V(s) = V(t) THEN fc(DS(p(t), p(s)), V(t))
	ELSE null
	ENDIF
   ELSIF var?(t) THEN
        IF (NOT member(V(t), PV)) AND (NOT member(V(t), vars(s))) THEN LET 
	    sigma = cons((V(t), ext(reverse(p(t)))(s)), null),
	    (G1, bool1) = nominal_AC_fresh_subs?(sigma, G) IN
	    IF bool1 THEN G1 
	    ELSE null
	    ENDIF 
	ELSE null
	ENDIF
   ELSE null 
   ENDIF

% returns the context added by instantiation step
inst_step_ctx(PV, G, P): RECURSIVE fresh_context = 
   IF null?(P) THEN null 
   ELSE LET 
   	(t, s) = car(P), 
   	(G1, delta, skip, fail) = inst_step(PV, G, t, s) IN
	IF fail THEN null
	ELSIF skip THEN inst_step_ctx(PV, G, cdr(P))
	ELSE
	     LET new_G = inst_step_ctx(PV, G, t, s) IN 
	     append(inst_step_ctx(PV, G1, apply_sub(delta, cdr(P))), new_G)
	ENDIF
   ENDIF
MEASURE length(P)

% "inst_left?" guarantees that if we don't fail then we compute the instantiation
% V(t) -> (pi_t)^-1 s
inst_left?(t, s): bool = var?(t) AND NOT var?(s)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% LEMMAS
% inst_step when analysing only two terms t and s
inst_step_skip: LEMMA
    LET skip = inst_step(PV, G, t, s)`3 IN
    skip IMPLIES ((NOT var?(t) OR member(V(t), PV)) AND (NOT var?(s) OR member(V(s), PV)))

inst_step_supset_dom: LEMMA 
    LET delta = inst_step(PV, G, t, s)`2 IN
    subset?(supset_dom(delta), vars(t, s))

inst_step_dom: LEMMA 
    LET delta = inst_step(PV, G, t, s)`2 IN
    subset?(dom(delta), vars(t, s))
    
inst_step_dom_PV_aux: LEMMA 
    LET delta = inst_step(PV, G, t, s)`2 IN
    disjoint?(dom(delta), PV)

inst_step_ctx_correct_aux: LEMMA
    inst_step(PV, G, t, s)`1 = append(inst_step_ctx(PV, G, t, s), G)

inst_step_sound_aux: LEMMA 
    LET (G1, delta, skip, fail) = inst_step(PV, G, t, s) IN
    NOT skip AND NOT fail AND disjoint?(dom(sigma), vars(t, s)) AND 
    nominal_AC_fresh_subs(G2)(append(append(sigma1, delta), sigma), G1) IMPLIES 
    unifies?(G2, append(append(sigma1, delta), sigma), (t, s)) 

inst_step_img: LEMMA
    subset?(vars(img(inst_step(PV, G, t, s)`2)), vars(t, s))

inst_step_dom_img: LEMMA
    LET (G1, delta, skip, fail) = inst_step(PV, G, t, s) IN
    (dom(delta) = emptyset AND img(delta) = emptyset) OR 
    (var?(s) AND dom(delta) = singleton(V(s)) AND vars(img(delta)) = vars(t)) OR
    (var?(t) AND dom(delta) = singleton(V(t)) AND vars(img(delta)) = vars(s))
    
inst_step_chooses_rhs: LEMMA
    LET (G1, delta, skip, fail) = inst_step(PV, G, t, s) IN
    NOT skip AND NOT fail AND var?(s) AND NOT member(V(s), PV) IMPLIES
    (dom(delta) = emptyset AND img(delta) = emptyset) OR 
    (dom(delta) = singleton(V(s)) AND vars(img(delta)) = vars(t))

inst_step_vars_context_aux: LEMMA
    subset?(vars(inst_step(PV, G, t, s)`1), union(vars(G), vars(t, s)))

inst_step_well_formed_aux: LEMMA  
    well_formed?(t) AND well_formed?(s) IMPLIES well_formed?(inst_step(PV, G, t, s)`2)
 
inst_step_idempotent2: LEMMA
    idempotent?(inst_step(PV, G, t, s)`2)

inst_step_inst_left_not_var_aux: LEMMA
    LET (G1, delta, skip, fail) = inst_step(PV, G, t, s) IN
    inst_left?(t, s) AND NOT fail IMPLIES NOT var?(subs(delta)(t))

inst_step_inst_ptc_vars_img: LEMMA
    LET delta = inst_step(PV, G, t, s)`2 IN
    inst_ptc?((t, s), PV) IMPLIES subset?(vars(img(delta)), vars(t))

inst_step_inst_ptc_dom: LEMMA
    LET (G1, delta, skip, fail) = inst_step(PV, G, t, s) IN
    inst_ptc?((t, s), PV) AND NOT fail AND NOT member(V(s), PV) IMPLIES dom(delta) = singleton(V(s)) 

inst_step_inst_ptc_vars_img2: LEMMA
    LET delta = inst_step(PV, G, t, s)`2 IN
    inst_ptc?((t, s), PV) IMPLIES subset?(vars(img(delta)), PV)

inst_step_inst_ptc: LEMMA
    LET (G1, delta, skip, fail) = inst_step(PV, G, t, s) IN
    inst_ptc?((t, s), PV) AND var?(s) AND NOT fail AND NOT member(V(s), PV)
    IMPLIES subset?(vars(subs(delta)(V(s))), PV)

inst_step_match_cond_not_skip: LEMMA
    LET (G1, delta, skip, fail) = inst_step(PV, G, t, s) IN
    member(X, vars(s)) AND match_condition?(cons((t, s), P), PV) AND NOT member(X, PV) 
    IMPLIES NOT skip 

inst_step_match_cond_dom: LEMMA
    LET (G1, delta, skip, fail) = inst_step(PV, G, t, s) IN
    member(X, vars(s)) AND match_condition?(cons((t, s), P), PV) AND NOT member(X, PV) AND NOT fail
    IMPLIES member(X, dom(delta))

inst_step_match_cond_dom2: LEMMA 
    LET (G1, delta, skip, fail) = inst_step(PV, G, t, s) IN
    member(X, dom(delta)) AND match_condition?(cons((t, s), P), PV) AND member(X, vars(rhs(P)))
    AND NOT member(X, PV) IMPLIES member(X, vars(s))

inst_step_match_cond_not_in_ctx: LEMMA 
    LET (G1, delta, skip, fail) = inst_step(PV, G, t, s) IN
    member(X, vars(rhs(cons((t, s), P)))) AND match_condition?(cons((t, s), P), PV) AND NOT member(X, PV)
    AND NOT member(X, vars(G)) IMPLIES NOT member(X, vars(G1))

inst_step_match_cond_subs: LEMMA
    LET (G1, delta, skip, fail) = inst_step(PV, G, t, s) IN
    member(X, vars(s)) AND match_condition?(cons((t, s), P), PV) AND NOT member(X, PV) AND NOT fail
    IMPLIES subs(delta)(X) = subs(delta)(t)

inst_step_match_img: LEMMA
    LET (G1, delta, skip, fail) = inst_step(PV, G, t, s) IN
    match_condition?(cons((t, s), P), PV) IMPLIES
    subset?(vars(img(delta)), PV) 

inst_step_inst_ptc_match2: LEMMA 
    LET delta = inst_step(PV, G, t, s)`2 IN
    inst_ptc?((t, s), PV) AND match_condition?(P, PV)
    IMPLIES match_condition?(apply_sub(delta, P), PV)

inst_step_match_condition_apply_sub: LEMMA
    LET (G1, delta, skip, fail) = inst_step(PV, G, t, s) IN
    NOT skip AND NOT fail AND match_condition?(cons((t, s), P), PV)
    IMPLIES match_condition?(apply_sub(delta, P), PV)

inst_step_match_condition_cdr: LEMMA
    LET skip = inst_step(PV, G, t, s)`3 IN 
    skip AND match_condition?(cons((t, s), P), PV) IMPLIES 
    match_condition?(P, PV)

inst_step_unifies_not_fail_aux: LEMMA 
    LET (G1, sigma, skip, fail) = inst_step(PV, G, t, s) IN
    unifies?(Del, del, (t, s)) AND nominal_AC_fresh_subs(Del)(del, G) AND disjoint?(dom(del), PV)
    AND well_formed?((t, s)) IMPLIES NOT fail

inst_step_unifies_equal_sub: LEMMA 
    LET (G1, sigma, skip, fail) = inst_step(PV, G, t, s) IN
    unifies?(Del, del, (t, s)) IMPLIES equal?(Del)(del, append(del, sigma))
   
inst_step_nominal_AC_fresh_subs: LEMMA 
    LET (G1, sigma, skip, fail) = inst_step(PV, G, t, s) IN
    nominal_AC_fresh_subs(Del)(del, G) AND unifies?(Del, del, (t, s)) AND match_condition?(cons((t, s), P), PV)
    AND disjoint?(dom(del), PV) IMPLIES nominal_AC_fresh_subs(Del)(del, G1)

% inst_step when analysing unification problems
inst_step_fail: LEMMA
    LET fail = inst_step(PV, G, P, Ps, sigma)`4
    IN fail IMPLIES inst_step(PV, G, P, Ps, sigma)`2 = null
    
inst_step1_no_effect: LEMMA
    inst_step(PV, G, P, P1, sigma)`1 =
    inst_step(PV, G, P, P2, delta)`1

inst_step1_no_effect_cor: LEMMA
    inst_step(PV, G, P, P1, sigma)`1 =
    inst_step(PV, G, P, null, sigma)`1

inst_step1_no_effect_cor2: LEMMA
    inst_step(PV, G, P, P1, sigma)`1 =
    inst_step(PV, G, P, P1, null)`1

inst_step3_no_effect: LEMMA
    inst_step(PV, G, P, P1, sigma)`3 =
    inst_step(PV, G, P, P2, sigma)`3

inst_step3_no_effect_cor: LEMMA
    inst_step(PV, G, P, P1, sigma)`3 =
    inst_step(PV, G, P, null, sigma)`3

inst_step_sub_append: LEMMA
    LET delta = inst_step(PV, G, P, Ps, sigma)`3,
        delta1 = inst_step(PV, G, P, Ps, null)`3 IN 
	delta = append(delta1, sigma)

inst_step_sub_append_cor: LEMMA 
    inst_step(PV, G, P, null, sigma)`3 =
    append(inst_step(PV, G, P, null, null)`3, sigma)

inst_step4_no_effect: LEMMA
    inst_step(PV, G, P, P1, sigma)`4 =
    inst_step(PV, G, P, P2, sigma)`4

inst_step4_no_effect_cor: LEMMA 
    inst_step(PV, G, P, P1, sigma)`4 =
    inst_step(PV, G, P, null, sigma)`4
    
inst_step4_no_effect2: LEMMA
    inst_step(PV, G, P, P1, sigma)`4 =
    inst_step(PV, G, P, P1, sigma2)`4
    
inst_step4_no_effect2_cor: LEMMA 
    inst_step(PV, G, P, P1, sigma)`4 =
    inst_step(PV, G, P, P1, null)`4
    
inst_step2_no_effect: LEMMA
    inst_step(PV, G, P, Ps, sigma1)`2 =
    inst_step(PV, G, P, Ps, sigma2)`2 

inst_step2_no_effect_cor: LEMMA
    inst_step(PV, G, P, Ps, sigma)`2 =
    inst_step(PV, G, P, Ps, null)`2 

inst_step2_append: LEMMA
    LET (G1, P1, delta, fail) = inst_step(PV, G, P, null, null) IN 
    NOT fail IMPLIES
    inst_step(PV, G, P, Ps, null)`2 = 
    append(inst_step(PV, G, P, null, null)`2, apply_sub(delta, Ps))

inst_step2_mem: LEMMA
    LET delta = inst_step(PV, G, P, null, null)`3 IN
    member(t, inst_step(PV, G, P, null, null)`2) IMPLIES 
    EXISTS s:
       member(s, P) AND t = subs(delta)(s)

inst_step2_mem_rhs: LEMMA
    LET (G1, P1, delta, fail) = inst_step(PV, G, P, null, null) IN 
    member(t, rhs(P1)) IMPLIES 
    EXISTS s:
       member(s, rhs(P)) AND t = subs(delta)(s)



inst_step_vars_supset_dom: LEMMA 
    LET delta = inst_step(PV, G, P, null, null)`3 IN
    subset?(supset_dom(delta), vars(P))

inst_step_vars_img: LEMMA
    LET delta = inst_step(PV, G, P, null, null)`3 IN
    subset?(vars(img(delta)), vars(P))

inst_step_idempotent3: LEMMA
    LET delta = inst_step(PV, G, P, null, null)`3 IN
    idempotent?(delta)     

inst_step_vars_unif: LEMMA 
    LET (G1, P1, delta, fail) = inst_step(PV, G, P, null, null) IN 
    disjoint?(vars(P1), dom(delta))

inst_step_vars_unif2: LEMMA 
    LET (G1, P1, delta, fail) = inst_step(PV, G, P, null, null) IN 
    subset?(vars(P1), vars(P))
    
inst_step_dom_PV: LEMMA 
    LET delta = inst_step(PV, G, P, null, null)`3 IN
    disjoint?(dom(delta), PV)

inst_step_cont: LEMMA 
    LET delta = inst_step(PV, G, P, null, null)`3 IN
    contained?(delta, vars(P))

inst_step_complete_equal: LEMMA 
    LET sigma = inst_step(PV, G, P, null, null)`3 IN
    unifies?(Del, del, P) IMPLIES equal?(Del)(del, append(del, sigma))

inst_step_unifies_not_fail: LEMMA 
    LET fail = inst_step(PV, G, P, null, null)`4 IN
        unifies?(Del, del, P) AND well_formed?(P) AND disjoint?(dom(del), PV)
	AND nominal_AC_fresh_subs(Del)(del, G) AND match_condition?(P, PV) IMPLIES NOT fail
    
inst_step_complete_nominal_AC_fresh_subs: LEMMA  
    LET G1 = inst_step(PV, G, P, null, null)`1 IN
        unifies?(Del, del, P) AND well_formed?(P) AND disjoint?(dom(del), PV)
	AND nominal_AC_fresh_subs(Del)(del, G) AND match_condition?(P, PV) IMPLIES
	nominal_AC_fresh_subs(Del)(del, G1)
    
inst_step_complete_unifies: LEMMA 
    LET (G1, P1, sigma1, fail) = inst_step(PV, G, P, null, null) IN 
    unifies?(Del, del, P) AND well_formed?(P) AND disjoint?(dom(del), PV)
    AND nominal_AC_fresh_subs(Del)(del, G) AND match_condition?(P, PV) IMPLIES
    unifies?(Del, del, P1) 

inst_step_complete_more_general: LEMMA 
    LET (G1, P1, sigma1, fail) = inst_step(PV, G, P, null, null) IN 
    more_general?(Del)(sigma, delta) AND disjoint?(dom(sigma), vars(P)) AND
    unifies?(Del, delta, P) IMPLIES more_general?(Del)(append(sigma1, sigma), delta)

inst_step_complete: LEMMA 
    LET (G1, P1, sigma1, fail) = inst_step(PV, G, P, null, null) IN 
    is_sol?(Del, del)(G, P, sigma, PV) AND match_condition?(P, PV) AND well_formed?(P) AND
    disjoint?(dom(sigma), vars(P)) IMPLIES
    is_sol?(Del, del)(G1, P1, append(sigma1, sigma), PV)


inst_step_well_formed: LEMMA 
    LET delta = inst_step(PV, G, P, null, null)`3 IN  
    well_formed?(P) IMPLIES well_formed?(delta)

inst_step_well_formed2: LEMMA 
    LET P1 = inst_step(PV, G, P, null, null)`2 IN  
    well_formed?(P) IMPLIES well_formed?(P1)

inst_step_vars_context: LEMMA 
    LET G1 = inst_step(PV, G, P, null, null)`1 IN subset?(vars(G1), union(vars(G), vars(P)))

inst_step_ctx_correct: LEMMA
    LET G1 = inst_step(PV, G, P, null, null)`1 IN
    G1 = append(inst_step_ctx(PV, G, P), G) 

inst_step_match_img2: LEMMA
    LET delta = inst_step(PV, G, P, null, null)`3 IN 
    match_condition?(P, PV) IMPLIES subset?(vars(img(delta)), PV)

inst_step_match_aux: LEMMA
    LET (G1, P1, delta, fail) = inst_step(PV, G, P, null, null) IN 
     match_condition?(P, PV) AND member(Y, vars(rhs(P))) AND NOT member(Y, PV) 
     AND NOT fail IMPLIES subset?(vars(subs(delta)(Y)), PV)

inst_step_match: LEMMA 
    LET (G1, P1, delta, fail) = inst_step(PV, G, P, null, null) IN 
    NOT fail AND match_condition?(P, PV) IMPLIES match_problem?(P1, PV)

inst_step_match_dom: LEMMA 
    LET (G1, P1, delta, fail) = inst_step(PV, G, P, null, null) IN 
    NOT fail AND match_condition?(P, PV) AND member(X, vars(rhs(P))) AND NOT member(X, PV)
    IMPLIES member(X, dom(delta))

inst_step_match_not_in_context: LEMMA
    LET (G1, P1, delta, fail) = inst_step(PV, G, P, null, null) IN 
    match_condition?(P, PV) AND member(X, vars(rhs(P))) AND NOT member(X, PV)
    AND NOT member(X, vars(G)) IMPLIES NOT member(X, vars(G1))

inst_step_skip_ind_mem: LEMMA
    LET (G1, P1, delta, fail) = inst_step(PV, G, P, null, null) IN 
    member(up1, P1) IMPLIES
    EXISTS i:
       i < length(P) AND up1 = apply_sub(delta, nth(P, i)) AND skip_index?(i, PV, G, P)

inst_step_inst_left_not_var: LEMMA
    LET (G1, P1, delta, fail) = inst_step(PV, G, P, null, null) IN 
    member((t1, s1), P) AND inst_left?(t1, s1) AND NOT fail IMPLIES 
    NOT var?(subs(delta)(V(t1)))

inst_step_inst_left_dom: LEMMA
    LET (G1, P1, delta, fail) = inst_step(PV, G, P, null, null) IN 
    member((t1, s1), P) AND inst_left?(t1, s1) AND NOT fail IMPLIES 
    member(V(t1), dom(delta))

inst_step_match_skip_ind: LEMMA
    LET (G1, P1, delta, fail) = inst_step(PV, G, P, null, null) IN 
    member(Y, vars(rhs(P))) AND NOT member(Y, PV) AND match_condition?(P, PV) AND NOT fail IMPLIES
    EXISTS j:
        j < length(P) AND nth(P, j)`2 = null * Y AND
	subs(delta)(Y) = subs(delta)(nth(P, j)`1) AND NOT skip_index?(j, PV, G, P)

inst_step_sound: LEMMA
    LET (G1, P1, lambda1, fail) = inst_step(PV, G, P, null, null) IN 
     unifies?(Delta, append(delta, append(lambda1, sigma)), P1) AND
     disjoint?(dom(sigma), vars(P)) AND
     nominal_AC_fresh_subs(Delta)(append(delta, append(lambda1, sigma)), G1)
     AND NOT fail IMPLIES
     unifies?(Delta, append(delta, append(lambda1, sigma)), P)


inst_step_mem: LEMMA
    member((G1, P, sigma), inst_step(PV, G, lst_P)) IMPLIES
    EXISTS P1:
	 member(P1, lst_P) AND 
	 G1 = inst_step(PV, G, P1, null, null)`1 AND
         P = inst_step(PV, G, P1, null, null)`2 AND
	 sigma = inst_step(PV, G, P1, null, null)`3 AND
	 NOT inst_step(PV, G, P1, null, null)`4

inst_step_mem2: LEMMA 
    (EXISTS P1:
	 member(P1, lst_P) AND 
	 G1 = inst_step(PV, G, P1, null, null)`1 AND
         P = inst_step(PV, G, P1, null, null)`2 AND
	 sigma = inst_step(PV, G, P1, null, null)`3 AND
	 NOT inst_step(PV, G, P1, null, null)`4)
    IMPLIES 
    member((G1, P, sigma), inst_step(PV, G, lst_P))

END nominal_AC_inst_step
