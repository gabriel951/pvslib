(nominal_AC_inst_step
 (inst_step_TCC1 0
  (inst_step_TCC1-1 nil 3900745896 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (PRED type-eq-decl nil defined_types nil))
   nil
   (inst_step subtype "nominal_AC_inst_step.Pu"
    "(list_adt[unif_pair].cons?)")))
 (inst_step_TCC2 0
  (inst_step_TCC2-1 nil 3900745896 ("" (termination-tcc) nil nil)
   ((PRED type-eq-decl nil defined_types nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (injective? const-decl "bool" functions nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (singleton const-decl "(singleton?)" sets nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (DS const-decl "list[atom]" atoms nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil))
   nil
   (inst_step termination
    "nominal_AC_inst_step.inst_step(nominal_AC_inst_step.PV, nominal_AC_inst_step.G, list_adt[unif_pair].cdr(nominal_AC_inst_step.Pu), list_adt[[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol], nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]].cons((nominal_AC_inst_step.t, nominal_AC_inst_step.s), nominal_AC_inst_step.Ps), nominal_AC_inst_step.sigma)"
    "nil")))
 (inst_step_TCC3 0
  (inst_step_TCC3-1 nil 3900745896 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (PRED type-eq-decl nil defined_types nil))
   nil
   (inst_step subtype "nominal_AC_inst_step.Pu"
    "(list_adt[unif_pair].cons?)")))
 (inst_step_TCC4 0
  (inst_step_TCC4-1 nil 3900745896
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (replace -7)
            (("" (rewrite "apply_sub_len") (("" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub_len formula-decl nil nominal_AC_unification nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (member const-decl "bool" sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (singleton const-decl "(singleton?)" sets nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (DS const-decl "list[atom]" atoms nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (inst_step termination
    "nominal_AC_inst_step.inst_step(nominal_AC_inst_step.PV, nominal_AC_inst_step.G1, nominal_AC_inst_step.new_Pu, nominal_AC_inst_step.new_Ps, nominal_AC_inst_step.new_sigma)"
    "nil")))
 (inst_step_TCC5 0
  (inst_step_TCC5-1 nil 3900745896 ("" (subtype-tcc) nil nil) nil nil
   (inst_step subtype "nominal_AC_inst_step.Pu"
    "(list_adt[unif_pair].cons?)")))
 (inst_step_TCC6 0
  (inst_step_TCC6-1 nil 3900745896 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (injective? const-decl "bool" functions nil))
   nil
   (inst_step subtype "nominal_AC_inst_step.lst_P"
    "(list_adt[nominal_AC_unification.unif_prb].cons?)")))
 (inst_step_TCC7 0
  (inst_step_TCC7-1 nil 3900745896 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (injective? const-decl "bool" functions nil))
   nil
   (inst_step termination
    "nominal_AC_inst_step.inst_step(nominal_AC_inst_step.PV, nominal_AC_inst_step.G, list_adt[nominal_AC_unification.unif_prb].cdr(nominal_AC_inst_step.lst_P))"
    "nil")))
 (inst_step_TCC8 0
  (inst_step_TCC8-1 nil 3900745896 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (injective? const-decl "bool" functions nil))
   nil
   (inst_step subtype "nominal_AC_inst_step.lst_P"
    "(list_adt[nominal_AC_unification.unif_prb].cons?)")))
 (inst_step_TCC9 0
  (inst_step_TCC9-1 nil 3900745896 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (injective? const-decl "bool" functions nil))
   nil
   (inst_step termination
    "nominal_AC_inst_step.inst_step(nominal_AC_inst_step.PV, nominal_AC_inst_step.G, list_adt[nominal_AC_unification.unif_prb].cdr(nominal_AC_inst_step.lst_P))"
    "nil")))
 (inst_step_TCC10 0
  (inst_step_TCC10-1 nil 3900745896 ("" (subtype-tcc) nil nil) nil nil
   (inst_step subtype "nominal_AC_inst_step.lst_P"
    "(list_adt[nominal_AC_unification.unif_prb].cons?)")))
 (skip_index?_TCC1 0
  (skip_index?_TCC1-1 nil 3884178484 ("" (tcc))
   ((PRED type-eq-decl nil defined_types nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (injective? const-decl "bool" functions nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (singleton const-decl "(singleton?)" sets nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (DS const-decl "list[atom]" atoms nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil))
   nil
   (skip_index? subtype "(number_fields.-)(nominal_AC_inst_step.i, 1)"
    "nat")))
 (skip_index?_TCC2 0
  (skip_index?_TCC2-1 nil 3884178484 ("" (tcc))
   ((PRED type-eq-decl nil defined_types nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (injective? const-decl "bool" functions nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (singleton const-decl "(singleton?)" sets nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (DS const-decl "list[atom]" atoms nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil))
   nil
   (skip_index? termination
    "nominal_AC_inst_step.skip_index?((number_fields.-)(nominal_AC_inst_step.i, 1), nominal_AC_inst_step.PV, nominal_AC_inst_step.G, list_adt[unif_pair].cdr(nominal_AC_inst_step.P))"
    "nil")))
 (skip_index?_TCC3 0
  (skip_index?_TCC3-1 nil 3884178484 ("" (tcc))
   ((PRED type-eq-decl nil defined_types nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (injective? const-decl "bool" functions nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (singleton const-decl "(singleton?)" sets nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (DS const-decl "list[atom]" atoms nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil))
   nil
   (skip_index? subtype "(number_fields.-)(nominal_AC_inst_step.i, 1)"
    "nat")))
 (skip_index?_TCC4 0
  (skip_index?_TCC4-1 nil 3884178484
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (replace -7)
            (("" (rewrite "apply_sub_len") (("" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub_len formula-decl nil nominal_AC_unification nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (member const-decl "bool" sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (singleton const-decl "(singleton?)" sets nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (DS const-decl "list[atom]" atoms nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (skip_index? termination
    "nominal_AC_inst_step.skip_index?((number_fields.-)(nominal_AC_inst_step.i, 1), nominal_AC_inst_step.PV, nominal_AC_inst_step.G1, nominal_AC_inst_step.new_P)"
    "nil")))
 (inst_step_ctx_TCC1 0
  (inst_step_ctx_TCC1-1 nil 3887380961
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (rewrite "apply_sub_len") (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (inst_step_ctx const-decl "fresh_context" nominal_AC_inst_step nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (DS const-decl "list[atom]" atoms nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (singleton const-decl "(singleton?)" sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (member const-decl "bool" sets nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil))
   nil
   (inst_step_ctx termination
    "nominal_AC_inst_step.inst_step_ctx(nominal_AC_inst_step.PV, nominal_AC_inst_step.G1, nominal_AC_unification.apply_sub(nominal_AC_inst_step.delta, list_adt[unif_pair].cdr(nominal_AC_inst_step.P)))"
    "nil")))
 (inst_step_skip 0
  (inst_step_skip-1 nil 3882609024 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (PRED type-eq-decl nil defined_types nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (injective? const-decl "bool" functions nil)
    (member const-decl "bool" sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (singleton const-decl "(singleton?)" sets nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (DS const-decl "list[atom]" atoms nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil))
   shostak))
 (inst_step_supset_dom 0
  (inst_step_supset_dom-1 nil 3882633034
   ("" (skeep)
    (("" (assert)
      (("" (expand "subset?" 1)
        (("" (skeep)
          (("" (expand "inst_step" -1)
            (("" (lift-if)
              (("" (split -1)
                (("1" (flatten)
                  (("1" (split -2)
                    (("1" (flatten) (("1" (grind) nil nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (add const-decl "(nonempty?)" sets nil)
    (emptyset const-decl "set" sets nil)
    (supset_dom def-decl "finite_set[variable]" nominal_AC_substitution
     nil)
    (member const-decl "bool" sets nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (subset? const-decl "bool" sets nil))
   shostak))
 (inst_step_dom 0
  (inst_step_dom-1 nil 3883463317
   ("" (skeep)
    (("" (assert)
      (("" (use "inst_step_supset_dom")
        (("" (assert)
          (("" (lemma "supset_dom_correct")
            (("" (expand "subset?")
              (("" (skeep)
                (("" (inst -2 "x")
                  (("" (assert)
                    (("" (inst -1 "x" "inst_step(PV, G, t, s)`2")
                      (("" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (singleton const-decl "(singleton?)" sets nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (DS const-decl "list[atom]" atoms nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (supset_dom def-decl "finite_set[variable]" nominal_AC_substitution
     nil)
    (emptyset const-decl "set" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (union const-decl "set" sets nil)
    (append def-decl "list[T]" list_props nil)
    (supset_dom_correct formula-decl nil nominal_AC_substitution nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (inst_step_supset_dom formula-decl nil nominal_AC_inst_step nil))
   shostak))
 (inst_step_dom_PV_aux 0
  (inst_step_dom_PV_aux-1 nil 3883225243
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "del" "inst_step(PV, G, t, s)`2")
        (("" (reveal -1)
          (("" (expand "inst_step" -1)
            (("" (lift-if)
              (("" (split -1)
                (("1" (flatten)
                  (("1" (split -2)
                    (("1" (flatten)
                      (("1" (split -1)
                        (("1" (flatten)
                          (("1" (use "dom_basic_sub2")
                            (("1" (replace -3)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "disjoint?")
                                  (("1"
                                    (expand "empty?")
                                    (("1"
                                      (replace -1)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -1 3)
                                  (("2"
                                    (hide-all-but 3)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (replace -1 :dir rl)
                            (("2" (hide-all-but 4)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split -1)
                        (("1" (flatten)
                          (("1" (split -2)
                            (("1" (flatten)
                              (("1"
                                (use "dom_basic_sub2")
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (hide 3)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -1)
                                      (("2"
                                        (hide-all-but 4)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (replace -1 5 :dir rl)
                                (("2"
                                  (hide-all-but 5)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (replace -1 3 :dir rl)
                            (("2" (hide-all-but 3)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split -1)
                    (("1" (flatten)
                      (("1" (split -2)
                        (("1" (flatten)
                          (("1" (split -1)
                            (("1" (flatten)
                              (("1"
                                (use "dom_basic_sub2")
                                (("1"
                                  (replace -3 -1)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (replace -1)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (replace -1 4)
                                      (("2"
                                        (hide-all-but 4)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (replace -1 5 :dir rl)
                                (("2"
                                  (hide-all-but 5)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (replace -1 3 :dir rl)
                            (("2" (hide-all-but 3)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (replace -1 3 :dir rl)
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (intersection const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt
     nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]"
     nominal_AC_term_adt nil)
    (dom_basic_sub2 formula-decl nil nominal_AC_substitution nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (inst_step_ctx_correct_aux 0
  (inst_step_ctx_correct_aux-1 nil 3887381511
   ("" (skeep) (("" (grind) nil nil)) nil)
   ((inst_step_ctx const-decl "fresh_context" nominal_AC_inst_step nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (DS const-decl "list[atom]" atoms nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (singleton const-decl "(singleton?)" sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (member const-decl "bool" sets nil)
    (append def-decl "list[T]" list_props nil))
   shostak))
 (inst_step_sound_aux 0
  (inst_step_sound_aux-3 nil 3887458579
   ("" (skolem 1 ("G" "G2" "PV" "s" "sig" "sig1" "t"))
    (("" (assert)
      (("" (flatten)
        (("" (name-replace "del" "inst_step(PV, G, t, s)`2")
          (("" (reveal -1)
            (("" (name-replace "G1" "inst_step(PV, G, t, s)`1")
              (("" (reveal -1)
                (("" (expand "inst_step" -2 1)
                  (("" (lift-if)
                    (("" (split -2)
                      (("1" (flatten)
                        (("1" (split -2)
                          (("1" (flatten)
                            (("1" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (lemma "unifies_basic_sub")
                                    (("1"
                                      (inst
                                       -1
                                       "G2"
                                       "V(s) "
                                       "p(s)"
                                       "t"
                                       "sig"
                                       "sig1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -3)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (use
                                               "nominal_AC_term_times_eta")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (hide-all-but (-2 5))
                                                  (("1"
                                                    (expand "unifies?")
                                                    (("1"
                                                      (rewrite
                                                       "equal?_sym"
                                                       1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-3 -5 1))
                                              (("2"
                                                (expand "disjoint?")
                                                (("2"
                                                  (expand "empty?")
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "inst_step" 5)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (split -2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (lemma "unifies_basic_sub")
                                        (("1"
                                          (inst
                                           -1
                                           "G2"
                                           "V(t) "
                                           "p(t)"
                                           "s"
                                           "sig"
                                           "sig1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (use
                                                 "nominal_AC_term_times_eta")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -7 1))
                                                      (("1"
                                                        (expand
                                                         "disjoint?")
                                                        (("1"
                                                          (expand
                                                           "empty?")
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "inst_step" 6)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split 6)
                                          (("1"
                                            (flatten)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "inst_step" 4)
                                    (("2"
                                      (split 4)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (hide 1)
                                          (("2"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (hide 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (split 1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "unifies?"
                                                           4)
                                                          (("1"
                                                            (lemma
                                                             "subs_equal?")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "G1"
                                                               "G2"
                                                               "s"
                                                               "append(append(sig1, del), sig)"
                                                               "t")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   5)
                                                                  (("1"
                                                                    (expand
                                                                     "equal?"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "inst_step"
                                                                       -5)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (split
                                                                             -5)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (hide
                                                                                 1)
                                                                                (("2"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (hide
                                                                                       1)
                                                                                      (("2"
                                                                                        (skeep)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "a")
                                                                                          (("2"
                                                                                            (replace
                                                                                             -2
                                                                                             1
                                                                                             :dir
                                                                                             rl)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "member_append"
                                                                                               1)
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "fc_member"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "DS_member"
                                                                                                     1
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "member"
                                                                                                       1
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split -1)
                          (("1" (flatten)
                            (("1" (split -2)
                              (("1"
                                (flatten)
                                (("1"
                                  (split -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (lemma "unifies_basic_sub")
                                        (("1"
                                          (inst
                                           -1
                                           "G2"
                                           "V(t) "
                                           "p(t)"
                                           "s"
                                           "sig"
                                           "sig1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (use
                                                 "nominal_AC_term_times_eta")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide-all-but
                                                     (-1 -6 1))
                                                    (("1"
                                                      (expand
                                                       "disjoint?")
                                                      (("1"
                                                        (expand
                                                         "empty?")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "inst_step" 6)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "inst_step" 4)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split 4)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "inst_step" 3)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt
     nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]"
     nominal_AC_term_adt nil)
    (empty? const-decl "bool" sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (intersection const-decl "set" sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (singleton const-decl "(singleton?)" sets nil)
    (union const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (nominal_AC_term_times_eta formula-decl nil nominal_AC_term_adt
     nil)
    (append def-decl "list[T]" list_props nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (unifies_basic_sub formula-decl nil nominal_AC_unification nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ds const-decl "set[atom]" atoms nil)
    (DS const-decl "list[atom]" atoms nil)
    (fc def-decl "fresh_context" nominal_AC_freshness nil)
    (every adt-def-decl "boolean" list_adt nil)
    (member_append formula-decl nil list2set_props structures)
    (fc_member formula-decl nil nominal_AC_freshness nil)
    (DS_member formula-decl nil atoms nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (subs_equal? formula-decl nil nominal_AC_fresh_subs nil))
   nil)
  (inst_step_sound_aux-2 nil 3887458559
   ("" (skolem 1 ("G" "G2" "PV" "s" "sig" "t"))
    (("" (assert)
      (("" (flatten)
        (("" (name-replace "skp" "inst_step(PV, G, t, s)`3")
          (("" (name-replace "fai" "inst_step(PV, G, t, s)`4")
            (("" (name-replace "del" "inst_step(PV, G, t, s)`2")
              (("" (reveal -1)
                (("" (expand "inst_step" -1)
                  (("" (lift-if)
                    (("" (split -1)
                      (("1" (flatten)
                        (("1" (split -2)
                          (("1" (flatten)
                            (("1" (prop)
                              (("1"
                                (expand "unifies?" 5)
                                (("1"
                                  (rewrite "subs_append2")
                                  (("1"
                                    (rewrite "subs_append2")
                                    (("1"
                                      (lemma "subs_inst_correct")
                                      (("1"
                                        (inst
                                         -1
                                         "G2"
                                         "V(s)"
                                         "p(s)"
                                         "t"
                                         "sig")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (lemma
                                                 "nominal_AC_term_times_eta")
                                                (("1"
                                                  (inst -1 "s")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (rewrite
                                                       "equal?_sym"
                                                       5)
                                                      nil)))))))))))))))))))))))
                               ("2"
                                (expand "fai" 5)
                                (("2"
                                  (expand "inst_step" 5)
                                  (("2" (assert) nil)))))))))
                           ("2" (flatten)
                            (("2" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (split -2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (expand "unifies?" 6)
                                        (("1"
                                          (lemma "subs_inst_correct")
                                          (("1"
                                            (rewrite "subs_append2")
                                            (("1"
                                              (rewrite "subs_append2")
                                              (("1"
                                                (inst
                                                 -1
                                                 "G2"
                                                 "V(t)"
                                                 "p(t)"
                                                 "s"
                                                 "sig")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -3)
                                                      (("1"
                                                        (lemma
                                                         "nominal_AC_term_times_eta")
                                                        (("1"
                                                          (inst -1 "t")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (propax)
                                                              nil)))))))))))))))))))))))))))
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "fai" 6)
                                      (("2"
                                        (expand "inst_step" 6)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split 6)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil)))
                                             ("2"
                                              (propax)
                                              nil)))))))))))))))
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "inst_step_ctx" -3)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (split -3)
                                        (("1"
                                          (flatten)
                                          (("1" (assert) nil)))
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (hide 1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (flatten)
                                                  (("1" (assert) nil)))
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide 1)
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "unifies?"
                                                           5)
                                                          (("1"
                                                            (lemma
                                                             "subs_equal?")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "fc(DS(p(t), p(s)), V(t))"
                                                               "G2"
                                                               "s"
                                                               "append(sig, del)"
                                                               "t")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "equal?"
                                                                   1)
                                                                  (("1"
                                                                    (hide
                                                                     2
                                                                     3)
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (typepred
                                                                         "a")
                                                                        (("1"
                                                                          (rewrite
                                                                           "fc_member"
                                                                           1)
                                                                          (("1"
                                                                            (rewrite
                                                                             "DS_member"
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (expand
                                                                               "member"
                                                                               1)
                                                                              (("1"
                                                                                (propax)
                                                                                nil)))))))))))))))))))))))))
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (expand
                                                           "fai"
                                                           5)
                                                          (("2"
                                                            (expand
                                                             "inst_step"
                                                             5)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (split
                                                                 5)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    nil)))
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (split
                                                                     2)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        nil)))
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (split
                                                                         2)
                                                                        (("1"
                                                                          (propax)
                                                                          nil)
                                                                         ("2"
                                                                          (propax)
                                                                          nil)))))))))))))))))))))))))))))))))))))))))))))))))))
                       ("2" (flatten)
                        (("2" (split -1)
                          (("1" (flatten)
                            (("1" (split -2)
                              (("1"
                                (flatten)
                                (("1"
                                  (split -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "unifies?" 6)
                                      (("1"
                                        (rewrite "subs_append2")
                                        (("1"
                                          (rewrite "subs_append2")
                                          (("1"
                                            (lemma "subs_inst_correct")
                                            (("1"
                                              (inst
                                               -1
                                               "G2"
                                               "V(t)"
                                               "p(t)"
                                               "s"
                                               "sig")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -3)
                                                    (("1"
                                                      (lemma
                                                       "nominal_AC_term_times_eta")
                                                      (("1"
                                                        (inst -1 "t")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (propax)
                                                            nil)))))))))))))))))))))))))
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "fai" 6)
                                      (("2"
                                        (expand "inst_step" 6)
                                        (("2" (assert) nil)))))))))))
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "fai" 4)
                                  (("2"
                                    (expand "inst_step" 4)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split 4)
                                        (("1"
                                          (flatten)
                                          (("1" (assert) nil)))
                                         ("2"
                                          (propax)
                                          nil)))))))))))))))
                           ("2" (flatten)
                            (("2" (expand "skp" 3)
                              (("2"
                                (expand "inst_step" 3)
                                (("2"
                                  (assert)
                                  nil))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (inst_step_sound_aux-1 nil 3887313665
   ("" (skolem 1 ("G" "G2" "PV" "s" "sig" "t"))
    (("" (assert)
      (("" (flatten)
        (("" (name-replace "skp" "inst_step(PV, G, t, s)`3")
          (("" (name-replace "fai" "inst_step(PV, G, t, s)`4")
            (("" (name-replace "del" "inst_step(PV, G, t, s)`2")
              (("" (reveal -1)
                (("" (expand "inst_step" -1)
                  (("" (lift-if)
                    (("" (split -1)
                      (("1" (flatten)
                        (("1" (split -2)
                          (("1" (flatten)
                            (("1" (prop)
                              (("1"
                                (expand "unifies?" 5)
                                (("1"
                                  (rewrite "subs_append2")
                                  (("1"
                                    (rewrite "subs_append2")
                                    (("1"
                                      (lemma "subs_inst_correct")
                                      (("1"
                                        (inst
                                         -1
                                         "G2"
                                         "V(s)"
                                         "p(s)"
                                         "t"
                                         "sig")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (lemma
                                                 "nominal_AC_term_times_eta")
                                                (("1"
                                                  (inst -1 "s")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (rewrite
                                                       "equal?_sym"
                                                       5)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "fai" 5)
                                (("2"
                                  (expand "inst_step" 5)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (split -2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (expand "unifies?" 6)
                                        (("1"
                                          (lemma "subs_inst_correct")
                                          (("1"
                                            (rewrite "subs_append2")
                                            (("1"
                                              (rewrite "subs_append2")
                                              (("1"
                                                (inst
                                                 -1
                                                 "G2"
                                                 "V(t)"
                                                 "p(t)"
                                                 "s"
                                                 "sig")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -3)
                                                      (("1"
                                                        (lemma
                                                         "nominal_AC_term_times_eta")
                                                        (("1"
                                                          (inst -1 "t")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "fai" 6)
                                      (("2"
                                        (expand "inst_step" 6)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split 6)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "inst_step_ctx" -3)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (split -3)
                                        (("1"
                                          (flatten)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (hide 1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide 1)
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "unifies?"
                                                           5)
                                                          (("1"
                                                            (lemma
                                                             "subs_equal?")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "fc(DS(p(t), p(s)), V(t))"
                                                               "G2"
                                                               "s"
                                                               "append(sig, del)"
                                                               "t")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "equal?"
                                                                   1)
                                                                  (("1"
                                                                    (hide
                                                                     2
                                                                     3)
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (typepred
                                                                         "a")
                                                                        (("1"
                                                                          (rewrite
                                                                           "fc_member"
                                                                           1)
                                                                          (("1"
                                                                            (rewrite
                                                                             "DS_member"
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (expand
                                                                               "member"
                                                                               1)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (expand
                                                           "fai"
                                                           5)
                                                          (("2"
                                                            (expand
                                                             "inst_step"
                                                             5)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (split
                                                                 5)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (split
                                                                     2)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (split
                                                                         2)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split -1)
                          (("1" (flatten)
                            (("1" (split -2)
                              (("1"
                                (flatten)
                                (("1"
                                  (split -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "unifies?" 6)
                                      (("1"
                                        (rewrite "subs_append2")
                                        (("1"
                                          (rewrite "subs_append2")
                                          (("1"
                                            (lemma "subs_inst_correct")
                                            (("1"
                                              (inst
                                               -1
                                               "G2"
                                               "V(t)"
                                               "p(t)"
                                               "s"
                                               "sig")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -3)
                                                    (("1"
                                                      (lemma
                                                       "nominal_AC_term_times_eta")
                                                      (("1"
                                                        (inst -1 "t")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "fai" 6)
                                      (("2"
                                        (expand "inst_step" 6)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "fai" 4)
                                  (("2"
                                    (expand "inst_step" 4)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split 4)
                                        (("1"
                                          (flatten)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "skp" 3)
                              (("2"
                                (expand "inst_step" 3)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_equal? formula-decl nil nominal_AC_fresh_subs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ds const-decl "set[atom]" atoms nil)
    (DS_member formula-decl nil atoms nil)
    (member const-decl "bool" sets nil)
    (fc_member formula-decl nil nominal_AC_freshness nil)
    (append def-decl "list[T]" list_props nil)
    (DS const-decl "list[atom]" atoms nil)
    (fc def-decl "fresh_context" nominal_AC_freshness nil)
    (inst_step_ctx const-decl "fresh_context" nominal_AC_inst_step nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt
     nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]"
     nominal_AC_term_adt nil)
    (nominal_AC_term_times_eta formula-decl nil nominal_AC_term_adt
     nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil)
    (subs_inst_correct formula-decl nil nominal_AC_substitution nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil) nil
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil) (atom type-eq-decl nil atoms nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (inst_step_img 0
  (inst_step_img-1 nil 3882548828
   ("" (skeep)
    (("" (expand "subset?")
      (("" (skeep)
        (("" (expand "inst_step" -1)
          (("" (lift-if)
            (("" (split -1)
              (("1" (flatten)
                (("1" (split -2)
                  (("1" (flatten)
                    (("1" (split -1)
                      (("1" (flatten)
                        (("1" (use "img_basic_sub_var")
                          (("1" (expand "subset?" -1)
                            (("1" (inst -1 "x")
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite "ext_vars")
                                  (("1"
                                    (hide-all-but (-1 3))
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (rewrite "img_null")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (rewrite "img_null")
                      (("2" (split -1)
                        (("1" (flatten)
                          (("1" (split -2)
                            (("1" (flatten)
                              (("1"
                                (use "img_basic_sub_var")
                                (("1"
                                  (expand "subset?" -1)
                                  (("1"
                                    (inst -1 "x")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite "ext_vars")
                                        (("1"
                                          (hide-all-but (-1 4))
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (hide-all-but -1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (rewrite "img_null")
                  (("2" (split -1)
                    (("1" (flatten)
                      (("1" (split -2)
                        (("1" (flatten)
                          (("1" (split -1)
                            (("1" (flatten)
                              (("1"
                                (use "img_basic_sub_var")
                                (("1"
                                  (expand "subset?" -1)
                                  (("1"
                                    (inst -1 "x")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite "ext_vars")
                                        (("1"
                                          (hide-all-but (-1 4))
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten) (("2" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (flatten) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (img_basic_sub_var formula-decl nil nominal_AC_substitution nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt
     nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]"
     nominal_AC_term_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ext_vars formula-decl nil nominal_AC_term_properties nil)
    (member const-decl "bool" sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (singleton const-decl "(singleton?)" sets nil)
    (union const-decl "set" sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (img_null formula-decl nil nominal_AC_substitution nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil))
   shostak))
 (inst_step_dom_img 0
  (inst_step_dom_img-1 nil 3883463894
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "del" "inst_step(PV, G, t, s)`2")
        (("" (reveal -1)
          (("" (flatten)
            (("" (expand "inst_step" -1)
              (("" (lift-if)
                (("" (split -1)
                  (("1" (flatten)
                    (("1" (split -2)
                      (("1" (flatten)
                        (("1" (split -1)
                          (("1" (flatten)
                            (("1" (hide -1 5)
                              (("1"
                                (use "dom_basic_sub2")
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide 3)
                                        (("1"
                                          (use "img_dom_singleton")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (rewrite
                                                 "vars_singleton")
                                                (("1"
                                                  (replace
                                                   -3
                                                   3
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (expand "subs" 3)
                                                    (("1"
                                                      (expand "subs" 3)
                                                      (("1"
                                                        (expand
                                                         "subs"
                                                         3
                                                         2)
                                                        (("1"
                                                          (expand
                                                           "subs"
                                                           3)
                                                          (("1"
                                                            (rewrite
                                                             "ext_vars")
                                                            (("1"
                                                              (rewrite
                                                               "ext_vars")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (use "img_dom_emptyset")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (hide-all-but (-1 4))
                              (("2"
                                (replace -1 :dir rl)
                                (("2"
                                  (rewrite "dom_null")
                                  (("2" (rewrite "img_null") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split -1)
                          (("1" (flatten)
                            (("1" (split -2)
                              (("1"
                                (flatten)
                                (("1"
                                  (hide -1 3 5)
                                  (("1"
                                    (use "dom_basic_sub2")
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (hide 3)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (use "img_dom_singleton")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1 3)
                                                  (("1"
                                                    (rewrite
                                                     "vars_singleton"
                                                     3)
                                                    (("1"
                                                      (replace
                                                       -3
                                                       3
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (expand
                                                         "subs"
                                                         3)
                                                        (("1"
                                                          (expand
                                                           "subs"
                                                           3)
                                                          (("1"
                                                            (expand
                                                             "subs"
                                                             3
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "subs"
                                                               3)
                                                              (("1"
                                                                (rewrite
                                                                 "ext_vars")
                                                                (("1"
                                                                  (rewrite
                                                                   "ext_vars")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (use "img_dom_emptyset")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (hide-all-but (-1 5))
                                  (("2"
                                    (replace -1 :dir rl)
                                    (("2"
                                      (rewrite "dom_null")
                                      (("2"
                                        (rewrite "img_null")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (hide-all-but (-1 3))
                              (("2"
                                (replace -1 1 :dir rl)
                                (("2"
                                  (rewrite "dom_null")
                                  (("2" (rewrite "img_null") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split -1)
                      (("1" (flatten)
                        (("1" (split -2)
                          (("1" (flatten)
                            (("1" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (hide -1 5 1 2 3)
                                  (("1"
                                    (use "dom_basic_sub2")
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (use "img_dom_singleton")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (rewrite
                                                     "vars_singleton"
                                                     2)
                                                    (("1"
                                                      (replace
                                                       -3
                                                       2
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (expand
                                                         "subs"
                                                         2)
                                                        (("1"
                                                          (expand
                                                           "subs"
                                                           2)
                                                          (("1"
                                                            (expand
                                                             "subs"
                                                             2
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "subs"
                                                               2)
                                                              (("1"
                                                                (rewrite
                                                                 "ext_vars")
                                                                (("1"
                                                                  (rewrite
                                                                   "ext_vars")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (use "img_dom_emptyset")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (hide-all-but (-1 5))
                                  (("2"
                                    (replace -1 :dir rl)
                                    (("2"
                                      (rewrite "dom_null")
                                      (("2"
                                        (rewrite "img_null")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (hide-all-but (-1 3))
                              (("2"
                                (replace -1 :dir rl)
                                (("2"
                                  (rewrite "dom_null")
                                  (("2" (rewrite "img_null") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (hide-all-but (-1 3))
                          (("2" (replace -1 :dir rl)
                            (("2" (rewrite "dom_null")
                              (("2" (rewrite "img_null") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (img_dom_emptyset formula-decl nil nominal_AC_substitution nil)
    (img_dom_singleton formula-decl nil nominal_AC_substitution nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (ext_vars formula-decl nil nominal_AC_term_properties nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_singleton formula-decl nil nominal_AC_term_properties nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt
     nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]"
     nominal_AC_term_adt nil)
    (dom_basic_sub2 formula-decl nil nominal_AC_substitution nil)
    (dom_null formula-decl nil nominal_AC_substitution nil)
    (img_null formula-decl nil nominal_AC_substitution nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (inst_step_chooses_rhs 0
  (inst_step_chooses_rhs-1 nil 3883469627
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "delta" "inst_step(PV, G, t, s)`2")
        (("" (flatten)
          (("" (reveal -1)
            (("" (expand "inst_step" -1)
              (("" (lift-if)
                (("" (assert)
                  (("" (split -1)
                    (("1" (flatten)
                      (("1" (split -1)
                        (("1" (flatten)
                          (("1" (use "dom_basic_sub2")
                            (("1" (replace -3)
                              (("1"
                                (split -1)
                                (("1"
                                  (hide 5)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (use "img_dom_singleton")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1 5)
                                          (("1"
                                            (rewrite
                                             "vars_singleton"
                                             5)
                                            (("1"
                                              (replace -4 5 :dir rl)
                                              (("1"
                                                (expand "subs" 5)
                                                (("1"
                                                  (expand "subs" 5)
                                                  (("1"
                                                    (expand "subs" 5 2)
                                                    (("1"
                                                      (expand "subs" 5)
                                                      (("1"
                                                        (rewrite
                                                         "ext_vars")
                                                        (("1"
                                                          (rewrite
                                                           "ext_vars")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 6)
                                  (("2"
                                    (use "img_dom_emptyset")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "inst_step" 4)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split -2)
                        (("1" (flatten)
                          (("1" (hide -2 6 7) (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (hide-all-but (5 -1))
                            (("2" (replace -1 :dir rl)
                              (("2"
                                (rewrite "dom_null")
                                (("2" (rewrite "img_null") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (img_null formula-decl nil nominal_AC_substitution nil)
    (dom_null formula-decl nil nominal_AC_substitution nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (img_dom_emptyset formula-decl nil nominal_AC_substitution nil)
    (img_dom_singleton formula-decl nil nominal_AC_substitution nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (ext_vars formula-decl nil nominal_AC_term_properties nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_singleton formula-decl nil nominal_AC_term_properties nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt
     nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]"
     nominal_AC_term_adt nil)
    (dom_basic_sub2 formula-decl nil nominal_AC_substitution nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (inst_step_vars_context_aux 0
  (inst_step_vars_context_aux-1 nil 3882712498
   ("" (skeep)
    (("" (expand "inst_step" 1)
      (("" (lift-if)
        (("" (split 1)
          (("1" (flatten)
            (("1" (split 1)
              (("1" (flatten)
                (("1" (split)
                  (("1" (flatten)
                    (("1" (expand "subset?" 1)
                      (("1" (skeep)
                        (("1" (rewrite "vars_append_context")
                          (("1" (expand ("member" "union") -2)
                            (("1" (prop)
                              (("1"
                                (use "nominal_AC_fresh_subs?_var")
                                (("1"
                                  (expand "subset?" -1)
                                  (("1"
                                    (inst -1 "x")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand ("member" "union") -1)
                                        (("1"
                                          (expand ("member" "union") 1)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (use "img_basic_sub_var")
                                              (("1"
                                                (rewrite "ext_vars" -1)
                                                (("1"
                                                  (expand "subset?" -1)
                                                  (("1"
                                                    (inst -1 "x")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand ("member" "union") 1)
                                (("2" (prop) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (hide-all-but 2) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split 2)
                  (("1" (flatten)
                    (("1" (split 3)
                      (("1" (flatten)
                        (("1" (hide 4)
                          (("1" (expand "subset?" 1)
                            (("1" (rewrite "vars_append_context")
                              (("1"
                                (skeep)
                                (("1"
                                  (expand ("member" "union") -2)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (use
                                       "nominal_AC_fresh_subs?_var")
                                      (("1"
                                        (expand "subset?" -1)
                                        (("1"
                                          (inst -1 "x")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand
                                               ("member" "union")
                                               -1)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (use
                                                   "img_basic_sub_var")
                                                  (("1"
                                                    (expand
                                                     "subset?"
                                                     -1)
                                                    (("1"
                                                      (inst -1 "x")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (rewrite
                                                           "ext_vars")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   ("member" "union")
                                                   1)
                                                  (("2"
                                                    (prop)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand ("member" "union") 1)
                                      (("2" (prop) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (hide-all-but 2)
                          (("2" (expand "subset?")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (hide 1 3)
                      (("2" (split 1)
                        (("1" (flatten)
                          (("1" (rewrite "vars_append_context")
                            (("1" (expand "subset?")
                              (("1"
                                (skeep)
                                (("1"
                                  (expand ("member" "union"))
                                  (("1"
                                    (prop)
                                    (("1"
                                      (rewrite "vars_mem_context")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (rewrite "fc_member")
                                          (("1"
                                            (flatten)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (hide 1) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (split 2)
              (("1" (flatten)
                (("1" (split 1)
                  (("1" (flatten)
                    (("1" (split 3)
                      (("1" (flatten)
                        (("1" (rewrite "vars_append_context")
                          (("1" (expand "subset?")
                            (("1" (skeep)
                              (("1"
                                (expand ("member" "union") 1)
                                (("1"
                                  (expand ("member" "union") -2)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (use
                                       "nominal_AC_fresh_subs?_var")
                                      (("1"
                                        (expand "subset?" -1)
                                        (("1"
                                          (inst -1 "x")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand
                                               ("member" "union")
                                               -1)
                                              (("1"
                                                (use
                                                 "img_basic_sub_var")
                                                (("1"
                                                  (expand "subset?" -1)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (rewrite
                                                         "ext_vars")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (hide-all-but 2) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (hide-all-but 2) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (subset? const-decl "bool" sets nil)
    (vars_append_context formula-decl nil nominal_AC_freshness nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (nominal_AC_fresh_subs? def-decl "[fresh_context, bool]"
     nominal_AC_fresh_subs nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]"
     nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt
     nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (reverse def-decl "list[T]" list_props nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (img_basic_sub_var formula-decl nil nominal_AC_substitution nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (empty? const-decl "bool" sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (ext_vars formula-decl nil nominal_AC_term_properties nil)
    (nominal_AC_fresh_subs?_var formula-decl nil nominal_AC_fresh_subs
     nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (vars_mem_context formula-decl nil nominal_AC_freshness nil)
    (fc_member formula-decl nil nominal_AC_freshness nil)
    (DS const-decl "list[atom]" atoms nil)
    (fc def-decl "fresh_context" nominal_AC_freshness nil)
    (every adt-def-decl "boolean" list_adt nil))
   shostak))
 (inst_step_well_formed_aux 0
  (inst_step_well_formed_aux-1 nil 3882720699
   ("" (skeep)
    (("" (expand "inst_step" 1)
      (("" (split)
        (("1" (flatten)
          (("1" (split 1)
            (("1" (flatten)
              (("1" (split 3)
                (("1" (flatten)
                  (("1" (use "well_formed_basic_sub")
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (flatten)
                  (("2" (rewrite "well_formed_null") nil nil)) nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (split 2)
                (("1" (flatten)
                  (("1" (split 3)
                    (("1" (flatten)
                      (("1" (use "well_formed_basic_sub")
                        (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (flatten)
                      (("2" (rewrite "well_formed_null") nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (rewrite "well_formed_null") nil nil)) nil)
                     ("2" (flatten)
                      (("2" (rewrite "well_formed_null") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (split 2)
            (("1" (flatten)
              (("1" (split 1)
                (("1" (flatten)
                  (("1" (split 3)
                    (("1" (flatten)
                      (("1" (use "well_formed_basic_sub")
                        (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (flatten)
                      (("2" (rewrite "well_formed_null") nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (rewrite "well_formed_null") nil nil)) nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (rewrite "well_formed_null") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (well_formed_null formula-decl nil nominal_AC_substitution nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]"
     nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt
     nil)
    (reverse def-decl "list[T]" list_props nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (well_formed_basic_sub formula-decl nil nominal_AC_substitution
     nil))
   shostak))
 (inst_step_idempotent2 0
  (inst_step_idempotent2-1 nil 3882541896
   ("" (skeep)
    (("" (expand "inst_step" 1)
      (("" (split)
        (("1" (flatten)
          (("1" (split 1)
            (("1" (flatten)
              (("1" (split 3)
                (("1" (flatten)
                  (("1" (rewrite "idempotent_cons") nil nil)) nil)
                 ("2" (flatten)
                  (("2" (rewrite "idempotent_null") nil nil)) nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (split 2)
                (("1" (flatten)
                  (("1" (prop)
                    (("1" (rewrite "idempotent_cons") nil nil)
                     ("2" (rewrite "idempotent_cons") nil nil)
                     ("3" (rewrite "idempotent_null") nil nil)
                     ("4" (rewrite "idempotent_null") nil nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (rewrite "idempotent_null") nil nil)) nil)
                     ("2" (flatten)
                      (("2" (rewrite "idempotent_null") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (split 2)
            (("1" (flatten)
              (("1" (split 1)
                (("1" (flatten)
                  (("1" (split 3)
                    (("1" (flatten)
                      (("1" (rewrite "idempotent_cons") nil nil)) nil)
                     ("2" (flatten)
                      (("2" (rewrite "idempotent_null") nil nil)) nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (rewrite "idempotent_null") nil nil)) nil))
                nil))
              nil)
             ("2" (flatten) (("2" (rewrite "idempotent_null") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (idempotent_null formula-decl nil nominal_AC_substitution nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt
     nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]"
     nominal_AC_term_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (idempotent_cons formula-decl nil nominal_AC_substitution nil))
   shostak))
 (inst_step_inst_left_not_var_aux 0
  (inst_step_inst_left_not_var_aux-1 nil 3884238330
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "del" "inst_step(PV, G, t, s)`2")
        (("" (name-replace "fai" "inst_step(PV, G, t, s)`4")
          (("" (reveal -1 -2)
            (("" (prop)
              (("" (expand "inst_step" -2)
                (("" (expand "inst_left?" -3)
                  (("" (flatten)
                    (("" (assert)
                      (("" (lift-if)
                        (("" (expand "inst_step" -1)
                          (("" (split 1)
                            (("1" (flatten)
                              (("1"
                                (split 3)
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma "nominal_AC_term_times_eta")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (replace -1 -5 :dir rl)
                                        (("1"
                                          (replace -3 -5 :dir rl)
                                          (("1"
                                            (expand "subs" -5)
                                            (("1"
                                              (expand "subs" -5 2)
                                              (("1"
                                                (expand "subs" -5)
                                                (("1"
                                                  (rewrite
                                                   "ext_append"
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (hide-all-but
                                                     (-5 3))
                                                    (("1"
                                                      (use
                                                       "ext_preserves_type")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((inst_left? const-decl "bool" nominal_AC_inst_step nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]"
     nominal_AC_term_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (ext_append formula-decl nil nominal_AC_term_properties nil)
    (ext_preserves_type formula-decl nil nominal_AC_term_properties
     nil)
    (append def-decl "list[T]" list_props nil)
    (ord const-decl "upto(6)" nominal_AC_term_adt nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (nominal_AC_term_times_eta formula-decl nil nominal_AC_term_adt
     nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (inst_step_inst_ptc_vars_img 0
  (inst_step_inst_ptc_vars_img-1 nil 3883202606
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (expand "inst_ptc?" -1)
          (("" (flatten)
            (("" (name-replace "del" "inst_step(PV, G, t, s)`2")
              (("" (reveal -1)
                (("" (expand "inst_step" -1)
                  (("" (assert)
                    (("" (lift-if)
                      (("" (split -1)
                        (("1" (flatten)
                          (("1" (split -1)
                            (("1" (flatten)
                              (("1"
                                (replace -2 3 :dir rl)
                                (("1"
                                  (use "img_basic_sub_var")
                                  (("1"
                                    (rewrite "ext_vars" -1)
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (replace -1 4 :dir rl)
                                (("2"
                                  (rewrite "img_null")
                                  (("2"
                                    (hide-all-but 4)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (hide 1)
                            (("2" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (split -2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (use "img_basic_sub_var")
                                      (("1"
                                        (rewrite "ext_vars" -1)
                                        (("1"
                                          (assert)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (replace -1 4 :dir rl)
                                        (("2"
                                          (rewrite "img_null")
                                          (("2"
                                            (hide-all-but 4)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (replace -1 :dir rl)
                                  (("2"
                                    (hide-all-but 2)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (inst_ptc? const-decl "bool" aux_nominal_AC_unification nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (singleton const-decl "(singleton?)" sets nil)
    (append def-decl "list[T]" list_props nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (img_null formula-decl nil nominal_AC_substitution nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (subset? const-decl "bool" sets nil)
    (img_basic_sub_var formula-decl nil nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]"
     nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt
     nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (reverse def-decl "list[T]" list_props nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (ext_vars formula-decl nil nominal_AC_term_properties nil))
   shostak))
 (inst_step_inst_ptc_dom_TCC1 0
  (inst_step_inst_ptc_dom_TCC2-1 nil 3883484550 ("" (tcc))
   ((TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (PRED type-eq-decl nil defined_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (singleton const-decl "(singleton?)" sets nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (DS const-decl "list[atom]" atoms nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (subset? const-decl "bool" sets nil)
    (inst_ptc? const-decl "bool" aux_nominal_AC_unification nil))
   nil
   (inst_step_inst_ptc_dom subtype "nominal_AC_inst_step.s"
    "(nominal_AC_term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].var?)")))
 (inst_step_inst_ptc_dom 0
  (inst_step_inst_ptc_dom-1 nil 3883484550
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (name "delta" "inst_step(PV, G, t, s)`2")
          (("" (replace -1)
            (("" (expand "inst_ptc?" -2)
              (("" (flatten)
                (("" (expand "inst_step" -1)
                  (("" (lift-if)
                    (("" (assert)
                      (("" (split -)
                        (("1" (flatten)
                          (("1" (split -1)
                            (("1" (flatten)
                              (("1"
                                (use "dom_basic_sub2")
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (case "member(V(s), dom(delta))")
                                      (("1"
                                        (replace -2)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (expand "dom" 1)
                                        (("2"
                                          (expand "member" 1)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (replace -4 -1 :dir rl)
                                              (("2"
                                                (expand "subs" -1)
                                                (("2"
                                                  (expand "subs" -1)
                                                  (("2"
                                                    (expand
                                                     "subs"
                                                     -1
                                                     2)
                                                    (("2"
                                                      (expand
                                                       "subs"
                                                       -1)
                                                      (("2"
                                                        (expand
                                                         "subset?"
                                                         -5)
                                                        (("2"
                                                          (rewrite
                                                           "ext_append"
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (lemma
                                                             "ext_vars")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (replace
                                                                 -2)
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand "inst_step" 3)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (hide -2)
                            (("2" (expand "subset?" -2)
                              (("2"
                                (inst -2 "V(s)")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (inst_ptc? const-decl "bool" aux_nominal_AC_unification nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ext_append formula-decl nil nominal_AC_term_properties nil)
    (append def-decl "list[T]" list_props nil)
    (singleton const-decl "(singleton?)" sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (ext_vars formula-decl nil nominal_AC_term_properties nil)
    (subset? const-decl "bool" sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt
     nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]"
     nominal_AC_term_adt nil)
    (dom_basic_sub2 formula-decl nil nominal_AC_substitution nil))
   shostak))
 (inst_step_inst_ptc_vars_img2 0
  (inst_step_inst_ptc_vars_img2-1 nil 3883377042
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (use "inst_step_inst_ptc_vars_img")
          (("" (assert)
            (("" (assert)
              (("" (expand "inst_ptc?" -2)
                (("" (flatten)
                  (("" (hide -3)
                    (("" (expand "subset?")
                      (("" (skeep)
                        (("" (inst -2 "x")
                          (("" (inst -1 "x") (("" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (inst_step_inst_ptc_vars_img formula-decl nil nominal_AC_inst_step
     nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subset? const-decl "bool" sets nil)
    (inst_ptc? const-decl "bool" aux_nominal_AC_unification nil))
   shostak))
 (inst_step_inst_ptc 0
  (inst_step_inst_ptc-1 nil 3883207735
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (name-replace "del" "inst_step(PV, G, t, s)`2")
          (("" (reveal -1)
            (("" (expand "inst_step" -1 1)
              (("" (assert)
                (("" (lift-if)
                  (("" (split -1)
                    (("1" (flatten)
                      (("1" (split -1)
                        (("1" (flatten)
                          (("1" (replace -2 4 :dir rl)
                            (("1" (expand "subs" 4)
                              (("1"
                                (expand "subs" 4)
                                (("1"
                                  (expand "subs" 4 2)
                                  (("1"
                                    (expand "subs" 4)
                                    (("1"
                                      (rewrite "ext_identity")
                                      (("1"
                                        (rewrite "ext_vars")
                                        (("1"
                                          (expand "inst_ptc?" -3)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "inst_step" 3)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split -2)
                        (("1" (flatten)
                          (("1" (hide -2)
                            (("1" (expand "inst_ptc?" -3)
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "inst_step" 2)
                            (("2" (assert)
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split 2)
                                    (("1"
                                      (expand "inst_ptc?" -4)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (subset? const-decl "bool" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]"
     nominal_AC_term_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (ext_identity formula-decl nil nominal_AC_term_properties nil)
    (inst_ptc? const-decl "bool" aux_nominal_AC_unification nil)
    (ext_vars formula-decl nil nominal_AC_term_properties nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil))
   shostak))
 (inst_step_match_cond_not_skip 0
  (inst_step_match_cond_not_skip-1 nil 3884108090
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (expand "match_condition?" -2)
          (("" (inst -2 "X")
            (("" (assert)
              (("" (prop)
                (("1" (skolem -1 ("up" "i"))
                  (("1" (flatten)
                    (("1" (case "i = 0")
                      (("1" (replace -1)
                        (("1" (expand "nth" -3)
                          (("1" (replace -3)
                            (("1" (expand "inst_ptc?" -5)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "inst_step" -9)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst -5 "0")
                        (("2" (assert)
                          (("2" (expand "nth" 2)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "rhs" 1)
                  (("2" (expand "sec_proj" 1)
                    (("2" (expand "vars" 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((match_condition? const-decl "bool" aux_nominal_AC_unification nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (inst_ptc? const-decl "bool" aux_nominal_AC_unification nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (length def-decl "nat" list_props nil)
    (member const-decl "bool" nominal_AC_unification nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (inst_step_match_cond_dom 0
  (inst_step_match_cond_dom-1 nil 3884108400
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (name-replace "del" "inst_step(PV, G, t, s)`2")
          (("" (reveal -1)
            (("" (expand "match_condition?" -3)
              (("" (inst -3 "X")
                (("" (assert)
                  (("" (prop)
                    (("1" (skolem -1 ("up" "i"))
                      (("1" (flatten)
                        (("1" (case "i = 0")
                          (("1" (replace -1)
                            (("1" (expand "nth" -3)
                              (("1"
                                (replace -3)
                                (("1"
                                  (expand "inst_ptc?" -5)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (lemma "inst_step_inst_ptc_dom")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case "X = V(s)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "inst_ptc?" -2)
                                                (("1"
                                                  (replace -10)
                                                  (("1"
                                                    (replace -2)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -1)
                                              (("2"
                                                (expand "member" -4)
                                                (("2"
                                                  (split -4)
                                                  (("1"
                                                    (hide-all-but
                                                     (-1 -5 2))
                                                    (("1"
                                                      (replace
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "nominal_AC_term_times_eta")
                                                    (("2"
                                                      (replace
                                                       -2
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst -5 "0")
                            (("2" (assert)
                              (("2"
                                (expand "nth" 2)
                                (("2"
                                  (hide-all-but (-6 2))
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-2 1)) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (match_condition? const-decl "bool" aux_nominal_AC_unification nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (nth def-decl "T" list_props nil)
    (inst_ptc? const-decl "bool" aux_nominal_AC_unification nil)
    (inst_step_inst_ptc_dom formula-decl nil nominal_AC_inst_step nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nominal_AC_term_times_eta formula-decl nil nominal_AC_term_adt
     nil)
    (length def-decl "nat" list_props nil)
    (member const-decl "bool" nominal_AC_unification nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (singleton const-decl "(singleton?)" sets nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (DS const-decl "list[atom]" atoms nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt
     nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]"
     nominal_AC_term_adt nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification
     nil))
   shostak))
 (inst_step_match_cond_dom2 0
  (inst_step_match_cond_dom2-1 nil 3884249278
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (lemma "inst_step_dom_img")
          (("" (inst?)
            (("" (assert)
              (("" (prop)
                (("1" (replace -1) (("1" (grind) nil nil)) nil)
                 ("2" (replace -2) (("2" (grind) nil nil)) nil)
                 ("3" (name-replace "del" "inst_step(PV, G, t, s)`2")
                  (("3" (expand "match_condition?" -5)
                    (("3" (inst -5 "X")
                      (("3" (assert)
                        (("3" (prop)
                          (("1" (skolem -1 ("up" "i"))
                            (("1" (flatten)
                              (("1"
                                (case "i = 0")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (expand "nth" -3)
                                    (("1"
                                      (replace -3)
                                      (("1"
                                        (expand "member" -4)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (expand "inst_ptc?" -5)
                                            (("1"
                                              (hide-all-but (-1 -5 1))
                                              (("1"
                                                (replace -1 :dir rl)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (replace -1 2 :dir rl)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst -5 "0")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "nth" 2)
                                      (("2"
                                        (replace -6)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "rhs")
                            (("2" (expand "sec_proj" 1)
                              (("2"
                                (expand "vars" 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((inst_step_dom_img formula-decl nil nominal_AC_inst_step nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (empty? const-decl "bool" sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (union const-decl "set" sets nil)
    (length def-decl "nat" list_props nil)
    (member const-decl "bool" nominal_AC_unification nil)
    (subset? const-decl "bool" sets nil)
    (inst_ptc? const-decl "bool" aux_nominal_AC_unification nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (match_condition? const-decl "bool" aux_nominal_AC_unification nil)
    (emptyset const-decl "set" sets nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (DS const-decl "list[atom]" atoms nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (singleton const-decl "(singleton?)" sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (member const-decl "bool" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (inst_step_match_cond_not_in_ctx 0
  (inst_step_match_cond_not_in_ctx-1 nil 3888652510
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (name-replace "G1" "inst_step(PV, G, t, s)`1")
          (("" (reveal -1)
            (("" (expand "inst_step" -1)
              (("" (lift-if)
                (("" (split -1)
                  (("1" (flatten)
                    (("1" (split -2)
                      (("1" (flatten)
                        (("1" (split -1)
                          (("1" (flatten)
                            (("1"
                              (name-replace "sig"
                               "cons((V(s), ext(reverse(p(s)))(t)), null)")
                              (("1"
                                (reveal -1)
                                (("1"
                                  (replace -3 :dir rl)
                                  (("1"
                                    (rewrite "vars_append_context" -7)
                                    (("1"
                                      (expand ("member" "union") -7)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (use
                                           "nominal_AC_fresh_subs?_var")
                                          (("1"
                                            (expand "subset?")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   ("member" "union")
                                                   -1)
                                                  (("1"
                                                    (replace
                                                     -3
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (use
                                                       "img_basic_sub_var")
                                                      (("1"
                                                        (expand
                                                         "subset?")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (rewrite
                                                               "ext_vars"
                                                               -1)
                                                              (("1"
                                                                (hide-all-but
                                                                 (-1
                                                                  -8
                                                                  -9
                                                                  3))
                                                                (("1"
                                                                  (expand
                                                                   "match_condition?"
                                                                   -3)
                                                                  (("1"
                                                                    (inst
                                                                     -3
                                                                     "X")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skolem
                                                                         -3
                                                                         ("up"
                                                                          "i"))
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (case
                                                                             "i = 0")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "nth"
                                                                                 -5)
                                                                                (("1"
                                                                                  (replace
                                                                                   -5)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "inst_ptc?"
                                                                                     -7)
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "subset?"
                                                                                         -7)
                                                                                        (("1"
                                                                                          (inst?)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (inst
                                                                               -7
                                                                               "0")
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (replace -1) (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split -1)
                          (("1" (flatten)
                            (("1" (split -2)
                              (("1"
                                (flatten)
                                (("1"
                                  (name-replace
                                   "sig"
                                   "cons((V(t), ext(reverse(p(t)))(s)), null)")
                                  (("1"
                                    (replace -2 -7 :dir rl)
                                    (("1"
                                      (rewrite
                                       "vars_append_context"
                                       -7)
                                      (("1"
                                        (expand ("member" "union") -7)
                                        (("1"
                                          (split -7)
                                          (("1"
                                            (use
                                             "nominal_AC_fresh_subs?_var")
                                            (("1"
                                              (expand "subset?" -1)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     ("member" "union")
                                                     -1)
                                                    (("1"
                                                      (reveal -3)
                                                      (("1"
                                                        (use
                                                         "img_basic_sub_var")
                                                        (("1"
                                                          (expand
                                                           "subset?")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "X")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (rewrite
                                                                 "ext_vars"
                                                                 -1)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -9
                                                                    -10
                                                                    4
                                                                    2))
                                                                  (("1"
                                                                    (expand
                                                                     "match_condition?"
                                                                     -3)
                                                                    (("1"
                                                                      (inst
                                                                       -3
                                                                       "X")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (skolem
                                                                           -3
                                                                           ("up"
                                                                            "i"))
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (case
                                                                               "i = 0")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "nth"
                                                                                   -5)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -5)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "inst_ptc?"
                                                                                       -7)
                                                                                      (("1"
                                                                                        (reveal
                                                                                         -6)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "subset?"
                                                                                           -8)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -8
                                                                                             "V(t)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member"
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "vars"
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "singleton"
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (inst
                                                                                 -7
                                                                                 "0")
                                                                                (("2"
                                                                                  (expand
                                                                                   "nth"
                                                                                   -7)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       ("member"
                                                                                        "vars")
                                                                                       3)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "union"
                                                                                         3)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (replace -1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (replace -3 -7 :dir rl)
                                  (("1"
                                    (rewrite "vars_append_context" -7)
                                    (("1"
                                      (expand ("member" "union") -7)
                                      (("1"
                                        (split -7)
                                        (("1"
                                          (use "vars_fc")
                                          (("1"
                                            (expand "subset?")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   ("member"
                                                    "singleton")
                                                   -1)
                                                  (("1"
                                                    (replace
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (replace -4)
                                                      (("1"
                                                        (expand
                                                         "match_condition?"
                                                         -8)
                                                        (("1"
                                                          (inst -8 "X")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skolem
                                                               -10
                                                               ("up"
                                                                "i"))
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (case
                                                                   "i = 0")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       -12)
                                                                      (("1"
                                                                        (replace
                                                                         -12)
                                                                        (("1"
                                                                          (expand
                                                                           "inst_ptc?"
                                                                           -14)
                                                                          (("1"
                                                                            (expand
                                                                             "subset?"
                                                                             -14)
                                                                            (("1"
                                                                              (inst
                                                                               -14
                                                                               "X")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (inst
                                                                     -14
                                                                     "0")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "nth"
                                                                         2)
                                                                        (("2"
                                                                          (expand
                                                                           ("member"
                                                                            "vars")
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "union"
                                                                             2)
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split -1)
                      (("1" (flatten)
                        (("1" (split -2)
                          (("1" (flatten)
                            (("1" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (name-replace
                                   "sig"
                                   "cons((V(t), ext(reverse(p(t)))(s)), null)")
                                  (("1"
                                    (reveal -1)
                                    (("1"
                                      (replace -3 :dir rl)
                                      (("1"
                                        (rewrite "vars_append_context")
                                        (("1"
                                          (expand
                                           ("member" "union")
                                           -7)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (use
                                               "nominal_AC_fresh_subs?_var")
                                              (("1"
                                                (expand "subset?" -1)
                                                (("1"
                                                  (inst -1 "X")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       ("member"
                                                        "union")
                                                       -1)
                                                      (("1"
                                                        (use
                                                         "img_basic_sub_var")
                                                        (("1"
                                                          (expand
                                                           "subset?"
                                                           -1)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (rewrite
                                                                 "ext_vars"
                                                                 -1)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -8
                                                                    -9
                                                                    -7
                                                                    1
                                                                    4))
                                                                  (("1"
                                                                    (expand
                                                                     "match_condition?"
                                                                     -4)
                                                                    (("1"
                                                                      (inst
                                                                       -4
                                                                       "X")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (skolem
                                                                           -4
                                                                           ("up"
                                                                            "i"))
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (case
                                                                               "i = 0")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "nth"
                                                                                   -6)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -6)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "inst_ptc?"
                                                                                       -8)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (inst
                                                                                 -8
                                                                                 "0")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "nth"
                                                                                       3)
                                                                                      (("2"
                                                                                        (expand
                                                                                         ("member"
                                                                                          "vars")
                                                                                         3)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "union"
                                                                                           3)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]"
     nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt
     nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (reverse def-decl "list[T]" list_props nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (nominal_AC_fresh_subs?_var formula-decl nil nominal_AC_fresh_subs
     nil)
    (img_basic_sub_var formula-decl nil nominal_AC_substitution nil)
    (ext_vars formula-decl nil nominal_AC_term_properties nil)
    (match_condition? const-decl "bool" aux_nominal_AC_unification nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (singleton const-decl "(singleton?)" sets nil)
    (length def-decl "nat" list_props nil)
    (member const-decl "bool" nominal_AC_unification nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (inst_ptc? const-decl "bool" aux_nominal_AC_unification nil)
    (nth def-decl "T" list_props nil)
    (subset? const-decl "bool" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (vars_append_context formula-decl nil nominal_AC_freshness nil)
    (nominal_AC_fresh_subs? def-decl "[fresh_context, bool]"
     nominal_AC_fresh_subs nil)
    (vars_fc formula-decl nil nominal_AC_freshness nil)
    (DS const-decl "list[atom]" atoms nil)
    (fc def-decl "fresh_context" nominal_AC_freshness nil)
    (every adt-def-decl "boolean" list_adt nil))
   shostak))
 (inst_step_match_cond_subs 0
  (inst_step_match_cond_subs-1 nil 3884244842
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (expand "match_condition?" -2)
          (("" (inst -2 "X")
            (("" (expand "rhs" -2)
              (("" (expand "sec_proj" -2)
                (("" (assert)
                  (("" (prop)
                    (("1" (skolem -1 ("up" "i"))
                      (("1" (flatten)
                        (("1" (case "i = 0")
                          (("1" (replace -1)
                            (("1" (expand "nth" -3)
                              (("1"
                                (replace -3)
                                (("1"
                                  (expand "member" -4)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "inst_ptc?" -5)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "subset?")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -1 1 :dir rl)
                                                (("1"
                                                  (hide-all-but 1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (name-replace
                                       "delta"
                                       "inst_step(PV, G, t, s)`2")
                                      (("2"
                                        (reveal -1)
                                        (("2"
                                          (expand "inst_step" -1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (replace
                                                         -3
                                                         -2
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             -2)
                                                            (("1"
                                                              (rewrite
                                                               "ext_identity"
                                                               -2)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 5
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (expand
                                                                   "subs"
                                                                   5
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "subs"
                                                                     5
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "subs"
                                                                       5
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "subs"
                                                                         5
                                                                         1)
                                                                        (("1"
                                                                          (rewrite
                                                                           "ext_identity"
                                                                           5)
                                                                          (("1"
                                                                            (replace
                                                                             -2
                                                                             5)
                                                                            (("1"
                                                                              (use
                                                                               "subs_no_effect_t")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide
                                                                                   -4
                                                                                   -5
                                                                                   -6
                                                                                   -7
                                                                                   -8)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("1"
                                                                                      (use
                                                                                       "dom_basic_sub2")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2)
                                                                                        (("1"
                                                                                          (reveal
                                                                                           -6)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "inst_ptc?"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "disjoint?")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "empty?"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (skeep)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       4
                                                                                                       5)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         ("member"
                                                                                                          "intersection")
                                                                                                         -3)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "subset?"
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -2
                                                                                                               "x")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replace
                                                                                                 -1
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand
                                                         "inst_step"
                                                         5)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (replace
                                                       -1
                                                       1
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "inst_ptc?"
                                                           -6)
                                                          (("2"
                                                            (expand
                                                             "subset?"
                                                             -6)
                                                            (("2"
                                                              (inst
                                                               -6
                                                               "X")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst -5 "0")
                            (("2" (assert)
                              (("2"
                                (expand "nth" 2)
                                (("2"
                                  (hide 4 5)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "vars" 1)
                      (("2" (expand ("member" "union") 1)
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((match_condition? const-decl "bool" aux_nominal_AC_unification nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (member const-decl "bool" nominal_AC_unification nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (ext_identity formula-decl nil nominal_AC_term_properties nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (dom_basic_sub2 formula-decl nil nominal_AC_substitution nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (reverse def-decl "list[T]" list_props nil)
    (inst_ptc? const-decl "bool" aux_nominal_AC_unification nil)
    (subset? const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (length def-decl "nat" list_props nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (inst_step_match_img 0
  (inst_step_match_img-2 nil 3883561092
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "delta" "inst_step(PV, G, t, s)`2")
        (("" (prop)
          (("" (reveal -1)
            (("" (expand "inst_step" -1)
              (("" (lift-if)
                (("" (split -1)
                  (("1" (flatten)
                    (("1" (split -2)
                      (("1" (flatten)
                        (("1" (split -1)
                          (("1" (flatten)
                            (("1" (expand "match_condition?" -4)
                              (("1"
                                (inst -4 "V(s)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (skolem -1 ("up" "i"))
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (case "i = 0")
                                        (("1"
                                          (hide -6)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (expand "nth" -3)
                                              (("1"
                                                (replace -3)
                                                (("1"
                                                  (use
                                                   "img_basic_sub2")
                                                  (("1"
                                                    (replace -8)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (rewrite
                                                           "vars_singleton"
                                                           3)
                                                          (("1"
                                                            (rewrite
                                                             "ext_vars")
                                                            (("1"
                                                              (expand
                                                               "inst_ptc?"
                                                               -6)
                                                              (("1"
                                                                (flatten)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -1)
                                                        (("2"
                                                          (hide-all-but
                                                           3)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst -5 "0")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "nth" 2)
                                              (("2"
                                                (hide-all-but (-7 2))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "rhs" 1)
                                    (("2"
                                      (expand "sec_proj" 1)
                                      (("2"
                                        (expand "vars" 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (replace -1)
                              (("2"
                                (replace -1 :dir rl)
                                (("2"
                                  (hide-all-but 4)
                                  (("2"
                                    (rewrite "img_null")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split -1)
                          (("1" (flatten)
                            (("1" (split -2)
                              (("1"
                                (flatten)
                                (("1"
                                  (use "img_basic_sub2")
                                  (("1"
                                    (replace -3)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (rewrite "vars_singleton")
                                          (("1"
                                            (rewrite "ext_vars")
                                            (("1"
                                              (expand "subset?" 4)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (expand
                                                   "match_condition?"
                                                   -6)
                                                  (("1"
                                                    (inst -6 "x")
                                                    (("1"
                                                      (split -6)
                                                      (("1"
                                                        (skolem
                                                         -1
                                                         ("up" "i"))
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (case
                                                             "i = 0")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 -3)
                                                                (("1"
                                                                  (replace
                                                                   -3)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-5
                                                                      -10
                                                                      2))
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               -5
                                                               "0")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "nth"
                                                                   2)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     (-10
                                                                      2))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-6 1))
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -1 4)
                                        (("2"
                                          (hide-all-but 4)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (replace -1 :dir rl)
                                    (("2"
                                      (hide-all-but 5)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (replace -1 :dir rl)
                              (("2"
                                (hide-all-but 3)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split -1)
                      (("1" (flatten)
                        (("1" (split -2)
                          (("1" (flatten)
                            (("1" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (use "img_basic_sub2")
                                  (("1"
                                    (replace -3)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (rewrite "vars_singleton" 4)
                                          (("1"
                                            (rewrite "ext_vars")
                                            (("1"
                                              (expand "subset?" 4)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (expand
                                                   "match_condition?"
                                                   -5)
                                                  (("1"
                                                    (inst -5 "x")
                                                    (("1"
                                                      (split -5)
                                                      (("1"
                                                        (skolem
                                                         -1
                                                         ("up" "i"))
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (case
                                                             "i = 0")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 -3)
                                                                (("1"
                                                                  (replace
                                                                   -3)
                                                                  (("1"
                                                                    (expand
                                                                     "inst_ptc?"
                                                                     -5)
                                                                    (("1"
                                                                      (flatten)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               -5
                                                               "0")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "nth"
                                                                   2)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     (-9
                                                                      2))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-5 1))
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -1)
                                        (("2"
                                          (hide-all-but 4)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (replace -1 :dir rl)
                                  (("2"
                                    (hide-all-but 5)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (replace -1 :dir rl)
                              (("2"
                                (hide-all-but 3)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (replace -1 :dir rl)
                          (("2" (hide-all-but 3)
                            (("2" (rewrite "img_null")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (match_condition? const-decl "bool" aux_nominal_AC_unification nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (singleton const-decl "(singleton?)" sets nil)
    (union const-decl "set" sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (img_basic_sub2 formula-decl nil nominal_AC_substitution nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (reverse def-decl "list[T]" list_props nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (vars_singleton formula-decl nil nominal_AC_term_properties nil)
    (inst_ptc? const-decl "bool" aux_nominal_AC_unification nil)
    (ext_vars formula-decl nil nominal_AC_term_properties nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]"
     nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt
     nil)
    (img_null formula-decl nil nominal_AC_substitution nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (inst_step_match_img-1 nil 3883497773
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "delta" "inst_step(PV, G, t, s)`2")
        (("" (prop)
          (("" (reveal -1)
            (("" (expand "inst_step" -1)
              (("" (lift-if)
                (("" (split -1)
                  (("1" (flatten)
                    (("1" (split -2)
                      (("1" (flatten)
                        (("1" (split -1)
                          (("1" (flatten)
                            (("1" (expand "match_condition2?" -4)
                              (("1"
                                (inst -4 "V(s)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (skolem -1 ("up" "i"))
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (case "i = 0")
                                        (("1"
                                          (hide -6)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (expand "nth" -3)
                                              (("1"
                                                (replace -3)
                                                (("1"
                                                  (use
                                                   "img_basic_sub2")
                                                  (("1"
                                                    (replace -8)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (rewrite
                                                           "vars_singleton"
                                                           3)
                                                          (("1"
                                                            (rewrite
                                                             "ext_vars")
                                                            (("1"
                                                              (expand
                                                               "inst_ptc?"
                                                               -6)
                                                              (("1"
                                                                (flatten)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -1)
                                                        (("2"
                                                          (hide-all-but
                                                           3)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst -5 "0")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "nth" 2)
                                              (("2"
                                                (hide-all-but (-7 2))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "rhs" 1)
                                    (("2"
                                      (expand "sec_proj" 1)
                                      (("2"
                                        (expand "vars" 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (replace -1)
                              (("2"
                                (replace -1 :dir rl)
                                (("2"
                                  (hide-all-but 4)
                                  (("2"
                                    (rewrite "img_null")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split -1)
                          (("1" (flatten)
                            (("1" (split -2)
                              (("1"
                                (flatten)
                                (("1"
                                  (use "img_basic_sub2")
                                  (("1"
                                    (replace -3)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (rewrite "vars_singleton")
                                          (("1"
                                            (rewrite "ext_vars")
                                            (("1"
                                              (expand "subset?" 4)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (expand
                                                   "match_condition2?"
                                                   -6)
                                                  (("1"
                                                    (inst -6 "x")
                                                    (("1"
                                                      (split -6)
                                                      (("1"
                                                        (skolem
                                                         -1
                                                         ("up" "i"))
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (case
                                                             "i = 0")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 -3)
                                                                (("1"
                                                                  (replace
                                                                   -3)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-5
                                                                      -10
                                                                      2))
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               -5
                                                               "0")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "nth"
                                                                   2)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     (-10
                                                                      2))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-6 1))
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -1 4)
                                        (("2"
                                          (hide-all-but 4)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (replace -1 :dir rl)
                                    (("2"
                                      (hide-all-but 5)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (replace -1 :dir rl)
                              (("2"
                                (hide-all-but 3)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split -1)
                      (("1" (flatten)
                        (("1" (split -2)
                          (("1" (flatten)
                            (("1" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (use "img_basic_sub2")
                                  (("1"
                                    (replace -3)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (rewrite "vars_singleton" 4)
                                          (("1"
                                            (rewrite "ext_vars")
                                            (("1"
                                              (expand "subset?" 4)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (expand
                                                   "match_condition2?"
                                                   -5)
                                                  (("1"
                                                    (inst -5 "x")
                                                    (("1"
                                                      (split -5)
                                                      (("1"
                                                        (skolem
                                                         -1
                                                         ("up" "i"))
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (case
                                                             "i = 0")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 -3)
                                                                (("1"
                                                                  (replace
                                                                   -3)
                                                                  (("1"
                                                                    (expand
                                                                     "inst_ptc?"
                                                                     -5)
                                                                    (("1"
                                                                      (flatten)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               -5
                                                               "0")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "nth"
                                                                   2)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     (-9
                                                                      2))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-5 1))
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -1)
                                        (("2"
                                          (hide-all-but 4)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (replace -1 :dir rl)
                                  (("2"
                                    (hide-all-but 5)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (replace -1 :dir rl)
                              (("2"
                                (hide-all-but 3)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (replace -1 :dir rl)
                          (("2" (hide-all-but 3)
                            (("2" (rewrite "img_null")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (singleton const-decl "(singleton?)" sets nil)
    (union const-decl "set" sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (img_basic_sub2 formula-decl nil nominal_AC_substitution nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (reverse def-decl "list[T]" list_props nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (vars_singleton formula-decl nil nominal_AC_term_properties nil)
    (inst_ptc? const-decl "bool" aux_nominal_AC_unification nil)
    (ext_vars formula-decl nil nominal_AC_term_properties nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]"
     nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt
     nil)
    (img_null formula-decl nil nominal_AC_substitution nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    nil (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (inst_step_inst_ptc_match2 0
  (inst_step_inst_ptc_match2-2 nil 3883561176
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (expand "match_condition?" 1)
          (("" (skeep)
            (("" (name-replace "del" "inst_step(PV, G, t, s)`2")
              (("" (reveal -1)
                (("" (case "NOT member(X, dom(del))")
                  (("1" (case "member(X, vars(img(del)))")
                    (("1" (use "inst_step_inst_ptc_vars_img")
                      (("1" (assert)
                        (("1" (replace -3)
                          (("1" (assert)
                            (("1" (expand "subset?" -1)
                              (("1"
                                (inst -1 "X")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "inst_ptc?" -4)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "subset?" -4)
                                        (("1"
                                          (inst -4 "X")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "match_condition?" -3)
                      (("2" (inst -3 "X")
                        (("2" (prop)
                          (("1" (skolem -1 ("up" "i"))
                            (("1" (prop)
                              (("1"
                                (inst 4 "apply_sub(del, up)" "i")
                                (("1"
                                  (prop)
                                  (("1"
                                    (rewrite "apply_sub_len")
                                    nil
                                    nil)
                                   ("2"
                                    (replace -2)
                                    (("2"
                                      (rewrite "apply_sub_nth")
                                      nil
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "member" -3)
                                    (("3"
                                      (expand "member" 1)
                                      (("3"
                                        (prop)
                                        (("1"
                                          (expand "apply_sub" 1)
                                          (("1"
                                            (replace -1 :dir rl)
                                            (("1"
                                              (expand
                                               ("member" "dom")
                                               4)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "subs" -6)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand ("member" "dom") 4)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (expand "subs" -6)
                                              (("2"
                                                (expand "apply_sub" 2)
                                                (("2"
                                                  (replace -1 :dir rl)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (expand "inst_ptc?" -4)
                                    (("4"
                                      (flatten)
                                      (("4"
                                        (expand "inst_ptc?" 1)
                                        (("4"
                                          (expand "member" -3)
                                          (("4"
                                            (split -3)
                                            (("1"
                                              (expand "subset?" -4)
                                              (("1"
                                                (replace -1 :dir rl)
                                                (("1"
                                                  (inst -4 "X")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -1 :dir rl)
                                              (("2"
                                                (expand
                                                 "apply_sub"
                                                 1
                                                 2)
                                                (("2"
                                                  (replace -1 :dir rl)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (expand
                                                       "apply_sub"
                                                       1)
                                                      (("1"
                                                        (use
                                                         "vars_subs_t")
                                                        (("1"
                                                          (hide -7)
                                                          (("1"
                                                            (expand
                                                             "subset?"
                                                             1)
                                                            (("1"
                                                              (skolem
                                                               1
                                                               "Y")
                                                              (("1"
                                                                (expand
                                                                 "subset?"
                                                                 -1)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "Y")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           ("member"
                                                                            "union")
                                                                           -1)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (use
                                                                               "inst_step_inst_ptc_vars_img")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -9)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "inst_ptc?"
                                                                                     -10)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          -2
                                                                                          -10
                                                                                          1))
                                                                                        (("1"
                                                                                          (expand
                                                                                           "subset?")
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -6
                                                                                1))
                                                                              (("2"
                                                                                (expand
                                                                                 "subset?"
                                                                                 -2)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "member"
                                                       3)
                                                      (("2"
                                                        (expand
                                                         "dom"
                                                         3)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand
                                                             "subs"
                                                             -7)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("5"
                                    (skeep)
                                    (("5"
                                      (inst -7 "j")
                                      (("5"
                                        (prop)
                                        (("5"
                                          (expand "vars" -2)
                                          (("5"
                                            (expand
                                             ("member" "union")
                                             -2)
                                            (("5"
                                              (expand "vars" 1)
                                              (("5"
                                                (expand
                                                 ("member" "union")
                                                 1)
                                                (("5"
                                                  (prop)
                                                  (("1"
                                                    (rewrite
                                                     "apply_sub_nth"
                                                     -1)
                                                    (("1"
                                                      (expand
                                                       "apply_sub"
                                                       -1)
                                                      (("1"
                                                        (use
                                                         "vars_subs_t")
                                                        (("1"
                                                          (expand
                                                           "subset?"
                                                           -1)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "X")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 ("member"
                                                                  "union")
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "apply_sub_nth"
                                                     -1)
                                                    (("2"
                                                      (expand
                                                       "apply_sub"
                                                       -1)
                                                      (("2"
                                                        (use
                                                         "vars_subs_t")
                                                        (("2"
                                                          (expand
                                                           "subset?")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "X")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 ("member"
                                                                  "union")
                                                                 -1)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 5)
                            (("2" (rewrite "vars_args")
                              (("2"
                                (rewrite "vars_args")
                                (("2"
                                  (skolem -3 "t1")
                                  (("2"
                                    (prop)
                                    (("2"
                                      (expand "rhs" -3)
                                      (("2"
                                        (rewrite "sec_proj_mem" -3)
                                        (("2"
                                          (skolem -3 "up")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (rewrite
                                               "apply_sub_unif_pair")
                                              (("2"
                                                (skolem -3 "up1")
                                                (("2"
                                                  (prop)
                                                  (("2"
                                                    (replace -4 -5)
                                                    (("2"
                                                      (expand
                                                       "apply_sub"
                                                       -5)
                                                      (("2"
                                                        (inst
                                                         1
                                                         "up1`2")
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (expand
                                                             "rhs"
                                                             1)
                                                            (("1"
                                                              (rewrite
                                                               "sec_proj_mem"
                                                               1)
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 "up1")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             -5
                                                             -6)
                                                            (("2"
                                                              (use
                                                               "vars_subs_t")
                                                              (("2"
                                                                (expand
                                                                 "subset?"
                                                                 -1)
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       ("member"
                                                                        "union")
                                                                       -1)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "apply_sub_elim_var2")
                    (("2" (inst -1 "del" "P")
                      (("2" (prop)
                        (("1" (expand "disjoint?" -1)
                          (("1" (expand "empty?" -1)
                            (("1" (inst -1 "X")
                              (("1"
                                (expand ("member" "intersection") 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide-all-but (-5 1))
                                    (("1"
                                      (rewrite "vars_unif_prb")
                                      (("1"
                                        (rewrite "vars_args")
                                        (("1"
                                          (skolem -1 "t1")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (inst 1 "t1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "rhs" -1)
                                                  (("1"
                                                    (rewrite
                                                     "sec_proj_mem"
                                                     -1)
                                                    (("1"
                                                      (skolem -1 "up")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (rewrite
                                                           "member_unif_prb_equiv"
                                                           1)
                                                          (("1"
                                                            (inst
                                                             1
                                                             "up")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (expand "del")
                            (("2" (use "inst_step_idempotent2") nil
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((match_condition? const-decl "bool" aux_nominal_AC_unification nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (apply_sub_nth formula-decl nil nominal_AC_unification nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" nominal_AC_unification nil)
    (union const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (vars_subs_t formula-decl nil nominal_AC_substitution nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (apply_sub const-decl "unif_pair" nominal_AC_unification nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (every adt-def-decl "boolean" list_adt nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (apply_sub_unif_pair formula-decl nil nominal_AC_unification nil)
    (sec_proj_mem formula-decl nil list_aux_equational_reasoning2 nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (inst_step_inst_ptc_vars_img formula-decl nil nominal_AC_inst_step
     nil)
    (subset? const-decl "bool" sets nil)
    (inst_ptc? const-decl "bool" aux_nominal_AC_unification nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (inst_step_idempotent2 formula-decl nil nominal_AC_inst_step nil)
    (del skolem-const-decl "sub" nominal_AC_inst_step nil)
    (disjoint? const-decl "bool" sets nil)
    (vars_unif_prb formula-decl nil nominal_AC_unification nil)
    (member_unif_prb_equiv formula-decl nil nominal_AC_unification nil)
    (intersection const-decl "set" sets nil)
    (apply_sub_elim_var2 formula-decl nil nominal_AC_unification nil))
   nil)
  (inst_step_inst_ptc_match2-1 nil 3883324156
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (expand "match_condition2?" 1)
          (("" (skeep)
            (("" (name-replace "del" "inst_step(PV, G, t, s)`2")
              (("" (reveal -1)
                (("" (case "NOT member(X, dom(del))")
                  (("1" (case "member(X, vars(img(del)))")
                    (("1" (use "inst_step_inst_ptc_vars_img")
                      (("1" (assert)
                        (("1" (replace -3)
                          (("1" (assert)
                            (("1" (expand "subset?" -1)
                              (("1"
                                (inst -1 "X")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "inst_ptc?" -4)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "subset?" -4)
                                        (("1"
                                          (inst -4 "X")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "match_condition2?" -3)
                      (("2" (inst -3 "X")
                        (("2" (prop)
                          (("1" (skolem -1 ("up" "i"))
                            (("1" (prop)
                              (("1"
                                (inst 4 "apply_sub(del, up)" "i")
                                (("1"
                                  (prop)
                                  (("1"
                                    (rewrite "apply_sub_len")
                                    nil
                                    nil)
                                   ("2"
                                    (replace -2)
                                    (("2"
                                      (rewrite "apply_sub_nth")
                                      nil
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "member" -3)
                                    (("3"
                                      (expand "member" 1)
                                      (("3"
                                        (prop)
                                        (("1"
                                          (expand "apply_sub" 1)
                                          (("1"
                                            (replace -1 :dir rl)
                                            (("1"
                                              (expand
                                               ("member" "dom")
                                               4)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "subs" -6)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand ("member" "dom") 4)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (expand "subs" -6)
                                              (("2"
                                                (expand "apply_sub" 2)
                                                (("2"
                                                  (replace -1 :dir rl)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (expand "inst_ptc?" -4)
                                    (("4"
                                      (flatten)
                                      (("4"
                                        (expand "inst_ptc?" 1)
                                        (("4"
                                          (expand "member" -3)
                                          (("4"
                                            (split -3)
                                            (("1"
                                              (expand "subset?" -4)
                                              (("1"
                                                (replace -1 :dir rl)
                                                (("1"
                                                  (inst -4 "X")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -1 :dir rl)
                                              (("2"
                                                (expand
                                                 "apply_sub"
                                                 1
                                                 2)
                                                (("2"
                                                  (replace -1 :dir rl)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (expand
                                                       "apply_sub"
                                                       1)
                                                      (("1"
                                                        (use
                                                         "vars_subs_t")
                                                        (("1"
                                                          (hide -7)
                                                          (("1"
                                                            (expand
                                                             "subset?"
                                                             1)
                                                            (("1"
                                                              (skolem
                                                               1
                                                               "Y")
                                                              (("1"
                                                                (expand
                                                                 "subset?"
                                                                 -1)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "Y")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           ("member"
                                                                            "union")
                                                                           -1)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (use
                                                                               "inst_step_inst_ptc_vars_img")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -9)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "inst_ptc?"
                                                                                     -10)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          -2
                                                                                          -10
                                                                                          1))
                                                                                        (("1"
                                                                                          (expand
                                                                                           "subset?")
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -6
                                                                                1))
                                                                              (("2"
                                                                                (expand
                                                                                 "subset?"
                                                                                 -2)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "member"
                                                       3)
                                                      (("2"
                                                        (expand
                                                         "dom"
                                                         3)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand
                                                             "subs"
                                                             -7)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("5"
                                    (skeep)
                                    (("5"
                                      (inst -7 "j")
                                      (("5"
                                        (prop)
                                        (("5"
                                          (expand "vars" -2)
                                          (("5"
                                            (expand
                                             ("member" "union")
                                             -2)
                                            (("5"
                                              (expand "vars" 1)
                                              (("5"
                                                (expand
                                                 ("member" "union")
                                                 1)
                                                (("5"
                                                  (prop)
                                                  (("1"
                                                    (rewrite
                                                     "apply_sub_nth"
                                                     -1)
                                                    (("1"
                                                      (expand
                                                       "apply_sub"
                                                       -1)
                                                      (("1"
                                                        (use
                                                         "vars_subs_t")
                                                        (("1"
                                                          (expand
                                                           "subset?"
                                                           -1)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "X")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 ("member"
                                                                  "union")
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "apply_sub_nth"
                                                     -1)
                                                    (("2"
                                                      (expand
                                                       "apply_sub"
                                                       -1)
                                                      (("2"
                                                        (use
                                                         "vars_subs_t")
                                                        (("2"
                                                          (expand
                                                           "subset?")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "X")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 ("member"
                                                                  "union")
                                                                 -1)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 5)
                            (("2" (rewrite "vars_args")
                              (("2"
                                (rewrite "vars_args")
                                (("2"
                                  (skolem -3 "t1")
                                  (("2"
                                    (prop)
                                    (("2"
                                      (expand "rhs" -3)
                                      (("2"
                                        (rewrite "sec_proj_mem" -3)
                                        (("2"
                                          (skolem -3 "up")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (rewrite
                                               "apply_sub_unif_pair")
                                              (("2"
                                                (skolem -3 "up1")
                                                (("2"
                                                  (prop)
                                                  (("2"
                                                    (replace -4 -5)
                                                    (("2"
                                                      (expand
                                                       "apply_sub"
                                                       -5)
                                                      (("2"
                                                        (inst
                                                         1
                                                         "up1`2")
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (expand
                                                             "rhs"
                                                             1)
                                                            (("1"
                                                              (rewrite
                                                               "sec_proj_mem"
                                                               1)
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 "up1")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             -5
                                                             -6)
                                                            (("2"
                                                              (use
                                                               "vars_subs_t")
                                                              (("2"
                                                                (expand
                                                                 "subset?"
                                                                 -1)
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       ("member"
                                                                        "union")
                                                                       -1)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "apply_sub_elim_var2")
                    (("2" (inst -1 "del" "P")
                      (("2" (prop)
                        (("1" (expand "disjoint?" -1)
                          (("1" (expand "empty?" -1)
                            (("1" (inst -1 "X")
                              (("1"
                                (expand ("member" "intersection") 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide-all-but (-5 1))
                                    (("1"
                                      (rewrite "vars_unif_prb")
                                      (("1"
                                        (rewrite "vars_args")
                                        (("1"
                                          (skolem -1 "t1")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (inst 1 "t1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "rhs" -1)
                                                  (("1"
                                                    (rewrite
                                                     "sec_proj_mem"
                                                     -1)
                                                    (("1"
                                                      (skolem -1 "up")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (rewrite
                                                           "member_unif_prb_equiv"
                                                           1)
                                                          (("1"
                                                            (inst
                                                             1
                                                             "up")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (expand "del")
                            (("2" (use "inst_step_idempotent2") nil
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil) nil
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (apply_sub_nth formula-decl nil nominal_AC_unification nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" nominal_AC_unification nil)
    (union const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (vars_subs_t formula-decl nil nominal_AC_substitution nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (apply_sub const-decl "unif_pair" nominal_AC_unification nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (apply_sub_unif_pair formula-decl nil nominal_AC_unification nil)
    (sec_proj_mem formula-decl nil list_aux_equational_reasoning2 nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (inst_step_inst_ptc_vars_img formula-decl nil nominal_AC_inst_step
     nil)
    (subset? const-decl "bool" sets nil)
    (inst_ptc? const-decl "bool" aux_nominal_AC_unification nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (inst_step_idempotent2 formula-decl nil nominal_AC_inst_step nil)
    (disjoint? const-decl "bool" sets nil)
    (vars_unif_prb formula-decl nil nominal_AC_unification nil)
    (member_unif_prb_equiv formula-decl nil nominal_AC_unification nil)
    (intersection const-decl "set" sets nil)
    (apply_sub_elim_var2 formula-decl nil nominal_AC_unification nil))
   shostak))
 (inst_step_match_condition_apply_sub 0
  (inst_step_match_condition_apply_sub-2 nil 3883561268
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (name-replace "skp" "inst_step(PV, G, t, s)`3")
          (("" (name-replace "fai" "inst_step(PV, G, t, s)`4")
            (("" (name-replace "del" "inst_step(PV, G, t, s)`2")
              (("" (expand "match_condition?" 3)
                (("" (skeep)
                  (("" (reveal -1)
                    (("" (case "NOT member(X, vars(img(del)))")
                      (("1" (expand "match_condition?" -2)
                        (("1" (inst -2 "X")
                          (("1" (assert)
                            (("1" (prop)
                              (("1"
                                (case "NOT member(X, dom(del))")
                                (("1"
                                  (skolem -1 ("up" "i"))
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (case "i = 0")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (hide -6)
                                          (("1"
                                            (expand "nth" -3)
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (expand "member" -4)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (hide-all-but
                                                     (-1 -5 5))
                                                    (("1"
                                                      (expand
                                                       "inst_ptc?"
                                                       -2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "subset?"
                                                           -2)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 6)
                                                    (("2"
                                                      (use
                                                       "inst_step_inst_ptc_dom")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "fai"
                                                           4)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (replace
                                                                 -7)
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     1
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -2
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (expand
                                                                   "member"
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "member"
                                                                     5)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst
                                         7
                                         "nth(apply_sub(del, P), i-1)"
                                         "i-1")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (rewrite "apply_sub_len" 1)
                                            (("1"
                                              (expand "length" -1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "apply_sub_nth" 1)
                                            (("1"
                                              (expand "nth" -2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -2)
                                                  (("1"
                                                    (expand
                                                     "apply_sub"
                                                     1)
                                                    (("1"
                                                      (expand
                                                       "member"
                                                       1)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (expand
                                                           "member"
                                                           -3)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (expand
                                                               "inst_ptc?"
                                                               -4)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-4
                                                                      8))
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -3
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (lemma
                                                                   "subs_no_effect_t")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "del"
                                                                     "null * X")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide-all-but
                                                                         (1
                                                                          5))
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "length" -1 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (rewrite "apply_sub_nth" 1)
                                            (("1"
                                              (expand "nth" -2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -2 :dir rl)
                                                  (("1"
                                                    (hide -5)
                                                    (("1"
                                                      (expand
                                                       "member"
                                                       -3)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (hide-all-but
                                                           (-1 -4 7))
                                                          (("1"
                                                            (expand
                                                             "inst_ptc?"
                                                             -2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -6)
                                                          (("2"
                                                            (expand
                                                             "inst_ptc?"
                                                             1)
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (hide-all-but
                                                                 (-4
                                                                  -5
                                                                  1))
                                                                (("1"
                                                                  (expand
                                                                   "subset?"
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "apply_sub"
                                                                     1)
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (use
                                                                         "vars_subs_t")
                                                                        (("1"
                                                                          (expand
                                                                           "subset?"
                                                                           -1)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "x")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 ("member"
                                                                                  "union")
                                                                                 -1)
                                                                                (("1"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (reveal
                                                                                     -8)
                                                                                    (("1"
                                                                                      (use
                                                                                       "inst_step_match_img")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -6)
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "subset?"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "match_condition?")
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "inst_ptc?"
                                                                                     -3)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "subset?"
                                                                                         -3)
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "apply_sub"
                                                                 1)
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (use
                                                                     "subs_no_effect_t")
                                                                    (("2"
                                                                      (prop)
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (1
                                                                          4))
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "length" -1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (skeep)
                                            (("4"
                                              (inst -7 "j+1")
                                              (("4"
                                                (assert)
                                                (("4"
                                                  (expand "nth" 3)
                                                  (("4"
                                                    (rewrite
                                                     "apply_sub_nth")
                                                    (("1"
                                                      (expand
                                                       "apply_sub"
                                                       -2)
                                                      (("1"
                                                        (expand
                                                         "vars"
                                                         3)
                                                        (("1"
                                                          (expand
                                                           "vars"
                                                           -2)
                                                          (("1"
                                                            (expand
                                                             ("member"
                                                              "union")
                                                             -2)
                                                            (("1"
                                                              (expand
                                                               ("member"
                                                                "union")
                                                               3)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (lemma
                                                                   "vars_subs_t")
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (inst?
                                                                       -2)
                                                                      (("1"
                                                                        (expand
                                                                         "subset?"
                                                                         -2)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               ("member"
                                                                                "union")
                                                                               -2)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (expand
                                                                         "subset?")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               ("member"
                                                                                "union")
                                                                               -2)
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "length"
                                                       -3)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil)
                                         ("3"
                                          (assert)
                                          (("3"
                                            (rewrite "apply_sub_len")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (expand "length" -1)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "vars_args")
                                  (("2"
                                    (hide -2 5)
                                    (("2"
                                      (skolem -3 "t1")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (rewrite "apply_sub_rhs")
                                          (("2"
                                            (skolem -3 "s1")
                                            (("2"
                                              (prop)
                                              (("2"
                                                (replace -4 -5)
                                                (("2"
                                                  (use
                                                   "apply_sub_elim_var_t")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 6)
                                (("2"
                                  (rewrite "vars_args")
                                  (("2"
                                    (rewrite "vars_args")
                                    (("2"
                                      (skolem -2 "t_del")
                                      (("2"
                                        (prop)
                                        (("2"
                                          (rewrite "apply_sub_rhs")
                                          (("2"
                                            (skolem -2 "s1")
                                            (("2"
                                              (inst 1 "s1")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (expand "rhs")
                                                    (("1"
                                                      (expand
                                                       "sec_proj"
                                                       1)
                                                      (("1"
                                                        (expand
                                                         "member"
                                                         1)
                                                        (("1"
                                                          (prop)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -3 -4)
                                                    (("2"
                                                      (use
                                                       "vars_subs_t")
                                                      (("2"
                                                        (expand
                                                         "subset?")
                                                        (("2"
                                                          (inst -1 "X")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               ("member"
                                                                "union")
                                                               -1)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 4)
                        (("2" (use "inst_step_dom_img")
                          (("2" (assert)
                            (("2" (replace -3)
                              (("2"
                                (case
                                 "(dom(del) = emptyset AND img(del) = emptyset)")
                                (("1"
                                  (hide -2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (replace -2 -3)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case
                                   "(var?(s) AND dom(del) = singleton(V(s)) AND vars(img(del)) = vars(t))")
                                  (("1"
                                    (hide -2 1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "match_condition?" -6)
                                        (("1"
                                          (inst -6 "V(s)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (skolem -1 ("up" "i"))
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (case "i = 0")
                                                  (("1"
                                                    (expand "nth" -3)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide -6)
                                                        (("1"
                                                          (replace -3)
                                                          (("1"
                                                            (expand
                                                             "inst_ptc?"
                                                             -5)
                                                            (("1"
                                                              (expand
                                                               "subset?"
                                                               -5)
                                                              (("1"
                                                                (inst
                                                                 -5
                                                                 "X")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst -5 "0")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "nth"
                                                         2)
                                                        (("2"
                                                          (expand
                                                           "member"
                                                           2)
                                                          (("2"
                                                            (expand
                                                             "vars"
                                                             2)
                                                            (("2"
                                                              (expand
                                                               "union"
                                                               2)
                                                              (("2"
                                                                (prop)
                                                                (("2"
                                                                  (expand
                                                                   "member"
                                                                   3)
                                                                  (("2"
                                                                    (expand
                                                                     "vars"
                                                                     3)
                                                                    (("2"
                                                                      (expand
                                                                       "singleton"
                                                                       3)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "rhs" 1)
                                              (("2"
                                                (expand "sec_proj" 1)
                                                (("2"
                                                  (expand "vars" 1)
                                                  (("2"
                                                    (expand
                                                     ("member" "union")
                                                     1)
                                                    (("2"
                                                      (prop)
                                                      (("2"
                                                        (expand
                                                         "vars"
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             ("member"
                                                              "singleton")
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (use
                                               "inst_step_dom_PV_aux")
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (expand "del" -4)
                                                  (("3"
                                                    (replace -4 -1)
                                                    (("3"
                                                      (hide-all-but
                                                       (-1 -2))
                                                      (("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (split -1)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil)
                                     ("3"
                                      (flatten)
                                      (("3"
                                        (expand "match_condition?" -6)
                                        (("3"
                                          (inst -6 "X")
                                          (("3"
                                            (split -6)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (skolem -1 ("up" "i"))
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (case "i = 0")
                                                    (("1"
                                                      (hide -6)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         -3)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -3)
                                                              (("1"
                                                                (expand
                                                                 "member"
                                                                 -4)
                                                                (("1"
                                                                  (split
                                                                   -4)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-1
                                                                      -5
                                                                      4))
                                                                    (("1"
                                                                      (expand
                                                                       "inst_ptc?"
                                                                       -2)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (expand
                                                                           "subset?"
                                                                           -2)
                                                                          (("1"
                                                                            (inst
                                                                             -2
                                                                             "X")
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (reveal
                                                                     1)
                                                                    (("2"
                                                                      (use
                                                                       "inst_step_chooses_rhs")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (reveal
                                                                           -5
                                                                           -6
                                                                           -7)
                                                                          (("2"
                                                                            (replace
                                                                             -1)
                                                                            (("2"
                                                                              (replace
                                                                               -2)
                                                                              (("2"
                                                                                (replace
                                                                                 -3)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (split
                                                                                     -2)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("3"
                                                                                      (replace
                                                                                       -3
                                                                                       -1
                                                                                       :dir
                                                                                       rl)
                                                                                      (("3"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          7))
                                                                                        (("3"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide
                                                       -1
                                                       -2
                                                       -3
                                                       -4)
                                                      (("2"
                                                        (inst -1 "0")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "nth"
                                                             2)
                                                            (("2"
                                                              (use
                                                               "inst_step_img")
                                                              (("2"
                                                                (hide-all-but
                                                                 (-1
                                                                  -5
                                                                  2))
                                                                (("2"
                                                                  (expand
                                                                   "subset?"
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "del"
                                                                     -2)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2 3)
                                              (("2"
                                                (expand "rhs" 1)
                                                (("2"
                                                  (expand "sec_proj" 1)
                                                  (("2"
                                                    (expand "vars" 1)
                                                    (("2"
                                                      (expand
                                                       ("member"
                                                        "union")
                                                       1)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (replace -3)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (every adt-def-decl "boolean" list_adt nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (apply_sub_rhs formula-decl nil nominal_AC_unification nil)
    (apply_sub_elim_var_t formula-decl nil nominal_AC_substitution nil)
    (inst_ptc? const-decl "bool" aux_nominal_AC_unification nil)
    (subset? const-decl "bool" sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (inst_step_inst_ptc_dom formula-decl nil nominal_AC_inst_step nil)
    (fai skolem-const-decl "bool" nominal_AC_inst_step nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" nominal_AC_unification nil)
    (nth def-decl "T" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]"
     nominal_AC_term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]"
       nominal_AC_term_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (apply_sub const-decl "unif_pair" nominal_AC_unification nil)
    (apply_sub_nth formula-decl nil nominal_AC_unification nil)
    (inst_step_match_img formula-decl nil nominal_AC_inst_step nil)
    (union const-decl "set" sets nil)
    (vars_subs_t formula-decl nil nominal_AC_substitution nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (P skolem-const-decl "unif_prb" nominal_AC_inst_step nil)
    (del skolem-const-decl "sub" nominal_AC_inst_step nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (length def-decl "nat" list_props nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (< const-decl "bool" reals nil)
    (i skolem-const-decl "nat" nominal_AC_inst_step nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (member def-decl "bool" list_props nil)
    (inst_step_dom_img formula-decl nil nominal_AC_inst_step nil)
    (singleton? const-decl "bool" sets nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt
     nil)
    (inst_step_dom_PV_aux formula-decl nil nominal_AC_inst_step nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (inst_step_img formula-decl nil nominal_AC_inst_step nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (inst_step_chooses_rhs formula-decl nil nominal_AC_inst_step nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (match_condition? const-decl "bool" aux_nominal_AC_unification
     nil))
   nil)
  (inst_step_match_condition_apply_sub-1 nil 3883380777
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (name-replace "skp" "inst_step(PV, G, t, s)`3")
          (("" (name-replace "fai" "inst_step(PV, G, t, s)`4")
            (("" (name-replace "del" "inst_step(PV, G, t, s)`2")
              (("" (expand "match_condition2?" 3)
                (("" (skeep)
                  (("" (reveal -1)
                    (("" (case "NOT member(X, vars(img(del)))")
                      (("1" (expand "match_condition2?" -2)
                        (("1" (inst -2 "X")
                          (("1" (assert)
                            (("1" (prop)
                              (("1"
                                (case "NOT member(X, dom(del))")
                                (("1"
                                  (skolem -1 ("up" "i"))
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (case "i = 0")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (hide -6)
                                          (("1"
                                            (expand "nth" -3)
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (expand "member" -4)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (hide-all-but
                                                     (-1 -5 5))
                                                    (("1"
                                                      (expand
                                                       "inst_ptc?"
                                                       -2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "subset?"
                                                           -2)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 6)
                                                    (("2"
                                                      (use
                                                       "inst_step_inst_ptc_dom")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "fai"
                                                           4)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (replace
                                                                 -7)
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     1
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -2
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (expand
                                                                   "member"
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "member"
                                                                     5)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst
                                         7
                                         "nth(apply_sub(del, P), i-1)"
                                         "i-1")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (rewrite "apply_sub_len" 1)
                                            (("1"
                                              (expand "length" -1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "apply_sub_nth" 1)
                                            (("1"
                                              (expand "nth" -2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -2)
                                                  (("1"
                                                    (expand
                                                     "apply_sub"
                                                     1)
                                                    (("1"
                                                      (expand
                                                       "member"
                                                       1)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (expand
                                                           "member"
                                                           -3)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (expand
                                                               "inst_ptc?"
                                                               -4)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-4
                                                                      8))
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -3
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (lemma
                                                                   "subs_no_effect_t")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "del"
                                                                     "null * X")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide-all-but
                                                                         (1
                                                                          5))
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "length" -1 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (rewrite "apply_sub_nth" 1)
                                            (("1"
                                              (expand "nth" -2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -2 :dir rl)
                                                  (("1"
                                                    (hide -5)
                                                    (("1"
                                                      (expand
                                                       "member"
                                                       -3)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (hide-all-but
                                                           (-1 -4 7))
                                                          (("1"
                                                            (expand
                                                             "inst_ptc?"
                                                             -2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -6)
                                                          (("2"
                                                            (expand
                                                             "inst_ptc?"
                                                             1)
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (hide-all-but
                                                                 (-4
                                                                  -5
                                                                  1))
                                                                (("1"
                                                                  (expand
                                                                   "subset?"
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "apply_sub"
                                                                     1)
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (use
                                                                         "vars_subs_t")
                                                                        (("1"
                                                                          (expand
                                                                           "subset?"
                                                                           -1)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "x")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 ("member"
                                                                                  "union")
                                                                                 -1)
                                                                                (("1"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (reveal
                                                                                     -8)
                                                                                    (("1"
                                                                                      (use
                                                                                       "inst_step_match_img")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -6)
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "subset?"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "match_condition2?")
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "inst_ptc?"
                                                                                     -3)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "subset?"
                                                                                         -3)
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "apply_sub"
                                                                 1)
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (use
                                                                     "subs_no_effect_t")
                                                                    (("2"
                                                                      (prop)
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (1
                                                                          4))
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "length" -1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (skeep)
                                            (("4"
                                              (inst -7 "j+1")
                                              (("4"
                                                (assert)
                                                (("4"
                                                  (expand "nth" 3)
                                                  (("4"
                                                    (rewrite
                                                     "apply_sub_nth")
                                                    (("1"
                                                      (expand
                                                       "apply_sub"
                                                       -2)
                                                      (("1"
                                                        (expand
                                                         "vars"
                                                         3)
                                                        (("1"
                                                          (expand
                                                           "vars"
                                                           -2)
                                                          (("1"
                                                            (expand
                                                             ("member"
                                                              "union")
                                                             -2)
                                                            (("1"
                                                              (expand
                                                               ("member"
                                                                "union")
                                                               3)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (lemma
                                                                   "vars_subs_t")
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (inst?
                                                                       -2)
                                                                      (("1"
                                                                        (expand
                                                                         "subset?"
                                                                         -2)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               ("member"
                                                                                "union")
                                                                               -2)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (expand
                                                                         "subset?")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               ("member"
                                                                                "union")
                                                                               -2)
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "length"
                                                       -3)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil)
                                         ("3"
                                          (assert)
                                          (("3"
                                            (rewrite "apply_sub_len")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (expand "length" -1)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "vars_args")
                                  (("2"
                                    (hide -2 5)
                                    (("2"
                                      (skolem -3 "t1")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (rewrite "apply_sub_rhs")
                                          (("2"
                                            (skolem -3 "s1")
                                            (("2"
                                              (prop)
                                              (("2"
                                                (replace -4 -5)
                                                (("2"
                                                  (use
                                                   "apply_sub_elim_var_t")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 6)
                                (("2"
                                  (rewrite "vars_args")
                                  (("2"
                                    (rewrite "vars_args")
                                    (("2"
                                      (skolem -2 "t_del")
                                      (("2"
                                        (prop)
                                        (("2"
                                          (rewrite "apply_sub_rhs")
                                          (("2"
                                            (skolem -2 "s1")
                                            (("2"
                                              (inst 1 "s1")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (expand "rhs")
                                                    (("1"
                                                      (expand
                                                       "sec_proj"
                                                       1)
                                                      (("1"
                                                        (expand
                                                         "member"
                                                         1)
                                                        (("1"
                                                          (prop)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -3 -4)
                                                    (("2"
                                                      (use
                                                       "vars_subs_t")
                                                      (("2"
                                                        (expand
                                                         "subset?")
                                                        (("2"
                                                          (inst -1 "X")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               ("member"
                                                                "union")
                                                               -1)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 4)
                        (("2" (use "inst_step_dom_img")
                          (("2" (assert)
                            (("2" (replace -3)
                              (("2"
                                (case
                                 "(dom(del) = emptyset AND img(del) = emptyset)")
                                (("1"
                                  (hide -2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (replace -2 -3)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case
                                   "(var?(s) AND dom(del) = singleton(V(s)) AND vars(img(del)) = vars(t))")
                                  (("1"
                                    (hide -2 1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "match_condition2?" -6)
                                        (("1"
                                          (inst -6 "V(s)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (skolem -1 ("up" "i"))
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (case "i = 0")
                                                  (("1"
                                                    (expand "nth" -3)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide -6)
                                                        (("1"
                                                          (replace -3)
                                                          (("1"
                                                            (expand
                                                             "inst_ptc?"
                                                             -5)
                                                            (("1"
                                                              (expand
                                                               "subset?"
                                                               -5)
                                                              (("1"
                                                                (inst
                                                                 -5
                                                                 "X")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst -5 "0")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "nth"
                                                         2)
                                                        (("2"
                                                          (expand
                                                           "member"
                                                           2)
                                                          (("2"
                                                            (expand
                                                             "vars"
                                                             2)
                                                            (("2"
                                                              (expand
                                                               "union"
                                                               2)
                                                              (("2"
                                                                (prop)
                                                                (("2"
                                                                  (expand
                                                                   "member"
                                                                   3)
                                                                  (("2"
                                                                    (expand
                                                                     "vars"
                                                                     3)
                                                                    (("2"
                                                                      (expand
                                                                       "singleton"
                                                                       3)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "rhs" 1)
                                              (("2"
                                                (expand "sec_proj" 1)
                                                (("2"
                                                  (expand "vars" 1)
                                                  (("2"
                                                    (expand
                                                     ("member" "union")
                                                     1)
                                                    (("2"
                                                      (prop)
                                                      (("2"
                                                        (expand
                                                         "vars"
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             ("member"
                                                              "singleton")
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (use
                                               "inst_step_dom_PV_aux")
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (expand "del" -4)
                                                  (("3"
                                                    (replace -4 -1)
                                                    (("3"
                                                      (hide-all-but
                                                       (-1 -2))
                                                      (("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (split -1)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil)
                                     ("3"
                                      (flatten)
                                      (("3"
                                        (expand "match_condition2?" -6)
                                        (("3"
                                          (inst -6 "X")
                                          (("3"
                                            (split -6)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (skolem -1 ("up" "i"))
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (case "i = 0")
                                                    (("1"
                                                      (hide -6)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         -3)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -3)
                                                              (("1"
                                                                (expand
                                                                 "member"
                                                                 -4)
                                                                (("1"
                                                                  (split
                                                                   -4)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-1
                                                                      -5
                                                                      4))
                                                                    (("1"
                                                                      (expand
                                                                       "inst_ptc?"
                                                                       -2)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (expand
                                                                           "subset?"
                                                                           -2)
                                                                          (("1"
                                                                            (inst
                                                                             -2
                                                                             "X")
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (reveal
                                                                     1)
                                                                    (("2"
                                                                      (use
                                                                       "inst_step_chooses_rhs")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (reveal
                                                                           -5
                                                                           -6
                                                                           -7)
                                                                          (("2"
                                                                            (replace
                                                                             -1)
                                                                            (("2"
                                                                              (replace
                                                                               -2)
                                                                              (("2"
                                                                                (replace
                                                                                 -3)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (split
                                                                                     -2)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("3"
                                                                                      (replace
                                                                                       -3
                                                                                       -1
                                                                                       :dir
                                                                                       rl)
                                                                                      (("3"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          7))
                                                                                        (("3"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide
                                                       -1
                                                       -2
                                                       -3
                                                       -4)
                                                      (("2"
                                                        (inst -1 "0")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "nth"
                                                             2)
                                                            (("2"
                                                              (use
                                                               "inst_step_img")
                                                              (("2"
                                                                (hide-all-but
                                                                 (-1
                                                                  -5
                                                                  2))
                                                                (("2"
                                                                  (expand
                                                                   "subset?"
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "del"
                                                                     -2)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2 3)
                                              (("2"
                                                (expand "rhs" 1)
                                                (("2"
                                                  (expand "sec_proj" 1)
                                                  (("2"
                                                    (expand "vars" 1)
                                                    (("2"
                                                      (expand
                                                       ("member"
                                                        "union")
                                                       1)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (replace -3)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (inst_step_chooses_rhs formula-decl nil nominal_AC_inst_step nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (inst_step_img formula-decl nil nominal_AC_inst_step nil)
    (inst_step_dom_PV_aux formula-decl nil nominal_AC_inst_step nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt
     nil)
    (singleton? const-decl "bool" sets nil)
    (inst_step_dom_img formula-decl nil nominal_AC_inst_step nil)
    (member def-decl "bool" list_props nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (vars_subs_t formula-decl nil nominal_AC_substitution nil)
    (union const-decl "set" sets nil)
    (inst_step_match_img formula-decl nil nominal_AC_inst_step nil)
    (apply_sub_nth formula-decl nil nominal_AC_unification nil)
    (apply_sub const-decl "unif_pair" nominal_AC_unification nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]"
       nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]"
     nominal_AC_term_adt nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (member const-decl "bool" nominal_AC_unification nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (inst_step_inst_ptc_dom formula-decl nil nominal_AC_inst_step nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (subset? const-decl "bool" sets nil)
    (inst_ptc? const-decl "bool" aux_nominal_AC_unification nil)
    (apply_sub_elim_var_t formula-decl nil nominal_AC_substitution nil)
    (apply_sub_rhs formula-decl nil nominal_AC_unification nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    nil (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil) (atom type-eq-decl nil atoms nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (inst_step_match_condition_cdr 0
  (inst_step_match_condition_cdr-2 nil 3883561309
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (expand "match_condition?")
          (("" (skeep)
            (("" (inst -2 "X")
              (("" (prop)
                (("1" (skolem -1 ("up" "i"))
                  (("1" (flatten)
                    (("1" (case "i = 0")
                      (("1" (expand "nth" -3)
                        (("1" (assert)
                          (("1" (expand "inst_ptc?" -5)
                            (("1" (flatten)
                              (("1"
                                (expand "member" -4)
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (hide 2)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst 3 "up" "i-1")
                        (("1" (expand "length" -1)
                          (("1" (assert)
                            (("1" (expand "nth" -2)
                              (("1"
                                (assert)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst -5 "j+1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "nth" 2)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "rhs")
                  (("2" (expand "sec_proj" 1)
                    (("2" (expand "vars" 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((match_condition? const-decl "bool" aux_nominal_AC_unification nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (DS const-decl "list[atom]" atoms nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (member const-decl "bool" nominal_AC_unification nil)
    (inst_ptc? const-decl "bool" aux_nominal_AC_unification nil)
    (nth def-decl "T" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (i skolem-const-decl "nat" nominal_AC_inst_step nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil)
  (inst_step_match_condition_cdr-1 nil 3883330326
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (expand "match_condition2?")
          (("" (skeep)
            (("" (inst -2 "X")
              (("" (prop)
                (("1" (skolem -1 ("up" "i"))
                  (("1" (flatten)
                    (("1" (case "i = 0")
                      (("1" (expand "nth" -3)
                        (("1" (assert)
                          (("1" (expand "inst_ptc?" -5)
                            (("1" (flatten)
                              (("1"
                                (expand "member" -4)
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (hide 2)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst 3 "up" "i-1")
                        (("1" (expand "length" -1)
                          (("1" (assert)
                            (("1" (expand "nth" -2)
                              (("1"
                                (assert)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst -5 "j+1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "nth" 2)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "rhs")
                  (("2" (expand "sec_proj" 1)
                    (("2" (expand "vars" 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (rhs const-decl "args" nominal_AC_unification nil) nil
    (DS const-decl "list[atom]" atoms nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (member const-decl "bool" nominal_AC_unification nil)
    (inst_ptc? const-decl "bool" aux_nominal_AC_unification nil)
    (nth def-decl "T" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (inst_step_unifies_not_fail_aux 0
  (inst_step_unifies_not_fail_aux-1 nil 3888322899
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (expand "inst_step" -5)
          (("" (split -5)
            (("1" (flatten)
              (("1" (split -2)
                (("1" (flatten)
                  (("1" (split -1)
                    (("1" (propax) nil nil)
                     ("2"
                      (name-replace "sig"
                       "cons((V(s), ext(reverse(p(s)))(t)), null)")
                      (("2" (use "nominal_AC_fresh_subs?_complete2")
                        (("2" (assert)
                          (("2" (assert)
                            (("2" (reveal -3)
                              (("2"
                                (lemma "unifies_is_equal_sub")
                                (("2"
                                  (inst -1 "Del" " del" "t" "s")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "unifies?")
                                      (("2"
                                        (rewrite "equal?_sym")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split -1)
                    (("1" (flatten)
                      (("1" (split -2)
                        (("1" (propax) nil nil)
                         ("2" (use "nominal_AC_fresh_subs?_complete2")
                          (("2" (assert)
                            (("2" (assert)
                              (("2"
                                (name-replace
                                 "sig"
                                 "cons((V(t), ext(reverse(p(t)))(s)), null)")
                                (("2"
                                  (reveal -1)
                                  (("2"
                                    (use "unifies_is_equal_sub")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split -1)
                        (("1" (propax) nil nil)
                         ("2" (lemma "unifies?_impossible3")
                          (("2" (inst -1 "Del" "PV" "s" "del" "t")
                            (("2" (assert)
                              (("2"
                                (split -1)
                                (("1" (propax) nil nil)
                                 ("2" (propax) nil nil)
                                 ("3" (propax) nil nil)
                                 ("4"
                                  (expand "well_formed?" -5)
                                  (("4" (flatten) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (split -1)
                (("1" (flatten)
                  (("1" (split -2)
                    (("1" (flatten)
                      (("1" (split -1)
                        (("1" (propax) nil nil)
                         ("2" (use "nominal_AC_fresh_subs?_complete2")
                          (("2" (assert)
                            (("2" (assert)
                              (("2"
                                (name-replace
                                 "sig"
                                 "cons((V(t), ext(reverse(p(t)))(s)), null)")
                                (("2"
                                  (use "unifies_is_equal_sub")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "unifies?_impossible4")
                      (("2" (inst?)
                        (("2" (inst -1 "PV")
                          (("2" (assert)
                            (("2" (split -1)
                              (("1" (propax) nil nil)
                               ("2"
                                (expand "well_formed?" -5)
                                (("2" (flatten) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (unifies?_impossible4 formula-decl nil nominal_AC_unification nil)
    (unifies?_impossible3 formula-decl nil nominal_AC_unification nil)
    (well_formed? const-decl "bool" nominal_AC_unification nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]"
     nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt
     nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (reverse def-decl "list[T]" list_props nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (unifies_is_equal_sub formula-decl nil nominal_AC_unification nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (nominal_AC_fresh_subs?_complete2 formula-decl nil
     nominal_AC_fresh_subs nil))
   shostak))
 (inst_step_unifies_equal_sub 0
  (inst_step_unifies_equal_sub-1 nil 3888335503
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "sig" "inst_step(PV, G, t, s)`2")
        (("" (reveal -1)
          (("" (prop)
            (("" (expand "inst_step" -1)
              (("" (lift-if)
                (("" (split -1)
                  (("1" (flatten)
                    (("1" (split -2)
                      (("1" (flatten)
                        (("1" (split -1)
                          (("1" (flatten)
                            (("1" (lemma "unifies_is_equal_sub")
                              (("1"
                                (inst -1 "Del" "del" "t" "s")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "unifies?")
                                    (("1"
                                      (rewrite "equal?_sym" 1)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (replace -1)
                              (("2"
                                (replace -1 4 :dir rl)
                                (("2"
                                  (rewrite "append_null")
                                  (("2" (use "equal_sub_ref") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split -1)
                          (("1" (flatten)
                            (("1" (split -2)
                              (("1"
                                (flatten)
                                (("1"
                                  (lemma "unifies_is_equal_sub")
                                  (("1"
                                    (inst -1 "Del" "del" "s" "t")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (replace -1 :dir rl)
                                    (("2"
                                      (rewrite "append_null")
                                      (("2"
                                        (use "equal_sub_ref")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (replace -1 :dir rl)
                              (("2"
                                (rewrite "append_null")
                                (("2" (use "equal_sub_ref") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split -1)
                      (("1" (flatten)
                        (("1" (split -2)
                          (("1" (flatten)
                            (("1" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (lemma "unifies_is_equal_sub")
                                  (("1"
                                    (inst -1 "Del" "del" "s" "t")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (replace -1 :dir rl)
                                  (("2"
                                    (rewrite "append_null")
                                    (("2"
                                      (use "equal_sub_ref")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (replace -1 :dir rl)
                              (("2"
                                (rewrite "append_null")
                                (("2" (use "equal_sub_ref") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (replace -1 :dir rl)
                          (("2" (rewrite "append_null")
                            (("2" (use "equal_sub_ref") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unifies_is_equal_sub formula-decl nil nominal_AC_unification nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (append_null formula-decl nil list_props nil)
    (equal_sub_ref formula-decl nil nominal_AC_substitution nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (inst_step_nominal_AC_fresh_subs 0
  (inst_step_nominal_AC_fresh_subs-1 nil 3888336439
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "G1" "inst_step(PV, G, t, s)`1")
        (("" (prop)
          (("" (reveal -1)
            (("" (expand "inst_step" -1)
              (("" (lift-if)
                (("" (split -1)
                  (("1" (flatten)
                    (("1" (split -2)
                      (("1" (flatten)
                        (("1" (split -1)
                          (("1" (flatten)
                            (("1"
                              (name-replace "sig"
                               "cons((V(s), ext(reverse(p(s)))(t)), null)")
                              (("1"
                                (replace -2 3 :dir rl)
                                (("1"
                                  (rewrite
                                   "nominal_AC_fresh_subs_append_context")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (use
                                       "nominal_AC_fresh_subs?_complete2")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (reveal -4)
                                          (("1"
                                            (use
                                             "inst_step_unifies_equal_sub")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "inst_step" -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (expand "sig")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split -1)
                          (("1" (flatten)
                            (("1" (split -2)
                              (("1"
                                (flatten)
                                (("1"
                                  (name-replace
                                   "sig"
                                   "cons((V(t), ext(reverse(p(t)))(s)), null)")
                                  (("1"
                                    (reveal -1)
                                    (("1"
                                      (replace -3 4 :dir rl)
                                      (("1"
                                        (rewrite
                                         "nominal_AC_fresh_subs_append_context")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (use
                                             "nominal_AC_fresh_subs?_complete2")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (reveal -4)
                                                (("1"
                                                  (lemma
                                                   "inst_step_unifies_equal_sub")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "G"
                                                       "PV")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "inst_step"
                                                           -1)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (replace -1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (replace -3 3 :dir rl)
                                  (("1"
                                    (rewrite
                                     "nominal_AC_fresh_subs_append_context"
                                     3)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "match_condition?" -7)
                                        (("1"
                                          (inst -7 "V(s)")
                                          (("1"
                                            (expand "rhs" -7)
                                            (("1"
                                              (expand "sec_proj" -7)
                                              (("1"
                                                (expand "vars" -7)
                                                (("1"
                                                  (case
                                                   "member(V(s), PV)")
                                                  (("1"
                                                    (hide -8 1 2)
                                                    (("1"
                                                      (expand
                                                       "unifies?"
                                                       -7)
                                                      (("1"
                                                        (case
                                                         "subs(del)(t) = t AND subs(del)(s) = s")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (replace
                                                               -2)
                                                              (("1"
                                                                (expand
                                                                 "equal?"
                                                                 -9)
                                                                (("1"
                                                                  (rewrite
                                                                   "nominal_AC_fresh_subs_character"
                                                                   1)
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (lemma
                                                                       "fc_member")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "V(t)"
                                                                         "ax`2"
                                                                         "ax`1"
                                                                         "DS(p(t), p(s))")
                                                                        (("1"
                                                                          (case
                                                                           "ax = (ax`1, ax`2)")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (replace
                                                                               -13)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (replace
                                                                                   -3)
                                                                                  (("1"
                                                                                    (case
                                                                                     "subs(del)((: :) * V(t)) = null * V(t)")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "fresh"
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           ("act"
                                                                                            "reverse"))
                                                                                          (("1"
                                                                                            (inst
                                                                                             -13
                                                                                             "ax`1")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "DS_member"
                                                                                               -3
                                                                                               :dir
                                                                                               rl)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member"
                                                                                                 -3)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "disjoint?"
                                                                                       -13)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "empty?"
                                                                                         -13)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -13
                                                                                           "V(t)")
                                                                                          (("2"
                                                                                            (replace
                                                                                             -8)
                                                                                            (("2"
                                                                                              (expand
                                                                                               ("member"
                                                                                                "intersection")
                                                                                               2)
                                                                                              (("2"
                                                                                                (prop)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   ("member"
                                                                                                    "dom")
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "subs"
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (decompose-equality
                                                                             1)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-1
                                                            -2
                                                            -3
                                                            -5
                                                            -8
                                                            1))
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (use
                                                               "subs_no_effect_t")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "disjoint?")
                                                                  (("1"
                                                                    (expand
                                                                     "empty?")
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (use
                                                               "subs_no_effect_t")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "disjoint?")
                                                                  (("2"
                                                                    (expand
                                                                     "empty?")
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (split -9)
                                                      (("1"
                                                        (skolem
                                                         -1
                                                         ("up" "i"))
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (case
                                                             "i = 0")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   -3)
                                                                  (("1"
                                                                    (hide
                                                                     -2)
                                                                    (("1"
                                                                      (hide
                                                                       -5)
                                                                      (("1"
                                                                        (expand
                                                                         "inst_ptc?"
                                                                         -4)
                                                                        (("1"
                                                                          (decompose-equality
                                                                           -2)
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (replace
                                                                               -2)
                                                                              (("1"
                                                                                (expand
                                                                                 "vars"
                                                                                 -5)
                                                                                (("1"
                                                                                  (replace
                                                                                   -8)
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (-5
                                                                                      1))
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               -5
                                                               "0")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "nth"
                                                                   2)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         ("member"
                                                          "union")
                                                         1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (replace -1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split -1)
                      (("1" (flatten)
                        (("1" (split -2)
                          (("1" (flatten)
                            (("1" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (name-replace
                                   "sig"
                                   "cons((V(t), ext(reverse(p(t)))(s)), null)")
                                  (("1"
                                    (reveal -1)
                                    (("1"
                                      (replace -3 4 :dir rl)
                                      (("1"
                                        (rewrite
                                         "nominal_AC_fresh_subs_append_context")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (lemma
                                             "nominal_AC_fresh_subs?_complete2")
                                            (("1"
                                              (inst
                                               -1
                                               "Del"
                                               "G"
                                               "del"
                                               "sig")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (reveal -3)
                                                    (("1"
                                                      (use
                                                       "inst_step_unifies_equal_sub")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "inst_step"
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (replace -1 5 :dir rl)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (replace -1) (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (replace -1) (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]"
     nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt
     nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (reverse def-decl "list[T]" list_props nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (nominal_AC_fresh_subs? def-decl "[fresh_context, bool]"
     nominal_AC_fresh_subs nil)
    (nominal_AC_fresh_subs_append_context formula-decl nil
     nominal_AC_fresh_subs nil)
    (nominal_AC_fresh_subs?_complete2 formula-decl nil
     nominal_AC_fresh_subs nil)
    (sig skolem-const-decl "(cons?[[variable,
        nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]])"
         nominal_AC_inst_step nil)
    (inst_step_unifies_equal_sub formula-decl nil nominal_AC_inst_step
     nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (member const-decl "bool" sets nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nominal_AC_fresh_subs_character formula-decl nil
     nominal_AC_fresh_subs nil)
    (fc_member formula-decl nil nominal_AC_freshness nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (empty? const-decl "bool" sets nil) (act def-decl "atom" atoms nil)
    (DS_member formula-decl nil atoms nil)
    (ax skolem-const-decl "[atom, variable]" nominal_AC_inst_step nil)
    (s skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]"
     nominal_AC_inst_step nil)
    (t skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]"
     nominal_AC_inst_step nil)
    (ds const-decl "set[atom]" atoms nil)
    (fresh def-decl "bool" nominal_AC_freshness nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]"
       nominal_AC_term_adt nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" nominal_AC_unification nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (inst_ptc? const-decl "bool" aux_nominal_AC_unification nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (match_condition? const-decl "bool" aux_nominal_AC_unification nil)
    (DS const-decl "list[atom]" atoms nil)
    (fc def-decl "fresh_context" nominal_AC_freshness nil)
    (every adt-def-decl "boolean" list_adt nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (inst_step_fail 0
  (inst_step_fail-1 nil 3882609581
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" 1)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten)
                  (("1" (expand "inst_step" -3)
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (flatten)
                  (("2" (name-replace "t" "car(P)`1")
                    (("1" (name-replace "s" "car(P)`2")
                      (("1"
                        (name-replace "G1" "inst_step(PV, G, t, s)`1")
                        (("1"
                          (name-replace "del"
                           "inst_step(PV, G, t, s)`2")
                          (("1"
                            (name-replace "skp"
                             "inst_step(PV, G, t, s)`3")
                            (("1"
                              (name-replace "fai"
                               "inst_step(PV, G, t, s)`4")
                              (("1"
                                (reveal -1 -2 -3 -4 -5 -6)
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "inst_step" -9)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -5)
                                        (("1"
                                          (replace -6)
                                          (("1"
                                            (inst -7 "cdr(P)")
                                            (("1"
                                              (prop)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "inst_step" -8)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -3)
                                        (("2"
                                          (replace -4)
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (replace -2)
                                              (("2"
                                                (inst
                                                 -5
                                                 "apply_sub(del, cdr(P))")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "apply_sub_len")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step1_no_effect 0
  (inst_step1_no_effect-1 nil 3882710844
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" 1 1)
            (("" (lift-if)
              (("" (split 1)
                (("1" (prop) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (name-replace "t" "car(P)`1")
                    (("1" (name-replace "s" "car(P)`2")
                      (("1"
                        (name-replace "G1" "inst_step(PV, G, t, s)`1")
                        (("1"
                          (name-replace "del"
                           "inst_step(PV, G, t, s)`2")
                          (("1"
                            (name-replace "skp"
                             "inst_step(PV, G, t, s)`3")
                            (("1"
                              (name-replace "fai"
                               "inst_step(PV, G, t, s)`4")
                              (("1"
                                (reveal -1 -2 -3 -4 -5 -6)
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "inst_step" 1)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (expand "inst_step" 1 2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (inst -7 "cdr(P)")
                                        (("2"
                                          (expand "length" -7 2)
                                          (("2" (inst?) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "inst_step" 2 2)
                                    (("3"
                                      (lift-if)
                                      (("3"
                                        (assert)
                                        (("3"
                                          (replace -3)
                                          (("3"
                                            (replace -4)
                                            (("3"
                                              (replace -2)
                                              (("3"
                                                (replace -1)
                                                (("3"
                                                  (inst
                                                   -5
                                                   "apply_sub(del, cdr(P))")
                                                  (("3"
                                                    (prop)
                                                    (("1"
                                                      (inst?)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (rewrite
                                                       "apply_sub_len")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (append def-decl "list[T]" list_props nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step1_no_effect_cor 0
  (inst_step1_no_effect_cor-1 nil 3882711145
   ("" (skeep) (("" (use "inst_step1_no_effect") nil nil)) nil)
   ((sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (inst_step1_no_effect formula-decl nil nominal_AC_inst_step nil))
   shostak))
 (inst_step1_no_effect_cor2 0
  (inst_step1_no_effect_cor2-1 nil 3882711164
   ("" (skeep) (("" (use "inst_step1_no_effect") nil nil)) nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (inst_step1_no_effect formula-decl nil nominal_AC_inst_step nil))
   shostak))
 (inst_step3_no_effect 0
  (inst_step3_no_effect-1 nil 3882538498
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (hide -1)
            (("" (expand "inst_step" 1 1)
              (("" (lift-if)
                (("" (split 1)
                  (("1" (flatten) (("1" (grind) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (name-replace "t" "car(P)`1")
                      (("1" (name-replace "s" "car(P)`2")
                        (("1"
                          (name-replace "G1"
                           "inst_step(PV, G, t, s)`1")
                          (("1"
                            (name-replace "del"
                             "inst_step(PV, G, t, s)`2")
                            (("1"
                              (name-replace "skp"
                               "inst_step(PV, G, t, s)`3")
                              (("1"
                                (name-replace
                                 "fai"
                                 "inst_step(PV, G, t, s)`4")
                                (("1"
                                  (prop)
                                  (("1"
                                    (reveal -1 -2 -3 -4 -5 -6)
                                    (("1"
                                      (expand "inst_step" 1)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (reveal -1 -2 -3 -4 -5 -6)
                                    (("2"
                                      (expand "inst_step" 1 2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (reveal -7)
                                          (("2"
                                            (inst -1 "cdr(P)")
                                            (("2"
                                              (expand "length" -1 2)
                                              (("2" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (reveal -1 -2 -3 -4 -5 -6)
                                    (("3"
                                      (expand "inst_step" 2 2)
                                      (("3"
                                        (assert)
                                        (("3"
                                          (replace -5)
                                          (("3"
                                            (replace -6)
                                            (("3"
                                              (replace -3)
                                              (("3"
                                                (reveal -7)
                                                (("3"
                                                  (inst
                                                   -1
                                                   "apply_sub(del, cdr(P))")
                                                  (("3"
                                                    (rewrite
                                                     "apply_sub_len")
                                                    (("3"
                                                      (expand
                                                       "length"
                                                       -1
                                                       2)
                                                      (("3"
                                                        (replace -5)
                                                        (("3"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (append def-decl "list[T]" list_props nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step3_no_effect_cor 0
  (inst_step3_no_effect_cor-1 nil 3882538880
   ("" (skeep) (("" (use "inst_step3_no_effect") nil nil)) nil)
   ((sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (inst_step3_no_effect formula-decl nil nominal_AC_inst_step nil))
   shostak))
 (inst_step_sub_append 0
  (inst_step_sub_append-1 nil 3882539294
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" 1 1)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten)
                  (("1" (expand "inst_step" 1)
                    (("1" (assert)
                      (("1" (expand "append" 1)
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (name-replace "t" "car(P)`1")
                    (("1" (name-replace "s" "car(P)`2")
                      (("1"
                        (name-replace "G1" "inst_step(PV, G, t, s)`1")
                        (("1"
                          (name-replace "del"
                           "inst_step(PV, G, t, s)`2")
                          (("1"
                            (name-replace "skp"
                             "inst_step(PV, G, t, s)`3")
                            (("1"
                              (name-replace "fai"
                               "inst_step(PV, G, t, s)`4")
                              (("1"
                                (reveal -1 -2 -3 -4 -5 -6)
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "inst_step" 1 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "append" 1)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "inst_step" 1 2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -5)
                                        (("2"
                                          (replace -6)
                                          (("2"
                                            (inst -7 "cdr(P)")
                                            (("2"
                                              (expand "length" -7 2)
                                              (("2"
                                                (assert)
                                                (("2" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "inst_step" 2 2)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (replace -4)
                                        (("3"
                                          (replace -3)
                                          (("3"
                                            (replace -1)
                                            (("3"
                                              (rewrite "append_null")
                                              (("3"
                                                (replace -2)
                                                (("3"
                                                  (inst
                                                   -5
                                                   "apply_sub(del, cdr(P))")
                                                  (("3"
                                                    (rewrite
                                                     "apply_sub_len")
                                                    (("3"
                                                      (expand
                                                       "length"
                                                       -5
                                                       2)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (inst
                                                           -5
                                                           "G1"
                                                           "PV"
                                                           "apply_sub(del, Ps)"
                                                           "del")
                                                          (("3"
                                                            (replace
                                                             -5)
                                                            (("3"
                                                              (hide -5)
                                                              (("3"
                                                                (reveal
                                                                 -3)
                                                                (("3"
                                                                  (inst
                                                                   -1
                                                                   "apply_sub(del, cdr(P))")
                                                                  (("3"
                                                                    (rewrite
                                                                     "apply_sub_len")
                                                                    (("3"
                                                                      (expand
                                                                       "length"
                                                                       -1
                                                                       2)
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (inst
                                                                           -1
                                                                           "G1"
                                                                           "PV"
                                                                           "apply_sub(del, Ps)"
                                                                           "append(del, sigma)")
                                                                          (("3"
                                                                            (replace
                                                                             -1)
                                                                            (("3"
                                                                              (rewrite
                                                                               "append_assoc")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (append_null formula-decl nil list_props nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (append_assoc formula-decl nil list_props nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (append def-decl "list[T]" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step_sub_append_cor 0
  (inst_step_sub_append_cor-1 nil 3882540285
   ("" (skeep)
    (("" (use "inst_step_sub_append") (("" (assert) nil nil)) nil))
    nil)
   ((inst_step_sub_append formula-decl nil nominal_AC_inst_step nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (inst_step4_no_effect 0
  (inst_step4_no_effect-1 nil 3882604152
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" 1 1)
            (("" (lift-if)
              (("" (split 1)
                (("1" (grind) nil nil)
                 ("2" (flatten)
                  (("2" (name-replace "t" "car(P)`1")
                    (("1" (name-replace "s" "car(P)`2")
                      (("1"
                        (name-replace "G1" "inst_step(PV, G, t, s)`1")
                        (("1"
                          (name-replace "del"
                           "inst_step(PV, G, t, s)`2")
                          (("1"
                            (name-replace "skp"
                             "inst_step(PV, G, t, s)`3")
                            (("1"
                              (name-replace "fai"
                               "inst_step(PV, G, t, s)`4")
                              (("1"
                                (reveal -1 -2 -3 -4 -5 -6)
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "inst_step" 1)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (expand "inst_step" 1 2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -5)
                                        (("2"
                                          (replace -6)
                                          (("2"
                                            (inst -7 "cdr(P)")
                                            (("2"
                                              (prop)
                                              (("1" (inst?) nil nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "inst_step" 2 2)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (replace -3)
                                        (("3"
                                          (replace -4)
                                          (("3"
                                            (replace -2)
                                            (("3"
                                              (replace -1)
                                              (("3"
                                                (inst
                                                 -5
                                                 "apply_sub(del, cdr(P))")
                                                (("3"
                                                  (prop)
                                                  (("1"
                                                    (inst?)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "apply_sub_len")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step4_no_effect_cor 0
  (inst_step4_no_effect_cor-1 nil 3882604403
   ("" (skeep) (("" (use "inst_step4_no_effect") nil nil)) nil)
   ((sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (inst_step4_no_effect formula-decl nil nominal_AC_inst_step nil))
   shostak))
 (inst_step4_no_effect2 0
  (inst_step4_no_effect2-1 nil 3882606693
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" 1 1)
            (("" (lift-if)
              (("" (split 1)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (name-replace "t" "car(P)`1")
                    (("1" (name-replace "s" "car(P)`2")
                      (("1"
                        (name-replace "G1" "inst_step(PV, G, t, s)`1")
                        (("1"
                          (name-replace "del"
                           "inst_step(PV, G, t, s)`2")
                          (("1"
                            (name-replace "skp"
                             "inst_step(PV, G, t, s)`3")
                            (("1"
                              (name-replace "fai"
                               "inst_step(PV, G, t, s)`4")
                              (("1"
                                (reveal -1 -2 -3 -4 -5 -6)
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "inst_step" 1)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (expand "inst_step" 1 2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -5)
                                        (("2"
                                          (replace -6)
                                          (("2"
                                            (inst -7 "cdr(P)")
                                            (("2"
                                              (prop)
                                              (("1" (inst?) nil nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "inst_step" 2 2)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (replace -3)
                                        (("3"
                                          (replace -4)
                                          (("3"
                                            (replace -1)
                                            (("3"
                                              (replace -2)
                                              (("3"
                                                (inst
                                                 -5
                                                 "apply_sub(del, cdr(P))")
                                                (("3"
                                                  (prop)
                                                  (("1"
                                                    (inst?)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "apply_sub_len")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step4_no_effect2_cor 0
  (inst_step4_no_effect2_cor-1 nil 3882607327
   ("" (skeep) (("" (use "inst_step4_no_effect2") nil nil)) nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (inst_step4_no_effect2 formula-decl nil nominal_AC_inst_step nil))
   shostak))
 (inst_step2_no_effect 0
  (inst_step2_no_effect-1 nil 3882605191
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" 1 1)
            (("" (lift-if)
              (("" (split)
                (("1" (grind) nil nil)
                 ("2" (flatten)
                  (("2" (name-replace "t" "car(P)`1")
                    (("1" (name-replace "s" "car(P)`2")
                      (("1"
                        (name-replace "G1" "inst_step(PV, G, t, s)`1")
                        (("1"
                          (name-replace "del"
                           "inst_step(PV, G, t, s)`2")
                          (("1"
                            (name-replace "skp"
                             "inst_step(PV, G, t, s)`3")
                            (("1"
                              (name-replace "fai"
                               "inst_step(PV, G, t, s)`4")
                              (("1"
                                (reveal -1 -2 -3 -4 -5 -6)
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "inst_step" 1)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (expand "inst_step" 1 2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -5)
                                        (("2"
                                          (replace -6)
                                          (("2"
                                            (inst -7 "cdr(P)")
                                            (("2"
                                              (prop)
                                              (("1" (inst?) nil nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "inst_step" 2 2)
                                    (("3"
                                      (lift-if)
                                      (("3"
                                        (assert)
                                        (("3"
                                          (replace -3)
                                          (("3"
                                            (replace -4)
                                            (("3"
                                              (replace -2)
                                              (("3"
                                                (replace -1)
                                                (("3"
                                                  (inst
                                                   -5
                                                   "apply_sub(del, cdr(P))")
                                                  (("3"
                                                    (prop)
                                                    (("1"
                                                      (inst?)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (rewrite
                                                       "apply_sub_len")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (append def-decl "list[T]" list_props nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step2_no_effect_cor 0
  (inst_step2_no_effect_cor-1 nil 3882605614
   ("" (skeep) (("" (use "inst_step2_no_effect") nil nil)) nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (inst_step2_no_effect formula-decl nil nominal_AC_inst_step nil))
   shostak))
 (inst_step2_append 0
  (inst_step2_append-1 nil 3882603212
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" 2 1)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten)
                  (("1" (expand "inst_step" 1)
                    (("1" (assert)
                      (("1" (rewrite "apply_sub_null")
                        (("1" (expand "append" 1)
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (name-replace "t" "car(P)`1")
                    (("1" (name-replace "s" "car(P)`2")
                      (("1"
                        (name-replace "G1" "inst_step(PV, G, t, s)`1")
                        (("1"
                          (name-replace "del"
                           "inst_step(PV, G, t, s)`2")
                          (("1"
                            (name-replace "skp"
                             "inst_step(PV, G, t, s)`3")
                            (("1"
                              (name-replace "fai"
                               "inst_step(PV, G, t, s)`4")
                              (("1"
                                (prop)
                                (("1"
                                  (expand "fai" -1)
                                  (("1"
                                    (reveal -1 -2 -3 -4 -5 -6)
                                    (("1"
                                      (expand "inst_step" 3)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (reveal -1 -2 -3 -4 -5 -6)
                                  (("2"
                                    (expand "inst_step" 1 2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -5)
                                        (("2"
                                          (replace -6)
                                          (("2"
                                            (expand "inst_step" 1 3)
                                            (("2"
                                              (rewrite
                                               "inst_step3_no_effect_cor"
                                               1)
                                              (("2"
                                                (name-replace
                                                 "del2"
                                                 "inst_step(PV, G, cdr(P), null, null)`3")
                                                (("2"
                                                  (reveal -1)
                                                  (("2"
                                                    (inst -9 "cdr(P)")
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       -9
                                                       2)
                                                      (("2"
                                                        (inst
                                                         -9
                                                         "G"
                                                         "PV"
                                                         "cons((t, s), null)")
                                                        (("2"
                                                          (case
                                                           "inst_step(PV, G, cdr(P), null, null)`4")
                                                          (("1"
                                                            (expand
                                                             "inst_step"
                                                             4)
                                                            (("1"
                                                              (rewrite
                                                               "inst_step4_no_effect_cor"
                                                               4)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (prop)
                                                            (("2"
                                                              (replace
                                                               -2)
                                                              (("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (hide
                                                                   -1)
                                                                  (("2"
                                                                    (reveal
                                                                     -3)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "cdr(P)")
                                                                      (("2"
                                                                        (prop)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "G"
                                                                           "PV"
                                                                           "cons((t, s), Ps)")
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "append_assoc"
                                                                                 2)
                                                                                (("1"
                                                                                  (replace
                                                                                   -2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "apply_sub"
                                                                                     2
                                                                                     2)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "apply_sub"
                                                                                       2
                                                                                       3)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "append"
                                                                                         2
                                                                                         3)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "append"
                                                                                           2
                                                                                           3)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "apply_sub"
                                                                                             2
                                                                                             1)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (rewrite "append_null")
                                  (("3"
                                    (reveal -1 -2 -3 -4 -5 -6)
                                    (("3"
                                      (expand "inst_step" 2 2)
                                      (("3"
                                        (assert)
                                        (("3"
                                          (replace -5)
                                          (("3"
                                            (replace -6)
                                            (("3"
                                              (replace -3)
                                              (("3"
                                                (replace -4)
                                                (("3"
                                                  (rewrite
                                                   "append_null")
                                                  (("3"
                                                    (expand
                                                     "apply_sub"
                                                     2
                                                     4)
                                                    (("3"
                                                      (rewrite
                                                       "inst_step2_no_effect_cor")
                                                      (("3"
                                                        (rewrite
                                                         "inst_step2_no_effect_cor")
                                                        (("3"
                                                          (lemma
                                                           "inst_step2_no_effect_cor")
                                                          (("3"
                                                            (inst
                                                             -1
                                                             "G1"
                                                             "apply_sub(del, cdr(P))"
                                                             "PV"
                                                             "null"
                                                             "del")
                                                            (("3"
                                                              (replace
                                                               -1)
                                                              (("3"
                                                                (hide
                                                                 -1)
                                                                (("3"
                                                                  (expand
                                                                   "inst_step"
                                                                   2
                                                                   3)
                                                                  (("3"
                                                                    (replace
                                                                     -5)
                                                                    (("3"
                                                                      (replace
                                                                       -6)
                                                                      (("3"
                                                                        (replace
                                                                         -4)
                                                                        (("3"
                                                                          (replace
                                                                           -3)
                                                                          (("3"
                                                                            (rewrite
                                                                             "append_null")
                                                                            (("3"
                                                                              (expand
                                                                               "apply_sub"
                                                                               2
                                                                               6)
                                                                              (("3"
                                                                                (rewrite
                                                                                 "inst_step_sub_append_cor"
                                                                                 2)
                                                                                (("3"
                                                                                  (rewrite
                                                                                   "apply_sub_sub_append"
                                                                                   :dir
                                                                                   rl)
                                                                                  (("3"
                                                                                    (inst
                                                                                     -7
                                                                                     "apply_sub(del, cdr(P))")
                                                                                    (("3"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "inst_step"
                                                                                             5)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -6)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -7)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -5)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -4)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "apply_sub"
                                                                                                       5
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "append_null")
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "inst_step4_no_effect2_cor"
                                                                                                           5)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (rewrite
                                                                                         "apply_sub_len")
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((append_null formula-decl nil list_props nil)
    (inst_step2_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (apply_sub_sub_append formula-decl nil nominal_AC_unification nil)
    (inst_step4_no_effect2_cor formula-decl nil nominal_AC_inst_step
     nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (inst_step_sub_append_cor formula-decl nil nominal_AC_inst_step
     nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (inst_step3_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (inst_step4_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (append_assoc formula-decl nil list_props nil)
    (fai skolem-const-decl "bool" nominal_AC_inst_step nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (apply_sub_null formula-decl nil nominal_AC_unification nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (append def-decl "list[T]" list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step2_mem 0
  (inst_step2_mem-1 nil 3882602752
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" -2)
            (("" (lift-if)
              (("" (split)
                (("1" (expand "member" -1) (("1" (propax) nil nil))
                  nil)
                 ("2" (flatten)
                  (("2" (name-replace "t1" "car(P)`1")
                    (("1" (name-replace "s" "car(P)`2")
                      (("1"
                        (name-replace "G1" "inst_step(PV, G, t1, s)`1")
                        (("1"
                          (name-replace "del"
                           "inst_step(PV, G, t1, s)`2")
                          (("1"
                            (name-replace "skp"
                             "inst_step(PV, G, t1, s)`3")
                            (("1"
                              (name-replace "fai"
                               "inst_step(PV, G, t1, s)`4")
                              (("1"
                                (prop)
                                (("1"
                                  (expand "member" -2)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (use "inst_step2_append")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (name-replace
                                         "del1"
                                         "inst_step(PV, G, cdr(P), null, null)`3")
                                        (("1"
                                          (replace -1 -3)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (rewrite
                                               "member_unif_prb_append")
                                              (("1"
                                                (reveal -2)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (inst -4 "cdr(P)")
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       -4
                                                       2)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skolem
                                                               -4
                                                               "s1")
                                                              (("1"
                                                                (inst
                                                                 3
                                                                 "s1")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (reveal
                                                                     -6
                                                                     -7
                                                                     -8
                                                                     -9
                                                                     -10
                                                                     -11)
                                                                    (("1"
                                                                      (expand
                                                                       "inst_step"
                                                                       3)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (rewrite
                                                                           "inst_step3_no_effect_cor"
                                                                           4)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (expand
                                                                               "member"
                                                                               1)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "apply_sub"
                                                     -1)
                                                    (("2"
                                                      (expand
                                                       "apply_sub"
                                                       -1)
                                                      (("2"
                                                        (expand
                                                         "skp"
                                                         -3)
                                                        (("2"
                                                          (hide -4)
                                                          (("2"
                                                            (lemma
                                                             "inst_step_skip")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "member"
                                                                       -3)
                                                                      (("2"
                                                                        (expand
                                                                         "member"
                                                                         -3)
                                                                        (("2"
                                                                          (split
                                                                           -3)
                                                                          (("1"
                                                                            (reveal
                                                                             -10
                                                                             -11)
                                                                            (("1"
                                                                              (split
                                                                               -3)
                                                                              (("1"
                                                                                (inst
                                                                                 3
                                                                                 "t1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (split
                                                                                     3)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "member"
                                                                                       1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "del1"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "inst_step"
                                                                                         1)
                                                                                        (("2"
                                                                                          (lift-if)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "fai"
                                                                                             2)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "inst_step3_no_effect_cor"
                                                                                                 1)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (inst
                                                                                 3
                                                                                 "s")
                                                                                (("2"
                                                                                  (split
                                                                                   3)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "member"
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "del1"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "inst_step"
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "fai"
                                                                                           2)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "inst_step3_no_effect_cor"
                                                                                               1)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -4 3)
                                        (("2"
                                          (reveal -3 -4 -5 -6 -7 -8)
                                          (("2"
                                            (lemma "inst_step_fail")
                                            (("2"
                                              (inst
                                               -1
                                               "G"
                                               "cdr(P)"
                                               "PV"
                                               "cons((t1, s), null)"
                                               "null")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (rewrite
                                                   "inst_step4_no_effect_cor"
                                                   -1)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (rewrite "append_null")
                                  (("3"
                                    (expand "apply_sub" -1 2)
                                    (("3"
                                      (rewrite
                                       "inst_step2_no_effect_cor"
                                       -1)
                                      (("3"
                                        (inst
                                         -2
                                         "apply_sub(del, cdr(P))")
                                        (("3"
                                          (prop)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skolem -1 "s1")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (name-replace
                                                     "del2"
                                                     "inst_step(PV, G1, apply_sub(del, cdr(P)), null, null)`3")
                                                    (("1"
                                                      (reveal -1)
                                                      (("1"
                                                        (rewrite
                                                         "apply_sub_mem"
                                                         -2)
                                                        (("1"
                                                          (skolem
                                                           -2
                                                           "s2")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst
                                                               4
                                                               "s2")
                                                              (("1"
                                                                (expand
                                                                 "member"
                                                                 4)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (reveal
                                                                     -1
                                                                     -4
                                                                     -5
                                                                     -6
                                                                     -7
                                                                     -8
                                                                     -9)
                                                                    (("1"
                                                                      (expand
                                                                       "inst_step"
                                                                       4)
                                                                      (("1"
                                                                        (replace
                                                                         -6)
                                                                        (("1"
                                                                          (replace
                                                                           -7)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -2)
                                                                              (("1"
                                                                                (replace
                                                                                 -3)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "append_null")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "apply_sub"
                                                                                     6
                                                                                     2)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "inst_step_sub_append_cor"
                                                                                       6)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "subs_append2")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "apply_sub_len")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((append_null formula-decl nil list_props nil)
    (inst_step2_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (inst_step_sub_append_cor formula-decl nil nominal_AC_inst_step
     nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (apply_sub_mem formula-decl nil nominal_AC_unification nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (inst_step2_append formula-decl nil nominal_AC_inst_step nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (member_unif_prb_append formula-decl nil nominal_AC_unification
     nil)
    (inst_step3_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (apply_sub const-decl "unif_pair" nominal_AC_unification nil)
    (del1 skolem-const-decl "sub" nominal_AC_inst_step nil)
    (fai skolem-const-decl "bool" nominal_AC_inst_step nil)
    (inst_step_skip formula-decl nil nominal_AC_inst_step nil)
    (skp skolem-const-decl "bool" nominal_AC_inst_step nil)
    (inst_step4_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (DS const-decl "list[atom]" atoms nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (singleton const-decl "(singleton?)" sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (member const-decl "bool" sets nil)
    (inst_step_fail formula-decl nil nominal_AC_inst_step nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (member def-decl "bool" nominal_AC_unification nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step2_mem_rhs 0
  (inst_step2_mem_rhs-1 nil 3883547155
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (flatten)
        (("" (skeep)
          (("" (hide -1)
            ((""
              (name-replace "delta"
               "inst_step(PV, G, P, null, null)`3")
              (("" (reveal -1)
                ((""
                  (name-replace "P1"
                   "inst_step(PV, G, P, null, null)`2")
                  (("" (reveal -1)
                    (("" (expand "inst_step" -1)
                      (("" (lift-if)
                        (("" (split -1)
                          (("1" (flatten) (("1" (grind) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (name-replace "t1" "car(P)`1")
                              (("1"
                                (name-replace "s" "car(P)`2")
                                (("1"
                                  (name-replace
                                   "G1"
                                   "inst_step(PV, G, t1, s)`1")
                                  (("1"
                                    (name-replace
                                     "del"
                                     "inst_step(PV, G, t1, s)`2")
                                    (("1"
                                      (name-replace
                                       "skp"
                                       "inst_step(PV, G, t1, s)`3")
                                      (("1"
                                        (name-replace
                                         "fai"
                                         "inst_step(PV, G, t1, s)`4")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (replace -2 -4 :dir rl)
                                            (("1"
                                              (hide-all-but -4)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (reveal -1 -2 -3 -4 -5 -6)
                                            (("2"
                                              (expand "inst_step" -9)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (rewrite
                                                   "inst_step3_no_effect_cor")
                                                  (("2"
                                                    (use
                                                     "inst_step2_append")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           -9)
                                                          (("1"
                                                            (replace
                                                             -10)
                                                            (("1"
                                                              (replace
                                                               -7
                                                               -9
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (rewrite
                                                                 "member_rhs_append")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (reveal
                                                                     -10)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "cdr(P)")
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         -1
                                                                         2)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (skolem
                                                                               -1
                                                                               "s1")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (replace
                                                                                   -11)
                                                                                  (("1"
                                                                                    (inst
                                                                                     3
                                                                                     "s1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          2
                                                                                          3))
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "apply_sub"
                                                                     -1)
                                                                    (("2"
                                                                      (expand
                                                                       "apply_sub"
                                                                       -1
                                                                       2)
                                                                      (("2"
                                                                        (expand
                                                                         "rhs"
                                                                         -1)
                                                                        (("2"
                                                                          (expand
                                                                           "sec_proj"
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             "sec_proj"
                                                                             -1)
                                                                            (("2"
                                                                              (expand
                                                                               "member"
                                                                               -1)
                                                                              (("2"
                                                                                (expand
                                                                                 "apply_sub"
                                                                                 -1)
                                                                                (("2"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (inst
                                                                                     3
                                                                                     "s")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-5
                                                                                          2
                                                                                          3))
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "member"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "inst_step_fail")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "G"
                                                             "cdr(P)"
                                                             "PV"
                                                             "cons((t1, s), null)"
                                                             "null")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (rewrite
                                                                 "inst_step4_no_effect_cor"
                                                                 -1)
                                                                (("2"
                                                                  (replace
                                                                   -8)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       -10)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (rewrite "append_null")
                                            (("3"
                                              (expand "apply_sub" -1 2)
                                              (("3"
                                                (reveal
                                                 -1
                                                 -2
                                                 -3
                                                 -4
                                                 -5
                                                 -6)
                                                (("3"
                                                  (expand
                                                   "inst_step"
                                                   -8)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (replace -5)
                                                      (("3"
                                                        (replace -6)
                                                        (("3"
                                                          (replace -4)
                                                          (("3"
                                                            (replace
                                                             -3)
                                                            (("3"
                                                              (rewrite
                                                               "append_null")
                                                              (("3"
                                                                (expand
                                                                 "apply_sub"
                                                                 -8
                                                                 2)
                                                                (("3"
                                                                  (reveal
                                                                   -9)
                                                                  (("3"
                                                                    (rewrite
                                                                     "inst_step2_no_effect_cor")
                                                                    (("3"
                                                                      (rewrite
                                                                       "inst_step_sub_append_cor")
                                                                      (("3"
                                                                        (inst
                                                                         -1
                                                                         "apply_sub(del, cdr(P))")
                                                                        (("3"
                                                                          (rewrite
                                                                           "apply_sub_len")
                                                                          (("3"
                                                                            (expand
                                                                             "length"
                                                                             -1
                                                                             2)
                                                                            (("3"
                                                                              (assert)
                                                                              (("3"
                                                                                (inst?)
                                                                                (("3"
                                                                                  (inst
                                                                                   -1
                                                                                   "t")
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (skolem
                                                                                       -1
                                                                                       "s1")
                                                                                      (("3"
                                                                                        (flatten)
                                                                                        (("3"
                                                                                          (rewrite
                                                                                           "apply_sub_rhs")
                                                                                          (("3"
                                                                                            (skolem
                                                                                             -1
                                                                                             "s2")
                                                                                            (("3"
                                                                                              (flatten)
                                                                                              (("3"
                                                                                                (name-replace
                                                                                                 "delta1"
                                                                                                 "inst_step(PV, G1, apply_sub(del, cdr(P)), null, null)`3")
                                                                                                (("3"
                                                                                                  (reveal
                                                                                                   -1)
                                                                                                  (("3"
                                                                                                    (inst
                                                                                                     4
                                                                                                     "s2")
                                                                                                    (("3"
                                                                                                      (prop)
                                                                                                      (("1"
                                                                                                        (hide-all-but
                                                                                                         (-2
                                                                                                          1
                                                                                                          4))
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (replace
                                                                                                         -10
                                                                                                         1
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "subs_append2")
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -3
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (inst_step3_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (inst_step_fail formula-decl nil nominal_AC_inst_step nil)
    (inst_step4_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (apply_sub const-decl "unif_pair" nominal_AC_unification nil)
    (member_rhs_append formula-decl nil nominal_AC_unification nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (inst_step2_append formula-decl nil nominal_AC_inst_step nil)
    (inst_step_sub_append_cor formula-decl nil nominal_AC_inst_step
     nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (apply_sub_rhs formula-decl nil nominal_AC_unification nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (inst_step2_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (append_null formula-decl nil list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (member def-decl "bool" list_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step_vars_supset_dom 0
  (inst_step_vars_supset_dom-1 nil 3882629620
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" 1)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten)
                  (("1" (expand "supset_dom" 1) (("1" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (name-replace "t" "car(P)`1")
                  (("1" (name-replace "s" "car(P)`2")
                    (("1"
                      (name-replace "G1" "inst_step(PV, G, t, s)`1")
                      (("1"
                        (name-replace "del" "inst_step(PV, G, t, s)`2")
                        (("1"
                          (name-replace "skp"
                           "inst_step(PV, G, t, s)`3")
                          (("1"
                            (name-replace "fai"
                             "inst_step(PV, G, t, s)`4")
                            (("1" (flatten)
                              (("1"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (hide -2)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (rewrite
                                       "inst_step3_no_effect_cor")
                                      (("1"
                                        (inst -2 "cdr(P)")
                                        (("1"
                                          (expand "length" -2 2)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (expand "subset?")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst -3 "x")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "append_null")
                                      (("2"
                                        (expand "apply_sub" 2 2)
                                        (("2"
                                          (rewrite
                                           "inst_step_sub_append_cor")
                                          (("2"
                                            (rewrite
                                             "supset_dom_append")
                                            (("2"
                                              (expand "subset?" 2)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (expand
                                                   ("member" "union")
                                                   -1)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "apply_sub(del, cdr(P))")
                                                      (("1"
                                                        (rewrite
                                                         "apply_sub_len")
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           -2
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (expand
                                                                 "subset?"
                                                                 -2)
                                                                (("1"
                                                                  (inst
                                                                   -2
                                                                   "x")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (use
                                                                       "apply_sub_vars")
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (expand
                                                                           "subset?"
                                                                           -1)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "x")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 ("member"
                                                                                  "union")
                                                                                 -1)
                                                                                (("1"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "del"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (use
                                                                                       "inst_step_img")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "subset?"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "x")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               (-1
                                                                                                2
                                                                                                4))
                                                                                              (("1"
                                                                                                (expand
                                                                                                 ("t"
                                                                                                  "s"))
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "vars"
                                                                                     2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       ("member"
                                                                                        "union")
                                                                                       2)
                                                                                      (("2"
                                                                                        (prop)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "del" -1)
                                                      (("2"
                                                        (use
                                                         "inst_step_supset_dom")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "subset?"
                                                             -1)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "x")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide-all-but
                                                                   (-1
                                                                    2
                                                                    4))
                                                                  (("2"
                                                                    (expand
                                                                     "vars"
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       ("t"
                                                                        "s"))
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (append_null formula-decl nil list_props nil)
    (inst_step_sub_append_cor formula-decl nil nominal_AC_inst_step
     nil)
    (inst_step_supset_dom formula-decl nil nominal_AC_inst_step nil)
    (apply_sub_vars formula-decl nil nominal_AC_unification nil)
    (inst_step_img formula-decl nil nominal_AC_inst_step nil)
    (t skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]"
     nominal_AC_inst_step nil)
    (s skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]"
     nominal_AC_inst_step nil)
    (del skolem-const-decl "sub" nominal_AC_inst_step nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (supset_dom_append formula-decl nil nominal_AC_substitution nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (inst_step3_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (vars def-decl "finite_set[variable]" nominal_AC_unification nil)
    (supset_dom def-decl "finite_set[variable]" nominal_AC_substitution
     nil)
    (subset? const-decl "bool" sets nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step_vars_img 0
  (inst_step_vars_img-1 nil 3882545005
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "subset?" 1)
            (("" (skeep)
              (("" (expand "inst_step" -2)
                (("" (lift-if)
                  (("" (split)
                    (("1" (flatten)
                      (("1" (rewrite "img_null")
                        (("1" (grind) nil nil)) nil))
                      nil)
                     ("2" (flatten)
                      (("2" (name-replace "t" "car(P)`1")
                        (("1" (name-replace "s" "car(P)`2")
                          (("1"
                            (name-replace "G1"
                             "inst_step(PV, G, t, s)`1")
                            (("1"
                              (name-replace "del"
                               "inst_step(PV, G, t, s)`2")
                              (("1"
                                (name-replace
                                 "skp"
                                 "inst_step(PV, G, t, s)`3")
                                (("1"
                                  (name-replace
                                   "fai"
                                   "inst_step(PV, G, t, s)`4")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (rewrite "img_null")
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (rewrite
                                       "inst_step3_no_effect_cor")
                                      (("2"
                                        (inst -3 "cdr(P)")
                                        (("2"
                                          (expand "length" -3 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (expand "subset?" -3)
                                                (("2"
                                                  (inst -3 "x")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (rewrite "append_null")
                                      (("3"
                                        (expand "apply_sub" -1 2)
                                        (("3"
                                          (rewrite
                                           "inst_step_sub_append_cor")
                                          (("3"
                                            (name-replace
                                             "del2"
                                             "inst_step(PV, G1, apply_sub(del, cdr(P)), null, null)`3")
                                            (("3"
                                              (reveal
                                               -1
                                               -2
                                               -3
                                               -4
                                               -5
                                               -6
                                               -7)
                                              (("3"
                                                (use "vars_img_append")
                                                (("3"
                                                  (expand "subset?" -1)
                                                  (("3"
                                                    (inst -1 "x")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (expand
                                                         ("member"
                                                          "union")
                                                         -1)
                                                        (("3"
                                                          (case
                                                           "subset?(vars(img(del)), vars(P))")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (replace
                                                               -3
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (inst
                                                                 -11
                                                                 "apply_sub(del, cdr(P))")
                                                                (("1"
                                                                  (rewrite
                                                                   "apply_sub_len")
                                                                  (("1"
                                                                    (expand
                                                                     "length"
                                                                     -11
                                                                     2)
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (expand
                                                                         "subset?"
                                                                         -11)
                                                                        (("1"
                                                                          (inst
                                                                           -11
                                                                           "x")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (use
                                                                               "apply_sub_vars")
                                                                              (("1"
                                                                                (expand
                                                                                 "subset?"
                                                                                 -1)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "x")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       ("member"
                                                                                        "union")
                                                                                       -1)
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "subset?"
                                                                                           -3)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -3
                                                                                             "x")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "vars"
                                                                                           4)
                                                                                          (("2"
                                                                                            (expand
                                                                                             ("member"
                                                                                              "union")
                                                                                             4)
                                                                                            (("2"
                                                                                              (prop)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "subset?"
                                                               -2)
                                                              (("2"
                                                                (inst
                                                                 -2
                                                                 "x")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide
                                                             -10
                                                             -1)
                                                            (("2"
                                                              (use
                                                               "inst_step_img")
                                                              (("2"
                                                                (replace
                                                                 -5)
                                                                (("2"
                                                                  (expand
                                                                   "subset?")
                                                                  (("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      -7
                                                                      -8
                                                                      1
                                                                      4))
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((append_null formula-decl nil list_props nil)
    (inst_step_sub_append_cor formula-decl nil nominal_AC_inst_step
     nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (apply_sub_vars formula-decl nil nominal_AC_unification nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (inst_step_img formula-decl nil nominal_AC_inst_step nil)
    (vars_img_append formula-decl nil nominal_AC_substitution nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (inst_step3_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (img_null formula-decl nil nominal_AC_substitution nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (vars def-decl "finite_set[variable]" nominal_AC_unification nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (subset? const-decl "bool" sets nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step_idempotent3 0
  (inst_step_idempotent3-1 nil 3882537992
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" 1)
            (("" (split)
              (("1" (flatten)
                (("1" (rewrite "idempotent_null") nil nil)) nil)
               ("2" (flatten)
                (("2" (name-replace "t" "car(P)`1")
                  (("1" (name-replace "s" "car(P)`2")
                    (("1"
                      (name-replace "G1" "inst_step(PV, G, t, s)`1")
                      (("1"
                        (name-replace "del" "inst_step(PV, G, t, s)`2")
                        (("1"
                          (name-replace "skp"
                           "inst_step(PV, G, t, s)`3")
                          (("1"
                            (name-replace "fai"
                             "inst_step(PV, G, t, s)`4")
                            (("1" (rewrite "append_null")
                              (("1"
                                (prop)
                                (("1"
                                  (rewrite "idempotent_null")
                                  nil
                                  nil)
                                 ("2"
                                  (rewrite "inst_step3_no_effect_cor")
                                  (("2"
                                    (inst -2 "cdr(P)")
                                    (("2"
                                      (expand "length" -2 2)
                                      (("2"
                                        (assert)
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (expand "apply_sub" 2 2)
                                  (("3"
                                    (rewrite
                                     "inst_step_sub_append_cor")
                                    (("3"
                                      (inst
                                       -1
                                       "apply_sub(del, cdr(P))")
                                      (("3"
                                        (rewrite "apply_sub_len")
                                        (("3"
                                          (expand "length" -1 2)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (inst?)
                                              (("3"
                                                (name-replace
                                                 "del2"
                                                 "inst_step(PV, G1, apply_sub(del, cdr(P)), null, null)`3")
                                                (("3"
                                                  (reveal -4 -5 -6 -7)
                                                  (("3"
                                                    (lemma
                                                     "idempotent_append")
                                                    (("3"
                                                      (inst
                                                       -1
                                                       "del"
                                                       "del2")
                                                      (("3"
                                                        (reveal -2)
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (prop)
                                                            (("1"
                                                              (lemma
                                                               "inst_step_idempotent2")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (use
                                                               "inst_step_vars_img")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (replace
                                                                   -2)
                                                                  (("2"
                                                                    (hide
                                                                     2
                                                                     3
                                                                     4
                                                                     5
                                                                     6)
                                                                    (("2"
                                                                      (lemma
                                                                       "apply_sub_elim_var2")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (expand
                                                                           "del"
                                                                           -1
                                                                           1)
                                                                          (("2"
                                                                            (use
                                                                             "inst_step_idempotent2")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (hide-all-but
                                                                                 (-2
                                                                                  -3
                                                                                  1))
                                                                                (("2"
                                                                                  (expand
                                                                                   "disjoint?")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "empty?")
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "x")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "subset?")
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((idempotent_null formula-decl nil nominal_AC_substitution nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (append_null formula-decl nil list_props nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (inst_step_vars_img formula-decl nil nominal_AC_inst_step nil)
    (apply_sub_elim_var2 formula-decl nil nominal_AC_unification nil)
    (del skolem-const-decl "sub" nominal_AC_inst_step nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (empty? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (inst_step_idempotent2 formula-decl nil nominal_AC_inst_step nil)
    (idempotent_append formula-decl nil nominal_AC_substitution nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (inst_step_sub_append_cor formula-decl nil nominal_AC_inst_step
     nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (inst_step3_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (idempotent? const-decl "bool" nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step_vars_unif 0
  (inst_step_vars_unif-1 nil 3882623320
   ("" (skeep)
    (("" (assert)
      (("" (use "inst_step_idempotent3")
        (("" (assert)
          (("" (expand "disjoint?")
            (("" (expand "empty?" 1)
              (("" (skeep)
                (("" (expand ("member " "intersection") -2)
                  (("" (prop)
                    (("" (rewrite "vars_unif_prb" -2)
                      (("" (skolem -2 "t")
                        (("" (prop)
                          (("" (use "inst_step2_mem")
                            (("" (assert)
                              ((""
                                (assert)
                                ((""
                                  (skolem -1 "t1")
                                  ((""
                                    (prop)
                                    ((""
                                      (name-replace
                                       "delta"
                                       "inst_step(PV, G, P, null, null)`3")
                                      ((""
                                        (reveal -1)
                                        ((""
                                          (replace -3 -6)
                                          ((""
                                            (use
                                             "apply_sub_elim_var_t")
                                            ((""
                                              (assert)
                                              ((""
                                                (use
                                                 "idempotent_disjoint_dom_img")
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (expand
                                                     "disjoint?"
                                                     -1)
                                                    ((""
                                                      (expand
                                                       "empty?"
                                                       -1)
                                                      ((""
                                                        (inst -1 "x")
                                                        ((""
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (vars_unif_prb formula-decl nil nominal_AC_unification nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (idempotent_disjoint_dom_img formula-decl nil
     nominal_AC_substitution nil)
    (apply_sub_elim_var_t formula-decl nil nominal_AC_substitution nil)
    (inst_step2_mem formula-decl nil nominal_AC_inst_step nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (inst_step_idempotent3 formula-decl nil nominal_AC_inst_step nil))
   shostak))
 (inst_step_vars_unif2 0
  (inst_step_vars_unif2-1 nil 3882626030
   ("" (skeep)
    (("" (assert)
      (("" (expand "subset?" 1)
        (("" (skeep)
          (("" (rewrite "vars_unif_prb")
            (("" (skolem -1 "t")
              (("" (prop)
                (("" (use "inst_step2_mem")
                  (("" (assert)
                    (("" (assert)
                      (("" (skolem -1 "s")
                        (("" (prop)
                          (("" (lemma "vars_subs_t")
                            ((""
                              (name-replace "delta"
                               "inst_step(PV, G, P, null, null)`3")
                              ((""
                                (reveal -1)
                                ((""
                                  (inst -2 "delta" "s")
                                  ((""
                                    (expand "subset?" -2)
                                    ((""
                                      (inst -2 "x")
                                      ((""
                                        (assert)
                                        ((""
                                          (expand
                                           ("member" "union")
                                           -2)
                                          ((""
                                            (prop)
                                            (("1"
                                              (use
                                               "inst_step_vars_img")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -3)
                                                  (("1"
                                                    (expand
                                                     "subset?"
                                                     -1)
                                                    (("1"
                                                      (inst -1 "x")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite "vars_unif_prb")
                                              (("2"
                                                (inst 1 "s")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (inst_step2_mem formula-decl nil nominal_AC_inst_step nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (inst_step_vars_img formula-decl nil nominal_AC_inst_step nil)
    (vars_subs_t formula-decl nil nominal_AC_substitution nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (vars_unif_prb formula-decl nil nominal_AC_unification nil)
    (subset? const-decl "bool" sets nil))
   shostak))
 (inst_step_dom_PV 0
  (inst_step_dom_PV-1 nil 3883224114
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" 1)
            (("" (lift-if)
              (("" (split)
                (("1" (grind) nil nil)
                 ("2" (flatten)
                  (("2" (name-replace "t" "car(P)`1")
                    (("1" (name-replace "s" "car(P)`2")
                      (("1"
                        (name-replace "G1" "inst_step(PV, G, t, s)`1")
                        (("1"
                          (name-replace "del"
                           "inst_step(PV, G, t, s)`2")
                          (("1"
                            (name-replace "skp"
                             "inst_step(PV, G, t, s)`3")
                            (("1"
                              (name-replace "fai"
                               "inst_step(PV, G, t, s)`4")
                              (("1"
                                (prop)
                                (("1"
                                  (hide -2)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (rewrite "inst_step3_no_effect_cor")
                                  (("2"
                                    (inst -2 "cdr(P)")
                                    (("2"
                                      (expand "length" -2 2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst -2 "G" "PV")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (rewrite "append_null")
                                  (("3"
                                    (expand "apply_sub" 2 2)
                                    (("3"
                                      (rewrite
                                       "inst_step_sub_append_cor"
                                       2)
                                      (("3"
                                        (inst
                                         -1
                                         "apply_sub(del, cdr(P))")
                                        (("3"
                                          (rewrite "apply_sub_len" -1)
                                          (("3"
                                            (expand "length" -1 2)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (inst?)
                                                (("3"
                                                  (expand
                                                   "disjoint?"
                                                   2)
                                                  (("3"
                                                    (expand "empty?" 2)
                                                    (("3"
                                                      (skeep)
                                                      (("3"
                                                        (expand
                                                         ("member"
                                                          "intersection")
                                                         -1)
                                                        (("3"
                                                          (prop)
                                                          (("3"
                                                            (use
                                                             "dom_append")
                                                            (("3"
                                                              (expand
                                                               "subset?"
                                                               -1)
                                                              (("3"
                                                                (inst?)
                                                                (("3"
                                                                  (assert)
                                                                  (("3"
                                                                    (expand
                                                                     ("member"
                                                                      "union")
                                                                     -1)
                                                                    (("3"
                                                                      (prop)
                                                                      (("1"
                                                                        (expand
                                                                         "disjoint?"
                                                                         -4)
                                                                        (("1"
                                                                          (expand
                                                                           "empty?"
                                                                           -4)
                                                                          (("1"
                                                                            (inst
                                                                             -4
                                                                             "x")
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -2
                                                                         -4)
                                                                        (("2"
                                                                          (lemma
                                                                           "inst_step_dom_PV_aux")
                                                                          (("2"
                                                                            (expand
                                                                             "del"
                                                                             -2)
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((append_null formula-decl nil list_props nil)
    (inst_step_sub_append_cor formula-decl nil nominal_AC_inst_step
     nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (subset? const-decl "bool" sets nil)
    (inst_step_dom_PV_aux formula-decl nil nominal_AC_inst_step nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (singleton const-decl "(singleton?)" sets nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (DS const-decl "list[atom]" atoms nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (append def-decl "list[T]" list_props nil)
    (del skolem-const-decl "sub" nominal_AC_inst_step nil)
    (union const-decl "set" sets nil)
    (dom_append formula-decl nil nominal_AC_substitution nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (inst_step3_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (disjoint? const-decl "bool" sets nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step_cont 0
  (inst_step_cont-1 nil 3882633343
   ("" (skeep)
    (("" (assert)
      (("" (expand "contained?")
        (("" (prop)
          (("1" (use "inst_step_vars_supset_dom")
            (("1" (assert)
              (("1" (expand "subset?")
                (("1" (skeep)
                  (("1" (inst -1 "x")
                    (("1" (assert)
                      (("1" (use "supset_dom_correct")
                        (("1" (assert)
                          (("1" (expand "dom" -1)
                            (("1" (expand "member" -1)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (use "inst_step_vars_img") (("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (supset_dom_correct formula-decl nil nominal_AC_substitution nil)
    (subset? const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (inst_step_vars_supset_dom formula-decl nil nominal_AC_inst_step
     nil)
    (inst_step_vars_img formula-decl nil nominal_AC_inst_step nil)
    (contained? const-decl "bool" nominal_AC_substitution nil))
   shostak))
 (inst_step_complete_equal 0
  (inst_step_complete_equal-1 nil 3888408817
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          ((""
            (name-replace "sig1" "inst_step(PV, G, P, null, null)`3")
            (("" (reveal -1)
              (("" (expand "inst_step" -1)
                (("" (lift-if)
                  (("" (split -1)
                    (("1" (flatten)
                      (("1" (replace -2)
                        (("1" (replace -2 :dir rl)
                          (("1" (rewrite "append_null")
                            (("1" (expand "append")
                              (("1" (rewrite "equal_sub_ref") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (name-replace "t" "car(P)`1")
                        (("1" (name-replace "s" "car(P)`2")
                          (("1"
                            (name-replace "G1"
                             "inst_step(PV, G, t, s)`1")
                            (("1"
                              (name-replace "sig"
                               "inst_step(PV, G, t, s)`2")
                              (("1"
                                (name-replace
                                 "skp"
                                 "inst_step(PV, G, t, s)`3")
                                (("1"
                                  (name-replace
                                   "fai"
                                   "inst_step(PV, G, t, s)`4")
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (replace -2 2 :dir rl)
                                        (("1"
                                          (rewrite "append_null" 2)
                                          (("1"
                                            (rewrite "equal_sub_ref")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (rewrite
                                             "inst_step3_no_effect_cor"
                                             -2)
                                            (("1"
                                              (inst -3 "cdr(P)")
                                              (("1"
                                                (expand "length" -3 2)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (inst
                                                       -3
                                                       "Del"
                                                       "del")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "unifies?"
                                                           -3)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (expand "apply_sub" -1 2)
                                            (("2"
                                              (rewrite "append_null")
                                              (("2"
                                                (rewrite
                                                 "inst_step_sub_append_cor")
                                                (("2"
                                                  (name-replace
                                                   "P1"
                                                   "apply_sub(sig, cdr(P))")
                                                  (("2"
                                                    (reveal -1)
                                                    (("2"
                                                      (reveal -4)
                                                      (("2"
                                                        (lemma
                                                         "inst_step_unifies_equal_sub")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "Del"
                                                             "del")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -2)
                                                                (("2"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (name-replace
                                                                     "sig_"
                                                                     "inst_step(PV, G1, P1, null, null)`3")
                                                                    (("1"
                                                                      (reveal
                                                                       -1)
                                                                      (("1"
                                                                        (replace
                                                                         -5
                                                                         4
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (lemma
                                                                           "equal_sub_trans")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "Del"
                                                                             "del"
                                                                             "append(del, sig)"
                                                                             "append(del, append(sig_, sig))")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 5)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "append_assoc"
                                                                                   1
                                                                                   :dir
                                                                                   rl)
                                                                                  (("1"
                                                                                    (use
                                                                                     "equal_sub_append")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide
                                                                                         2)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -6
                                                                                           "P1")
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "Del"
                                                                                                 "del")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "P1"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "apply_sub_unifies")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "unifies?_equal")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "Del"
                                                                                                           "del"
                                                                                                           "append(del, sig)"
                                                                                                           "cdr(P)")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "unifies?"
                                                                                                               -6)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "P1"
                                                                                               1)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "apply_sub_len"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   1
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "unifies?"
                                                                     -5)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (case
                                                                         "car(P) = (t, s)")
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           ("t"
                                                                            "s"))
                                                                          (("2"
                                                                            (decompose-equality
                                                                             1)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equal_sub_trans formula-decl nil nominal_AC_substitution nil)
    (append_assoc formula-decl nil list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (apply_sub_unifies formula-decl nil nominal_AC_unification nil)
    (unifies?_equal formula-decl nil nominal_AC_unification nil)
    (P1 skolem-const-decl "unif_prb" nominal_AC_inst_step nil)
    (equal_sub_append formula-decl nil nominal_AC_substitution nil)
    (s skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]"
     nominal_AC_inst_step nil)
    (t skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]"
     nominal_AC_inst_step nil)
    (inst_step_unifies_equal_sub formula-decl nil nominal_AC_inst_step
     nil)
    (inst_step_sub_append_cor formula-decl nil nominal_AC_inst_step
     nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (inst_step3_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (equal_sub_ref formula-decl nil nominal_AC_substitution nil)
    (append_null formula-decl nil list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (append def-decl "list[T]" list_props nil)
    (equal? const-decl "bool" nominal_AC_substitution nil)
    (unifies? def-decl "bool" nominal_AC_unification nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step_unifies_not_fail 0
  (inst_step_unifies_not_fail-1 nil 3888322107
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skolem 1 ("Del" "G" "PV" "del"))
          (("" (flatten)
            (("" (hide -1)
              (("" (hide -5)
                (("" (expand "inst_step" -5)
                  (("" (split -5)
                    (("1" (propax) nil nil)
                     ("2" (flatten)
                      (("2" (name-replace "t" "car(P)`1")
                        (("1" (name-replace "s" "car(P)`2")
                          (("1"
                            (name-replace "G1"
                             "inst_step(PV, G, t, s)`1")
                            (("1"
                              (name-replace "sig"
                               "inst_step(PV, G, t, s)`2")
                              (("1"
                                (name-replace
                                 "skp"
                                 "inst_step(PV, G, t, s)`3")
                                (("1"
                                  (name-replace
                                   "fai"
                                   "inst_step(PV, G, t, s)`4")
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (expand "fai" -1)
                                      (("1"
                                        (lemma
                                         "inst_step_unifies_not_fail_aux")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (inst -1 "Del" "del")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (reveal -7 -8)
                                                  (("1"
                                                    (expand
                                                     "unifies?"
                                                     -4)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (case
                                                         "car(P) = (t, s)")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "well_formed?"
                                                               1)
                                                              (("1"
                                                                (rewrite
                                                                 "well_formed_unif_prb"
                                                                 -7)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (inst
                                                                     -5
                                                                     "t")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "member"
                                                                         3)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (inst
                                                                     -5
                                                                     "s")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "member"
                                                                         3)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (decompose-equality
                                                           1)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (rewrite
                                             "inst_step4_no_effect_cor"
                                             -2)
                                            (("1"
                                              (reveal -8)
                                              (("1"
                                                (reveal -7)
                                                (("1"
                                                  (inst -2 "cdr(P)")
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     -2
                                                     2)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (inst
                                                           -2
                                                           "PV")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (expand
                                                                   "unifies?"
                                                                   -3)
                                                                  (("1"
                                                                    (flatten)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (rewrite
                                                                   "well_formed_unif_prb")
                                                                  (("2"
                                                                    (rewrite
                                                                     "well_formed_unif_prb")
                                                                    (("2"
                                                                      (skolem
                                                                       1
                                                                       "u")
                                                                      (("2"
                                                                        (inst
                                                                         -4
                                                                         "u")
                                                                        (("2"
                                                                          (prop)
                                                                          (("2"
                                                                            (expand
                                                                             "member"
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (lemma
                                                                   "inst_step_match_condition_cdr")
                                                                  (("3"
                                                                    (inst
                                                                     -1
                                                                     "G"
                                                                     "cdr(P)"
                                                                     "PV"
                                                                     "s"
                                                                     "t")
                                                                    (("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (expand
                                                                           "skp"
                                                                           -1)
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (case
                                                                               "P = cons((t, s), cdr(P))")
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (reveal
                                                                                   -10)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (decompose-equality
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   ("t"
                                                                                    "s"))
                                                                                  (("2"
                                                                                    (decompose-equality
                                                                                     1)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (rewrite "append_null")
                                            (("2"
                                              (expand "apply_sub" -1 2)
                                              (("2"
                                                (rewrite
                                                 "inst_step4_no_effect2_cor")
                                                (("2"
                                                  (name-replace
                                                   "P1"
                                                   "apply_sub(sig, cdr(P))")
                                                  (("2"
                                                    (reveal -1)
                                                    (("2"
                                                      (lemma
                                                       "inst_step_unifies_equal_sub")
                                                      (("2"
                                                        (reveal
                                                         -6
                                                         -7
                                                         -8)
                                                        (("2"
                                                          (inst
                                                           -4
                                                           "Del"
                                                           "G"
                                                           "PV"
                                                           "del"
                                                           "s"
                                                           "t")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (reveal
                                                               -5)
                                                              (("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (split
                                                                   -5)
                                                                  (("1"
                                                                    (reveal
                                                                     -10)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "P1")
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "Del"
                                                                           "G1"
                                                                           "PV"
                                                                           "del")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (expand
                                                                                 "P1"
                                                                                 1)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "apply_sub_unifies"
                                                                                   1)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "unifies?_equal")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "Del"
                                                                                       " del"
                                                                                       "append(del, sig)"
                                                                                       "cdr(P)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "unifies?"
                                                                                           -8)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "P1"
                                                                                 1)
                                                                                (("2"
                                                                                  (use
                                                                                   "well_formed_apply_sub")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "well_formed_unif_prb")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "well_formed_unif_prb")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "well_formed_unif_prb")
                                                                                            (("1"
                                                                                              (skolem
                                                                                               1
                                                                                               "u")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -9
                                                                                                 "u")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "member"
                                                                                                         6)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "sig"
                                                                                         1)
                                                                                        (("2"
                                                                                          (use
                                                                                           "inst_step_well_formed_aux")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "well_formed_unif_prb"
                                                                                               -9)
                                                                                              (("2"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -9
                                                                                                   "t")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "member"
                                                                                                       7)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (inst
                                                                                                   -9
                                                                                                   "s")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "member"
                                                                                                       7)
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (lemma
                                                                                 "inst_step_nominal_AC_fresh_subs")
                                                                                (("3"
                                                                                  (inst
                                                                                   -1
                                                                                   "Del"
                                                                                   "G"
                                                                                   "cdr(P)"
                                                                                   "PV"
                                                                                   "del"
                                                                                   "s"
                                                                                   "t")
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (expand
                                                                                       "G1"
                                                                                       1)
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (case
                                                                                           "P = cons((t, s), cdr(P))")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 -9)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "unifies?"
                                                                                                   -9)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (decompose-equality
                                                                                             1)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (expand
                                                                                 "skp"
                                                                                 2)
                                                                                (("4"
                                                                                  (expand
                                                                                   "fai"
                                                                                   3)
                                                                                  (("4"
                                                                                    (lemma
                                                                                     "inst_step_match_condition_apply_sub")
                                                                                    (("4"
                                                                                      (inst
                                                                                       -1
                                                                                       "G"
                                                                                       "cdr(P)"
                                                                                       "PV"
                                                                                       "s"
                                                                                       "t")
                                                                                      (("4"
                                                                                        (assert)
                                                                                        (("4"
                                                                                          (assert)
                                                                                          (("4"
                                                                                            (case
                                                                                             "P = cons((t, s), cdr(P))")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (decompose-equality
                                                                                               1)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "P1"
                                                                           1)
                                                                          (("2"
                                                                            (rewrite
                                                                             "apply_sub_len"
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "length"
                                                                               1
                                                                               2)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "unifies?"
                                                                     -7)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (case
                                                                         "car(P) = (t, s)")
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (decompose-equality
                                                                           1)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (inst_step_unifies_equal_sub formula-decl nil nominal_AC_inst_step
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (apply_sub_unifies formula-decl nil nominal_AC_unification nil)
    (append def-decl "list[T]" list_props nil)
    (unifies?_equal formula-decl nil nominal_AC_unification nil)
    (P1 skolem-const-decl "unif_prb" nominal_AC_inst_step nil)
    (well_formed_apply_sub formula-decl nil nominal_AC_unification nil)
    (inst_step_well_formed_aux formula-decl nil nominal_AC_inst_step
     nil)
    (sig skolem-const-decl "sub" nominal_AC_inst_step nil)
    (G1 skolem-const-decl "fresh_context" nominal_AC_inst_step nil)
    (inst_step_nominal_AC_fresh_subs formula-decl nil
     nominal_AC_inst_step nil)
    (inst_step_match_condition_apply_sub formula-decl nil
     nominal_AC_inst_step nil)
    (inst_step4_no_effect2_cor formula-decl nil nominal_AC_inst_step
     nil)
    (append_null formula-decl nil list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (inst_step_match_condition_cdr formula-decl nil
     nominal_AC_inst_step nil)
    (skp skolem-const-decl "bool" nominal_AC_inst_step nil)
    (s skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]"
     nominal_AC_inst_step nil)
    (t skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]"
     nominal_AC_inst_step nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (inst_step4_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (fai skolem-const-decl "bool" nominal_AC_inst_step nil)
    (well_formed? const-decl "bool" nominal_AC_unification nil)
    (member def-decl "bool" nominal_AC_unification nil)
    (well_formed_unif_prb formula-decl nil nominal_AC_unification nil)
    (inst_step_unifies_not_fail_aux formula-decl nil
     nominal_AC_inst_step nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (match_condition? const-decl "bool" aux_nominal_AC_unification nil)
    (nominal_AC_fresh_subs def-decl "bool" nominal_AC_fresh_subs nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (disjoint? const-decl "bool" sets nil)
    (well_formed? const-decl "bool" nominal_AC_unification nil)
    (unifies? def-decl "bool" nominal_AC_unification nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step_complete_nominal_AC_fresh_subs 0
  (inst_step_complete_nominal_AC_fresh_subs-1 nil 3888397183
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (name-replace "G1" "inst_step(PV, G, P, null, null)`1")
            (("" (reveal -1)
              (("" (hide -2)
                (("" (expand "inst_step" -1)
                  (("" (lift-if)
                    (("" (split -1)
                      (("1" (flatten) (("1" (assert) nil nil)) nil)
                       ("2" (flatten)
                        (("2" (name-replace "t" "car(P)`1")
                          (("1" (name-replace "s" "car(P)`2")
                            (("1"
                              (name-replace "sig"
                               "inst_step(PV, G, t, s)`2")
                              (("1"
                                (name-replace
                                 "skp"
                                 "inst_step(PV, G, t, s)`3")
                                (("1"
                                  (name-replace
                                   "fai"
                                   "inst_step(PV, G, t, s)`4")
                                  (("1"
                                    (case "P = cons((t, s), cdr(P))")
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (flatten)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (rewrite
                                                 "inst_step1_no_effect_cor")
                                                (("1"
                                                  (reveal -1 -7)
                                                  (("1"
                                                    (inst -2 "cdr(P)")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "PV")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (expand
                                                                 "unifies?"
                                                                 -4)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (rewrite
                                                                 "well_formed_unif_prb"
                                                                 1)
                                                                (("2"
                                                                  (rewrite
                                                                   "well_formed_unif_prb"
                                                                   -5)
                                                                  (("2"
                                                                    (skolem
                                                                     1
                                                                     "u")
                                                                    (("2"
                                                                      (inst
                                                                       -5
                                                                       "u")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "member"
                                                                             4)
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (replace
                                                                 -1
                                                                 -8)
                                                                (("3"
                                                                  (expand
                                                                   "skp"
                                                                   -2)
                                                                  (("3"
                                                                    (use
                                                                     "inst_step_match_condition_cdr")
                                                                    (("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "length"
                                                         1
                                                         2)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (expand
                                                 "apply_sub"
                                                 -1
                                                 2)
                                                (("2"
                                                  (rewrite
                                                   "append_null")
                                                  (("2"
                                                    (rewrite
                                                     "inst_step1_no_effect_cor2")
                                                    (("2"
                                                      (name-replace
                                                       "G2"
                                                       "inst_step(PV, G, t, s)`1")
                                                      (("2"
                                                        (name-replace
                                                         "P1"
                                                         "apply_sub(sig, cdr(P))")
                                                        (("2"
                                                          (reveal -9)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "P1")
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "Del"
                                                                 "G2"
                                                                 "PV"
                                                                 "del")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (reveal
                                                                     -4)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (expand
                                                                         "P1"
                                                                         1)
                                                                        (("1"
                                                                          (rewrite
                                                                           "apply_sub_unifies")
                                                                          (("1"
                                                                            (expand
                                                                             "unifies?"
                                                                             -3)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (lemma
                                                                                 "unifies?_equal")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "Del"
                                                                                   "del"
                                                                                   "append(del, sig)"
                                                                                   "cdr(P)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "sig"
                                                                                       1)
                                                                                      (("1"
                                                                                        (use
                                                                                         "inst_step_unifies_equal_sub")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (case
                                                                                               "car(P) = (t, s)")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 ("t"
                                                                                                  "s")
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (decompose-equality
                                                                                                   1)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "P1"
                                                                         1)
                                                                        (("2"
                                                                          (use
                                                                           "well_formed_apply_sub")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (prop)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "well_formed_unif_prb"
                                                                                 -4)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "well_formed_unif_prb"
                                                                                   1)
                                                                                  (("1"
                                                                                    (skolem
                                                                                     1
                                                                                     "u")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -4
                                                                                       "u")
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "member"
                                                                                             6)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "sig"
                                                                                 1)
                                                                                (("2"
                                                                                  (use
                                                                                   "inst_step_well_formed_aux")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "well_formed_unif_prb"
                                                                                       -4)
                                                                                      (("2"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -4
                                                                                           "t")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "member"
                                                                                               7)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "t"
                                                                                                 7)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst
                                                                                           -4
                                                                                           "s")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               ("member"
                                                                                                "s"))
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (expand
                                                                         "G2"
                                                                         1)
                                                                        (("3"
                                                                          (lemma
                                                                           "inst_step_nominal_AC_fresh_subs")
                                                                          (("3"
                                                                            (inst
                                                                             -1
                                                                             "Del"
                                                                             "G"
                                                                             "cdr(P)"
                                                                             "PV"
                                                                             "del"
                                                                             "s"
                                                                             "t")
                                                                            (("3"
                                                                              (assert)
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (replace
                                                                                   -1
                                                                                   -3)
                                                                                  (("3"
                                                                                    (expand
                                                                                     "unifies?"
                                                                                     -3)
                                                                                    (("3"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (expand
                                                                         ("skp"
                                                                          "fai"))
                                                                        (("4"
                                                                          (lemma
                                                                           "inst_step_match_condition_apply_sub")
                                                                          (("4"
                                                                            (inst
                                                                             -1
                                                                             "G"
                                                                             "cdr(P)"
                                                                             "PV"
                                                                             "s"
                                                                             "t")
                                                                            (("4"
                                                                              (assert)
                                                                              (("4"
                                                                                (assert)
                                                                                (("4"
                                                                                  (expand
                                                                                   "P1"
                                                                                   1)
                                                                                  (("4"
                                                                                    (expand
                                                                                     "sig"
                                                                                     1)
                                                                                    (("4"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "P1")
                                                                (("2"
                                                                  (rewrite
                                                                   "apply_sub_len")
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     1
                                                                     2)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -1)
                                      (("2"
                                        (decompose-equality 1)
                                        (("2"
                                          (expand ("t" "s"))
                                          (("2"
                                            (decompose-equality 1)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (append_null formula-decl nil list_props nil)
    (apply_sub_unifies formula-decl nil nominal_AC_unification nil)
    (append def-decl "list[T]" list_props nil)
    (sig skolem-const-decl "sub" nominal_AC_inst_step nil)
    (t skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]"
     nominal_AC_inst_step nil)
    (s skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]"
     nominal_AC_inst_step nil)
    (inst_step_unifies_equal_sub formula-decl nil nominal_AC_inst_step
     nil)
    (unifies?_equal formula-decl nil nominal_AC_unification nil)
    (P1 skolem-const-decl "unif_prb" nominal_AC_inst_step nil)
    (well_formed_apply_sub formula-decl nil nominal_AC_unification nil)
    (inst_step_well_formed_aux formula-decl nil nominal_AC_inst_step
     nil)
    (inst_step_nominal_AC_fresh_subs formula-decl nil
     nominal_AC_inst_step nil)
    (G2 skolem-const-decl "fresh_context" nominal_AC_inst_step nil)
    (inst_step_match_condition_apply_sub formula-decl nil
     nominal_AC_inst_step nil)
    (fai skolem-const-decl "bool" nominal_AC_inst_step nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (inst_step1_no_effect_cor2 formula-decl nil nominal_AC_inst_step
     nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (member def-decl "bool" nominal_AC_unification nil)
    (well_formed_unif_prb formula-decl nil nominal_AC_unification nil)
    (skp skolem-const-decl "bool" nominal_AC_inst_step nil)
    (inst_step_match_condition_cdr formula-decl nil
     nominal_AC_inst_step nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (inst_step1_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (match_condition? const-decl "bool" aux_nominal_AC_unification nil)
    (nominal_AC_fresh_subs def-decl "bool" nominal_AC_fresh_subs nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (disjoint? const-decl "bool" sets nil)
    (well_formed? const-decl "bool" nominal_AC_unification nil)
    (unifies? def-decl "bool" nominal_AC_unification nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step_complete_unifies 0
  (inst_step_complete_unifies-1 nil 3888406803
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (name-replace "P2" "inst_step(PV, G, P, null, null)`2")
            (("" (reveal -1)
              (("" (expand "inst_step" -1)
                (("" (lift-if)
                  (("" (hide -2)
                    (("" (split -1)
                      (("1" (flatten)
                        (("1" (replace -2 :dir rl)
                          (("1" (expand "unifies?" 1)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (name-replace "t" "car(P)`1")
                          (("1" (name-replace "s" "car(P)`2")
                            (("1"
                              (name-replace "G1"
                               "inst_step(PV, G, t, s)`1")
                              (("1"
                                (name-replace
                                 "sig"
                                 "inst_step(PV, G, t, s)`2")
                                (("1"
                                  (name-replace
                                   "skp"
                                   "inst_step(PV, G, t, s)`3")
                                  (("1"
                                    (name-replace
                                     "fai"
                                     "inst_step(PV, G, t, s)`4")
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (replace -2 2 :dir rl)
                                          (("1"
                                            (expand "unifies?" 2)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "fai" 1)
                                              (("1"
                                                (use
                                                 "inst_step2_append")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (replace -3)
                                                      (("1"
                                                        (name-replace
                                                         "sig1"
                                                         "inst_step(PV, G, cdr(P), null, null)`3")
                                                        (("1"
                                                          (reveal -1)
                                                          (("1"
                                                            (replace
                                                             -2
                                                             3)
                                                            (("1"
                                                              (rewrite
                                                               "unifies?_append"
                                                               3)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (hide
                                                                   -2)
                                                                  (("1"
                                                                    (reveal
                                                                     -10)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "cdr(P)")
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         -1
                                                                         2)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "Del"
                                                                             "G"
                                                                             "PV"
                                                                             "del")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (expand
                                                                                   "unifies?"
                                                                                   -4)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (rewrite
                                                                                   "well_formed_unif_prb"
                                                                                   1)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "well_formed_unif_prb"
                                                                                     -5)
                                                                                    (("2"
                                                                                      (skolem
                                                                                       1
                                                                                       "u")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -5
                                                                                         "u")
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "member"
                                                                                               5)
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (lemma
                                                                                   "inst_step_match_condition_cdr")
                                                                                  (("3"
                                                                                    (inst
                                                                                     -1
                                                                                     "G"
                                                                                     "cdr(P)"
                                                                                     "PV"
                                                                                     "s"
                                                                                     "t")
                                                                                    (("3"
                                                                                      (assert)
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "skp"
                                                                                           -2)
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (case
                                                                                               "P = cons((t, s), cdr(P))")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (decompose-equality
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   ("t"
                                                                                                    "s"))
                                                                                                  (("2"
                                                                                                    (decompose-equality
                                                                                                     1)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (rewrite
                                                                   "apply_sub_unifies")
                                                                  (("2"
                                                                    (hide
                                                                     -2)
                                                                    (("2"
                                                                      (expand
                                                                       "unifies?"
                                                                       -4)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (lemma
                                                                           "inst_step_complete_equal")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "Del"
                                                                             "G"
                                                                             "cdr(P)"
                                                                             "PV"
                                                                             "del")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (replace
                                                                                 -2)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "unifies?_equal")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "Del"
                                                                                       "del"
                                                                                       "append(del, sig1)"
                                                                                       "cons((t, s), null)")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "unifies?"
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "unifies?"
                                                                                             1
                                                                                             2)
                                                                                            (("2"
                                                                                              (case
                                                                                               "car(P) = (t, s)")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 ("t"
                                                                                                  "s"))
                                                                                                (("2"
                                                                                                  (decompose-equality
                                                                                                   1)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "inst_step4_no_effect_cor")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "G"
                                                         "cdr(P)"
                                                         "cons((t, s), null)"
                                                         "PV"
                                                         "null")
                                                        (("2"
                                                          (replace -2)
                                                          (("2"
                                                            (lemma
                                                             "inst_step_fail")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "G"
                                                               "cdr(P)"
                                                               "PV"
                                                               "cons((t,s), null)"
                                                               "null")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (replace
                                                                     -5)
                                                                    (("2"
                                                                      (replace
                                                                       -1)
                                                                      (("2"
                                                                        (expand
                                                                         "unifies?"
                                                                         3)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (rewrite
                                               "append_null"
                                               -1)
                                              (("2"
                                                (expand
                                                 "apply_sub"
                                                 -1
                                                 2)
                                                (("2"
                                                  (rewrite
                                                   "inst_step2_no_effect_cor")
                                                  (("2"
                                                    (name-replace
                                                     "P1"
                                                     "apply_sub(sig, cdr(P))")
                                                    (("2"
                                                      (reveal -1)
                                                      (("2"
                                                        (reveal -8)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "P1")
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "Del"
                                                               "G1"
                                                               "PV"
                                                               "del")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (expand
                                                                     "P1"
                                                                     1)
                                                                    (("1"
                                                                      (rewrite
                                                                       "apply_sub_unifies")
                                                                      (("1"
                                                                        (lemma
                                                                         "unifies?_equal")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "del")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "unifies?"
                                                                                 -3)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "sig"
                                                                                       1)
                                                                                      (("1"
                                                                                        (use
                                                                                         "inst_step_unifies_equal_sub")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (case
                                                                                               "car(P) = (t, s)")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 ("t"
                                                                                                  "s"))
                                                                                                (("2"
                                                                                                  (decompose-equality
                                                                                                   1)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "P1"
                                                                     1)
                                                                    (("2"
                                                                      (use
                                                                       "well_formed_apply_sub")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (rewrite
                                                                           "well_formed_unif_prb"
                                                                           -4)
                                                                          (("2"
                                                                            (prop)
                                                                            (("1"
                                                                              (rewrite
                                                                               "well_formed_unif_prb")
                                                                              (("1"
                                                                                (skolem
                                                                                 1
                                                                                 "u")
                                                                                (("1"
                                                                                  (inst
                                                                                   -4
                                                                                   "u")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "member"
                                                                                         6)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "sig"
                                                                               1)
                                                                              (("2"
                                                                                (use
                                                                                 "inst_step_well_formed_aux")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -4
                                                                                       "t")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           ("member"
                                                                                            "t"))
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (inst
                                                                                       -4
                                                                                       "s")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           ("member"
                                                                                            "s"))
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (expand
                                                                     "G1"
                                                                     1)
                                                                    (("3"
                                                                      (lemma
                                                                       "inst_step_nominal_AC_fresh_subs")
                                                                      (("3"
                                                                        (inst
                                                                         -1
                                                                         "Del"
                                                                         "G"
                                                                         "cdr(P)"
                                                                         "PV"
                                                                         "del"
                                                                         "s"
                                                                         "t")
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (case
                                                                               "P = cons((t, s), cdr(P))")
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "unifies?"
                                                                                     -4)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (case
                                                                                         "car(P) = (t, s)")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           ("t"
                                                                                            "s"))
                                                                                          (("2"
                                                                                            (decompose-equality
                                                                                             1)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (decompose-equality
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   ("t"
                                                                                    "s"))
                                                                                  (("2"
                                                                                    (decompose-equality
                                                                                     1)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (expand
                                                                     "P1"
                                                                     1)
                                                                    (("4"
                                                                      (lemma
                                                                       "inst_step_match_condition_apply_sub")
                                                                      (("4"
                                                                        (inst
                                                                         -1
                                                                         "G"
                                                                         "cdr(P)"
                                                                         "PV"
                                                                         "s"
                                                                         "t")
                                                                        (("4"
                                                                          (assert)
                                                                          (("4"
                                                                            (expand
                                                                             ("skp"
                                                                              "fai"))
                                                                            (("4"
                                                                              (assert)
                                                                              (("4"
                                                                                (expand
                                                                                 "sig"
                                                                                 1)
                                                                                (("4"
                                                                                  (assert)
                                                                                  (("4"
                                                                                    (case
                                                                                     "P = cons((t, s), cdr(P))")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       :dir
                                                                                       rl)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (decompose-equality
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         ("t"
                                                                                          " s")
                                                                                         1)
                                                                                        (("2"
                                                                                          (decompose-equality
                                                                                           1)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "P1")
                                                              (("2"
                                                                (rewrite
                                                                 "apply_sub_len")
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   1
                                                                   2)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (fai skolem-const-decl "bool" nominal_AC_inst_step nil)
    (inst_step4_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (inst_step_fail formula-decl nil nominal_AC_inst_step nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (unifies?_append formula-decl nil nominal_AC_unification nil)
    (apply_sub_unifies formula-decl nil nominal_AC_unification nil)
    (inst_step_complete_equal formula-decl nil nominal_AC_inst_step
     nil)
    (append def-decl "list[T]" list_props nil)
    (unifies?_equal formula-decl nil nominal_AC_unification nil)
    (inst_step_match_condition_cdr formula-decl nil
     nominal_AC_inst_step nil)
    (skp skolem-const-decl "bool" nominal_AC_inst_step nil)
    (s skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]"
     nominal_AC_inst_step nil)
    (t skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]"
     nominal_AC_inst_step nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (well_formed_unif_prb formula-decl nil nominal_AC_unification nil)
    (member def-decl "bool" nominal_AC_unification nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (inst_step2_append formula-decl nil nominal_AC_inst_step nil)
    (append_null formula-decl nil list_props nil)
    (inst_step2_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (sig skolem-const-decl "sub" nominal_AC_inst_step nil)
    (inst_step_unifies_equal_sub formula-decl nil nominal_AC_inst_step
     nil)
    (P1 skolem-const-decl "unif_prb" nominal_AC_inst_step nil)
    (well_formed_apply_sub formula-decl nil nominal_AC_unification nil)
    (inst_step_well_formed_aux formula-decl nil nominal_AC_inst_step
     nil)
    (inst_step_nominal_AC_fresh_subs formula-decl nil
     nominal_AC_inst_step nil)
    (G1 skolem-const-decl "fresh_context" nominal_AC_inst_step nil)
    (inst_step_match_condition_apply_sub formula-decl nil
     nominal_AC_inst_step nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (match_condition? const-decl "bool" aux_nominal_AC_unification nil)
    (nominal_AC_fresh_subs def-decl "bool" nominal_AC_fresh_subs nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (disjoint? const-decl "bool" sets nil)
    (well_formed? const-decl "bool" nominal_AC_unification nil)
    (unifies? def-decl "bool" nominal_AC_unification nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step_complete_more_general 0
  (inst_step_complete_more_general-1 nil 3888418797
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (name-replace "sig1" "inst_step(PV, G, P, null, null)`3")
          (("" (reveal -1)
            (("" (expand "more_general?" -2)
              (("" (skolem -2 "del1")
                (("" (lemma "unifies?_equal")
                  ((""
                    (inst -1 "Del" "delta" "append(del1, sigma)" "P")
                    (("" (assert)
                      (("" (rewrite "apply_sub_unifies" -1 :dir rl)
                        (("" (use "apply_sub_no_effect")
                          (("" (assert)
                            (("" (replace -1)
                              ((""
                                (lemma "inst_step_complete_equal")
                                ((""
                                  (inst -1 "Del" "G" "P" "PV" "del1")
                                  ((""
                                    (assert)
                                    ((""
                                      (replace -4)
                                      ((""
                                        (lemma "more_general_equal")
                                        ((""
                                          (inst
                                           -1
                                           "Del"
                                           "append(sig1, sigma)"
                                           " delta"
                                           "append(del1, sigma)")
                                          ((""
                                            (assert)
                                            ((""
                                              (expand
                                               "more_general?"
                                               1)
                                              ((""
                                                (inst 1 "del1")
                                                ((""
                                                  (rewrite
                                                   "append_assoc"
                                                   :dir
                                                   rl)
                                                  ((""
                                                    (lemma
                                                     "equal_sub_append")
                                                    ((""
                                                      (inst
                                                       -1
                                                       "Del"
                                                       "sigma"
                                                       "del1"
                                                       "append(del1, sig1)")
                                                      ((""
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (more_general? const-decl "bool" nominal_AC_substitution nil)
    (unifies?_equal formula-decl nil nominal_AC_unification nil)
    (apply_sub_no_effect formula-decl nil nominal_AC_unification nil)
    (append_assoc formula-decl nil list_props nil)
    (equal_sub_append formula-decl nil nominal_AC_substitution nil)
    (more_general_equal formula-decl nil nominal_AC_substitution nil)
    (inst_step_complete_equal formula-decl nil nominal_AC_inst_step
     nil)
    (apply_sub_unifies formula-decl nil nominal_AC_unification nil)
    (append def-decl "list[T]" list_props nil))
   shostak))
 (inst_step_complete 0
  (inst_step_complete-1 nil 3888396969
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "G1" "inst_step(PV, G, P, null, null)`1")
        (("" (name-replace "P1" "inst_step(PV, G, P, null, null)`2")
          ((""
            (name-replace "sigma1" "inst_step(PV, G, P, null, null)`3")
            (("" (prop)
              (("" (expand "is_sol?")
                (("" (prop)
                  (("1"
                    (lemma "inst_step_complete_nominal_AC_fresh_subs")
                    (("1" (inst?)
                      (("1" (expand "G1" 1)
                        (("1" (inst?)
                          (("1" (assert) (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "P1" 1)
                    (("2" (lemma "inst_step_complete_unifies")
                      (("2" (inst -1 "Del" "G" "P" "PV" "del")
                        (("2" (assert) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (lemma "inst_step_complete_more_general")
                    (("3" (inst -1 "Del" "G" "P" "PV" "del" "sigma")
                      (("3" (assert)
                        (("3" (assert)
                          (("3" (expand "sigma1" 1)
                            (("3" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((G1 skolem-const-decl "fresh_context" nominal_AC_inst_step nil)
    (inst_step_complete_nominal_AC_fresh_subs formula-decl nil
     nominal_AC_inst_step nil)
    (inst_step_complete_unifies formula-decl nil nominal_AC_inst_step
     nil)
    (P1 skolem-const-decl "unif_prb" nominal_AC_inst_step nil)
    (sigma1 skolem-const-decl "sub" nominal_AC_inst_step nil)
    (inst_step_complete_more_general formula-decl nil
     nominal_AC_inst_step nil)
    (is_sol? const-decl "bool" nominal_AC_unification nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (inst_step_well_formed 0
  (inst_step_well_formed-1 nil 3882719445
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" 1)
            (("" (split 1)
              (("1" (flatten)
                (("1" (rewrite "well_formed_null") nil nil)) nil)
               ("2" (name-replace "t" "car(P)`1")
                (("1" (name-replace "s" "car(P)`2")
                  (("1" (name-replace "G1" "inst_step(PV, G, t, s)`1")
                    (("1"
                      (name-replace "del" "inst_step(PV, G, t, s)`2")
                      (("1"
                        (name-replace "skp" "inst_step(PV, G, t, s)`3")
                        (("1"
                          (name-replace "fai"
                           "inst_step(PV, G, t, s)`4")
                          (("1" (reveal -1 -2 -3 -4 -5 -6)
                            (("1" (prop)
                              (("1"
                                (rewrite "well_formed_null")
                                nil
                                nil)
                               ("2"
                                (rewrite "inst_step3_no_effect_cor")
                                (("2"
                                  (inst -8 "cdr(P)")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (rewrite
                                           "well_formed_unif_prb"
                                           1)
                                          (("1"
                                            (rewrite
                                             "well_formed_unif_prb"
                                             -7)
                                            (("1"
                                              (hide-all-but (-7 1))
                                              (("1"
                                                (skeep)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (rewrite "append_null")
                                (("3"
                                  (expand "apply_sub" 2 2)
                                  (("3"
                                    (case "well_formed?(del)")
                                    (("1"
                                      (rewrite
                                       "inst_step_sub_append_cor")
                                      (("1"
                                        (use "well_formed_append")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide 3)
                                            (("1"
                                              (inst
                                               -6
                                               "apply_sub(del, cdr(P))")
                                              (("1"
                                                (rewrite
                                                 "apply_sub_len")
                                                (("1"
                                                  (expand
                                                   "length"
                                                   -6
                                                   2)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (use
                                                           "well_formed_apply_sub")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide-all-but
                                                               (-6
                                                                7
                                                                1))
                                                              (("1"
                                                                (rewrite
                                                                 "well_formed_unif_prb")
                                                                (("1"
                                                                  (rewrite
                                                                   "well_formed_unif_prb")
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (inst
                                                                       -2
                                                                       "t!1")
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "del" 1)
                                      (("2"
                                        (use
                                         "inst_step_well_formed_aux")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide 2 3 4 5 6 7 -5)
                                            (("2"
                                              (rewrite
                                               "well_formed_unif_prb")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (inst -5 "t")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst -5 "s")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((well_formed_null formula-decl nil nominal_AC_substitution nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (subterms def-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_unification nil)
    (subterms const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_unification nil)
    (DS const-decl "list[atom]" atoms nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (singleton const-decl "(singleton?)" sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (well_formed_unif_prb formula-decl nil nominal_AC_unification nil)
    (member const-decl "bool" sets nil)
    (well_formed? const-decl "bool" nominal_AC_term_properties nil)
    (member def-decl "bool" nominal_AC_unification nil)
    (num_arg def-decl "nat" nominal_AC_term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (inst_step3_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (del skolem-const-decl "sub" nominal_AC_inst_step nil)
    (inst_step_well_formed_aux formula-decl nil nominal_AC_inst_step
     nil)
    (inst_step_sub_append_cor formula-decl nil nominal_AC_inst_step
     nil)
    (well_formed_apply_sub formula-decl nil nominal_AC_unification nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (well_formed_append formula-decl nil nominal_AC_substitution nil)
    (append_null formula-decl nil list_props nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (well_formed? const-decl "bool" nominal_AC_substitution nil)
    (well_formed? const-decl "bool" nominal_AC_unification nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step_well_formed2 0
  (inst_step_well_formed2-1 nil 3882858502
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" 1)
            (("" (split)
              (("1" (flatten)
                (("1" (rewrite "well_formed_unif_prb")
                  (("1" (grind) nil nil)) nil))
                nil)
               ("2" (flatten)
                (("2" (name-replace "t" "car(P)`1")
                  (("1" (name-replace "s" "car(P)`2")
                    (("1"
                      (name-replace "G1" "inst_step(PV, G, t, s)`1")
                      (("1"
                        (name-replace "del" "inst_step(PV, G, t, s)`2")
                        (("1"
                          (name-replace "skp"
                           "inst_step(PV, G, t, s)`3")
                          (("1"
                            (name-replace "fai"
                             "inst_step(PV, G, t, s)`4")
                            (("1" (prop)
                              (("1"
                                (rewrite "well_formed_unif_prb")
                                (("1"
                                  (hide -2)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (use "inst_step2_append")
                                (("2"
                                  (assert)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (rewrite
                                         "well_formed_unif_prb_append")
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (inst -2 "cdr(P)")
                                              (("1"
                                                (expand "length" -2 2)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide-all-but
                                                       (-2 3 4))
                                                      (("1"
                                                        (rewrite
                                                         "well_formed_unif_prb")
                                                        (("1"
                                                          (rewrite
                                                           "well_formed_unif_prb")
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst
                                                               -2
                                                               "t!1")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -2)
                                              (("2"
                                                (use
                                                 "well_formed_apply_sub")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (rewrite
                                                       "well_formed_unif_prb")
                                                      (("1"
                                                        (rewrite
                                                         "well_formed_unif_prb")
                                                        (("1"
                                                          (skolem
                                                           1
                                                           "t1")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   ("t"
                                                                    "s"))
                                                                  (("1"
                                                                    (expand
                                                                     "member"
                                                                     4)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "inst_step_well_formed")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (hide-all-but
                                                           (-2 1 5))
                                                          (("2"
                                                            (rewrite
                                                             "well_formed_unif_prb")
                                                            (("2"
                                                              (rewrite
                                                               "well_formed_unif_prb")
                                                              (("2"
                                                                (skolem
                                                                 1
                                                                 "t1")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "t1")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma
                                       "inst_step4_no_effect_cor")
                                      (("2"
                                        (inst
                                         -1
                                         "G"
                                         "cdr(P)"
                                         "cons((t, s), null)"
                                         "PV"
                                         "null")
                                        (("2"
                                          (replace -2)
                                          (("2"
                                            (hide -2)
                                            (("2"
                                              (use "inst_step_fail")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (rewrite
                                                         "well_formed_unif_prb")
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (rewrite "append_null")
                                (("3"
                                  (expand "apply_sub" 2 2)
                                  (("3"
                                    (rewrite
                                     "inst_step2_no_effect_cor")
                                    (("3"
                                      (inst
                                       -1
                                       "apply_sub(del, cdr(P))")
                                      (("3"
                                        (rewrite "apply_sub_len")
                                        (("3"
                                          (expand "length" -1 2)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (inst?)
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (use
                                                   "well_formed_apply_sub")
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (prop)
                                                      (("1"
                                                        (rewrite
                                                         "well_formed_unif_prb")
                                                        (("1"
                                                          (rewrite
                                                           "well_formed_unif_prb"
                                                           -1)
                                                          (("1"
                                                            (skolem
                                                             1
                                                             "t1")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "del"
                                                         1)
                                                        (("2"
                                                          (use
                                                           "inst_step_well_formed_aux")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide
                                                               2
                                                               4
                                                               7)
                                                              (("2"
                                                                (rewrite
                                                                 "well_formed_unif_prb")
                                                                (("2"
                                                                  (prop)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "t")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (inst
                                                                     -1
                                                                     "s")
                                                                    (("2"
                                                                      (expand
                                                                       "s")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((well_formed_unif_prb formula-decl nil nominal_AC_unification nil)
    (well_formed? const-decl "bool" nominal_AC_term_properties nil)
    (member def-decl "bool" nominal_AC_unification nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (subterms def-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_unification nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (union const-decl "set" sets nil)
    (subterms const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_unification nil)
    (inst_step4_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (inst_step_fail formula-decl nil nominal_AC_inst_step nil)
    (s skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]"
     nominal_AC_inst_step nil)
    (t skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]"
     nominal_AC_inst_step nil)
    (inst_step_well_formed formula-decl nil nominal_AC_inst_step nil)
    (well_formed_apply_sub formula-decl nil nominal_AC_unification nil)
    (well_formed_unif_prb_append formula-decl nil
     nominal_AC_unification nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (inst_step2_append formula-decl nil nominal_AC_inst_step nil)
    (inst_step_well_formed_aux formula-decl nil nominal_AC_inst_step
     nil)
    (del skolem-const-decl "sub" nominal_AC_inst_step nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (inst_step2_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (append_null formula-decl nil list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (well_formed? const-decl "bool" nominal_AC_unification nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step_vars_context 0
  (inst_step_vars_context-1 nil 3882710049
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" 1)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten)
                  (("1" (hide -2) (("1" (grind) nil nil)) nil)) nil)
                 ("2" (flatten)
                  (("2" (name-replace "t" "car(P)`1")
                    (("1" (name-replace "s" "car(P)`2")
                      (("1"
                        (name-replace "G1" "inst_step(PV, G, t, s)`1")
                        (("1"
                          (name-replace "del"
                           "inst_step(PV, G, t, s)`2")
                          (("1"
                            (name-replace "skp"
                             "inst_step(PV, G, t, s)`3")
                            (("1"
                              (name-replace "fai"
                               "inst_step(PV, G, t, s)`4")
                              (("1"
                                (prop)
                                (("1"
                                  (hide -2)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (rewrite "inst_step1_no_effect_cor")
                                  (("2"
                                    (inst -2 "cdr(P)")
                                    (("2"
                                      (expand "length" -2 2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (expand "subset?")
                                            (("2"
                                              (skeep)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (rewrite "append_null")
                                  (("3"
                                    (expand "apply_sub" 2 2)
                                    (("3"
                                      (reveal -1 -2 -3 -4 -5 -6)
                                      (("3"
                                        (rewrite
                                         "inst_step1_no_effect_cor2")
                                        (("3"
                                          (inst
                                           -7
                                           "apply_sub(del, cdr(P))")
                                          (("3"
                                            (rewrite
                                             "apply_sub_len"
                                             -7)
                                            (("3"
                                              (expand "length" -7 2)
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (inst?)
                                                  (("3"
                                                    (expand "subset?")
                                                    (("3"
                                                      (skeep)
                                                      (("3"
                                                        (inst -8 "x")
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (use
                                                             "inst_step_vars_context_aux")
                                                            (("3"
                                                              (replace
                                                               -5)
                                                              (("3"
                                                                (expand
                                                                 ("member"
                                                                  "union")
                                                                 2)
                                                                (("3"
                                                                  (prop)
                                                                  (("3"
                                                                    (expand
                                                                     "subset?"
                                                                     -1)
                                                                    (("3"
                                                                      (inst
                                                                       -1
                                                                       "x")
                                                                      (("3"
                                                                        (expand
                                                                         ("member"
                                                                          "union")
                                                                         -7)
                                                                        (("3"
                                                                          (split
                                                                           -7)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               ("member"
                                                                                "union")
                                                                               -2)
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-2
                                                                                  -5
                                                                                  -6
                                                                                  3))
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (use
                                                                             "apply_sub_vars")
                                                                            (("2"
                                                                              (expand
                                                                               "subset?"
                                                                               -1)
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "x")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     ("member"
                                                                                      "union")
                                                                                     -1)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -3)
                                                                                      (("2"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (use
                                                                                           "inst_step_img")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "subset?"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "x")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    -6
                                                                                                    -7
                                                                                                    3))
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           (-1
                                                                                            3
                                                                                            5))
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((append_null formula-decl nil list_props nil)
    (inst_step_img formula-decl nil nominal_AC_inst_step nil)
    (apply_sub_vars formula-decl nil nominal_AC_unification nil)
    (inst_step_vars_context_aux formula-decl nil nominal_AC_inst_step
     nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (inst_step1_no_effect_cor2 formula-decl nil nominal_AC_inst_step
     nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (inst_step1_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (vars def-decl "finite_set[variable]" nominal_AC_unification nil)
    (union const-decl "set" sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_freshness nil)
    (subset? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step_ctx_correct 0
  (inst_step_ctx_correct-1 nil 3887380991
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" 1 1)
            (("" (lift-if)
              (("" (split 1)
                (("1" (flatten)
                  (("1" (expand "inst_step_ctx" 1)
                    (("1" (assert)
                      (("1" (expand "append" 1)
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (name-replace "t" "car(P)`1")
                    (("1" (name-replace "s" "car(P)`2")
                      (("1"
                        (name-replace "G1" "inst_step(PV, G, t, s)`1")
                        (("1"
                          (name-replace "del"
                           "inst_step(PV, G, t, s)`2")
                          (("1"
                            (name-replace "skp"
                             "inst_step(PV, G, t, s)`3")
                            (("1"
                              (name-replace "fai"
                               "inst_step(PV, G, t, s)`4")
                              (("1"
                                (reveal -1 -2 -3 -4 -5 -6)
                                (("1"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "inst_step_ctx" 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "append" 1)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (rewrite
                                           "inst_step1_no_effect_cor")
                                          (("1"
                                            (expand "inst_step_ctx" 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst -7 "cdr(P)")
                                                (("1"
                                                  (expand
                                                   "length"
                                                   -7
                                                   2)
                                                  (("1"
                                                    (inst -7 "G" "PV")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (rewrite "append_null")
                                          (("2"
                                            (expand "apply_sub" 2 2)
                                            (("2"
                                              (rewrite
                                               "inst_step1_no_effect_cor2")
                                              (("2"
                                                (expand
                                                 "inst_step_ctx"
                                                 2)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replace -3)
                                                    (("2"
                                                      (replace -4)
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (replace -2)
                                                          (("2"
                                                            (name-replace
                                                             "P2"
                                                             "apply_sub(del, cdr(P))")
                                                            (("2"
                                                              (reveal
                                                               -1)
                                                              (("2"
                                                                (use
                                                                 "inst_step_ctx_correct_aux")
                                                                (("2"
                                                                  (replace
                                                                   -4)
                                                                  (("2"
                                                                    (rewrite
                                                                     "append_assoc"
                                                                     2)
                                                                    (("2"
                                                                      (replace
                                                                       -1
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (inst
                                                                         -7
                                                                         "P2")
                                                                        (("2"
                                                                          (prop)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "G1"
                                                                             "PV")
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (replace
                                                                             -2
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (rewrite
                                                                               "apply_sub_len")
                                                                              (("2"
                                                                                (expand
                                                                                 "length"
                                                                                 1
                                                                                 2)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (inst_step1_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (append_null formula-decl nil list_props nil)
    (inst_step1_no_effect_cor2 formula-decl nil nominal_AC_inst_step
     nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (append_assoc formula-decl nil list_props nil)
    (inst_step_ctx const-decl "fresh_context" nominal_AC_inst_step nil)
    (inst_step_ctx_correct_aux formula-decl nil nominal_AC_inst_step
     nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (inst_step_ctx def-decl "fresh_context" nominal_AC_inst_step nil)
    (append def-decl "list[T]" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step_match_img2 0
  (inst_step_match_img2-1 nil 3883820596
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          ((""
            (name-replace "delta" "inst_step(PV, G, P, null, null)`3")
            (("" (reveal -1)
              (("" (expand "inst_step" -1 1)
                (("" (lift-if)
                  (("" (split -1)
                    (("1" (flatten)
                      (("1" (replace -2 :dir rl)
                        (("1" (hide-all-but 1)
                          (("1" (rewrite "img_null")
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (name-replace "t" "car(P)`1")
                        (("1" (name-replace "s" "car(P)`2")
                          (("1"
                            (name-replace "G1"
                             "inst_step(PV, G, t, s)`1")
                            (("1"
                              (name-replace "del"
                               "inst_step(PV, G, t, s)`2")
                              (("1"
                                (name-replace
                                 "skp"
                                 "inst_step(PV, G, t, s)`3")
                                (("1"
                                  (name-replace
                                   "fai"
                                   "inst_step(PV, G, t, s)`4")
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (replace -2 :dir rl)
                                        (("1"
                                          (hide-all-but 2)
                                          (("1"
                                            (rewrite "img_null")
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (rewrite
                                             "inst_step3_no_effect_cor")
                                            (("1"
                                              (inst -3 "cdr(P)")
                                              (("1"
                                                (expand "length" -3 2)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "inst_step_match_condition_cdr")
                                                          (("1"
                                                            (expand
                                                             "skp"
                                                             -2)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "cdr(P)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (case
                                                                       "P = cons((t, s), cdr(P))")
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (1
                                                                          4))
                                                                        (("2"
                                                                          (decompose-equality
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             ("t"
                                                                              "s"))
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (rewrite "append_null")
                                            (("2"
                                              (expand "apply_sub" -1 2)
                                              (("2"
                                                (inst
                                                 -2
                                                 "apply_sub(del, cdr(P))")
                                                (("2"
                                                  (rewrite
                                                   "apply_sub_len")
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -2
                                                     2)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (rewrite
                                                         "inst_step_sub_append_cor"
                                                         -1)
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (case
                                                             "match_condition?(apply_sub(del, cdr(P)), PV)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (name-replace
                                                                 "delta1"
                                                                 "inst_step(PV, G1, apply_sub(del, cdr(P)), null, null)`3")
                                                                (("1"
                                                                  (reveal
                                                                   -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "inst_step_match_img")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "G"
                                                                       "cdr(P)"
                                                                       "PV"
                                                                       "s"
                                                                       "t")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "P = cons((t, s), cdr(P))")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (reveal
                                                                                 -7)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (-3
                                                                                      -6
                                                                                      -7
                                                                                      4))
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2
                                                                                       :dir
                                                                                       rl)
                                                                                      (("1"
                                                                                        (use
                                                                                         "vars_img_append")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "subset?"
                                                                                           1)
                                                                                          (("1"
                                                                                            (skeep)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "subset?"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "x")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     ("member"
                                                                                                      "union")
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (prop)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "subset?"
                                                                                                         -4)
                                                                                                        (("1"
                                                                                                          (inst?)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "subset?"
                                                                                                         -2)
                                                                                                        (("2"
                                                                                                          (inst?)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (1
                                                                              4))
                                                                            (("2"
                                                                              (expand
                                                                               ("t"
                                                                                "s"))
                                                                              (("2"
                                                                                (decompose-equality
                                                                                 1)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide -2)
                                                              (("2"
                                                                (expand
                                                                 ("skp"
                                                                  "fai"))
                                                                (("2"
                                                                  (lemma
                                                                   "inst_step_match_condition_apply_sub")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "G"
                                                                     "cdr(P)"
                                                                     "PV"
                                                                     "s"
                                                                     "t")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (reveal
                                                                           -7)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (case
                                                                               "P = cons((t, s), cdr(P))")
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   ("t"
                                                                                    "s"))
                                                                                  (("2"
                                                                                    (decompose-equality
                                                                                     1)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (inst_step_match_condition_apply_sub formula-decl nil
     nominal_AC_inst_step nil)
    (fai skolem-const-decl "bool" nominal_AC_inst_step nil)
    (union const-decl "set" sets nil)
    (vars_img_append formula-decl nil nominal_AC_substitution nil)
    (inst_step_match_img formula-decl nil nominal_AC_inst_step nil)
    (inst_step_sub_append_cor formula-decl nil nominal_AC_inst_step
     nil)
    (append_null formula-decl nil list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (inst_step_match_condition_cdr formula-decl nil
     nominal_AC_inst_step nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (t skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]"
     nominal_AC_inst_step nil)
    (s skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]"
     nominal_AC_inst_step nil)
    (skp skolem-const-decl "bool" nominal_AC_inst_step nil)
    (inst_step3_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (img_null formula-decl nil nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (subset? const-decl "bool" sets nil)
    (match_condition? const-decl "bool" aux_nominal_AC_unification nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step_match_aux 0
  (inst_step_match_aux-2 nil 3883561433
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          ((""
            (name-replace "delta" "inst_step(PV, G, P, null, null)`3")
            (("" (reveal -1)
              (("" (expand "inst_step" -1)
                (("" (lift-if)
                  (("" (split -1)
                    (("1" (flatten)
                      (("1" (hide-all-but (-1 -5))
                        (("1" (grind) nil nil)) nil))
                      nil)
                     ("2" (name-replace "t" "car(P)`1")
                      (("1" (name-replace "s" "car(P)`2")
                        (("1"
                          (name-replace "G1"
                           "inst_step(PV, G, t, s)`1")
                          (("1"
                            (name-replace "del"
                             "inst_step(PV, G, t, s)`2")
                            (("1"
                              (name-replace "skp"
                               "inst_step(PV, G, t, s)`3")
                              (("1"
                                (name-replace
                                 "fai"
                                 "inst_step(PV, G, t, s)`4")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "fai" -1)
                                      (("1"
                                        (hide -3)
                                        (("1"
                                          (reveal -2 -3 -4 -5 -6 -7)
                                          (("1"
                                            (expand "inst_step" 3)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite
                                       "inst_step3_no_effect_cor")
                                      (("2"
                                        (inst -3 "cdr(P)")
                                        (("2"
                                          (expand "length" -3 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (inst -3 "Y")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (replace -3)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -4 4 5 6)
                                                    (("2"
                                                      (lemma
                                                       "inst_step_match_condition_cdr")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "G"
                                                         "cdr(P)"
                                                         "PV"
                                                         "car(P)`2 "
                                                         "car(P)`1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "skp"
                                                             -2)
                                                            (("2"
                                                              (expand
                                                               ("t"
                                                                "s"))
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (case
                                                                   "P = cons((car(P)`1, car(P)`2), cdr(P))")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (1
                                                                      5))
                                                                    (("2"
                                                                      (decompose-equality
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand "rhs" -4)
                                                    (("3"
                                                      (expand "rhs" 1)
                                                      (("3"
                                                        (expand
                                                         "sec_proj"
                                                         -4)
                                                        (("3"
                                                          (expand
                                                           ("member"
                                                            "union")
                                                           -4)
                                                          (("3"
                                                            (expand
                                                             "vars"
                                                             -4)
                                                            (("3"
                                                              (expand
                                                               "union"
                                                               -4)
                                                              (("3"
                                                                (prop)
                                                                (("3"
                                                                  (expand
                                                                   "match_condition?")
                                                                  (("3"
                                                                    (inst
                                                                     -4
                                                                     "Y")
                                                                    (("3"
                                                                      (prop)
                                                                      (("1"
                                                                        (skolem
                                                                         -1
                                                                         ("up"
                                                                          "i"))
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (case
                                                                             "i = 0")
                                                                            (("1"
                                                                              (expand
                                                                               "nth"
                                                                               -3)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -3)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "skp"
                                                                                     -8)
                                                                                    (("1"
                                                                                      (use
                                                                                       "inst_step_skip")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             ("t "
                                                                                              "s"))
                                                                                            (("1"
                                                                                              (expand
                                                                                               "member"
                                                                                               -5)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -6)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         -2
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           :dir
                                                                                                           rl)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (inst
                                                                               -5
                                                                               "0")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "nth"
                                                                                   2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "vars"
                                                                                     2)
                                                                                    (("2"
                                                                                      (hide-all-but
                                                                                       (-5
                                                                                        2))
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "rhs"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "sec_proj"
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "vars"
                                                                             1)
                                                                            (("2"
                                                                              (hide-all-but
                                                                               (-1
                                                                                1))
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (reveal
                                                     -4
                                                     -5
                                                     -6
                                                     -7
                                                     -8
                                                     -9)
                                                    (("4"
                                                      (expand
                                                       "inst_step"
                                                       4)
                                                      (("4"
                                                        (assert)
                                                        (("4"
                                                          (rewrite
                                                           "inst_step4_no_effect_cor"
                                                           5)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (rewrite "append_null")
                                      (("3"
                                        (expand "apply_sub" -1 2)
                                        (("3"
                                          (rewrite
                                           "inst_step_sub_append_cor")
                                          (("3"
                                            (name-replace
                                             "delta1"
                                             "inst_step(PV, G1, apply_sub(del, cdr(P)), null, null)`3")
                                            (("3"
                                              (reveal -1)
                                              (("3"
                                                (case
                                                 "member(Y, dom(del))")
                                                (("1"
                                                  (hide -4)
                                                  (("1"
                                                    (reveal -5)
                                                    (("1"
                                                      (expand
                                                       "match_condition?")
                                                      (("1"
                                                        (inst -5 "Y")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skolem
                                                             -5
                                                             ("up"
                                                              "i"))
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (case
                                                                 "i = 0")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     -7)
                                                                    (("1"
                                                                      (replace
                                                                       -7)
                                                                      (("1"
                                                                        (use
                                                                         "inst_step_inst_ptc_vars_img2")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (replace
                                                                               -3)
                                                                              (("1"
                                                                                (replace
                                                                                 -6
                                                                                 6
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (expand
                                                                                   "subs"
                                                                                   6)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "subs_append2")
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "subs_no_effect_t")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "delta1"
                                                                                         "subs(del)(null * Y)")
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               (-2
                                                                                                -5
                                                                                                6))
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "subset?")
                                                                                                (("1"
                                                                                                  (skeep)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "x")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "vars_finset")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           1
                                                                                                           "subs(del)(null * Y)")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               ("member"
                                                                                                                "img")
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 1
                                                                                                                 "Y")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "subs"
                                                                                                                     1
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             (-1
                                                                                              -5
                                                                                              1))
                                                                                            (("2"
                                                                                              (use
                                                                                               "inst_step_dom_PV")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -3)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "disjoint?")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "empty?")
                                                                                                      (("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "x")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             ("member"
                                                                                                              "intersection"))
                                                                                                            (("2"
                                                                                                              (prop)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "subset?"
                                                                                                                 -3)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -3
                                                                                                                   "x")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "vars_finset")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         2
                                                                                                                         "subs(del)(null *Y)")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             ("member"
                                                                                                                              "img")
                                                                                                                             2)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               2
                                                                                                                               "Y")
                                                                                                                              (("2"
                                                                                                                                (reveal
                                                                                                                                 -5)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "subs"
                                                                                                                                     2
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (-9
                                                                                1))
                                                                              (("2"
                                                                                (expand
                                                                                 ("t"
                                                                                  "s"))
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "inst_ptc?")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst
                                                                   -9
                                                                   "0")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "nth"
                                                                       5)
                                                                      (("2"
                                                                        (case
                                                                         "subset?(dom(del), vars(t, s))")
                                                                        (("1"
                                                                          (hide-all-but
                                                                           (-1
                                                                            -3
                                                                            5))
                                                                          (("1"
                                                                            (expand
                                                                             "subset?")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   ("t"
                                                                                    "s"))
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (-1
                                                                            1))
                                                                          (("2"
                                                                            (use
                                                                             "inst_step_dom")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case
                                                   "member(Y, vars(img(del)))")
                                                  (("1"
                                                    (hide -4 2 3 6 7)
                                                    (("1"
                                                      (expand
                                                       "match_condition?")
                                                      (("1"
                                                        (inst -4 "Y")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skolem
                                                             -4
                                                             ("up"
                                                              "i"))
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (case
                                                                 "i = 0")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     -6)
                                                                    (("1"
                                                                      (replace
                                                                       -6)
                                                                      (("1"
                                                                        (reveal
                                                                         -6)
                                                                        (("1"
                                                                          (use
                                                                           "inst_step_inst_ptc_vars_img2")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -2)
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    -4
                                                                                    3))
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (-9
                                                                                    1))
                                                                                  (("2"
                                                                                    (expand
                                                                                     ("t"
                                                                                      "s"))
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst
                                                                   -8
                                                                   "0")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "nth"
                                                                       4)
                                                                      (("2"
                                                                        (expand
                                                                         "del"
                                                                         -1)
                                                                        (("2"
                                                                          (use
                                                                           "inst_step_img")
                                                                          (("2"
                                                                            (expand
                                                                             "subset?"
                                                                             -1)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "Y")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    4))
                                                                                  (("2"
                                                                                    (expand
                                                                                     ("t "
                                                                                      "s"))
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst
                                                     -3
                                                     "apply_sub(del, cdr(P))")
                                                    (("2"
                                                      (rewrite
                                                       "apply_sub_len")
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -3
                                                         2)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst
                                                             -3
                                                             "G1"
                                                             "PV"
                                                             "Y")
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "subs"
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "subs"
                                                                     8)
                                                                    (("1"
                                                                      (replace
                                                                       -3
                                                                       8
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (rewrite
                                                                         "subs_append2")
                                                                        (("1"
                                                                          (lemma
                                                                           "subs_no_effect_t")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "del"
                                                                             "null*Y")
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 (1
                                                                                  3))
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (reveal
                                                                 -6)
                                                                (("2"
                                                                  (lemma
                                                                   "inst_step_match_condition_apply_sub")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "G"
                                                                     "cdr(P)"
                                                                     "PV"
                                                                     "s"
                                                                     "t")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         ("skp"
                                                                          "fai"))
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (case
                                                                             "P = cons((t, s), cdr(P))")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (1
                                                                                8))
                                                                              (("2"
                                                                                (grind)
                                                                                (("2"
                                                                                  (decompose-equality
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "t"
                                                                                     1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "s"
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (expand
                                                                 "rhs"
                                                                 -4)
                                                                (("3"
                                                                  (expand
                                                                   "sec_proj"
                                                                   -4)
                                                                  (("3"
                                                                    (expand
                                                                     "vars"
                                                                     -4)
                                                                    (("3"
                                                                      (expand
                                                                       ("member"
                                                                        "union")
                                                                       -4)
                                                                      (("3"
                                                                        (prop)
                                                                        (("1"
                                                                          (expand
                                                                           "match_condition?"
                                                                           -4)
                                                                          (("1"
                                                                            (inst
                                                                             -4
                                                                             "Y")
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (skolem
                                                                                 -1
                                                                                 ("up"
                                                                                  "i"))
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (case
                                                                                     "i = 0")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nth"
                                                                                         -3)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -3)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "inst_ptc?"
                                                                                             -5)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member"
                                                                                                 -4)
                                                                                                (("1"
                                                                                                  (prop)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (hide-all-but
                                                                                                       (-5
                                                                                                        7))
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (reveal
                                                                                                     -7)
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "inst_step_inst_ptc_dom")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           ("fai"
                                                                                                            "t"
                                                                                                            "s"))
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               ("t"
                                                                                                                "s"))
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -2)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -3
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (prop)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (hide-all-but
                                                                                                                             3)
                                                                                                                            (("1"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (expand
                                                                                                                           "inst_ptc?"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (inst
                                                                                       -5
                                                                                       "0")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "nth"
                                                                                           2)
                                                                                          (("2"
                                                                                            (hide-all-but
                                                                                             (-5
                                                                                              2))
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "rhs"
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "sec_proj")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "vars"
                                                                                     1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       ("member"
                                                                                        "union")
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (rewrite
                                                                           "vars_args")
                                                                          (("2"
                                                                            (rewrite
                                                                             "vars_args")
                                                                            (("2"
                                                                              (skolem
                                                                               -1
                                                                               "t1")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (inst
                                                                                   1
                                                                                   "subs(del)(t1)")
                                                                                  (("2"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "apply_sub_rhs")
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "t1")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "rhs"
                                                                                           1)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (use
                                                                                       "apply_sub_not_elim_var_t")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (reveal
                                                                 -4
                                                                 -5
                                                                 -6
                                                                 -7
                                                                 -8
                                                                 -9)
                                                                (("4"
                                                                  (expand
                                                                   ("skp"
                                                                    "fai"))
                                                                  (("4"
                                                                    (expand
                                                                     "inst_step"
                                                                     7)
                                                                    (("4"
                                                                      (assert)
                                                                      (("4"
                                                                        (replace
                                                                         -3)
                                                                        (("4"
                                                                          (replace
                                                                           -3)
                                                                          (("4"
                                                                            (replace
                                                                             -4)
                                                                            (("4"
                                                                              (replace
                                                                               -2)
                                                                              (("4"
                                                                                (replace
                                                                                 -1)
                                                                                (("4"
                                                                                  (rewrite
                                                                                   "append_null")
                                                                                  (("4"
                                                                                    (expand
                                                                                     "apply_sub"
                                                                                     7
                                                                                     2)
                                                                                    (("4"
                                                                                      (rewrite
                                                                                       "inst_step4_no_effect2_cor"
                                                                                       7)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (append_null formula-decl nil list_props nil)
    (inst_step_sub_append_cor formula-decl nil nominal_AC_inst_step
     nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (inst_step_img formula-decl nil nominal_AC_inst_step nil)
    (del skolem-const-decl "sub" nominal_AC_inst_step nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (inst_step_match_condition_apply_sub formula-decl nil
     nominal_AC_inst_step nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (apply_sub_not_elim_var_t formula-decl nil nominal_AC_substitution
     nil)
    (apply_sub_rhs formula-decl nil nominal_AC_unification nil)
    (inst_step_inst_ptc_dom formula-decl nil nominal_AC_inst_step nil)
    (inst_step4_no_effect2_cor formula-decl nil nominal_AC_inst_step
     nil)
    (inst_step_dom formula-decl nil nominal_AC_inst_step nil)
    (inst_ptc? const-decl "bool" aux_nominal_AC_unification nil)
    (subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (vars_finset formula-decl nil nominal_AC_term_properties nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (inst_step_dom_PV formula-decl nil nominal_AC_inst_step nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]"
     nominal_AC_term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]"
       nominal_AC_term_adt nil)
    (inst_step_inst_ptc_vars_img2 formula-decl nil nominal_AC_inst_step
     nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (inst_step3_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (inst_step_match_condition_cdr formula-decl nil
     nominal_AC_inst_step nil)
    (s skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]"
     nominal_AC_inst_step nil)
    (t skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]"
     nominal_AC_inst_step nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (skp skolem-const-decl "bool" nominal_AC_inst_step nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (nth def-decl "T" list_props nil)
    (inst_step_skip formula-decl nil nominal_AC_inst_step nil)
    (member const-decl "bool" nominal_AC_unification nil)
    (inst_step4_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (fai skolem-const-decl "bool" nominal_AC_inst_step nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (subset? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (every adt-def-decl "boolean" list_adt nil)
    (member const-decl "bool" sets nil)
    (match_condition? const-decl "bool" aux_nominal_AC_unification nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (inst_step_match_aux-1 nil 3883325157
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          ((""
            (name-replace "delta" "inst_step(PV, G, P, null, null)`3")
            (("" (reveal -1)
              (("" (expand "inst_step" -1)
                (("" (lift-if)
                  (("" (split -1)
                    (("1" (flatten)
                      (("1" (hide-all-but (-1 -5))
                        (("1" (grind) nil nil)) nil))
                      nil)
                     ("2" (name-replace "t" "car(P)`1")
                      (("1" (name-replace "s" "car(P)`2")
                        (("1"
                          (name-replace "G1"
                           "inst_step(PV, G, t, s)`1")
                          (("1"
                            (name-replace "del"
                             "inst_step(PV, G, t, s)`2")
                            (("1"
                              (name-replace "skp"
                               "inst_step(PV, G, t, s)`3")
                              (("1"
                                (name-replace
                                 "fai"
                                 "inst_step(PV, G, t, s)`4")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "fai" -1)
                                      (("1"
                                        (hide -3)
                                        (("1"
                                          (reveal -2 -3 -4 -5 -6 -7)
                                          (("1"
                                            (expand "inst_step" 3)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite
                                       "inst_step3_no_effect_cor")
                                      (("2"
                                        (inst -3 "cdr(P)")
                                        (("2"
                                          (expand "length" -3 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (inst -3 "Y")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (replace -3)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -4 4 5 6)
                                                    (("2"
                                                      (lemma
                                                       "inst_step_match_condition_cdr")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "G"
                                                         "cdr(P)"
                                                         "PV"
                                                         "car(P)`2 "
                                                         "car(P)`1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "skp"
                                                             -2)
                                                            (("2"
                                                              (expand
                                                               ("t"
                                                                "s"))
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (case
                                                                   "P = cons((car(P)`1, car(P)`2), cdr(P))")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (1
                                                                      5))
                                                                    (("2"
                                                                      (decompose-equality
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand "rhs" -4)
                                                    (("3"
                                                      (expand "rhs" 1)
                                                      (("3"
                                                        (expand
                                                         "sec_proj"
                                                         -4)
                                                        (("3"
                                                          (expand
                                                           ("member"
                                                            "union")
                                                           -4)
                                                          (("3"
                                                            (expand
                                                             "vars"
                                                             -4)
                                                            (("3"
                                                              (expand
                                                               "union"
                                                               -4)
                                                              (("3"
                                                                (prop)
                                                                (("3"
                                                                  (expand
                                                                   "match_condition2?")
                                                                  (("3"
                                                                    (inst
                                                                     -4
                                                                     "Y")
                                                                    (("3"
                                                                      (prop)
                                                                      (("1"
                                                                        (skolem
                                                                         -1
                                                                         ("up"
                                                                          "i"))
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (case
                                                                             "i = 0")
                                                                            (("1"
                                                                              (expand
                                                                               "nth"
                                                                               -3)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -3)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "skp"
                                                                                     -8)
                                                                                    (("1"
                                                                                      (use
                                                                                       "inst_step_skip")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             ("t "
                                                                                              "s"))
                                                                                            (("1"
                                                                                              (expand
                                                                                               "member"
                                                                                               -5)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -6)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         -2
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           :dir
                                                                                                           rl)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (inst
                                                                               -5
                                                                               "0")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "nth"
                                                                                   2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "vars"
                                                                                     2)
                                                                                    (("2"
                                                                                      (hide-all-but
                                                                                       (-5
                                                                                        2))
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "rhs"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "sec_proj"
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "vars"
                                                                             1)
                                                                            (("2"
                                                                              (hide-all-but
                                                                               (-1
                                                                                1))
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (reveal
                                                     -4
                                                     -5
                                                     -6
                                                     -7
                                                     -8
                                                     -9)
                                                    (("4"
                                                      (expand
                                                       "inst_step"
                                                       4)
                                                      (("4"
                                                        (assert)
                                                        (("4"
                                                          (rewrite
                                                           "inst_step4_no_effect_cor"
                                                           5)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (rewrite "append_null")
                                      (("3"
                                        (expand "apply_sub" -1 2)
                                        (("3"
                                          (rewrite
                                           "inst_step_sub_append_cor")
                                          (("3"
                                            (name-replace
                                             "delta1"
                                             "inst_step(PV, G1, apply_sub(del, cdr(P)), null, null)`3")
                                            (("3"
                                              (reveal -1)
                                              (("3"
                                                (case
                                                 "member(Y, dom(del))")
                                                (("1"
                                                  (hide -4)
                                                  (("1"
                                                    (reveal -5)
                                                    (("1"
                                                      (expand
                                                       "match_condition2?")
                                                      (("1"
                                                        (inst -5 "Y")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skolem
                                                             -5
                                                             ("up"
                                                              "i"))
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (case
                                                                 "i = 0")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     -7)
                                                                    (("1"
                                                                      (replace
                                                                       -7)
                                                                      (("1"
                                                                        (use
                                                                         "inst_step_inst_ptc_vars_img2")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (replace
                                                                               -3)
                                                                              (("1"
                                                                                (replace
                                                                                 -6
                                                                                 6
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (expand
                                                                                   "subs"
                                                                                   6)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "subs_append2")
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "subs_no_effect_t")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "delta1"
                                                                                         "subs(del)(null * Y)")
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               (-2
                                                                                                -5
                                                                                                6))
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "subset?")
                                                                                                (("1"
                                                                                                  (skeep)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "x")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "vars_finset")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           1
                                                                                                           "subs(del)(null * Y)")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               ("member"
                                                                                                                "img")
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 1
                                                                                                                 "Y")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "subs"
                                                                                                                     1
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             (-1
                                                                                              -5
                                                                                              1))
                                                                                            (("2"
                                                                                              (use
                                                                                               "inst_step_dom_PV")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -3)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "disjoint?")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "empty?")
                                                                                                      (("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "x")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             ("member"
                                                                                                              "intersection"))
                                                                                                            (("2"
                                                                                                              (prop)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "subset?"
                                                                                                                 -3)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -3
                                                                                                                   "x")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "vars_finset")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         2
                                                                                                                         "subs(del)(null *Y)")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             ("member"
                                                                                                                              "img")
                                                                                                                             2)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               2
                                                                                                                               "Y")
                                                                                                                              (("2"
                                                                                                                                (reveal
                                                                                                                                 -5)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "subs"
                                                                                                                                     2
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (-9
                                                                                1))
                                                                              (("2"
                                                                                (expand
                                                                                 ("t"
                                                                                  "s"))
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "inst_ptc?")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst
                                                                   -9
                                                                   "0")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "nth"
                                                                       5)
                                                                      (("2"
                                                                        (case
                                                                         "subset?(dom(del), vars(t, s))")
                                                                        (("1"
                                                                          (hide-all-but
                                                                           (-1
                                                                            -3
                                                                            5))
                                                                          (("1"
                                                                            (expand
                                                                             "subset?")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   ("t"
                                                                                    "s"))
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (-1
                                                                            1))
                                                                          (("2"
                                                                            (use
                                                                             "inst_step_dom")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case
                                                   "member(Y, vars(img(del)))")
                                                  (("1"
                                                    (hide -4 2 3 6 7)
                                                    (("1"
                                                      (expand
                                                       "match_condition2?")
                                                      (("1"
                                                        (inst -4 "Y")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skolem
                                                             -4
                                                             ("up"
                                                              "i"))
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (case
                                                                 "i = 0")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     -6)
                                                                    (("1"
                                                                      (replace
                                                                       -6)
                                                                      (("1"
                                                                        (reveal
                                                                         -6)
                                                                        (("1"
                                                                          (use
                                                                           "inst_step_inst_ptc_vars_img2")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -2)
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    -4
                                                                                    3))
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (-9
                                                                                    1))
                                                                                  (("2"
                                                                                    (expand
                                                                                     ("t"
                                                                                      "s"))
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst
                                                                   -8
                                                                   "0")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "nth"
                                                                       4)
                                                                      (("2"
                                                                        (expand
                                                                         "del"
                                                                         -1)
                                                                        (("2"
                                                                          (use
                                                                           "inst_step_img")
                                                                          (("2"
                                                                            (expand
                                                                             "subset?"
                                                                             -1)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "Y")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    4))
                                                                                  (("2"
                                                                                    (expand
                                                                                     ("t "
                                                                                      "s"))
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst
                                                     -3
                                                     "apply_sub(del, cdr(P))")
                                                    (("2"
                                                      (rewrite
                                                       "apply_sub_len")
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -3
                                                         2)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst
                                                             -3
                                                             "G1"
                                                             "PV"
                                                             "Y")
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "subs"
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "subs"
                                                                     8)
                                                                    (("1"
                                                                      (replace
                                                                       -3
                                                                       8
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (rewrite
                                                                         "subs_append2")
                                                                        (("1"
                                                                          (lemma
                                                                           "subs_no_effect_t")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "del"
                                                                             "null*Y")
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 (1
                                                                                  3))
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (reveal
                                                                 -6)
                                                                (("2"
                                                                  (lemma
                                                                   "inst_step_match_condition_apply_sub")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "G"
                                                                     "cdr(P)"
                                                                     "PV"
                                                                     "s"
                                                                     "t")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         ("skp"
                                                                          "fai"))
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (case
                                                                             "P = cons((t, s), cdr(P))")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (1
                                                                                8))
                                                                              (("2"
                                                                                (grind)
                                                                                (("2"
                                                                                  (decompose-equality
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "t"
                                                                                     1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "s"
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (expand
                                                                 "rhs"
                                                                 -4)
                                                                (("3"
                                                                  (expand
                                                                   "sec_proj"
                                                                   -4)
                                                                  (("3"
                                                                    (expand
                                                                     "vars"
                                                                     -4)
                                                                    (("3"
                                                                      (expand
                                                                       ("member"
                                                                        "union")
                                                                       -4)
                                                                      (("3"
                                                                        (prop)
                                                                        (("1"
                                                                          (expand
                                                                           "match_condition2?"
                                                                           -4)
                                                                          (("1"
                                                                            (inst
                                                                             -4
                                                                             "Y")
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (skolem
                                                                                 -1
                                                                                 ("up"
                                                                                  "i"))
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (case
                                                                                     "i = 0")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nth"
                                                                                         -3)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -3)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "inst_ptc?"
                                                                                             -5)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member"
                                                                                                 -4)
                                                                                                (("1"
                                                                                                  (prop)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (hide-all-but
                                                                                                       (-5
                                                                                                        7))
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (reveal
                                                                                                     -7)
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "inst_step_inst_ptc_dom")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           ("fai"
                                                                                                            "t"
                                                                                                            "s"))
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               ("t"
                                                                                                                "s"))
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -2)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -3
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (prop)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (hide-all-but
                                                                                                                             3)
                                                                                                                            (("1"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (expand
                                                                                                                           "inst_ptc?"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (inst
                                                                                       -5
                                                                                       "0")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "nth"
                                                                                           2)
                                                                                          (("2"
                                                                                            (hide-all-but
                                                                                             (-5
                                                                                              2))
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "rhs"
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "sec_proj")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "vars"
                                                                                     1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       ("member"
                                                                                        "union")
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (rewrite
                                                                           "vars_args")
                                                                          (("2"
                                                                            (rewrite
                                                                             "vars_args")
                                                                            (("2"
                                                                              (skolem
                                                                               -1
                                                                               "t1")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (inst
                                                                                   1
                                                                                   "subs(del)(t1)")
                                                                                  (("2"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "apply_sub_rhs")
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "t1")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "rhs"
                                                                                           1)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (use
                                                                                       "apply_sub_not_elim_var_t")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (reveal
                                                                 -4
                                                                 -5
                                                                 -6
                                                                 -7
                                                                 -8
                                                                 -9)
                                                                (("4"
                                                                  (expand
                                                                   ("skp"
                                                                    "fai"))
                                                                  (("4"
                                                                    (expand
                                                                     "inst_step"
                                                                     7)
                                                                    (("4"
                                                                      (assert)
                                                                      (("4"
                                                                        (replace
                                                                         -3)
                                                                        (("4"
                                                                          (replace
                                                                           -3)
                                                                          (("4"
                                                                            (replace
                                                                             -4)
                                                                            (("4"
                                                                              (replace
                                                                               -2)
                                                                              (("4"
                                                                                (replace
                                                                                 -1)
                                                                                (("4"
                                                                                  (rewrite
                                                                                   "append_null")
                                                                                  (("4"
                                                                                    (expand
                                                                                     "apply_sub"
                                                                                     7
                                                                                     2)
                                                                                    (("4"
                                                                                      (rewrite
                                                                                       "inst_step4_no_effect2_cor"
                                                                                       7)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil) nil
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (inst_step4_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (member const-decl "bool" nominal_AC_unification nil)
    (inst_step_skip formula-decl nil nominal_AC_inst_step nil)
    (nth def-decl "T" list_props nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (inst_step_match_condition_cdr formula-decl nil
     nominal_AC_inst_step nil)
    (inst_step3_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (inst_step_inst_ptc_vars_img2 formula-decl nil nominal_AC_inst_step
     nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]"
       nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]"
     nominal_AC_term_adt nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (inst_step_dom_PV formula-decl nil nominal_AC_inst_step nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (vars_finset formula-decl nil nominal_AC_term_properties nil)
    (subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (inst_ptc? const-decl "bool" aux_nominal_AC_unification nil)
    (inst_step_dom formula-decl nil nominal_AC_inst_step nil)
    (inst_step4_no_effect2_cor formula-decl nil nominal_AC_inst_step
     nil)
    (inst_step_inst_ptc_dom formula-decl nil nominal_AC_inst_step nil)
    (apply_sub_rhs formula-decl nil nominal_AC_unification nil)
    (apply_sub_not_elim_var_t formula-decl nil nominal_AC_substitution
     nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (inst_step_match_condition_apply_sub formula-decl nil
     nominal_AC_inst_step nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (inst_step_img formula-decl nil nominal_AC_inst_step nil)
    (inst_step_sub_append_cor formula-decl nil nominal_AC_inst_step
     nil)
    (append_null formula-decl nil list_props nil) nil
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil))
   shostak))
 (inst_step_match 0
  (inst_step_match-1 nil 3883063154
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (hide 1)
          (("" (expand "match_problem?" 1)
            (("" (skeep)
              ((""
                (name-replace "P1" "inst_step(PV, G, P, null, null)`2")
                (("" (reveal -1)
                  (("" (rewrite "vars_args" -3)
                    (("" (skolem -3 "s")
                      (("" (prop)
                        ((""
                          (name-replace "delta"
                           "inst_step(PV, G, P, null, null)`3")
                          ((""
                            (case "EXISTS t: member(t, rhs(P)) AND s = subs(delta)(t)")
                            (("1" (skeep)
                              (("1"
                                (replace -2 -7)
                                (("1"
                                  (lemma "vars_subs_t2")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (case "NOT member(Y, PV)")
                                          (("1"
                                            (case
                                             "subset?(vars(subs(delta)(Y)), PV)")
                                            (("1"
                                              (expand "subset?" -1)
                                              (("1"
                                                (inst -1 "X")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "inst_step_match_aux")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (inst -1 "Y")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (reveal 1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (rewrite
                                                             "vars_args"
                                                             2)
                                                            (("2"
                                                              (inst
                                                               2
                                                               "t")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (use "inst_step_dom_PV")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replace -7)
                                                (("2"
                                                  (expand
                                                   "disjoint?"
                                                   -1)
                                                  (("2"
                                                    (expand
                                                     "empty?"
                                                     -1)
                                                    (("2"
                                                      (inst -1 "Y")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           ("member"
                                                            "intersection")
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "member"
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "dom"
                                                               1)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "inst_step2_mem_rhs")
                              (("2"
                                (inst?)
                                (("2"
                                  (inst -1 "s")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replace -3)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skolem -1 "s1")
                                          (("2"
                                            (replace -2)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst 1 "s1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((inst_step2_mem_rhs formula-decl nil nominal_AC_inst_step nil)
    (vars_subs_t2 formula-decl nil nominal_AC_substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (inst_step_match_aux formula-decl nil nominal_AC_inst_step nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (subset? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (inst_step_dom_PV formula-decl nil nominal_AC_inst_step nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (member def-decl "bool" list_props nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (every adt-def-decl "boolean" list_adt nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (match_problem? const-decl "bool" nominal_AC_unification nil))
   shostak))
 (inst_step_match_dom 0
  (inst_step_match_dom-1 nil 3884099925
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          ((""
            (name-replace "delta" "inst_step(PV, G, P, null, null)`3")
            (("" (reveal -1)
              (("" (expand "inst_step" -1)
                (("" (lift-if)
                  (("" (split -1)
                    (("1" (flatten)
                      (("1" (hide-all-but (-1 -5))
                        (("1" (grind) nil nil)) nil))
                      nil)
                     ("2" (flatten)
                      (("2" (name-replace "t" "car(P)`1")
                        (("1" (name-replace "s" "car(P)`2")
                          (("1"
                            (name-replace "G1"
                             "inst_step(PV, G, t, s)`1")
                            (("1"
                              (name-replace "del"
                               "inst_step(PV, G, t, s)`2")
                              (("1"
                                (name-replace
                                 "skp"
                                 "inst_step(PV, G, t, s)`3")
                                (("1"
                                  (name-replace
                                   "fai"
                                   "inst_step(PV, G, t, s)`4")
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (hide -3)
                                        (("1"
                                          (reveal -2 -3 -4 -5 -6 -7)
                                          (("1"
                                            (expand "inst_step" 2)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (rewrite
                                             "inst_step3_no_effect_cor")
                                            (("1"
                                              (inst -3 "cdr(P)")
                                              (("1"
                                                (expand "length" -3 2)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (inst -3 "X")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (reveal
                                                             -4
                                                             -5
                                                             -6
                                                             -7
                                                             -8
                                                             -9)
                                                            (("1"
                                                              (expand
                                                               "inst_step"
                                                               3)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-6
                                                                    4))
                                                                  (("1"
                                                                    (rewrite
                                                                     "inst_step4_no_effect_cor"
                                                                     1)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "inst_step_match_condition_cdr")
                                                            (("2"
                                                              (expand
                                                               "skp"
                                                               -2)
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "cdr(P)")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case
                                                                         "P = cons((t, s), cdr(P))")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (1
                                                                            5))
                                                                          (("2"
                                                                            (expand
                                                                             ("t"
                                                                              "s"))
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (decompose-equality
                                                                                 1)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (expand
                                                             "rhs")
                                                            (("3"
                                                              (expand
                                                               "sec_proj"
                                                               -4)
                                                              (("3"
                                                                (expand
                                                                 "vars"
                                                                 -4)
                                                                (("3"
                                                                  (expand
                                                                   ("member"
                                                                    "union")
                                                                   -4)
                                                                  (("3"
                                                                    (prop)
                                                                    (("3"
                                                                      (lemma
                                                                       "inst_step_match_cond_not_skip")
                                                                      (("3"
                                                                        (expand
                                                                         "skp"
                                                                         -3)
                                                                        (("3"
                                                                          (inst?)
                                                                          (("3"
                                                                            (inst
                                                                             -1
                                                                             "cdr(P)"
                                                                             "X")
                                                                            (("3"
                                                                              (assert)
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (expand
                                                                                   "s"
                                                                                   1
                                                                                   1)
                                                                                  (("3"
                                                                                    (case
                                                                                     "P = cons((t, s), cdr(P))")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       (1
                                                                                        5))
                                                                                      (("2"
                                                                                        (expand
                                                                                         ("t"
                                                                                          "s"))
                                                                                        (("2"
                                                                                          (decompose-equality
                                                                                           1)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (rewrite "append_null")
                                            (("2"
                                              (expand "apply_sub" -1 2)
                                              (("2"
                                                (rewrite
                                                 "inst_step_sub_append_cor")
                                                (("2"
                                                  (name-replace
                                                   "delta1"
                                                   "inst_step(PV, G1, apply_sub(del, cdr(P)), null, null)`3")
                                                  (("2"
                                                    (reveal -1)
                                                    (("2"
                                                      (replace
                                                       -2
                                                       6
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (case
                                                         "member(X, dom(del))")
                                                        (("1"
                                                          (hide -4)
                                                          (("1"
                                                            (expand
                                                             "member"
                                                             6)
                                                            (("1"
                                                              (expand
                                                               "dom"
                                                               6)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "subs"
                                                                   -6)
                                                                  (("1"
                                                                    (rewrite
                                                                     "subs_append2")
                                                                    (("1"
                                                                      (use
                                                                       "subs_no_effect_t")
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "member"
                                                                             -2)
                                                                            (("1"
                                                                              (expand
                                                                               "dom"
                                                                               -2)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (expand
                                                                                   "subs"
                                                                                   1)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (use
                                                                           "inst_step_dom_PV")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (replace
                                                                               -3)
                                                                              (("2"
                                                                                (case
                                                                                 "subset?(vars(subs(del)(null * X)), PV)")
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    -2
                                                                                    1))
                                                                                  (("1"
                                                                                    (expand
                                                                                     "disjoint?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "empty?")
                                                                                      (("1"
                                                                                        (skeep)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -2
                                                                                           "x")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "subset?"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "x")
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "subset?(vars(img(del)), PV)")
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (-1
                                                                                      1
                                                                                      -3))
                                                                                    (("1"
                                                                                      (expand
                                                                                       "subset?")
                                                                                      (("1"
                                                                                        (skeep)
                                                                                        (("1"
                                                                                          (inst?)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "vars_finset")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 1
                                                                                                 "subs(del)(X)")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "subs"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     ("member"
                                                                                                      "img")
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "X")
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (1
                                                                                      -5
                                                                                      6))
                                                                                    (("2"
                                                                                      (expand
                                                                                       "del"
                                                                                       1)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "inst_step_match_img")
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "cdr(P)")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "P = cons((t, s), cdr(P))")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (decompose-equality
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       ("t"
                                                                                                        "s")
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "member(X, dom(delta1))")
                                                          (("1"
                                                            (hide-all-but
                                                             (-1
                                                              -3
                                                              1
                                                              7))
                                                            (("1"
                                                              (expand
                                                               "dom")
                                                              (("1"
                                                                (expand
                                                                 "member"
                                                                 2)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "member"
                                                                     1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "member"
                                                                         -1)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (expand
                                                                             "subs")
                                                                            (("1"
                                                                              (rewrite
                                                                               "subs_append2")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 8)
                                                            (("2"
                                                              (inst
                                                               -3
                                                               "apply_sub(del, cdr(P))")
                                                              (("2"
                                                                (rewrite
                                                                 "apply_sub_len")
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   -3
                                                                   2)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (inst
                                                                         -3
                                                                         "X")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (case
                                                                             "P = cons((t, s), cdr(P))")
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (reveal
                                                                                 -4
                                                                                 -5
                                                                                 -6
                                                                                 -7
                                                                                 -8
                                                                                 -9
                                                                                 -10)
                                                                                (("1"
                                                                                  (expand
                                                                                   "inst_step"
                                                                                   6)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -4)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -5)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -3)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -2)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "append_null")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "apply_sub"
                                                                                                 8
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (hide-all-but
                                                                                                   (-8
                                                                                                    8))
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "inst_step4_no_effect2_cor")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 "inst_step_match_condition_apply_sub")
                                                                                (("2"
                                                                                  (expand
                                                                                   ("skp"
                                                                                    "fai"))
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "cdr(P)")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (reveal
                                                                                           -9)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (rewrite
                                                                                 "vars_args")
                                                                                (("3"
                                                                                  (rewrite
                                                                                   "vars_args")
                                                                                  (("3"
                                                                                    (skolem
                                                                                     -5
                                                                                     "t1")
                                                                                    (("3"
                                                                                      (flatten)
                                                                                      (("3"
                                                                                        (inst
                                                                                         1
                                                                                         "subs(del)(t1)")
                                                                                        (("3"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "apply_sub_rhs")
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "t1")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "rhs"
                                                                                                 -5)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "sec_proj"
                                                                                                   -5)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "member"
                                                                                                     -5)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "rhs"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "inst_step_match_cond_dom")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "del"
                                                                                                             3)
                                                                                                            (("1"
                                                                                                              (inst?)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "cdr(P)"
                                                                                                                 "X")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "fai"
                                                                                                                       6)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "s"
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (use
                                                                                             "apply_sub_not_elim_var_t")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (1
                                                                                6))
                                                                              (("2"
                                                                                (expand
                                                                                 ("t"
                                                                                  "s"))
                                                                                (("2"
                                                                                  (decompose-equality
                                                                                   1)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (inst_step4_no_effect2_cor formula-decl nil nominal_AC_inst_step
     nil)
    (fai skolem-const-decl "bool" nominal_AC_inst_step nil)
    (inst_step_match_condition_apply_sub formula-decl nil
     nominal_AC_inst_step nil)
    (inst_step_match_cond_dom formula-decl nil nominal_AC_inst_step
     nil)
    (member def-decl "bool" list_props nil)
    (apply_sub_rhs formula-decl nil nominal_AC_unification nil)
    (apply_sub_not_elim_var_t formula-decl nil nominal_AC_substitution
     nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (inst_step_dom_PV formula-decl nil nominal_AC_inst_step nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (vars_finset formula-decl nil nominal_AC_term_properties nil)
    (del skolem-const-decl "sub" nominal_AC_inst_step nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (inst_step_match_img formula-decl nil nominal_AC_inst_step nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (subset? const-decl "bool" sets nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]"
     nominal_AC_term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]"
       nominal_AC_term_adt nil)
    (inst_step_sub_append_cor formula-decl nil nominal_AC_inst_step
     nil)
    (append_null formula-decl nil list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (inst_step4_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (skp skolem-const-decl "bool" nominal_AC_inst_step nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (t skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]"
     nominal_AC_inst_step nil)
    (s skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]"
     nominal_AC_inst_step nil)
    (inst_step_match_condition_cdr formula-decl nil
     nominal_AC_inst_step nil)
    (union const-decl "set" sets nil)
    (inst_step_match_cond_not_skip formula-decl nil
     nominal_AC_inst_step nil)
    (inst_step3_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (every adt-def-decl "boolean" list_adt nil)
    (member const-decl "bool" sets nil)
    (match_condition? const-decl "bool" aux_nominal_AC_unification nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step_match_not_in_context 0
  (inst_step_match_not_in_context-1 nil 3888649627
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (name-replace "G1" "inst_step(PV, G, P, null, null)`1")
            (("" (reveal -1)
              (("" (hide -2)
                (("" (expand "inst_step" -1)
                  (("" (lift-if)
                    (("" (split -1)
                      (("1" (flatten) (("1" (assert) nil nil)) nil)
                       ("2" (flatten)
                        (("2" (name-replace "t" "car(P)`1")
                          (("1" (name-replace "s" "car(P)`2")
                            (("1"
                              (name-replace "G2"
                               "inst_step(PV, G, t, s)`1")
                              (("1"
                                (name-replace
                                 "del"
                                 "inst_step(PV, G, t, s)`2")
                                (("1"
                                  (name-replace
                                   "skp"
                                   "inst_step(PV, G, t, s)`3")
                                  (("1"
                                    (name-replace
                                     "fai"
                                     "inst_step(PV, G, t, s)`4")
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (case
                                           "P = cons((t, s), cdr(P))")
                                          (("1"
                                            (split -2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (rewrite
                                                 "inst_step1_no_effect_cor")
                                                (("1"
                                                  (reveal -7)
                                                  (("1"
                                                    (inst -1 "cdr(P)")
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       -1
                                                       2)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "X")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (expand
                                                                   "skp"
                                                                   -1)
                                                                  (("1"
                                                                    (use
                                                                     "inst_step_match_condition_cdr")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "rhs")
                                                                  (("2"
                                                                    (replace
                                                                     -3
                                                                     -5)
                                                                    (("2"
                                                                      (expand
                                                                       "sec_proj"
                                                                       -5)
                                                                      (("2"
                                                                        (expand
                                                                         "vars"
                                                                         -5)
                                                                        (("2"
                                                                          (expand
                                                                           ("member"
                                                                            "union")
                                                                           -5)
                                                                          (("2"
                                                                            (prop)
                                                                            (("2"
                                                                              (expand
                                                                               "skp"
                                                                               -2)
                                                                              (("2"
                                                                                (use
                                                                                 "inst_step_match_cond_not_skip")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (rewrite
                                                 "inst_step1_no_effect_cor2")
                                                (("2"
                                                  (expand
                                                   "apply_sub"
                                                   -1
                                                   2)
                                                  (("2"
                                                    (name-replace
                                                     "P1"
                                                     "apply_sub(del, cdr(P))")
                                                    (("2"
                                                      (reveal -1)
                                                      (("2"
                                                        (lemma
                                                         "inst_step_match_cond_not_in_ctx")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "G"
                                                             "PV"
                                                             "X")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (reveal
                                                                   -7)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (reveal
                                                                       -10)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "P1")
                                                                        (("2"
                                                                          (prop)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "G2"
                                                                             "PV "
                                                                             "X")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (expand
                                                                                   "P1"
                                                                                   1)
                                                                                  (("1"
                                                                                    (use
                                                                                     "inst_step_match_condition_apply_sub")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         ("skp"
                                                                                          "fai"))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "del"
                                                                                             1)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "P1"
                                                                                   1)
                                                                                  (("2"
                                                                                    (case
                                                                                     "idempotent?(del)")
                                                                                    (("1"
                                                                                      (case
                                                                                       "member(X, dom(del))")
                                                                                      (("1"
                                                                                        (use
                                                                                         "inst_step_vars_context")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -6)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "subset?"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "X")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     ("member"
                                                                                                      "union")
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "P1")
                                                                                                      (("1"
                                                                                                        (use
                                                                                                         "apply_sub_elim_var")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "idempotent_disjoint_dom_img")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "disjoint?")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "empty?")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "X")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       ("member"
                                                                                                                        "intersection")
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "rhs"
                                                                                         -7)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -5
                                                                                           -7)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "sec_proj"
                                                                                             -7)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "vars"
                                                                                               -7)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 ("member"
                                                                                                  "union")
                                                                                                 -7)
                                                                                                (("2"
                                                                                                  (prop)
                                                                                                  (("1"
                                                                                                    (use
                                                                                                     "inst_step_match_cond_dom")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "fai"
                                                                                                           5)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "del")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "rhs"
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       "vars_args")
                                                                                                      (("2"
                                                                                                        (skolem
                                                                                                         -1
                                                                                                         "t1")
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             "vars_args"
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               2
                                                                                                               "subs(del)(t1)")
                                                                                                              (("2"
                                                                                                                (prop)
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   "apply_sub_sec_proj"
                                                                                                                   :dir
                                                                                                                   rl)
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     "subs_map"
                                                                                                                     1
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "map_member4")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         1
                                                                                                                         "t1")
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (use
                                                                                                                   "apply_sub_not_elim_var_t")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "del"
                                                                                       1)
                                                                                      (("2"
                                                                                        (use
                                                                                         "inst_step_idempotent2")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "P1"
                                                                             1)
                                                                            (("2"
                                                                              (rewrite
                                                                               "apply_sub_len"
                                                                               1)
                                                                              (("2"
                                                                                (expand
                                                                                 "length"
                                                                                 1
                                                                                 2)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1)
                                            (("2"
                                              (expand ("t" "s") 1)
                                              (("2"
                                                (decompose-equality 1)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (inst_step_idempotent2 formula-decl nil nominal_AC_inst_step nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (idempotent_disjoint_dom_img formula-decl nil
     nominal_AC_substitution nil)
    (apply_sub_elim_var formula-decl nil nominal_AC_unification nil)
    (inst_step_vars_context formula-decl nil nominal_AC_inst_step nil)
    (inst_step_match_cond_dom formula-decl nil nominal_AC_inst_step
     nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (apply_sub_not_elim_var_t formula-decl nil nominal_AC_substitution
     nil)
    (apply_sub_sec_proj formula-decl nil nominal_AC_unification nil)
    (map_member4 formula-decl nil list_aux_equational_reasoning2parameters nil)
    (subs_map formula-decl nil nominal_AC_substitution nil)
    (idempotent? const-decl "bool" nominal_AC_substitution nil)
    (P1 skolem-const-decl "unif_prb" nominal_AC_inst_step nil)
    (del skolem-const-decl "sub" nominal_AC_inst_step nil)
    (fai skolem-const-decl "bool" nominal_AC_inst_step nil)
    (inst_step_match_condition_apply_sub formula-decl nil
     nominal_AC_inst_step nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (inst_step_match_cond_not_in_ctx formula-decl nil
     nominal_AC_inst_step nil)
    (inst_step1_no_effect_cor2 formula-decl nil nominal_AC_inst_step
     nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (append def-decl "list[T]" list_props nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (union const-decl "set" sets nil)
    (inst_step_match_cond_not_skip formula-decl nil
     nominal_AC_inst_step nil)
    (skp skolem-const-decl "bool" nominal_AC_inst_step nil)
    (inst_step_match_condition_cdr formula-decl nil
     nominal_AC_inst_step nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (inst_step1_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (s skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]"
     nominal_AC_inst_step nil)
    (t skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]"
     nominal_AC_inst_step nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (vars def-decl "finite_set[variable]" nominal_AC_freshness nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (every adt-def-decl "boolean" list_adt nil)
    (member const-decl "bool" sets nil)
    (match_condition? const-decl "bool" aux_nominal_AC_unification nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step_skip_ind_mem 0
  (inst_step_skip_ind_mem-1 nil 3884178816
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (name-replace "P1" "inst_step(PV, G, P, null, null)`2")
            (("" (reveal -1)
              ((""
                (name-replace "delta"
                 "inst_step(PV, G, P, null, null)`3")
                (("" (reveal -1)
                  (("" (hide -3)
                    (("" (expand "inst_step" -2)
                      (("" (lift-if)
                        (("" (split -2)
                          (("1" (flatten)
                            (("1" (replace -2 :dir rl)
                              (("1"
                                (expand "member" -4)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (name-replace "t" "car(P)`1")
                              (("1"
                                (name-replace "s" "car(P)`2")
                                (("1"
                                  (name-replace
                                   "G1"
                                   "inst_step(PV, G, t, s)`1")
                                  (("1"
                                    (name-replace
                                     "del"
                                     "inst_step(PV, G, t, s)`2")
                                    (("1"
                                      (name-replace
                                       "skp"
                                       "inst_step(PV, G, t, s)`3")
                                      (("1"
                                        (name-replace
                                         "fai"
                                         "inst_step(PV, G, t, s)`4")
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -2 :dir rl)
                                              (("1"
                                                (expand "member" -4)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (lemma
                                                   "inst_step2_append")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (replace -3)
                                                          (("1"
                                                            (case
                                                             "delta = inst_step(PV, G, cdr(P), null, null)`3")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 -6)
                                                                (("1"
                                                                  (rewrite
                                                                   "member_unif_prb_append2")
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (reveal
                                                                       -2
                                                                       -3
                                                                       -4
                                                                       -5
                                                                       -6
                                                                       -7
                                                                       -8)
                                                                      (("1"
                                                                        (inst
                                                                         -7
                                                                         "cdr(P)")
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           -7
                                                                           2)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (hide
                                                                                 -9)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (skeep)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -10
                                                                                       :dir
                                                                                       rl)
                                                                                      (("1"
                                                                                        (inst
                                                                                         4
                                                                                         "i+1")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "length"
                                                                                           4
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "nth"
                                                                                               4)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "skip_index?"
                                                                                                 4)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       3
                                                                       "0")
                                                                      (("2"
                                                                        (expand
                                                                         "length"
                                                                         3)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (prop)
                                                                              (("1"
                                                                                (expand
                                                                                 "apply_sub"
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "apply_sub"
                                                                                   -1
                                                                                   2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "member"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "member"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nth"
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           ("t"
                                                                                            "s"))
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               (-1
                                                                                                1))
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "apply_sub")
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "skip_index?"
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "skp"
                                                                                   -4)
                                                                                  (("2"
                                                                                    (expand
                                                                                     ("t"
                                                                                      "s"))
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               -1
                                                               4)
                                                              (("2"
                                                                (expand
                                                                 "inst_step"
                                                                 -3)
                                                                (("2"
                                                                  (expand
                                                                   ("skp"
                                                                    "fai"))
                                                                  (("2"
                                                                    (reveal
                                                                     -5
                                                                     -6
                                                                     -7
                                                                     -8)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (rewrite
                                                                         "inst_step3_no_effect_cor"
                                                                         -7)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "inst_step4_no_effect_cor")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "G"
                                                             "cdr(P)"
                                                             "cons((t, s), null)"
                                                             "PV"
                                                             "null")
                                                            (("2"
                                                              (replace
                                                               -2)
                                                              (("2"
                                                                (use
                                                                 "inst_step_fail")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (replace
                                                                       -5)
                                                                      (("2"
                                                                        (replace
                                                                         -1)
                                                                        (("2"
                                                                          (expand
                                                                           "member"
                                                                           -7)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (rewrite
                                                   "append_null")
                                                  (("2"
                                                    (expand
                                                     "apply_sub"
                                                     -1
                                                     2)
                                                    (("2"
                                                      (rewrite
                                                       "inst_step2_no_effect_cor")
                                                      (("2"
                                                        (reveal
                                                         -1
                                                         -2
                                                         -3
                                                         -4
                                                         -5
                                                         -6)
                                                        (("2"
                                                          (expand
                                                           "inst_step"
                                                           -8)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (replace
                                                               -5)
                                                              (("2"
                                                                (replace
                                                                 -6)
                                                                (("2"
                                                                  (replace
                                                                   -3)
                                                                  (("2"
                                                                    (replace
                                                                     -4)
                                                                    (("2"
                                                                      (rewrite
                                                                       "append_null")
                                                                      (("2"
                                                                        (expand
                                                                         "apply_sub"
                                                                         -8
                                                                         2)
                                                                        (("2"
                                                                          (rewrite
                                                                           "inst_step_sub_append_cor"
                                                                           -8)
                                                                          (("2"
                                                                            (reveal
                                                                             -7)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "apply_sub(del, cdr(P))")
                                                                              (("2"
                                                                                (prop)
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "up1")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -8)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -2
                                                                                           -3)
                                                                                          (("1"
                                                                                            (skeep)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "apply_sub_len")
                                                                                              (("1"
                                                                                                (name-replace
                                                                                                 "delta1"
                                                                                                 "inst_step(PV, G1, apply_sub(del, cdr(P)), null, null)`3")
                                                                                                (("1"
                                                                                                  (reveal
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "apply_sub_nth")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       4
                                                                                                       "i+1")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "length"
                                                                                                         4)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (prop)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nth"
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (hide-all-but
                                                                                                                 (-10
                                                                                                                  -3
                                                                                                                  1))
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "apply_sub")
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -2
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "subs_append2")
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "subs_append2")
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (expand
                                                                                                               "skip_index?"
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (rewrite
                                                                                   "apply_sub_len")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "length"
                                                                                     1
                                                                                     2)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (inst_step2_append formula-decl nil nominal_AC_inst_step nil)
    (inst_step4_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (inst_step_fail formula-decl nil nominal_AC_inst_step nil)
    (fai skolem-const-decl "bool" nominal_AC_inst_step nil)
    (inst_step3_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (member_unif_prb_append2 formula-decl nil nominal_AC_unification
     nil)
    (s skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]"
     nominal_AC_inst_step nil)
    (t skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]"
     nominal_AC_inst_step nil)
    (skp skolem-const-decl "bool" nominal_AC_inst_step nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (append_null formula-decl nil list_props nil)
    (inst_step2_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (inst_step_sub_append_cor formula-decl nil nominal_AC_inst_step
     nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (apply_sub_nth formula-decl nil nominal_AC_unification nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (skip_index? def-decl "bool" nominal_AC_inst_step nil)
    (nth def-decl "T" list_props nil)
    (apply_sub const-decl "unif_pair" nominal_AC_unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step_inst_left_not_var_TCC1 0
  (inst_step_inst_left_not_var_TCC1-1 nil 3884197503 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (PRED type-eq-decl nil defined_types nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (inst_left? const-decl "bool" nominal_AC_inst_step nil))
   nil
   (inst_step_inst_left_not_var subtype "nominal_AC_inst_step.t1"
    "(nominal_AC_term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].var?)")))
 (inst_step_inst_left_not_var 0
  (inst_step_inst_left_not_var-1 nil 3884197626
   ("" (measure-induct "length(P)" "P")
    (("1" (skolem 1 "P")
      (("1" (prop)
        (("1" (skeep)
          (("1"
            (name-replace "sigma" "inst_step(PV, G, P, null, null)`3")
            (("1" (reveal -1)
              (("1" (expand "inst_step" -1)
                (("1" (lift-if)
                  (("1" (split -1)
                    (("1" (flatten)
                      (("1" (expand "member" -4)
                        (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (flatten)
                      (("2" (name-replace "t" "car(P)`1")
                        (("1" (name-replace "s" "car(P)`2")
                          (("1"
                            (name-replace "G1"
                             "inst_step(PV, G, t, s)`1")
                            (("1"
                              (name-replace "del"
                               "inst_step(PV, G, t, s)`2")
                              (("1"
                                (name-replace
                                 "skp"
                                 "inst_step(PV, G, t, s)`3")
                                (("1"
                                  (name-replace
                                   "fai"
                                   "inst_step(PV, G, t, s)`4")
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (hide -3)
                                        (("1"
                                          (reveal -2 -3 -4 -5 -6 -7)
                                          (("1"
                                            (expand "inst_step" 2)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (rewrite
                                             "inst_step3_no_effect_cor")
                                            (("1"
                                              (expand "member" -4)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (expand "skp" -2)
                                                    (("1"
                                                      (hide -4)
                                                      (("1"
                                                        (case
                                                         "t = t1 AND s = s1")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (replace
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (replace
                                                               -2
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (expand
                                                                 "inst_left?"
                                                                 -6)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "inst_step"
                                                                     -4)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           ("t" "s"))
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst -4 "cdr(P)")
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       -4
                                                       2)
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (inst
                                                           -4
                                                           "s1"
                                                           "t1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (reveal
                                                               -4
                                                               -5
                                                               -6
                                                               -7
                                                               -8
                                                               -9)
                                                              (("2"
                                                                (expand
                                                                 "inst_step"
                                                                 3)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (rewrite
                                                                     "inst_step4_no_effect_cor"
                                                                     4)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (rewrite "append_null")
                                            (("2"
                                              (expand "apply_sub" -1 2)
                                              (("2"
                                                (rewrite
                                                 "inst_step_sub_append_cor"
                                                 -1)
                                                (("2"
                                                  (name-replace
                                                   "sigma1"
                                                   "inst_step(PV, G1, apply_sub(del, cdr(P)), null, null)`3")
                                                  (("2"
                                                    (reveal -1)
                                                    (("2"
                                                      (expand
                                                       "member"
                                                       -4)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (hide -4)
                                                            (("1"
                                                              (reveal
                                                               -3
                                                               -6)
                                                              (("1"
                                                                (lemma
                                                                 "inst_step_inst_left_not_var_aux")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (case
                                                                       "t = t1 AND s = s1")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (replace
                                                                             -2
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (reveal
                                                                                 -6)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -8
                                                                                     -10
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "subs"
                                                                                       -10)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "subs_append2")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "inst_left?"
                                                                                           -8)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (use
                                                                                               "nominal_AC_term_times_eta")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 1
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "subs_ext_pi")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "subs"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (use
                                                                                                       "subs_var")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (hide-all-but
                                                                                                           (-1
                                                                                                            1))
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "ext_preserves_type")
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (-4
                                                                          1
                                                                          5))
                                                                        (("2"
                                                                          (expand
                                                                           ("t"
                                                                            "s"))
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "var?(subs(del)(t1))")
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "apply_sub(del, cdr(P))")
                                                              (("1"
                                                                (rewrite
                                                                 "apply_sub_len"
                                                                 -5)
                                                                (("1"
                                                                  (expand
                                                                   "length"
                                                                   -5
                                                                   2)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (inst
                                                                         -5
                                                                         "subs(del)(s1)"
                                                                         "subs(del)(t1)")
                                                                        (("1"
                                                                          (replace
                                                                           -3)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (replace
                                                                               -4
                                                                               -6
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (expand
                                                                                 "subs"
                                                                                 -6)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "subs_append2")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "nominal_AC_term_times_eta")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "t1")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "subs_ext_pi"
                                                                                         -7)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "ext_identity")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "subs"
                                                                                             1
                                                                                             1)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               1
                                                                                               :dir
                                                                                               rl)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "subs_ext_pi"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "var?(subs(del)(V(t1)))")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "ext"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "subs"
                                                                                                         -8
                                                                                                         2)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "subs_ext_pi"
                                                                                                           -8)
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "ext_identity")
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "subs_ext_pi"
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (name-replace
                                                                                                                 "t2"
                                                                                                                 "subs(del)(V(t1))")
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   "ext_identity"
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "subs_var2")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "sigma1"
                                                                                                                       "t2")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     -2
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "subs_var2")
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -2)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "del"
                                                                                                           "t1")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (rewrite
                                                                               "apply_sub_unif_pair"
                                                                               1)
                                                                              (("2"
                                                                                (inst
                                                                                 1
                                                                                 "(t1, s1)")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "apply_sub"
                                                                                     1)
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (expand
                                                                               "inst_left?"
                                                                               -5)
                                                                              (("3"
                                                                                (expand
                                                                                 "inst_left?"
                                                                                 1)
                                                                                (("3"
                                                                                  (flatten)
                                                                                  (("3"
                                                                                    (use
                                                                                     "subs_var")
                                                                                    (("3"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (reveal
                                                                               -5
                                                                               -6
                                                                               -7
                                                                               -8
                                                                               -9
                                                                               -10)
                                                                              (("4"
                                                                                (expand
                                                                                 "inst_step"
                                                                                 5)
                                                                                (("4"
                                                                                  (replace
                                                                                   -5)
                                                                                  (("4"
                                                                                    (replace
                                                                                     -6)
                                                                                    (("4"
                                                                                      (replace
                                                                                       -4)
                                                                                      (("4"
                                                                                        (replace
                                                                                         -3)
                                                                                        (("4"
                                                                                          (replace
                                                                                           -2)
                                                                                          (("4"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("4"
                                                                                              (assert)
                                                                                              (("4"
                                                                                                (rewrite
                                                                                                 "append_null"
                                                                                                 7)
                                                                                                (("4"
                                                                                                  (expand
                                                                                                   "apply_sub"
                                                                                                   7
                                                                                                   2)
                                                                                                  (("4"
                                                                                                    (rewrite
                                                                                                     "inst_step4_no_effect2_cor"
                                                                                                     7)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide -4)
                                                              (("2"
                                                                (expand
                                                                 "inst_left?"
                                                                 -4)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (use
                                                                     "nominal_AC_term_times_eta")
                                                                    (("2"
                                                                      (replace
                                                                       -1
                                                                       1
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (rewrite
                                                                         "subs_ext_pi")
                                                                        (("2"
                                                                          (replace
                                                                           -4
                                                                           -6
                                                                           :dir
                                                                           rl)
                                                                          (("2"
                                                                            (expand
                                                                             "subs"
                                                                             -6)
                                                                            (("2"
                                                                              (expand
                                                                               "subs"
                                                                               1)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "subs_append2")
                                                                                (("2"
                                                                                  (use
                                                                                   "subs_var")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        1))
                                                                                      (("2"
                                                                                        (use
                                                                                         "ext_preserves_type")
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (expand "inst_left?") (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (nominal_AC_term_times_eta formula-decl nil nominal_AC_term_adt
     nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (subs_var formula-decl nil nominal_AC_substitution nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (append def-decl "list[T]" list_props nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (ord const-decl "upto(6)" nominal_AC_term_adt nil)
    (ext_preserves_type formula-decl nil nominal_AC_term_properties
     nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]"
       nominal_AC_term_adt nil)
    (inst_step_inst_left_not_var_aux formula-decl nil
     nominal_AC_inst_step nil)
    (inst_step4_no_effect2_cor formula-decl nil nominal_AC_inst_step
     nil)
    (apply_sub_unif_pair formula-decl nil nominal_AC_unification nil)
    (apply_sub const-decl "unif_pair" nominal_AC_unification nil)
    (ext_identity formula-decl nil nominal_AC_term_properties nil)
    (subs_var2 formula-decl nil nominal_AC_substitution nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (inst_step_sub_append_cor formula-decl nil nominal_AC_inst_step
     nil)
    (append_null formula-decl nil list_props nil)
    (s skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]"
     nominal_AC_inst_step nil)
    (t skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]"
     nominal_AC_inst_step nil)
    (skp skolem-const-decl "bool" nominal_AC_inst_step nil)
    (inst_step4_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (inst_step3_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt
     nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (member def-decl "bool" list_props nil)
    (inst_left? const-decl "bool" nominal_AC_inst_step nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]"
     nominal_AC_term_adt nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step_inst_left_dom 0
  (inst_step_inst_left_dom-1 nil 3884181301
   ("" (skeep)
    (("" (assert)
      (("" (lemma "inst_step_inst_left_not_var")
        (("" (inst?)
          (("" (inst -1 "G" "PV")
            (("" (assert)
              (("" (flatten)
                (("" (assert)
                  (("" (expand ("member" "dom") 3)
                    (("" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (inst_step_inst_left_not_var formula-decl nil nominal_AC_inst_step
     nil))
   shostak))
 (inst_step_match_skip_ind 0
  (inst_step_match_skip_ind-1 nil 3884240963
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            ((""
              (name-replace "delta"
               "inst_step(PV, G, P, null, null)`3")
              (("" (reveal -1)
                (("" (expand "inst_step" -1)
                  (("" (lift-if)
                    (("" (split -1)
                      (("1" (flatten)
                        (("1" (expand "rhs" -3)
                          (("1" (hide-all-but (-1 -3))
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (name-replace "t" "car(P)`1")
                          (("1" (name-replace "s" "car(P)`2")
                            (("1"
                              (name-replace "G1"
                               "inst_step(PV, G, t, s)`1")
                              (("1"
                                (name-replace
                                 "del"
                                 "inst_step(PV, G, t, s)`2")
                                (("1"
                                  (name-replace
                                   "skp"
                                   "inst_step(PV, G, t, s)`3")
                                  (("1"
                                    (name-replace
                                     "fai"
                                     "inst_step(PV, G, t, s)`4")
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (reveal -1 -2 -3 -4 -5 -6)
                                          (("1"
                                            (expand "inst_step" 3)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (rewrite
                                               "inst_step3_no_effect_cor")
                                              (("1"
                                                (reveal -8)
                                                (("1"
                                                  (inst -1 "cdr(P)")
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     -1
                                                     2)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (inst -1 "Y")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (replace
                                                                 -3)
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (inst
                                                                     6
                                                                     "j+1")
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       6)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "nth"
                                                                           6)
                                                                          (("1"
                                                                            (reveal
                                                                             -3
                                                                             -4)
                                                                            (("1"
                                                                              (expand
                                                                               "skip_index?"
                                                                               -10)
                                                                              (("1"
                                                                                (expand
                                                                                 "skp"
                                                                                 -6)
                                                                                (("1"
                                                                                  (expand
                                                                                   ("t"
                                                                                    "s"))
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "rhs")
                                                                (("2"
                                                                  (expand
                                                                   "sec_proj"
                                                                   -3)
                                                                  (("2"
                                                                    (expand
                                                                     "vars"
                                                                     -3)
                                                                    (("2"
                                                                      (expand
                                                                       ("member"
                                                                        "union")
                                                                       -3)
                                                                      (("2"
                                                                        (prop)
                                                                        (("2"
                                                                          (expand
                                                                           "skp"
                                                                           -2)
                                                                          (("2"
                                                                            (expand
                                                                             ("t"
                                                                              "s"))
                                                                            (("2"
                                                                              (lemma
                                                                               "inst_step_match_cond_not_skip")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "G"
                                                                                 "cdr(P)"
                                                                                 "PV"
                                                                                 "Y"
                                                                                 "car(P)`2"
                                                                                 "car(P)`1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (case
                                                                                       "P = cons((car(P)`1, car(P)`2), cdr(P))")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         (1
                                                                                          5))
                                                                                        (("2"
                                                                                          (decompose-equality
                                                                                           1)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (lemma
                                                                 "inst_step_match_condition_cdr")
                                                                (("3"
                                                                  (expand
                                                                   "skp"
                                                                   -2)
                                                                  (("3"
                                                                    (inst
                                                                     -1
                                                                     "G"
                                                                     "cdr(P)"
                                                                     "PV"
                                                                     "s"
                                                                     "t")
                                                                    (("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (expand
                                                                           ("t"
                                                                            "s"))
                                                                          (("3"
                                                                            (case
                                                                             "P = cons((car(P)`1, car(P)`2), cdr(P))")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (1
                                                                                5))
                                                                              (("2"
                                                                                (decompose-equality
                                                                                 1)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (reveal
                                                                 -3
                                                                 -4
                                                                 -5
                                                                 -6
                                                                 -7
                                                                 -8)
                                                                (("4"
                                                                  (expand
                                                                   "inst_step"
                                                                   4)
                                                                  (("4"
                                                                    (assert)
                                                                    (("4"
                                                                      (rewrite
                                                                       "inst_step4_no_effect_cor"
                                                                       5)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (prop)
                                              (("2"
                                                (rewrite "append_null")
                                                (("2"
                                                  (expand
                                                   "apply_sub"
                                                   -1
                                                   2)
                                                  (("2"
                                                    (rewrite
                                                     "inst_step_sub_append_cor"
                                                     -1)
                                                    (("2"
                                                      (name-replace
                                                       "delta1"
                                                       "inst_step(PV, G1, apply_sub(del, cdr(P)), null, null)`3")
                                                      (("2"
                                                        (reveal -1)
                                                        (("2"
                                                          (case
                                                           "P = cons((t, s), cdr(P))")
                                                          (("1"
                                                            (expand
                                                             "rhs"
                                                             -4)
                                                            (("1"
                                                              (expand
                                                               "sec_proj"
                                                               -4)
                                                              (("1"
                                                                (expand
                                                                 "vars"
                                                                 -4)
                                                                (("1"
                                                                  (expand
                                                                   ("member"
                                                                    "union")
                                                                   -4)
                                                                  (("1"
                                                                    (case
                                                                     "member(Y, vars(car(P)`2))")
                                                                    (("1"
                                                                      (hide
                                                                       -5)
                                                                      (("1"
                                                                        (lemma
                                                                         "inst_step_match_cond_subs")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "G"
                                                                             "PV"
                                                                             "Y")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (reveal
                                                                                 -7)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (inst
                                                                                         6
                                                                                         "0")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "length"
                                                                                           6)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "nth"
                                                                                                 6)
                                                                                                (("1"
                                                                                                  (prop)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "match_condition?"
                                                                                                     -7)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -7
                                                                                                       "Y")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (skolem
                                                                                                           -7
                                                                                                           ("up"
                                                                                                            "i"))
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "i = 0")
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "nth"
                                                                                                                   -9)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -9)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "member"
                                                                                                                       -10)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "inst_ptc?"
                                                                                                                         -11)
                                                                                                                        (("1"
                                                                                                                          (hide-all-but
                                                                                                                           (-10
                                                                                                                            -11
                                                                                                                            5))
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1
                                                                                                                             :dir
                                                                                                                             rl)
                                                                                                                            (("1"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (inst
                                                                                                                 -11
                                                                                                                 "0")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "nth"
                                                                                                                     7)
                                                                                                                    (("2"
                                                                                                                      (hide-all-but
                                                                                                                       (-3
                                                                                                                        7))
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "subs"
                                                                                                     1
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "subs"
                                                                                                       -1
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -6
                                                                                                         1
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "subs_append2")
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             "subs_append2")
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "t"
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (expand
                                                                                                     "skip_index?"
                                                                                                     -1)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "skp"
                                                                                                       1)
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         ("t"
                                                                                                          "s")
                                                                                                         1)
                                                                                                        (("3"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "s"
                                                                                         1)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (expand
                                                                                         "fai"
                                                                                         2)
                                                                                        (("3"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (prop)
                                                                      (("2"
                                                                        (reveal
                                                                         -9)
                                                                        (("2"
                                                                          (case
                                                                           "NOT member(Y, dom(del))")
                                                                          (("1"
                                                                            (case
                                                                             "NOT member(Y, vars(img(del)))")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "apply_sub(del, cdr(P))")
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "G1"
                                                                                   "PV"
                                                                                   "Y")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -4)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (skeep)
                                                                                          (("1"
                                                                                            (inst
                                                                                             10
                                                                                             "j+1")
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "apply_sub_len")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (rewrite
                                                                                                 "apply_sub_nth"
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "apply_sub"
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "nth"
                                                                                                     1
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (name-replace
                                                                                                       "t1"
                                                                                                       "nth(cdr(P), j)`2")
                                                                                                      (("1"
                                                                                                        (hide-all-but
                                                                                                         (-2
                                                                                                          1
                                                                                                          4))
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "subs_var")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "del"
                                                                                                             "t1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "member(V(t1), dom(del))")
                                                                                                                (("1"
                                                                                                                  (reveal
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     "vars_finset")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       1
                                                                                                                       "subs(del)(V(t1))")
                                                                                                                      (("1"
                                                                                                                        (use
                                                                                                                         "nominal_AC_term_times_eta")
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -1
                                                                                                                           -4
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "subs_ext_pi")
                                                                                                                            (("1"
                                                                                                                              (prop)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 ("member"
                                                                                                                                  "img")
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   1
                                                                                                                                   "V(t1)")
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (use
                                                                                                                                 "ext_vars")
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -1
                                                                                                                                   :dir
                                                                                                                                   rl)
                                                                                                                                  (("2"
                                                                                                                                    (replace
                                                                                                                                     -5)
                                                                                                                                    (("2"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (use
                                                                                                                   "nominal_AC_term_times_eta")
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     -3
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "subs_ext_pi")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "member"
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "dom"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -2)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "ext"
                                                                                                                                 -4)
                                                                                                                                (("2"
                                                                                                                                  (rewrite
                                                                                                                                   "append_null")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (rewrite
                                                                                                   "apply_sub_len")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (replace
                                                                                                 -7
                                                                                                 1
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "subs"
                                                                                                   1
                                                                                                   1)
                                                                                                  (("3"
                                                                                                    (rewrite
                                                                                                     "subs_append2")
                                                                                                    (("3"
                                                                                                      (rewrite
                                                                                                       "subs_append2")
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "nth"
                                                                                                         1)
                                                                                                        (("3"
                                                                                                          (rewrite
                                                                                                           "apply_sub_nth"
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "apply_sub"
                                                                                                             -3)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -3
                                                                                                               1
                                                                                                               :dir
                                                                                                               rl)
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "subs(del)(null * Y) = null * Y")
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "subs"
                                                                                                                     1
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (use
                                                                                                                   "subs_no_effect_t")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (hide-all-but
                                                                                                                       (1
                                                                                                                        6))
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (rewrite
                                                                                                             "apply_sub_len")
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("4"
                                                                                                (expand
                                                                                                 "skip_index?"
                                                                                                 -1)
                                                                                                (("4"
                                                                                                  (expand
                                                                                                   "skp"
                                                                                                   5)
                                                                                                  (("4"
                                                                                                    (expand
                                                                                                     ("t"
                                                                                                      "s"))
                                                                                                    (("4"
                                                                                                      (assert)
                                                                                                      (("4"
                                                                                                        (expand
                                                                                                         ("G1"
                                                                                                          "del")
                                                                                                         1)
                                                                                                        (("4"
                                                                                                          (expand
                                                                                                           ("t"
                                                                                                            "s"))
                                                                                                          (("4"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           (-1
                                                                                            1
                                                                                            2))
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "vars_args")
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "vars_args")
                                                                                              (("2"
                                                                                                (skolem
                                                                                                 -1
                                                                                                 "t1")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   1
                                                                                                   "subs(del)(t1)")
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (prop)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "apply_sub_rhs")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           1
                                                                                                           "t1")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "rhs"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (reveal
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "apply_sub_not_elim_var_t")
                                                                                                          (("2"
                                                                                                            (inst?)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (lemma
                                                                                           "inst_step_match_condition_apply_sub")
                                                                                          (("3"
                                                                                            (inst
                                                                                             -1
                                                                                             "G"
                                                                                             "cdr(P)"
                                                                                             "PV"
                                                                                             "s"
                                                                                             "t")
                                                                                            (("3"
                                                                                              (assert)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 ("del"
                                                                                                  "skp"
                                                                                                  "fai"))
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (hide
                                                                                           9
                                                                                           -4
                                                                                           1
                                                                                           2
                                                                                           3)
                                                                                          (("4"
                                                                                            (reveal
                                                                                             -3
                                                                                             -4
                                                                                             -5
                                                                                             -6
                                                                                             -7
                                                                                             -8)
                                                                                            (("4"
                                                                                              (expand
                                                                                               "inst_step"
                                                                                               5)
                                                                                              (("4"
                                                                                                (expand
                                                                                                 ("skp"
                                                                                                  "fai"))
                                                                                                (("4"
                                                                                                  (assert)
                                                                                                  (("4"
                                                                                                    (replace
                                                                                                     -5)
                                                                                                    (("4"
                                                                                                      (replace
                                                                                                       -4)
                                                                                                      (("4"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("4"
                                                                                                          (replace
                                                                                                           -2)
                                                                                                          (("4"
                                                                                                            (rewrite
                                                                                                             "append_null")
                                                                                                            (("4"
                                                                                                              (expand
                                                                                                               "apply_sub"
                                                                                                               5
                                                                                                               2)
                                                                                                              (("4"
                                                                                                                (rewrite
                                                                                                                 "inst_step4_no_effect2_cor"
                                                                                                                 5)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (rewrite
                                                                                   "apply_sub_len")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "length"
                                                                                     1
                                                                                     2)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               -2)
                                                                              (("2"
                                                                                (expand
                                                                                 "del"
                                                                                 -1)
                                                                                (("2"
                                                                                  (use
                                                                                   "inst_step_match_img")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          -2
                                                                                          6))
                                                                                        (("2"
                                                                                          (expand
                                                                                           "subset?"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "Y")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             -2)
                                                                            (("2"
                                                                              (expand
                                                                               "del"
                                                                               -1)
                                                                              (("2"
                                                                                (use
                                                                                 "inst_step_match_cond_dom2")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "rhs"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "s"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (1 4))
                                                            (("2"
                                                              (expand
                                                               ("t"
                                                                "s"))
                                                              (("2"
                                                                (decompose-equality
                                                                 1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (inst_step3_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (s skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]"
     nominal_AC_inst_step nil)
    (t skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]"
     nominal_AC_inst_step nil)
    (skp skolem-const-decl "bool" nominal_AC_inst_step nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (union const-decl "set" sets nil)
    (inst_step_match_cond_not_skip formula-decl nil
     nominal_AC_inst_step nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (inst_step_match_condition_cdr formula-decl nil
     nominal_AC_inst_step nil)
    (inst_step4_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (inst_step_match_img formula-decl nil nominal_AC_inst_step nil)
    (inst_step4_no_effect2_cor formula-decl nil nominal_AC_inst_step
     nil)
    (inst_step_match_condition_apply_sub formula-decl nil
     nominal_AC_inst_step nil)
    (apply_sub_rhs formula-decl nil nominal_AC_unification nil)
    (apply_sub_not_elim_var_t formula-decl nil nominal_AC_substitution
     nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (apply_sub const-decl "unif_pair" nominal_AC_unification nil)
    (subs_var formula-decl nil nominal_AC_substitution nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (ext_vars formula-decl nil nominal_AC_term_properties nil)
    (subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (nominal_AC_term_times_eta formula-decl nil nominal_AC_term_adt
     nil)
    (vars_finset formula-decl nil nominal_AC_term_properties nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt
     nil)
    (apply_sub_nth formula-decl nil nominal_AC_unification nil)
    (subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (G1 skolem-const-decl "fresh_context" nominal_AC_inst_step nil)
    (del skolem-const-decl "sub" nominal_AC_inst_step nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (inst_step_match_cond_dom2 formula-decl nil nominal_AC_inst_step
     nil)
    (member const-decl "bool" nominal_AC_unification nil)
    (subset? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (inst_ptc? const-decl "bool" aux_nominal_AC_unification nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (fai skolem-const-decl "bool" nominal_AC_inst_step nil)
    (inst_step_match_cond_subs formula-decl nil nominal_AC_inst_step
     nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (inst_step_sub_append_cor formula-decl nil nominal_AC_inst_step
     nil)
    (append_null formula-decl nil list_props nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (skip_index? def-decl "bool" nominal_AC_inst_step nil)
    (subs def-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]"
       nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]"
     nominal_AC_term_adt nil)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (match_condition? const-decl "bool" aux_nominal_AC_unification nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties
     nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (every adt-def-decl "boolean" list_adt nil)
    (member const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step_sound 0
  (inst_step_sound-1 nil 3887458649
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skolem 1 ("D" "G" "PV" "del" "sig"))
          (("" (flatten)
            (("" (hide -1)
              ((""
                (name-replace "G1" "inst_step(PV, G, P, null, null)`1")
                ((""
                  (name-replace "lam"
                   "inst_step(PV, G, P, null, null)`3")
                  (("" (reveal -1)
                    ((""
                      (name-replace "P1"
                       "inst_step(PV, G, P, null, null)`2")
                      (("" (reveal -1)
                        (("" (expand "inst_step" -1)
                          (("" (lift-if)
                            (("" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (name-replace "t" "car(P)`1")
                                  (("1"
                                    (name-replace "s" "car(P)`2")
                                    (("1"
                                      (name-replace
                                       "G2"
                                       "inst_step(PV, G, t, s)`1")
                                      (("1"
                                        (name-replace
                                         "lam1"
                                         "inst_step(PV, G, t, s)`2")
                                        (("1"
                                          (name-replace
                                           "skp"
                                           "inst_step(PV, G, t, s)`3")
                                          (("1"
                                            (name-replace
                                             "fai"
                                             "inst_step(PV, G, t, s)`4")
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (reveal
                                                   -1
                                                   -2
                                                   -3
                                                   -4
                                                   -5
                                                   -6)
                                                  (("1"
                                                    (expand
                                                     "inst_step"
                                                     2)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (use
                                                       "inst_step2_append")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "NOT inst_step(PV, G, cdr(P), null, null)`4")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide 4)
                                                              (("1"
                                                                (case
                                                                 "lam = inst_step(PV, G, cdr(P), null, null)`3")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (name-replace
                                                                     "P2"
                                                                     "inst_step(PV, G, cdr(P), null, null)`2")
                                                                    (("1"
                                                                      (replace
                                                                       -4)
                                                                      (("1"
                                                                        (replace
                                                                         -2
                                                                         -6)
                                                                        (("1"
                                                                          (rewrite
                                                                           "unifies?_append"
                                                                           -6)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (reveal
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "unifies?"
                                                                                 4)
                                                                                (("1"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "apply_sub"
                                                                                     -8)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "unifies?"
                                                                                       -8)
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -9)
                                                                                          (("1"
                                                                                            (case
                                                                                             "car(P) = (t, s)")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "unifies_sub_no_effect")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "D"
                                                                                                   "del"
                                                                                                   "s"
                                                                                                   "sig"
                                                                                                   "lam"
                                                                                                   "t")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -2
                                                                                                       -3
                                                                                                       -6
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "inst_step_vars_img")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "G"
                                                                                                             "P"
                                                                                                             "PV")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -5)
                                                                                                                (("1"
                                                                                                                  (hide-all-but
                                                                                                                   (-1
                                                                                                                    -8
                                                                                                                    1))
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "disjoint?")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       ("empty?"
                                                                                                                        "subset"))
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "subset?"
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "lam"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "inst_step_idempotent3")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (hide-all-but
                                                                                                           (-1
                                                                                                            -7
                                                                                                            1))
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             "disjoint?")
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "empty?")
                                                                                                              (("3"
                                                                                                                (skeep)
                                                                                                                (("3"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 ("t"
                                                                                                  "s"))
                                                                                                (("2"
                                                                                                  (decompose-equality
                                                                                                   1)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     -8)
                                                                                    (("2"
                                                                                      (reveal
                                                                                       -13)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "cdr(P)")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "length"
                                                                                           -1
                                                                                           2)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "D"
                                                                                               "G"
                                                                                               "PV"
                                                                                               "del"
                                                                                               "sig")
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -3
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     "G1 = inst_step(PV, G, cdr(P), null, null)`1")
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (hide-all-but
                                                                                                           (-9
                                                                                                            1
                                                                                                            5))
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "disjoint?")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "empty?")
                                                                                                              (("1"
                                                                                                                (skeep)
                                                                                                                (("1"
                                                                                                                  (inst?)
                                                                                                                  (("1"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (reveal
                                                                                                         -6
                                                                                                         -7
                                                                                                         -8
                                                                                                         -9
                                                                                                         -10
                                                                                                         -11)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "G1"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "inst_step"
                                                                                                             1
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 "inst_step1_no_effect_cor"
                                                                                                                 2)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -1
                                                                   -3)
                                                                  (("2"
                                                                    (expand
                                                                     "lam"
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "inst_step"
                                                                       1
                                                                       1)
                                                                      (("2"
                                                                        (reveal
                                                                         -4
                                                                         -5
                                                                         -6
                                                                         -7
                                                                         -8
                                                                         -9)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (rewrite
                                                                             "inst_step3_no_effect_cor"
                                                                             2)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide -2)
                                                            (("2"
                                                              (expand
                                                               "inst_step"
                                                               3)
                                                              (("2"
                                                                (reveal
                                                                 -3
                                                                 -4
                                                                 -5
                                                                 -6
                                                                 -7
                                                                 -8)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (rewrite
                                                                     "inst_step4_no_effect_cor"
                                                                     4)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (rewrite
                                                       "append_null"
                                                       -1)
                                                      (("2"
                                                        (expand
                                                         "apply_sub"
                                                         -1
                                                         2)
                                                        (("2"
                                                          (name-replace
                                                           "P2"
                                                           "apply_sub(lam1, cdr(P))")
                                                          (("2"
                                                            (reveal -1)
                                                            (("2"
                                                              (reveal
                                                               -2
                                                               -3
                                                               -4
                                                               -5
                                                               -6
                                                               -7)
                                                              (("2"
                                                                (expand
                                                                 "inst_step"
                                                                 -9)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (replace
                                                                     -5)
                                                                    (("2"
                                                                      (replace
                                                                       -6)
                                                                      (("2"
                                                                        (replace
                                                                         -3)
                                                                        (("2"
                                                                          (replace
                                                                           -4)
                                                                          (("2"
                                                                            (rewrite
                                                                             "append_null")
                                                                            (("2"
                                                                              (expand
                                                                               "apply_sub"
                                                                               -9
                                                                               2)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "inst_step_sub_append_cor"
                                                                                 -9)
                                                                                (("2"
                                                                                  (replace
                                                                                   -7)
                                                                                  (("2"
                                                                                    (name-replace
                                                                                     "lam2"
                                                                                     "inst_step(PV, G2, P2, null, null)`3")
                                                                                    (("2"
                                                                                      (reveal
                                                                                       -1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "unifies?"
                                                                                         5)
                                                                                        (("2"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (reveal
                                                                                             -11)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "append_assoc"
                                                                                               -14
                                                                                               :dir
                                                                                               rl)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -11
                                                                                                 -14
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "append_assoc"
                                                                                                   -14
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (name-replace
                                                                                                     "del1"
                                                                                                     "append(del, lam2)")
                                                                                                    (("1"
                                                                                                      (reveal
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -12
                                                                                                         1
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "append_assoc"
                                                                                                           1
                                                                                                           :dir
                                                                                                           rl)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "inst_step_sound_aux")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "G"
                                                                                                                 "D"
                                                                                                                 "PV"
                                                                                                                 "s"
                                                                                                                 "sig"
                                                                                                                 "del1"
                                                                                                                 "t")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -7)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -6)
                                                                                                                      (("1"
                                                                                                                        (prop)
                                                                                                                        (("1"
                                                                                                                          (hide-all-but
                                                                                                                           (-1
                                                                                                                            -7
                                                                                                                            -8
                                                                                                                            1))
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "unifies?")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               ("t "
                                                                                                                                "s"))
                                                                                                                              (("1"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide-all-but
                                                                                                                           (-6
                                                                                                                            -7
                                                                                                                            -12
                                                                                                                            1))
                                                                                                                          (("2"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("3"
                                                                                                                          (expand
                                                                                                                           "inst_step"
                                                                                                                           -2)
                                                                                                                          (("3"
                                                                                                                            (replace
                                                                                                                             -6)
                                                                                                                            (("3"
                                                                                                                              (replace
                                                                                                                               -7)
                                                                                                                              (("3"
                                                                                                                                (replace
                                                                                                                                 -5)
                                                                                                                                (("3"
                                                                                                                                  (replace
                                                                                                                                   -4)
                                                                                                                                  (("3"
                                                                                                                                    (replace
                                                                                                                                     -8)
                                                                                                                                    (("3"
                                                                                                                                      (expand
                                                                                                                                       "apply_sub"
                                                                                                                                       -2)
                                                                                                                                      (("3"
                                                                                                                                        (rewrite
                                                                                                                                         "inst_step1_no_effect_cor")
                                                                                                                                        (("3"
                                                                                                                                          (rewrite
                                                                                                                                           "inst_step1_no_effect_cor2")
                                                                                                                                          (("3"
                                                                                                                                            (use
                                                                                                                                             "inst_step_ctx_correct")
                                                                                                                                            (("3"
                                                                                                                                              (assert)
                                                                                                                                              (("3"
                                                                                                                                                (replace
                                                                                                                                                 -3)
                                                                                                                                                (("3"
                                                                                                                                                  (replace
                                                                                                                                                   -1
                                                                                                                                                   -14)
                                                                                                                                                  (("3"
                                                                                                                                                    (rewrite
                                                                                                                                                     "nominal_AC_fresh_subs_append_context")
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (reveal
                                                                                             -11)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "inst_step"
                                                                                               -1)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -8)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -7)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -5)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -6)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -9)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "apply_sub"
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             "inst_step1_no_effect_cor2")
                                                                                                            (("2"
                                                                                                              (reveal
                                                                                                               -12)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "P2")
                                                                                                                (("2"
                                                                                                                  (prop)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "D"
                                                                                                                     "G2"
                                                                                                                     "PV"
                                                                                                                     "del"
                                                                                                                     "append(lam1, sig)")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -3)
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "inst_step2_no_effect_cor"
                                                                                                                         -11)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -11)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (prop)
                                                                                                                              (("1"
                                                                                                                                (rewrite
                                                                                                                                 "append_assoc"
                                                                                                                                 1
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("1"
                                                                                                                                  (rewrite
                                                                                                                                   "unifies?_append_disjoint3"
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -12
                                                                                                                                     1
                                                                                                                                     :dir
                                                                                                                                     rl)
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       "append_assoc"
                                                                                                                                       1
                                                                                                                                       :dir
                                                                                                                                       rl)
                                                                                                                                      (("1"
                                                                                                                                        (rewrite
                                                                                                                                         "apply_sub_unifies"
                                                                                                                                         1
                                                                                                                                         :dir
                                                                                                                                         rl)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -10)
                                                                                                                                          (("1"
                                                                                                                                            (name-replace
                                                                                                                                             "new_sig"
                                                                                                                                             "append(lam1, sig)")
                                                                                                                                            (("1"
                                                                                                                                              (reveal
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (rewrite
                                                                                                                                                 "append_assoc"
                                                                                                                                                 -2
                                                                                                                                                 :dir
                                                                                                                                                 rl)
                                                                                                                                                (("1"
                                                                                                                                                  (rewrite
                                                                                                                                                   "unifies?_append_disjoint3"
                                                                                                                                                   -2)
                                                                                                                                                  (("1"
                                                                                                                                                    (hide
                                                                                                                                                     -5
                                                                                                                                                     -6
                                                                                                                                                     -3
                                                                                                                                                     -4
                                                                                                                                                     -1
                                                                                                                                                     -2
                                                                                                                                                     -14
                                                                                                                                                     2
                                                                                                                                                     6)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "new_sig"
                                                                                                                                                       1)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "disjoint?")
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "empty?")
                                                                                                                                                          (("1"
                                                                                                                                                            (skeep)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               ("member"
                                                                                                                                                                "intersection")
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (prop)
                                                                                                                                                                (("1"
                                                                                                                                                                  (use
                                                                                                                                                                   "dom_append")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "subset?")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (inst?)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           ("member"
                                                                                                                                                                            "union")
                                                                                                                                                                           -1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (prop)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (expand
                                                                                                                                                                               "P2"
                                                                                                                                                                               -3)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (use
                                                                                                                                                                                 "apply_sub_elim_var2")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (use
                                                                                                                                                                                   "inst_step_idempotent2")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "disjoint?")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "empty?")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (inst
                                                                                                                                                                                           -2
                                                                                                                                                                                           "x")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (hide-all-but
                                                                                                                                                                                             (-2
                                                                                                                                                                                              -4
                                                                                                                                                                                              1))
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (grind)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "P2"
                                                                                                                                                                               -3)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (use
                                                                                                                                                                                 "apply_sub_vars")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "subset?")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (inst?)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         ("member"
                                                                                                                                                                                          "union")
                                                                                                                                                                                         -1)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (prop)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (use
                                                                                                                                                                                             "inst_step_img")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (replace
                                                                                                                                                                                               -6)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "subset?")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (inst?)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (hide-all-but
                                                                                                                                                                                                       (-1
                                                                                                                                                                                                        -3
                                                                                                                                                                                                        -8
                                                                                                                                                                                                        -9
                                                                                                                                                                                                        -13
                                                                                                                                                                                                        3))
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (grind)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (hide-all-but
                                                                                                                                                                                             (-1
                                                                                                                                                                                              -2
                                                                                                                                                                                              -12
                                                                                                                                                                                              3))
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (grind)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (hide-all-but
                                                                                                                                     (-14
                                                                                                                                      1
                                                                                                                                      5))
                                                                                                                                    (("2"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (rewrite
                                                                                                                                 "append_assoc"
                                                                                                                                 1
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -11)
                                                                                                                                  (("2"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("3"
                                                                                                                                (hide
                                                                                                                                 -1
                                                                                                                                 -2
                                                                                                                                 -3
                                                                                                                                 -4
                                                                                                                                 -6
                                                                                                                                 -12
                                                                                                                                 -14
                                                                                                                                 2
                                                                                                                                 6)
                                                                                                                                (("3"
                                                                                                                                  (expand
                                                                                                                                   "disjoint?"
                                                                                                                                   1)
                                                                                                                                  (("3"
                                                                                                                                    (expand
                                                                                                                                     "empty?")
                                                                                                                                    (("3"
                                                                                                                                      (skeep)
                                                                                                                                      (("3"
                                                                                                                                        (expand
                                                                                                                                         ("member"
                                                                                                                                          "intersection")
                                                                                                                                         -1)
                                                                                                                                        (("3"
                                                                                                                                          (prop)
                                                                                                                                          (("3"
                                                                                                                                            (use
                                                                                                                                             "dom_append")
                                                                                                                                            (("3"
                                                                                                                                              (expand
                                                                                                                                               "subset?"
                                                                                                                                               -1)
                                                                                                                                              (("3"
                                                                                                                                                (inst?)
                                                                                                                                                (("3"
                                                                                                                                                  (assert)
                                                                                                                                                  (("3"
                                                                                                                                                    (expand
                                                                                                                                                     ("member"
                                                                                                                                                      "union")
                                                                                                                                                     -1)
                                                                                                                                                    (("3"
                                                                                                                                                      (prop)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "P2"
                                                                                                                                                         -3)
                                                                                                                                                        (("1"
                                                                                                                                                          (use
                                                                                                                                                           "apply_sub_elim_var2")
                                                                                                                                                          (("1"
                                                                                                                                                            (use
                                                                                                                                                             "inst_step_idempotent2")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "disjoint?"
                                                                                                                                                                 -2)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "empty?"
                                                                                                                                                                   -2)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     -2
                                                                                                                                                                     "x")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       (-2
                                                                                                                                                                        -4
                                                                                                                                                                        1))
                                                                                                                                                                      (("1"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (expand
                                                                                                                                                         "disjoint?"
                                                                                                                                                         -10)
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "empty?")
                                                                                                                                                          (("2"
                                                                                                                                                            (inst?)
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               ("member"
                                                                                                                                                                "intersection")
                                                                                                                                                               4)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "P2"
                                                                                                                                                                   -3)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (use
                                                                                                                                                                     "apply_sub_vars")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "subset?")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (inst?)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             ("member"
                                                                                                                                                                              "union")
                                                                                                                                                                             -1)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (prop)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (use
                                                                                                                                                                                 "inst_step_img")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (replace
                                                                                                                                                                                   -6)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "subset?"
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (inst?)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (hide-all-but
                                                                                                                                                                                           (-1
                                                                                                                                                                                            -7
                                                                                                                                                                                            -8
                                                                                                                                                                                            3
                                                                                                                                                                                            4))
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (grind)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (hide-all-but
                                                                                                                                                                                 (-1
                                                                                                                                                                                  3
                                                                                                                                                                                  4))
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (grind)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("4"
                                                                                                                                (rewrite
                                                                                                                                 "append_assoc"
                                                                                                                                 1
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("4"
                                                                                                                                  (replace
                                                                                                                                   -11)
                                                                                                                                  (("4"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("5"
                                                                                                                                (expand
                                                                                                                                 "inst_step"
                                                                                                                                 5)
                                                                                                                                (("5"
                                                                                                                                  (replace
                                                                                                                                   -9)
                                                                                                                                  (("5"
                                                                                                                                    (replace
                                                                                                                                     -8)
                                                                                                                                    (("5"
                                                                                                                                      (replace
                                                                                                                                       -7)
                                                                                                                                      (("5"
                                                                                                                                        (replace
                                                                                                                                         -6)
                                                                                                                                        (("5"
                                                                                                                                          (replace
                                                                                                                                           -10)
                                                                                                                                          (("5"
                                                                                                                                            (expand
                                                                                                                                             "apply_sub"
                                                                                                                                             5)
                                                                                                                                            (("5"
                                                                                                                                              (rewrite
                                                                                                                                               "inst_step4_no_effect2_cor"
                                                                                                                                               5)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "P2"
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "apply_sub_len"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "length"
                                                                                                                         1
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]"
     nominal_AC_inst_step nil)
    (inst_step2_append formula-decl nil nominal_AC_inst_step nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (inst_step3_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (unifies?_append formula-decl nil nominal_AC_unification nil)
    (t skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]"
     nominal_AC_inst_step nil)
    (s skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]"
     nominal_AC_inst_step nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (lam skolem-const-decl "sub" nominal_AC_inst_step nil)
    (inst_step_idempotent3 formula-decl nil nominal_AC_inst_step nil)
    (inst_step_vars_img formula-decl nil nominal_AC_inst_step nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (empty? const-decl "bool" sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (union const-decl "set" sets nil)
    (intersection const-decl "set" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subset? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (unifies_sub_no_effect formula-decl nil nominal_AC_unification nil)
    (G1 skolem-const-decl "fresh_context" nominal_AC_inst_step nil)
    (inst_step1_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (inst_step4_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (append_null formula-decl nil list_props nil)
    (append_assoc formula-decl nil list_props nil)
    (inst_step_sound_aux formula-decl nil nominal_AC_inst_step nil)
    (inst_step1_no_effect_cor2 formula-decl nil nominal_AC_inst_step
     nil)
    (nominal_AC_fresh_subs_append_context formula-decl nil
     nominal_AC_fresh_subs nil)
    (inst_step_ctx def-decl "fresh_context" nominal_AC_inst_step nil)
    (inst_step_ctx_correct formula-decl nil nominal_AC_inst_step nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (unifies?_append_disjoint3 formula-decl nil nominal_AC_unification
     nil)
    (new_sig skolem-const-decl "list[basic_sub]" nominal_AC_inst_step
     nil)
    (dom_append formula-decl nil nominal_AC_substitution nil)
    (inst_step_img formula-decl nil nominal_AC_inst_step nil)
    (apply_sub_vars formula-decl nil nominal_AC_unification nil)
    (P2 skolem-const-decl "unif_prb" nominal_AC_inst_step nil)
    (inst_step_idempotent2 formula-decl nil nominal_AC_inst_step nil)
    (apply_sub_elim_var2 formula-decl nil nominal_AC_unification nil)
    (apply_sub_unifies formula-decl nil nominal_AC_unification nil)
    (inst_step4_no_effect2_cor formula-decl nil nominal_AC_inst_step
     nil)
    (inst_step2_no_effect_cor formula-decl nil nominal_AC_inst_step
     nil)
    (apply_sub_len formula-decl nil nominal_AC_unification nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (inst_step_sub_append_cor formula-decl nil nominal_AC_inst_step
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nominal_AC_fresh_subs def-decl "bool" nominal_AC_fresh_subs nil)
    (vars def-decl "finite_set[variable]" nominal_AC_unification nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (disjoint? const-decl "bool" sets nil)
    (append def-decl "list[T]" list_props nil)
    (unifies? def-decl "bool" nominal_AC_unification nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil))
 (inst_step_mem 0
  (inst_step_mem-1 nil 3882537521
   ("" (measure-induct "length(lst_P)" "lst_P")
    (("" (skolem 1 "lst_P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" -2)
            (("" (lift-if)
              (("" (split -2)
                (("1" (flatten)
                  (("1" (expand "member" -2) (("1" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split -1)
                    (("1" (flatten)
                      (("1" (inst -3 "cdr(lst_P)")
                        (("1" (expand "length" -3 2)
                          (("1" (assert)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst 3 "P1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "member" 3)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "member" -1)
                        (("2" (split -1)
                          (("1" (flatten)
                            (("1" (inst 3 "car(lst_P)")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "member" 3)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst -2 "cdr(lst_P)")
                            (("2" (expand "length" -2 2)
                              (("2"
                                (assert)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst 4 "P1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "member" 4)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inst_step def-decl "list[[fresh_context, unif_prb, sub]]"
     nominal_AC_inst_step nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step_mem2 0
  (inst_step_mem2-1 nil 3888432024
   ("" (induct "lst_P")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd " "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "inst_step" 1)
            (("2" (lift-if)
              (("2" (split 1)
                (("1" (flatten)
                  (("1" (inst? -2)
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (inst 2 "P1") (("1" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "member" 2)
                    (("2" (flatten)
                      (("2" (skeep)
                        (("2" (expand "member" -2)
                          (("2" (split -2)
                            (("1" (assert) nil nil)
                             ("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (inst 4 "P1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (inst_step def-decl "list[[fresh_context, unif_prb, sub]]"
     nominal_AC_inst_step nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil))
   shostak)))

