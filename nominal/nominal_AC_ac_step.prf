(nominal_AC_ac_step
 (max_size_TCC1 0
  (max_size_TCC1-1 nil 3886178208 ("" (subtype-tcc) nil nil) nil nil
   (max_size subtype "nominal_AC_ac_step.P" "(list_adt[unif_pair].cons?)")))
 (max_size_TCC2 0
  (max_size_TCC1-1 nil 3884447178 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)) nil
   (max_size termination
    "nominal_AC_ac_step.max_size(list_adt[unif_pair].cdr(nominal_AC_ac_step.P))" "nil")))
 (input_apply_ac_TCC1 0
  (input_apply_ac_TCC1-1 nil 3884076175 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (injective? const-decl "bool" functions nil))
   nil
   (input_apply_ac subtype "nominal_AC_ac_step.ac_results_subs"
    "(list_adt[[nominal_AC_freshness.fresh_context, nominal_AC_unification.unif_prb, nominal_AC_substitution.sub]].cons?)")))
 (input_apply_ac_TCC2 0
  (input_apply_ac_TCC2-1 nil 3884076175 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (injective? const-decl "bool" functions nil))
   nil
   (input_apply_ac termination
    "nominal_AC_ac_step.input_apply_ac(list_adt[[nominal_AC_freshness.fresh_context, nominal_AC_unification.unif_prb, nominal_AC_substitution.sub]].cdr(nominal_AC_ac_step.ac_results_subs), nominal_AC_ac_step.G, nominal_AC_ac_step.P, nominal_AC_ac_step.sigma, nominal_AC_ac_step.V, nominal_AC_ac_step.PV)"
    "nil")))
 (input_apply_ac_TCC3 0
  (input_apply_ac_TCC3-1 nil 3884076175 ("" (subtype-tcc) nil nil) nil
   nil
   (input_apply_ac subtype "nominal_AC_ac_step.ac_results_subs"
    "(list_adt[[nominal_AC_freshness.fresh_context, nominal_AC_unification.unif_prb, nominal_AC_substitution.sub]].cons?)")))
 (nice_input_subterms 0
  (nice_input_subterms-1 nil 3884360217
   ("" (skeep)
    (("" (expand "nice_input?" -1)
      (("" (flatten)
        (("" (expand "nice_input?" 1)
          (("" (assert)
            (("" (case "subset?(vars(P1), vars(P))")
              (("1" (prop)
                (("1" (hide-all-but (-1 -3 1))
                  (("1" (expand "disjoint?")
                    (("1" (expand "empty?")
                      (("1" (skeep)
                        (("1" (inst?)
                          (("1" (expand "subset?")
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-1 -5 1))
                  (("2" (expand "subset?")
                    (("2" (skeep)
                      (("2" (inst?)
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "well_formed?" 1)
                  (("3" (case "subset?(subterms(P1), subterms(P))")
                    (("1" (skeep)
                      (("1" (split 1)
                        (("1" (flatten)
                          (("1" (expand "subset?" -3)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "well_formed?" -11)
                                  (("1"
                                    (inst -11 "t")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "no_pair?" -16)
                            (("2" (inst -16 "t")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil)
                 ("4" (expand "match_problem?")
                  (("4" (skeep)
                    (("4" (inst -11 "X")
                      (("4" (assert)
                        (("4" (hide-all-but (-1 2 -12))
                          (("4" (expand "subset?" -2)
                            (("4" (inst?) (("4" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "subset?" 1)
                  (("2" (skeep)
                    (("2" (rewrite "vars_unif_prb")
                      (("2" (skolem -1 "t1")
                        (("2" (flatten)
                          (("2" (rewrite "vars_unif_prb")
                            (("2" (expand "subset?" -12)
                              (("2"
                                (inst -12 "t1")
                                (("2"
                                  (prop)
                                  (("1"
                                    (rewrite "subterms_mem_unif_prb")
                                    (("1"
                                      (skolem -1 "tS")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (inst 1 "tS")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma "vars_subterm")
                                              (("1"
                                                (inst -1 "x" "t1" "tS")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "subterms_mem_unif_prb")
                                    (("2"
                                      (inst 1 "t1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (use "subterm_reflexive")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "no_pair?" -14)
                                              (("2"
                                                (inst -14 "t1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subterm_reflexive formula-decl nil nominal_AC_term_properties nil)
    (subterms_mem_unif_prb formula-decl nil nominal_AC_unification nil)
    (vars_subterm formula-decl nil nominal_AC_term_properties nil)
    (vars_unif_prb formula-decl nil nominal_AC_unification nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (no_pair? const-decl "bool" nominal_AC_unification nil)
    (match_problem? const-decl "bool" nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (perm type-eq-decl nil atoms nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (nice_input_cdr 0
  (nice_input_cdr-1 nil 3884371162
   ("" (skeep)
    (("" (lemma "nice_input_subterms")
      (("" (inst -1 "G" "P" "cdr(P)" "PV" "V" "sigma")
        (("" (assert)
          (("" (prop)
            (("1" (expand "subset?" 1)
              (("1" (skolem 1 "t")
                (("1" (prop)
                  (("1" (expand "subterms" 1)
                    (("1" (expand ("member" "union") 1)
                      (("1" (prop) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "subset?" 1)
              (("2" (skeep)
                (("2" (expand "rhs")
                  (("2" (expand "sec_proj" 1)
                    (("2" (expand "vars" 1)
                      (("2" (expand ("member" "union") 1)
                        (("2" (prop) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "nice_input?" -1)
              (("3" (flatten)
                (("3" (expand "well_formed?" -7)
                  (("3" (expand "no_pair?" 1)
                    (("3" (skolem 1 "t1")
                      (("3" (flatten)
                        (("3" (inst -9 "t1")
                          (("3" (assert)
                            (("3" (expand "member" 1)
                              (("3" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((no_pair? const-decl "bool" nominal_AC_unification nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil))
   shostak))
 (nice_input_cons 0
  (nice_input_cons-1 nil 3886328827
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (expand "nice_input?")
          (("1" (flatten)
            (("1" (assert)
              (("1" (prop)
                (("1" (hide-all-but (-2 1)) (("1" (grind) nil nil))
                  nil)
                 ("2" (hide-all-but (-4 1)) (("2" (grind) nil nil))
                  nil)
                 ("3" (hide-all-but (-7 1))
                  (("3" (rewrite "well_formed_unif_prb")
                    (("3" (rewrite "well_formed_unif_prb")
                      (("3" (skeep)
                        (("3" (inst?) (("3" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (hide-all-but (-9 1))
                  (("4" (expand "match_problem?")
                    (("4" (skolem 1 "x")
                      (("4" (inst?) (("4" (grind) nil nil)) nil)) nil))
                    nil))
                  nil)
                 ("5" (hide-all-but (-2 1)) (("5" (grind) nil nil))
                  nil)
                 ("6" (hide-all-but (-4 1)) (("6" (grind) nil nil))
                  nil)
                 ("7" (hide-all-but (-7 1))
                  (("7" (rewrite "well_formed_unif_prb")
                    (("7" (rewrite "well_formed_unif_prb")
                      (("7" (skeep)
                        (("7" (inst?) (("7" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("8" (hide-all-but (-9 1))
                  (("8" (expand "match_problem?")
                    (("8" (skeep)
                      (("8" (inst?) (("8" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "nice_input?")
          (("2" (flatten)
            (("2" (assert)
              (("2" (split 1)
                (("1" (hide-all-but (-2 -11 1)) (("1" (grind) nil nil))
                  nil)
                 ("2" (hide-all-but (-4 -13 1)) (("2" (grind) nil nil))
                  nil)
                 ("3" (hide-all-but (-7 -16 1))
                  (("3" (rewrite "well_formed_unif_prb")
                    (("3" (rewrite "well_formed_unif_prb")
                      (("3" (rewrite "well_formed_unif_prb")
                        (("3" (skeep)
                          (("3" (inst?)
                            (("3" (inst?) (("3" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (hide-all-but (-9 -18 1))
                  (("4" (expand "match_problem?")
                    (("4" (skeep)
                      (("4" (inst?)
                        (("4" (inst?) (("4" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nice_input? const-decl "bool" nominal_AC_ac_step nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (match_problem? const-decl "bool" nominal_AC_unification nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (well_formed_unif_prb formula-decl nil nominal_AC_unification nil)
    (subset? const-decl "bool" sets nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil))
   shostak))
 (nice_input_apply_sub 0
  (nice_input_apply_sub-2 nil 3888088176
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        ((""
          (name-replace "sig1" "cons((X, ext(reverse(pi))(s)), null)")
          (("" (reveal -1)
            (("" (name-replace "G1" "nominal_AC_fresh_subs?(sig1, G)`1")
              (("" (expand "nice_input?")
                (("" (flatten)
                  (("" (case "contained?(sig1, vars(P))")
                    (("1" (prop)
                      (("1" (rewrite "idempotent_append")
                        (("1" (use "idempotent_cons")
                          (("1" (assert) nil nil)) nil)
                         ("2" (hide-all-but (-1 -4 1))
                          (("2" (expand "contained?" -1)
                            (("2" (flatten)
                              (("2"
                                (hide -1)
                                (("2"
                                  (expand "disjoint?")
                                  (("2"
                                    (expand "empty?")
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (expand "subset?" -2)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "disjoint?" 1)
                        (("2" (expand "empty?" 1)
                          (("2" (skeep)
                            (("2" (expand ("member" "intersection") -1)
                              (("2"
                                (prop)
                                (("2"
                                  (use "dom_append")
                                  (("2"
                                    (expand "subset?" -1)
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide -3)
                                          (("2"
                                            (expand
                                             ("member" "union")
                                             -1)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (use
                                                 "apply_sub_elim_var2")
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (expand
                                                     "disjoint?"
                                                     -1)
                                                    (("1"
                                                      (expand
                                                       "empty?"
                                                       -1)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (expand
                                                           ("member"
                                                            "intersection")
                                                           1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "idempotent_cons")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (use "apply_sub_vars")
                                                (("2"
                                                  (expand "subset?" -1)
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         ("member"
                                                          "union")
                                                         -1)
                                                        (("2"
                                                          (expand
                                                           "disjoint?"
                                                           -7)
                                                          (("2"
                                                            (expand
                                                             "empty?"
                                                             -7)
                                                            (("2"
                                                              (inst
                                                               -7
                                                               "x")
                                                              (("2"
                                                                (expand
                                                                 ("member"
                                                                  "intersection")
                                                                 1)
                                                                (("2"
                                                                  (prop)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-1
                                                                      -4
                                                                      1))
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      -16
                                                                      1))
                                                                    (("2"
                                                                      (use
                                                                       "subset_vars")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (rewrite "contained_append")
                        (("3" (hide-all-but (-1 -6 1))
                          (("3" (expand "contained?")
                            (("3" (prop)
                              (("1"
                                (expand "subset?")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (inst?)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "subset?")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (inst?)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (expand "subset?" 1)
                        (("4" (skeep)
                          (("4" (use "apply_sub_vars")
                            (("4" (expand "subset?")
                              (("4"
                                (inst?)
                                (("4"
                                  (assert)
                                  (("4"
                                    (expand ("member" "union") -1)
                                    (("4"
                                      (prop)
                                      (("1"
                                        (hide-all-but (-1 -3 -8 1))
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-1 -8 1 3))
                                        (("2"
                                          (inst -2 "x")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (reveal -14)
                                              (("2"
                                                (lemma "subset_vars")
                                                (("2"
                                                  (inst -1 "P1" "P")
                                                  (("2"
                                                    (expand
                                                     "subset?"
                                                     -1)
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("5" (expand "subset?" 1)
                        (("5" (skeep)
                          (("5" (rewrite "vars_append_context")
                            (("5" (expand ("member" "union") -1)
                              (("5"
                                (prop)
                                (("1"
                                  (expand "G1" -1)
                                  (("1"
                                    (use "nominal_AC_fresh_subs?_var")
                                    (("1"
                                      (expand "subset?" (1 -1))
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand
                                             ("member" "union")
                                             -1)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (hide-all-but
                                                 (-1 -4 -15 -8 1))
                                                (("1"
                                                  (expand "subset?" -3)
                                                  (("1"
                                                    (inst -3 "x")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (rewrite
                                                         "vars_unif_prb")
                                                        (("1"
                                                          (inst 2 "s")
                                                          (("1"
                                                            (use
                                                             "img_basic_sub_var")
                                                            (("1"
                                                              (replace
                                                               -3)
                                                              (("1"
                                                                (rewrite
                                                                 "ext_vars"
                                                                 -1)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (expand
                                                                     "rhs"
                                                                     -4)
                                                                    (("1"
                                                                      (rewrite
                                                                       "sec_proj_mem"
                                                                       -4)
                                                                      (("1"
                                                                        (skolem
                                                                         -4
                                                                         "up")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (rewrite
                                                                             "member_unif_prb_equiv"
                                                                             1)
                                                                            (("1"
                                                                              (inst
                                                                               1
                                                                               "up")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but
                                                 (-1 -9 1))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-1 -8 1))
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("6" (use "well_formed_apply_sub")
                        (("6" (assert)
                          (("6" (prop)
                            (("1" (hide-all-but (-9 1 4))
                              (("1"
                                (rewrite "well_formed_unif_prb")
                                (("1"
                                  (rewrite "well_formed_unif_prb")
                                  (("1"
                                    (skolem 1 "t1")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (reveal -13)
                                            (("1"
                                              (rewrite
                                               "member_unif_prb_equiv")
                                              (("1"
                                                (skolem -2 "up")
                                                (("1"
                                                  (expand "subset?" -1)
                                                  (("1"
                                                    (inst -1 "up")
                                                    (("1"
                                                      (rewrite
                                                       "member_unif_prb_equiv")
                                                      (("1"
                                                        (inst 2 "up")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use "well_formed_basic_sub")
                              (("2"
                                (assert)
                                (("2"
                                  (hide-all-but (-9 -13 1))
                                  (("2"
                                    (rewrite "well_formed_unif_prb")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (rewrite "member_lhs_rhs")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("7" (rewrite "well_formed_append")
                        (("7" (use "well_formed_basic_sub")
                          (("7" (assert)
                            (("7" (hide-all-but (-13 -9 1))
                              (("7"
                                (rewrite "well_formed_unif_prb")
                                (("7"
                                  (inst?)
                                  (("7"
                                    (assert)
                                    (("7"
                                      (rewrite "member_lhs_rhs")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("8" (use "match_prb_apply_sub")
                        (("8" (assert)
                          (("8" (prop)
                            (("1" (hide-all-but (-11 1 4))
                              (("1"
                                (reveal -12)
                                (("1"
                                  (use "match_prb_subset")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use "img_basic_sub2")
                              (("2"
                                (replace -3)
                                (("2"
                                  (prop)
                                  (("1"
                                    (replace -1 1)
                                    (("1"
                                      (rewrite "vars_singleton")
                                      (("1"
                                        (rewrite "ext_vars")
                                        (("1"
                                          (hide-all-but (-12 -14 1))
                                          (("1"
                                            (expand
                                             "match_problem?"
                                             -1)
                                            (("1"
                                              (expand "subset?")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite
                                                       "vars_args"
                                                       2)
                                                      (("1"
                                                        (inst 2 "s")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replace -1 1)
                                    (("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 4)
                      (("2" (expand "contained?" 1)
                        (("2" (prop)
                          (("1" (use "dom_basic_sub2")
                            (("1" (replace -2 -1)
                              (("1"
                                (hide-all-but (1 -12 -1))
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "subset?")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (rewrite "vars_unif_prb" 1)
                                        (("1"
                                          (inst 1 "pi * X")
                                          (("1"
                                            (replace -1)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replace -1 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (use "img_basic_sub2")
                            (("2" (replace -2)
                              (("2"
                                (hide-all-but (-1 -13 1))
                                (("2"
                                  (prop)
                                  (("1"
                                    (expand "subset?")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (replace -1 -2)
                                        (("1"
                                          (rewrite "vars_singleton")
                                          (("1"
                                            (rewrite "vars_unif_prb" 1)
                                            (("1"
                                              (inst 1 "s")
                                              (("1"
                                                (rewrite "ext_vars")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite
                                                     "member_lhs_rhs")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replace -1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (reverse def-decl "list[T]" list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (nominal_AC_fresh_subs? def-decl "[fresh_context, bool]" nominal_AC_fresh_subs nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (dom_basic_sub2 formula-decl nil nominal_AC_substitution nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (intersection const-decl "set" sets nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (idempotent_cons formula-decl nil nominal_AC_substitution nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (idempotent_append formula-decl nil nominal_AC_substitution nil)
    (dom_append formula-decl nil nominal_AC_substitution nil)
    (apply_sub_elim_var2 formula-decl nil nominal_AC_unification nil)
    (subset_vars formula-decl nil nominal_AC_unification nil)
    (member def-decl "bool" list_props nil)
    (subset? const-decl "bool" nominal_AC_unification nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (apply_sub_vars formula-decl nil nominal_AC_unification nil)
    (contained_append formula-decl nil nominal_AC_substitution nil)
    (sec_proj_mem formula-decl nil list_aux_equational_reasoning2 nil)
    (member_unif_prb_equiv formula-decl nil nominal_AC_unification nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (ext_vars formula-decl nil nominal_AC_term_properties nil)
    (img_basic_sub_var formula-decl nil nominal_AC_substitution nil)
    (vars_unif_prb formula-decl nil nominal_AC_unification nil)
    (nominal_AC_fresh_subs?_var formula-decl nil nominal_AC_fresh_subs nil)
    (vars_append_context formula-decl nil nominal_AC_freshness nil)
    (well_formed_basic_sub formula-decl nil nominal_AC_substitution nil)
    (member_lhs_rhs formula-decl nil nominal_AC_unification nil)
    (well_formed_unif_prb formula-decl nil nominal_AC_unification nil)
    (well_formed_apply_sub formula-decl nil nominal_AC_unification nil)
    (well_formed_append formula-decl nil nominal_AC_substitution nil)
    (img_basic_sub2 formula-decl nil nominal_AC_substitution nil)
    (vars_singleton formula-decl nil nominal_AC_term_properties nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (match_problem? const-decl "bool" nominal_AC_unification nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (match_prb_subset formula-decl nil nominal_AC_unification nil)
    (match_prb_apply_sub formula-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (contained? const-decl "bool" nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nice_input? const-decl "bool" nominal_AC_ac_step nil))
   nil)
  (nice_input_apply_sub-1 nil 3884427130
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        ((""
          (name-replace "sig1" "cons((X, ext(reverse(pi))(s)), null)")
          (("" (reveal -1)
            (("" (name-replace "G1" "nominal_AC_fresh_subs?(sigma, G)`1")
              (("" (expand "nice_input?")
                (("" (flatten)
                  (("" (case "contained?(sig1, vars(P))")
                    (("1" (prop)
                      (("1" (rewrite "idempotent_append")
                        (("1" (use "idempotent_cons")
                          (("1" (assert) nil nil)) nil)
                         ("2" (hide-all-but (-1 -4 1))
                          (("2" (expand "contained?" -1)
                            (("2" (flatten)
                              (("2"
                                (hide -1)
                                (("2"
                                  (expand "disjoint?")
                                  (("2"
                                    (expand "empty?")
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (expand "subset?" -2)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "disjoint?" 1)
                        (("2" (expand "empty?" 1)
                          (("2" (skeep)
                            (("2" (expand ("member" "intersection") -1)
                              (("2"
                                (prop)
                                (("2"
                                  (use "dom_append")
                                  (("2"
                                    (expand "subset?" -1)
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide -3)
                                          (("2"
                                            (expand
                                             ("member" "union")
                                             -1)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (use
                                                 "apply_sub_elim_var2")
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (expand
                                                     "disjoint?"
                                                     -1)
                                                    (("1"
                                                      (expand
                                                       "empty?"
                                                       -1)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (expand
                                                           ("member"
                                                            "intersection")
                                                           1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "idempotent_cons")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (use "apply_sub_vars")
                                                (("2"
                                                  (expand "subset?" -1)
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         ("member"
                                                          "union")
                                                         -1)
                                                        (("2"
                                                          (expand
                                                           "disjoint?"
                                                           -7)
                                                          (("2"
                                                            (expand
                                                             "empty?"
                                                             -7)
                                                            (("2"
                                                              (inst
                                                               -7
                                                               "x")
                                                              (("2"
                                                                (expand
                                                                 ("member"
                                                                  "intersection")
                                                                 1)
                                                                (("2"
                                                                  (prop)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-1
                                                                      -4
                                                                      1))
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      -16
                                                                      1))
                                                                    (("2"
                                                                      (use
                                                                       "subset_vars")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (rewrite "contained_append")
                        (("3" (hide-all-but (-1 -6 1))
                          (("3" (expand "contained?")
                            (("3" (prop)
                              (("1"
                                (expand "subset?")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (inst?)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "subset?")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (inst?)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (expand "subset?" 1)
                        (("4" (skeep)
                          (("4" (use "apply_sub_vars")
                            (("4" (expand "subset?")
                              (("4"
                                (inst?)
                                (("4"
                                  (assert)
                                  (("4"
                                    (expand ("member" "union") -1)
                                    (("4"
                                      (prop)
                                      (("1"
                                        (hide-all-but (-1 -3 -8 1))
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-1 -8 1 3))
                                        (("2"
                                          (inst -2 "x")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (reveal -14)
                                              (("2"
                                                (lemma "subset_vars")
                                                (("2"
                                                  (inst -1 "P1" "P")
                                                  (("2"
                                                    (expand
                                                     "subset?"
                                                     -1)
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("5" (expand "subset?" 1)
                        (("5" (skeep)
                          (("5" (rewrite "vars_append_context")
                            (("5" (expand ("member" "union") -1)
                              (("5"
                                (prop)
                                (("1"
                                  (expand "G1" -1)
                                  (("1"
                                    (use "nominal_AC_fresh_subs?_var")
                                    (("1"
                                      (expand "subset?" (1 -1))
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand
                                             ("member" "union")
                                             -1)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (hide-all-but
                                                 (-1 -7 1))
                                                (("1"
                                                  (expand "contained?")
                                                  (("1"
                                                    (expand "subset?")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but
                                                 (-1 -9 1))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-1 -8 1))
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("6" (use "well_formed_apply_sub")
                        (("6" (assert)
                          (("6" (prop)
                            (("1" (hide-all-but (-9 1 4))
                              (("1"
                                (rewrite "well_formed_unif_prb")
                                (("1"
                                  (rewrite "well_formed_unif_prb")
                                  (("1"
                                    (skolem 1 "t1")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (reveal -13)
                                            (("1"
                                              (rewrite
                                               "member_unif_prb_equiv")
                                              (("1"
                                                (skolem -2 "up")
                                                (("1"
                                                  (expand "subset?" -1)
                                                  (("1"
                                                    (inst -1 "up")
                                                    (("1"
                                                      (rewrite
                                                       "member_unif_prb_equiv")
                                                      (("1"
                                                        (inst 2 "up")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use "well_formed_basic_sub")
                              (("2"
                                (assert)
                                (("2"
                                  (hide-all-but (-9 -13 1))
                                  (("2"
                                    (rewrite "well_formed_unif_prb")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (rewrite "member_lhs_rhs")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("7" (rewrite "well_formed_append")
                        (("7" (use "well_formed_basic_sub")
                          (("7" (assert)
                            (("7" (hide-all-but (-13 -9 1))
                              (("7"
                                (rewrite "well_formed_unif_prb")
                                (("7"
                                  (inst?)
                                  (("7"
                                    (assert)
                                    (("7"
                                      (rewrite "member_lhs_rhs")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("8" (use "match_prb_apply_sub")
                        (("8" (assert)
                          (("8" (prop)
                            (("1" (hide-all-but (-11 1 4))
                              (("1"
                                (reveal -12)
                                (("1"
                                  (use "match_prb_subset")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use "img_basic_sub2")
                              (("2"
                                (replace -3)
                                (("2"
                                  (prop)
                                  (("1"
                                    (replace -1 1)
                                    (("1"
                                      (rewrite "vars_singleton")
                                      (("1"
                                        (rewrite "ext_vars")
                                        (("1"
                                          (hide-all-but (-12 -14 1))
                                          (("1"
                                            (expand
                                             "match_problem?"
                                             -1)
                                            (("1"
                                              (expand "subset?")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite
                                                       "vars_args"
                                                       2)
                                                      (("1"
                                                        (inst 2 "s")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replace -1 1)
                                    (("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 4)
                      (("2" (expand "contained?" 1)
                        (("2" (prop)
                          (("1" (use "dom_basic_sub2")
                            (("1" (replace -2 -1)
                              (("1"
                                (hide-all-but (1 -12 -1))
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "subset?")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (rewrite "vars_unif_prb" 1)
                                        (("1"
                                          (inst 1 "pi * X")
                                          (("1"
                                            (replace -1)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replace -1 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (use "img_basic_sub2")
                            (("2" (replace -2)
                              (("2"
                                (hide-all-but (-1 -13 1))
                                (("2"
                                  (prop)
                                  (("1"
                                    (expand "subset?")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (replace -1 -2)
                                        (("1"
                                          (rewrite "vars_singleton")
                                          (("1"
                                            (rewrite "vars_unif_prb" 1)
                                            (("1"
                                              (inst 1 "s")
                                              (("1"
                                                (rewrite "ext_vars")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite
                                                     "member_lhs_rhs")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replace -1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nice_input? const-decl "bool" nominal_AC_ac_step nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (contained? const-decl "bool" nominal_AC_substitution nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (match_prb_apply_sub formula-decl nil nominal_AC_unification nil)
    (match_prb_subset formula-decl nil nominal_AC_unification nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (ext_vars formula-decl nil nominal_AC_term_properties nil)
    (match_problem? const-decl "bool" nominal_AC_unification nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (vars_singleton formula-decl nil nominal_AC_term_properties nil)
    (img_basic_sub2 formula-decl nil nominal_AC_substitution nil)
    (well_formed_append formula-decl nil nominal_AC_substitution nil)
    (well_formed_apply_sub formula-decl nil nominal_AC_unification nil)
    (well_formed_unif_prb formula-decl nil nominal_AC_unification nil)
    (member_unif_prb_equiv formula-decl nil nominal_AC_unification nil)
    (member_lhs_rhs formula-decl nil nominal_AC_unification nil)
    (well_formed_basic_sub formula-decl nil nominal_AC_substitution nil)
    (vars_append_context formula-decl nil nominal_AC_freshness nil)
    (nominal_AC_fresh_subs?_var formula-decl nil nominal_AC_fresh_subs nil)
    (contained_append formula-decl nil nominal_AC_substitution nil)
    (apply_sub_vars formula-decl nil nominal_AC_unification nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (subset? const-decl "bool" nominal_AC_unification nil)
    (member def-decl "bool" list_props nil)
    (subset_vars formula-decl nil nominal_AC_unification nil)
    (apply_sub_elim_var2 formula-decl nil nominal_AC_unification nil)
    (dom_append formula-decl nil nominal_AC_substitution nil)
    (idempotent_append formula-decl nil nominal_AC_substitution nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (idempotent_cons formula-decl nil nominal_AC_substitution nil)
    (empty? const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (intersection const-decl "set" sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (dom_basic_sub2 formula-decl nil nominal_AC_substitution nil)
    (vars_unif_prb formula-decl nil nominal_AC_unification nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (nominal_AC_fresh_subs? def-decl "[fresh_context, bool]" nominal_AC_fresh_subs nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (nice_input_decompose 0
  (nice_input_decompose-1 nil 3885216474
   ("" (skeep)
    (("" (expand "nice_input?" -1)
      (("" (flatten)
        (("" (expand "nice_input?")
          (("" (assert)
            (("" (name-replace "dec_P" "decompose(arg(t), arg(s))`1")
              (("" (case "subset?(vars(dec_P), vars(P))")
                (("1" (prop)
                  (("1" (hide-all-but (-1 -3 1 2))
                    (("1" (expand "disjoint?")
                      (("1" (expand "empty?")
                        (("1" (skeep)
                          (("1" (inst?)
                            (("1" (expand ("member" "intersection"))
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite "vars_unif_prb_append")
                                    (("1"
                                      (prop)
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (reveal -15)
                                        (("2"
                                          (lemma "subset_vars")
                                          (("2"
                                            (inst -1 "P1" "P")
                                            (("2"
                                              (assert)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (case "subset?(vars(append(dec_P, P1)), vars(P))")
                    (("1" (hide-all-but (-1 -6 1 2))
                      (("1" (grind) nil nil)) nil)
                     ("2" (hide-all-but (-1 1 3 -16))
                      (("2" (expand "subset?" (-1 1))
                        (("2" (skeep)
                          (("2" (inst?)
                            (("2" (rewrite "vars_unif_prb_append")
                              (("2"
                                (assert)
                                (("2"
                                  (prop)
                                  (("2"
                                    (use "subset_vars")
                                    (("2"
                                      (assert)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (rewrite "well_formed_unif_prb_append")
                    (("3" (prop)
                      (("1" (expand "dec_P" 1)
                        (("1" (use "decompose_well_formed")
                          (("1" (inst -1 "sym(t)")
                            (("1" (assert)
                              (("1"
                                (prop)
                                (("1"
                                  (use "nominal_AC_term_app_eta")
                                  (("1"
                                    (expand "sym" 1)
                                    (("1"
                                      (expand "same_func?" -16)
                                      (("1"
                                        (expand "sym" -16)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (lemma "nominal_AC_term_app_eta")
                                              (("1"
                                                (inst -1 "s")
                                                (("1"
                                                  (replace -19 :dir rl)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (hide-all-but
                                                         (-10
                                                          -13
                                                          -14
                                                          1))
                                                        (("1"
                                                          (expand
                                                           "well_formed?"
                                                           1)
                                                          (("1"
                                                            (rewrite
                                                             "well_formed_unif_prb")
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "t")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -1
                                                                 "s")
                                                                (("2"
                                                                  (prop)
                                                                  (("2"
                                                                    (use
                                                                     "member_lhs_rhs")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (-8 -16 1 2))
                        (("2" (use "well_formed_subset")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("4" (expand "match_problem?" 1)
                    (("4" (skolem 1 "x")
                      (("4" (prop)
                        (("4" (expand "match_problem?" -11)
                          (("4" (inst?)
                            (("4" (assert)
                              (("4"
                                (rewrite "vars_args" -1)
                                (("4"
                                  (skolem -1 "ti")
                                  (("4"
                                    (prop)
                                    (("4"
                                      (rewrite "member_rhs_append")
                                      (("4"
                                        (prop)
                                        (("1"
                                          (expand "dec_P" -1)
                                          (("1"
                                            (use "decompose_vars_rhs")
                                            (("1"
                                              (expand "subset?" -1)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (rewrite
                                                     "vars_args"
                                                     2)
                                                    (("1"
                                                      (inst 2 "s")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "vars"
                                                           2)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "vars_args"
                                                     1)
                                                    (("2"
                                                      (inst 1 "ti")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "vars_args" 2)
                                          (("2"
                                            (inst 2 "ti")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide-all-but
                                                 (-1 -17 2))
                                                (("2"
                                                  (expand "rhs")
                                                  (("2"
                                                    (rewrite
                                                     "sec_proj_mem")
                                                    (("2"
                                                      (rewrite
                                                       "sec_proj_mem")
                                                      (("2"
                                                        (skolem
                                                         -1
                                                         "up")
                                                        (("2"
                                                          (inst 1 "up")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 3)
                  (("2" (expand "dec_P" 1)
                    (("2" (use "decompose_vars")
                      (("2" (case "subset?(vars(t, s), vars(P))")
                        (("1" (hide-all-but (-1 -2 -14 -15 1))
                          (("1" (expand "subset?")
                            (("1" (skeep) (("1" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (-11 -12 1))
                          (("2" (expand "subset?" 1)
                            (("2" (skeep)
                              (("2"
                                (expand "vars" -1)
                                (("2"
                                  (expand ("member" "union") -1)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (rewrite "vars_unif_prb")
                                      (("1"
                                        (inst 1 "t")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -2)
                                      (("2"
                                        (use "member_lhs_rhs")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (rewrite "vars_unif_prb")
                                            (("2"
                                              (inst?)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nice_input? const-decl "bool" nominal_AC_ac_step nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (decompose def-decl "[unif_prb, bool]" nominal_AC_unification nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (decompose_vars formula-decl nil nominal_AC_unification nil)
    (vars_unif_prb formula-decl nil nominal_AC_unification nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subset_vars formula-decl nil nominal_AC_unification nil)
    (subset? const-decl "bool" nominal_AC_unification nil)
    (member def-decl "bool" list_props nil)
    (vars_unif_prb_append formula-decl nil nominal_AC_unification nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (append def-decl "list[T]" list_props nil)
    (decompose_well_formed formula-decl nil nominal_AC_unification nil)
    (nominal_AC_term_app_eta formula-decl nil nominal_AC_term_adt nil)
    (same_func? const-decl "bool" nominal_AC_term_properties nil)
    (member_lhs_rhs formula-decl nil nominal_AC_unification nil)
    (well_formed_unif_prb formula-decl nil nominal_AC_unification nil)
    (string type-eq-decl nil strings nil)
    (sym const-decl "string" nominal_AC_term_properties nil)
    (well_formed_subset formula-decl nil nominal_AC_unification nil)
    (well_formed_unif_prb_append formula-decl nil nominal_AC_unification nil)
    (member_rhs_append formula-decl nil nominal_AC_unification nil)
    (sec_proj_mem formula-decl nil list_aux_equational_reasoning2 nil)
    (decompose_vars_rhs formula-decl nil nominal_AC_unification nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (match_problem? const-decl "bool" nominal_AC_unification nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   shostak))
 (nice_input_dec_abs 0
  (nice_input_dec_abs-1 nil 3886340805
   ("" (skeep)
    (("" (expand "nice_input?" -1)
      (("" (flatten)
        (("" (expand "nice_input?")
          (("" (assert)
            ((""
              (name-replace "dec_P"
               "decompose(body(t), ext(pi)(body(s)))`1")
              (("" (case "subset?(vars(dec_P), vars(P))")
                (("1" (prop)
                  (("1" (hide-all-but (-1 -3 1 2))
                    (("1" (expand "disjoint?")
                      (("1" (expand "empty?")
                        (("1" (skeep)
                          (("1" (inst?)
                            (("1" (expand ("member" "intersection"))
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite "vars_unif_prb_append")
                                    (("1"
                                      (prop)
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (reveal -14)
                                        (("2"
                                          (lemma "subset_vars")
                                          (("2"
                                            (inst -1 "P1" "P")
                                            (("2"
                                              (assert)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (case "subset?(vars(append(dec_P, P1)), vars(P))")
                    (("1" (hide-all-but (-1 -6 1 2))
                      (("1" (grind) nil nil)) nil)
                     ("2" (hide-all-but (-1 1 3 -15))
                      (("2" (expand "subset?" (-1 1))
                        (("2" (skeep)
                          (("2" (inst?)
                            (("2" (rewrite "vars_unif_prb_append")
                              (("2"
                                (assert)
                                (("2"
                                  (prop)
                                  (("2"
                                    (use "subset_vars")
                                    (("2"
                                      (assert)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (rewrite "well_formed_unif_prb_append")
                    (("3" (prop)
                      (("1" (expand "dec_P" 1)
                        (("1" (lemma "decompose_well_formed_abs")
                          (("1"
                            (inst -1 "abstr(t)" "abstr(s)"
                             "ext(pi)(body(s))" "body(t)")
                            (("1" (assert)
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "nominal_AC_term_abs_eta")
                                  (("1"
                                    (inst -1 "t")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (expand "well_formed?" 1)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (rewrite
                                               "well_formed_unif_prb"
                                               -9)
                                              (("1"
                                                (inst -9 "t")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite
                                               "well_formed_unif_prb"
                                               -9)
                                              (("2"
                                                (inst -9 "s")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -15 1))
                                                      (("1"
                                                        (expand
                                                         "well_formed?")
                                                        (("1"
                                                          (skolem
                                                           1
                                                           "t1")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "subterms"
                                                               -2)
                                                              (("1"
                                                                (expand
                                                                 ("member"
                                                                  "union")
                                                                 -2)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-1
                                                                      -3))
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (rewrite
                                                                     "ext_subterms"
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (expand
                                                                       "member"
                                                                       -1)
                                                                      (("2"
                                                                        (expand
                                                                         "ext"
                                                                         -1)
                                                                        (("2"
                                                                          (skolem
                                                                           -1
                                                                           "t2")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (inst
                                                                               -3
                                                                               "t2")
                                                                              (("2"
                                                                                (case
                                                                                 "ac_app?(t2)")
                                                                                (("1"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "ext_ac")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "ac_sym(t2)"
                                                                                       "pi"
                                                                                       "t2")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "is_ac_sym?"
                                                                                         -1
                                                                                         1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "is_ac_sym?"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -5)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "ext_num_arg")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "ac_sym(t2)"
                                                                                                   "pi"
                                                                                                   "t2")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     "nominal_AC_term_abs_eta")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "s")
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1
                                                                                         1
                                                                                         :dir
                                                                                         rl)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "subterms"
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             ("member"
                                                                                              "union")
                                                                                             1)
                                                                                            (("2"
                                                                                              (prop)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -3)
                                                                                  (("2"
                                                                                    (use
                                                                                     "ext_preserves_type")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "ord"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (rewrite
                                                       "member_lhs_rhs")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (-8 -15 1 2))
                        (("2" (use "well_formed_subset")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("4" (expand "match_problem?" 1)
                    (("4" (skolem 1 "x")
                      (("4" (prop)
                        (("4" (expand "match_problem?" -11)
                          (("4" (inst?)
                            (("4" (assert)
                              (("4"
                                (rewrite "vars_args" -1)
                                (("4"
                                  (skolem -1 "ti")
                                  (("4"
                                    (prop)
                                    (("4"
                                      (rewrite "member_rhs_append")
                                      (("4"
                                        (prop)
                                        (("1"
                                          (expand "dec_P" -1)
                                          (("1"
                                            (use "decompose_vars_rhs")
                                            (("1"
                                              (expand "subset?" -1)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (rewrite
                                                     "vars_args"
                                                     2)
                                                    (("1"
                                                      (inst 2 "s")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "vars"
                                                           2)
                                                          (("1"
                                                            (rewrite
                                                             "ext_vars")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "vars_args"
                                                     1)
                                                    (("2"
                                                      (inst 1 "ti")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "vars_args" 2)
                                          (("2"
                                            (inst 2 "ti")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide-all-but
                                                 (-1 -16 2))
                                                (("2"
                                                  (expand "rhs")
                                                  (("2"
                                                    (rewrite
                                                     "sec_proj_mem")
                                                    (("2"
                                                      (rewrite
                                                       "sec_proj_mem")
                                                      (("2"
                                                        (skolem
                                                         -1
                                                         "up")
                                                        (("2"
                                                          (inst 1 "up")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 3)
                  (("2" (expand "dec_P" 1)
                    (("2" (use "decompose_vars")
                      (("2" (case "subset?(vars(t, s), vars(P))")
                        (("1" (hide-all-but (-1 -2 -14 -15 1))
                          (("1" (expand "subset?")
                            (("1" (skeep)
                              (("1"
                                (inst?)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -2)
                                      (("1"
                                        (expand "vars" 1)
                                        (("1"
                                          (expand "vars" -1)
                                          (("1"
                                            (expand ("member" "union"))
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "vars" (1 2))
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (rewrite
                                                     "ext_vars")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (-11 -12 1))
                          (("2" (expand "subset?" 1)
                            (("2" (skeep)
                              (("2"
                                (rewrite "vars_unif_prb")
                                (("2"
                                  (expand "vars" -1)
                                  (("2"
                                    (expand ("member" "union") -1)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (inst 1 "t")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (inst 1 "s")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (rewrite "member_lhs_rhs")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (match_problem? const-decl "bool" nominal_AC_unification nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (decompose_vars_rhs formula-decl nil nominal_AC_unification nil)
    (ext_vars formula-decl nil nominal_AC_term_properties nil)
    (sec_proj_mem formula-decl nil list_aux_equational_reasoning2 nil)
    (member_rhs_append formula-decl nil nominal_AC_unification nil)
    (well_formed_unif_prb_append formula-decl nil nominal_AC_unification nil)
    (well_formed_subset formula-decl nil nominal_AC_unification nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (well_formed_unif_prb formula-decl nil nominal_AC_unification nil)
    (ext_subterms formula-decl nil nominal_AC_term_properties nil)
    (ext const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_term_properties nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ext_ac formula-decl nil nominal_AC_term_properties nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (ext_num_arg formula-decl nil nominal_AC_term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (string type-eq-decl nil strings nil)
    (ext_preserves_type formula-decl nil nominal_AC_term_properties nil)
    (ord const-decl "upto(6)" nominal_AC_term_adt nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member_lhs_rhs formula-decl nil nominal_AC_unification nil)
    (nominal_AC_term_abs_eta formula-decl nil nominal_AC_term_adt nil)
    (decompose_well_formed_abs formula-decl nil nominal_AC_unification nil)
    (append def-decl "list[T]" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (vars_unif_prb_append formula-decl nil nominal_AC_unification nil)
    (member def-decl "bool" list_props nil)
    (subset? const-decl "bool" nominal_AC_unification nil)
    (subset_vars formula-decl nil nominal_AC_unification nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (vars_unif_prb formula-decl nil nominal_AC_unification nil)
    (decompose_vars formula-decl nil nominal_AC_unification nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (decompose def-decl "[unif_prb, bool]" nominal_AC_unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nice_input? const-decl "bool" nominal_AC_ac_step nil))
   shostak))
 (nice_input_dec_abs2 0
  (nice_input_dec_abs2-1 nil 3897504541
   ("" (skeep)
    (("" (assert)
      (("" (lemma "nice_input_dec_abs")
        (("" (inst -1 "G" "P" "P1" "PV" "V" "pi" "s" "sigma" "t")
          (("" (assert)
            (("" (expand "nice_input?" (2 -1))
              (("" (flatten)
                (("" (assert)
                  (("" (hide -1 -2 -3 -4 -5 -6 -7 -8)
                    ((""
                      (case "subset?(vars(append(fresh?(abstr(t), body(s))`1, G)), union(vars(P), vars(G)))")
                      (("1" (reveal -5)
                        (("1" (expand "nice_input?" -4)
                          (("1" (flatten)
                            (("1" (hide-all-but (-1 -2 -5 2))
                              (("1"
                                (expand "subset?")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand
                                             ("member" "union")
                                             -1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (-3 -4 1))
                        (("2" (expand "subset?" 1)
                          (("2" (skeep)
                            (("2" (rewrite "vars_append_context")
                              (("2"
                                (expand ("member" "union") -1)
                                (("2"
                                  (expand ("member" "union") 1)
                                  (("2"
                                    (prop)
                                    (("2"
                                      (use "vars_fresh?")
                                      (("2"
                                        (expand "subset?" -1)
                                        (("2"
                                          (inst -1 "x")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (rewrite "vars_unif_prb")
                                              (("2"
                                                (inst 1 "s")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (rewrite
                                                     "member_unif_prb_equiv")
                                                    (("1"
                                                      (expand "rhs" -4)
                                                      (("1"
                                                        (rewrite
                                                         "sec_proj_mem")
                                                        (("1"
                                                          (skolem
                                                           -4
                                                           "up")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst
                                                               1
                                                               "up")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (reveal -6)
                                                    (("2"
                                                      (expand "vars" 1)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nice_input_dec_abs formula-decl nil nominal_AC_ac_step nil) nil
    (member_unif_prb_equiv formula-decl nil nominal_AC_unification nil)
    (sec_proj_mem formula-decl nil list_aux_equational_reasoning2 nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (vars_unif_prb formula-decl nil nominal_AC_unification nil)
    (vars_fresh? formula-decl nil nominal_AC_freshness nil)
    (vars_append_context formula-decl nil nominal_AC_freshness nil)
    (member const-decl "bool" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_freshness nil)
    (append def-decl "list[T]" list_props nil)
    (fresh? def-decl "[fresh_context, bool]" nominal_AC_freshness nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (union const-decl "set" sets nil) nil
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nice_input? const-decl "bool" nominal_AC_ac_step nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (nice_input_initial_problem 0
  (nice_input_initial_problem-1 nil 3888742451
   ("" (skeep)
    (("" (expand "nice_input?")
      (("" (assert)
        (("" (prop)
          (("1" (rewrite "idempotent_null") nil nil)
           ("2" (rewrite "dom_null") (("2" (grind) nil nil)) nil)
           ("3" (grind) nil nil) ("4" (grind) nil nil)
           ("5" (grind) nil nil)
           ("6" (hide -2) (("6" (grind) nil nil)) nil)
           ("7" (rewrite "well_formed_unif_prb" 1)
            (("7" (skolem 1 "u") (("7" (grind) nil nil)) nil)) nil)
           ("8" (grind) nil nil) ("9" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((nice_input? const-decl "bool" nominal_AC_ac_step nil)
    (idempotent_null formula-decl nil nominal_AC_substitution nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (dom_null formula-decl nil nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (subset? const-decl "bool" sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (contained? const-decl "bool" nominal_AC_substitution nil)
    (vars def-decl "finite_set[variable]" nominal_AC_freshness nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (well_formed_unif_prb formula-decl nil nominal_AC_unification nil)
    (singleton const-decl "(singleton?)" sets nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (match_problem? const-decl "bool" nominal_AC_unification nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   shostak))
 (nice_input_initial_problem2 0
  (nice_input_initial_problem2-1 nil 3897595489
   ("" (skeep)
    (("" (use "nice_input_initial_problem")
      (("" (assert)
        (("" (expand "nice_input?")
          (("" (flatten)
            (("" (assert)
              (("" (expand "match_problem?" -9)
                (("" (hide-all-but (-9 1)) (("" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nice_input_initial_problem formula-decl nil nominal_AC_ac_step nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nice_input? const-decl "bool" nominal_AC_ac_step nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (match_problem? const-decl "bool" nominal_AC_unification nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   shostak))
 (nice_input_fc 0
  (nice_input_fc-1 nil 3897329759
   ("" (skeep)
    (("" (expand "nice_input?")
      (("" (flatten)
        (("" (assert)
          (("" (case "subset?(vars(P1), vars(P))")
            (("1" (split 1)
              (("1" (hide-all-but (-1 -3 1))
                (("1" (expand "disjoint?")
                  (("1" (expand "empty?")
                    (("1" (expand "subset?")
                      (("1" (skeep)
                        (("1" (inst?)
                          (("1" (inst?) (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-1 -5 1))
                (("2" (expand "subset?")
                  (("2" (skeep)
                    (("2" (inst?)
                      (("2" (inst?) (("2" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil)
               ("3" (expand "subset?" 1)
                (("3" (skeep)
                  (("3" (rewrite "vars_append_context")
                    (("3" (expand ("member" "union") -1)
                      (("3" (prop)
                        (("1" (use "vars_fc")
                          (("1" (expand "subset?" -1)
                            (("1" (inst -1 "x")
                              (("1"
                                (assert)
                                (("1"
                                  (hide-all-but (-1 -14 -7 1))
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (-1 -7 1))
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (use "well_formed_subset") (("4" (assert) nil nil))
                nil)
               ("5" (use "match_prb_subset") (("5" (assert) nil nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (use "subset_vars") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nice_input? const-decl "bool" nominal_AC_ac_step nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset_vars formula-decl nil nominal_AC_unification nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (vars_fc formula-decl nil nominal_AC_freshness nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (vars_append_context formula-decl nil nominal_AC_freshness nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (fc def-decl "fresh_context" nominal_AC_freshness nil)
    (DS const-decl "list[atom]" atoms nil)
    (well_formed_subset formula-decl nil nominal_AC_unification nil)
    (match_prb_subset formula-decl nil nominal_AC_unification nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil))
   shostak))
 (input_apply_ac_mem 0
  (input_apply_ac_mem-2 nil 3884262114
   ("" (measure-induct "length(ac_results_subs)" "ac_results_subs")
    (("" (skolem 1 "ac_results_subs")
      (("" (prop)
        (("" (skeep)
          (("" (split 1)
            (("1" (flatten)
              (("1" (expand "input_apply_ac" -1)
                (("1" (lift-if)
                  (("1" (split)
                    (("1" (flatten)
                      (("1" (expand "member" -2)
                        (("1" (propax) nil nil)) nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "member" -1)
                        (("2" (split -1)
                          (("1" (hide -2)
                            (("1" (inst?)
                              (("1"
                                (inst 2 "car(ac_results_subs)`1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "member" 2)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst -2 "cdr(ac_results_subs)")
                            (("2" (expand "length" -2 2)
                              (("2"
                                (assert)
                                (("2"
                                  (inst? -2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst? 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "member" 2)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (prop)
              (("2" (skeep)
                (("2" (expand "member" -1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (expand "input_apply_ac" 2)
                        (("1" (lift-if)
                          (("1" (assert)
                            (("1" (expand "member" 2)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst -7 "cdr(ac_results_subs)")
                        (("2" (expand "length" -7 2)
                          (("2" (assert)
                            (("2"
                              (inst -7 "G" "P" "PV" "V" "input1_"
                               "sigma")
                              (("2"
                                (expand "input_apply_ac" 2)
                                (("2"
                                  (expand "member" 2)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (hide -7)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst 3 "G1" "P1" "sigma1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (perm type-eq-decl nil atoms nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil))
   nil)
  (input_apply_ac_mem-1 nil 3884090639
   ("" (measure-induct "length(ac_results_subs)" "ac_results_subs")
    (("" (skolem 1 "ac_results_subs")
      (("" (prop)
        (("" (skeep)
          (("" (split 1)
            (("1" (flatten)
              (("1" (expand "input_apply_ac" -1)
                (("1" (lift-if)
                  (("1" (split)
                    (("1" (flatten)
                      (("1" (expand "member" -2)
                        (("1" (propax) nil nil)) nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "member" -1)
                        (("2" (split -1)
                          (("1" (hide -2)
                            (("1" (inst?)
                              (("1"
                                (inst 2 "car(ac_results_subs)`1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "member" 2)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst -2 "cdr(ac_results_subs)")
                            (("2" (expand "length" -2 2)
                              (("2"
                                (assert)
                                (("2"
                                  (inst? -2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst? 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "member" 2)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (prop)
              (("2" (skeep)
                (("2" (expand "member" -1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (expand "input_apply_ac" 2)
                        (("1" (lift-if)
                          (("1" (assert)
                            (("1" (expand "member" 2)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst -7 "cdr(ac_results_subs)")
                        (("2" (expand "length" -7 2)
                          (("2" (assert)
                            (("2"
                              (inst -7 "G" "P" "PV" "V" "input1"
                               "sigma")
                              (("2"
                                (expand "input_apply_ac" 2)
                                (("2"
                                  (expand "member" 2)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (hide -7)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst 3 "G1" "P1" "sigma1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (perm type-eq-decl nil atoms nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil))
   shostak))
 (max_size_unif_pair 0
  (max_size_unif_pair-1 nil 3884447220
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (name-replace "n" "max_size(P)")
          (("" (reveal -1)
            (("" (expand "max_size" -1)
              (("" (assert)
                (("" (expand "max" -1 1)
                  (("" (lift-if)
                    (("" (prop)
                      (("1" (inst -3 "cdr(P)")
                        (("1" (expand "length" -3 2)
                          (("1" (assert)
                            (("1" (prop)
                              (("1"
                                (skolem -1 "up")
                                (("1"
                                  (inst 2 "up")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "member" 2)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "max_size" -2)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst 3 "car(P)") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (member def-decl "bool" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (size const-decl "nat" nominal_AC_unification nil)
    (max_size def-decl "nat" nominal_AC_ac_step nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   shostak))
 (max_size_append 0
  (max_size_append-1 nil 3886322866
   ("" (induct "P") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((size const-decl "nat" nominal_AC_unification nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (append def-decl "list[T]" list_props nil)
    (max_size def-decl "nat" nominal_AC_ac_step nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (max_size_correct 0
  (max_size_correct-1 nil 3886324809
   ("" (induct "P")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "member" -2)
            (("2" (prop)
              (("1" (grind) nil nil)
               ("2" (inst -2 "up") (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (max_size def-decl "nat" nominal_AC_ac_step nil)
    (size const-decl "nat" nominal_AC_unification nil)
    (<= const-decl "bool" reals nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (max_size_decompose 0
  (max_size_decompose-1 nil 3886322824
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "decompose" 1)
            (("" (lift-if)
              (("" (split 1)
                (("1" (flatten)
                  (("1" (rewrite "max_size_append")
                    (("1" (expand "max" 1)
                      (("1" (lift-if)
                        (("1" (prop)
                          (("1" (inst -4 "term2(t)")
                            (("1" (prop)
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide -2)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (inst -3 "term1(t)")
                            (("2" (prop)
                              (("1"
                                (inst?)
                                (("1" (grind) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (max_size def-decl "nat" nominal_AC_ac_step nil)
    (decompose def-decl "[unif_prb, bool]" nominal_AC_unification nil)
    (size const-decl "nat" nominal_AC_unification nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (max_size_append formula-decl nil nominal_AC_ac_step nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   shostak))
 (max_size_decompose_ext 0
  (max_size_decompose_ext-1 nil 3886402944
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (case "pair?(s) = pair?(ext(pi)(s))")
            (("1" (expand "decompose" 1 1)
              (("1" (lift-if)
                (("1" (split 1)
                  (("1" (flatten)
                    (("1" (rewrite "max_size_append" 1)
                      (("1" (expand "decompose" 1 3)
                        (("1" (assert)
                          (("1" (rewrite "max_size_append" 1)
                            (("1" (lemma "nominal_AC_term_pair_eta")
                              (("1"
                                (inst -1 "s")
                                (("1"
                                  (replace -1 1 :dir rl)
                                  (("1"
                                    (expand "ext" 1)
                                    (("1"
                                      (inst-cp -5 "term1(t)")
                                      (("1"
                                        (split -6)
                                        (("1"
                                          (inst -1 "pi" "term1(s)")
                                          (("1"
                                            (inst -6 "term2(t)")
                                            (("1"
                                              (split -6)
                                              (("1"
                                                (inst
                                                 -1
                                                 "pi"
                                                 "term2(s)")
                                                (("1"
                                                  (expand "max" 1 1)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (expand
                                                         "max"
                                                         1)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "max"
                                                         2)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (-3 1))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-2 1))
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split 2)
                      (("1" (flatten)
                        (("1" (expand "decompose" 1 1)
                          (("1" (assert)
                            (("1" (lift-if)
                              (("1"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split 2)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (hide 4)
                          (("2" (expand "decompose" 3)
                            (("2" (lift-if)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "max_size" 3 1)
                                  (("2"
                                    (expand "max_size" 3)
                                    (("2"
                                      (expand "max_size" 3)
                                      (("2"
                                        (expand "max" 3 1)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split 3)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (expand "max" 2)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (split 2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (expand
                                                           "size"
                                                           2)
                                                          (("2"
                                                            (rewrite
                                                             "ext_size")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -1 2)
              (("2" (use "ext_preserves_type") (("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (max_size def-decl "nat" nominal_AC_ac_step nil)
    (decompose def-decl "[unif_prb, bool]" nominal_AC_unification nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ext_size formula-decl nil nominal_AC_term_properties nil)
    (size const-decl "nat" nominal_AC_unification nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nominal_AC_term_pair_eta formula-decl nil nominal_AC_term_adt nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (max_size_append formula-decl nil nominal_AC_ac_step nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ext_preserves_type formula-decl nil nominal_AC_term_properties nil)
    (ord const-decl "upto(6)" nominal_AC_term_adt nil))
   shostak))
 (num_size_append 0
  (num_size_append-1 nil 3886323711
   ("" (induct "P") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((size const-decl "nat" nominal_AC_unification nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (append def-decl "list[T]" list_props nil)
    (num_size def-decl "nat" nominal_AC_ac_step nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (num_size0 0
  (num_size0-1 nil 3886324719
   ("" (induct "P")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd " "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "num_size" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (lemma "max_size_correct")
                  (("1" (inst -1 "cons(hd, tail)" "hd")
                    (("1" (grind) nil nil)) nil))
                  nil)
                 ("2" (inst -1 "n") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unif_prb type-eq-decl nil nominal_AC_unification nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (max_size def-decl "nat" nominal_AC_ac_step nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (num_size def-decl "nat" nominal_AC_ac_step nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (member def-decl "bool" list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (size const-decl "nat" nominal_AC_unification nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (max_size_correct formula-decl nil nominal_AC_ac_step nil))
   shostak))
 (choose_eq_mem 0
  (choose_eq_mem-1 nil 3886256731
   ("" (induct "P") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((size const-decl "nat" nominal_AC_unification nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (max_size def-decl "nat" nominal_AC_ac_step nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (choose_eq def-decl "[unif_pair, unif_prb]" nominal_AC_ac_step nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (choose_eq_mem1 0
  (choose_eq_mem1-1 nil 3886270351
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (expand "choose_eq" 2)
          (("" (lift-if)
            (("" (prop)
              (("1" (grind) nil nil)
               ("2" (expand "member" 2 1)
                (("2" (lift-if)
                  (("2" (assert)
                    (("2" (flatten)
                      (("2" (inst -1 "cdr(P)") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size const-decl "nat" nominal_AC_unification nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max_size def-decl "nat" nominal_AC_ac_step nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (choose_eq def-decl "[unif_pair, unif_prb]" nominal_AC_ac_step nil)
    (member def-decl "bool" list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (choose_eq_subterms 0
  (choose_eq_subterms-1 nil 3886247283
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (expand "choose_eq" 2)
          (("" (assert)
            (("" (lift-if)
              (("" (prop)
                (("1" (hide -2 -1)
                  (("1" (expand "subset?")
                    (("1" (skolem 1 "t")
                      (("1" (prop)
                        (("1" (expand "subterms" 1)
                          (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst -1 "cdr(P)")
                  (("2" (expand "length" -1 2)
                    (("2" (prop)
                      (("1" (expand "subset?")
                        (("1" (skeep)
                          (("1" (inst?)
                            (("1" (assert) (("1" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "max_size" 1)
                        (("2" (expand "max_size" 1)
                          (("2" (assert) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (size const-decl "nat" nominal_AC_unification nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (max_size def-decl "nat" nominal_AC_ac_step nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (emptyset const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (subterms const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_unification nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (choose_eq def-decl "[unif_pair, unif_prb]" nominal_AC_ac_step nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (choose_eq2_subset 0
  (choose_eq2_subset-1 nil 3886270932
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (expand "choose_eq" 1)
          (("" (lift-if)
            (("" (prop)
              (("1" (grind) nil nil)
               ("2" (hide -1 -2) (("2" (grind) nil nil)) nil)
               ("3" (inst -1 "cdr(P)")
                (("3" (expand "length" -1 2)
                  (("3" (assert)
                    (("3" (expand "subset?")
                      (("3" (skolem 2 "up")
                        (("3" (inst -1 "up")
                          (("3" (flatten)
                            (("3" (assert) (("3" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size const-decl "nat" nominal_AC_unification nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (max_size def-decl "nat" nominal_AC_ac_step nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (subset? const-decl "bool" nominal_AC_unification nil)
    (choose_eq def-decl "[unif_pair, unif_prb]" nominal_AC_ac_step nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (choose_eq_vars_rhs 0
  (choose_eq_vars_rhs-1 nil 3886256136
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (expand "choose_eq" 1)
          (("" (lift-if)
            (("" (prop)
              (("1" (hide -2) (("1" (grind) nil nil)) nil)
               ("2" (hide -1 -2) (("2" (grind) nil nil)) nil)
               ("3" (inst -1 "cdr(P)")
                (("3" (expand "length" -1 2)
                  (("3" (assert)
                    (("3" (expand "subset?")
                      (("3" (skeep)
                        (("3" (expand "rhs")
                          (("3" (expand "sec_proj" (-1 2))
                            (("3" (inst -2 "x") (("3" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size const-decl "nat" nominal_AC_unification nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (max_size def-decl "nat" nominal_AC_ac_step nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (choose_eq def-decl "[unif_pair, unif_prb]" nominal_AC_ac_step nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (choose_eq_vars_rhs2 0
  (choose_eq_vars_rhs2-1 nil 3888426800
   ("" (skeep)
    (("" (case "null?(P)")
      (("1" (grind) nil nil)
       ("2" (expand "subset?")
        (("2" (skeep)
          (("2" (expand "match_problem?" -1)
            (("2" (inst -1 "x")
              (("2" (assert)
                (("2" (rewrite "vars_args" 2)
                  (("2" (inst 2 "choose_eq(P)`1`2")
                    (("2" (assert)
                      (("2" (expand "rhs" 2)
                        (("2" (rewrite "sec_proj_mem")
                          (("2" (inst 2 "choose_eq(P)`1")
                            (("2" (use "choose_eq_mem1")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unif_prb type-eq-decl nil nominal_AC_unification nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (match_problem? const-decl "bool" nominal_AC_unification nil)
    (choose_eq def-decl "[unif_pair, unif_prb]" nominal_AC_ac_step nil)
    (subset? const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (sec_proj_mem formula-decl nil list_aux_equational_reasoning2 nil)
    (choose_eq_mem1 formula-decl nil nominal_AC_ac_step nil))
   shostak))
 (choose_eq_vars 0
  (choose_eq_vars-1 nil 3886259014
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (flatten)
        (("" (expand "choose_eq" 1 1)
          (("" (lift-if)
            (("" (assert)
              (("" (split 1)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (hide -2) (("1" (grind) nil nil)) nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "choose_eq" 2 2)
                        (("2" (assert)
                          (("2" (inst -1 "cdr(P)")
                            (("2" (expand "length" -1 2)
                              (("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (expand "subset?")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst -2 "x")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -1)
                                      (("2"
                                        (expand "subset?")
                                        (("2"
                                          (skeep)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (max_size def-decl "nat" nominal_AC_ac_step nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (size const-decl "nat" nominal_AC_unification nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (choose_eq def-decl "[unif_pair, unif_prb]" nominal_AC_ac_step nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (choose_eq_no_pair 0
  (choose_eq_no_pair-1 nil 3886256593
   ("" (skeep)
    (("" (expand "no_pair?" 1)
      (("" (skeep)
        (("" (rewrite "well_formed_unif_prb")
          (("" (inst -1 "t")
            (("" (assert)
              (("" (prop)
                (("1" (expand "well_formed?" -1)
                  (("1" (propax) nil nil)) nil)
                 ("2" (use "choose_eq_mem") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((choose_eq_mem formula-decl nil nominal_AC_ac_step nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (well_formed_unif_prb formula-decl nil nominal_AC_unification nil)
    (no_pair? const-decl "bool" nominal_AC_unification nil))
   shostak))
 (choose_eq_well_formed 0
  (choose_eq_well_formed-1 nil 3886407074
   ("" (skeep)
    (("" (rewrite "well_formed_unif_prb")
      (("" (prop)
        (("1" (expand "well_formed?" 1)
          (("1" (use "choose_eq_mem1")
            (("1" (split -1)
              (("1" (split)
                (("1" (inst -2 "choose_eq(P)`1`1")
                  (("1" (assert)
                    (("1" (rewrite "member_unif_prb_equiv")
                      (("1" (inst?) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (inst -2 "choose_eq(P)`1`2")
                  (("2" (assert)
                    (("2" (rewrite "member_unif_prb_equiv")
                      (("2" (inst?) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -2) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (use "choose_eq_mem")
          (("2" (rewrite "well_formed_unif_prb" 1)
            (("2" (skolem 1 "t1")
              (("2" (inst?)
                (("2" (inst?)
                  (("2" (assert) (("2" (prop) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((well_formed_unif_prb formula-decl nil nominal_AC_unification nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (choose_eq_mem formula-decl nil nominal_AC_ac_step nil)
    (choose_eq def-decl "[unif_pair, unif_prb]" nominal_AC_ac_step nil)
    (member_unif_prb_equiv formula-decl nil nominal_AC_unification nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (choose_eq_mem1 formula-decl nil nominal_AC_ac_step nil))
   shostak))
 (choose_eq_max_size_aux 0
  (choose_eq_max_size_aux-1 nil 3886259969
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (flatten)
        (("" (expand "choose_eq" 2 1)
          (("" (lift-if)
            (("" (assert)
              (("" (split 2)
                (("1" (flatten)
                  (("1" (expand "choose_eq" 1)
                    (("1" (assert)
                      (("1" (expand "choose_eq" 2)
                        (("1" (expand "max_size" 2 1)
                          (("1" (expand "max" 2 1)
                            (("1" (lift-if)
                              (("1"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (replace -2)
                                    (("1"
                                      (hide-all-but (-1 3))
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (case
                                     "size(car(P)) = max_size(cdr(P))")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -2)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (expand "num_size" 2 1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "choose_eq" 2 2)
                    (("2" (assert)
                      (("2" (inst -1 "cdr(P)")
                        (("2" (expand "length" -1 2)
                          (("2" (split -1)
                            (("1" (flatten)
                              (("1"
                                (split 2)
                                (("1"
                                  (expand "max_size" 1)
                                  (("1"
                                    (expand "max" 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (split 1)
                                          (("1" (flatten) nil nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (expand "max_size" 3)
                                              (("2"
                                                (expand "max" 3)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split -2)
                                    (("1"
                                      (case
                                       "max_size(P) = max_size(cdr(P))")
                                      (("1"
                                        (hide 2)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (expand "max_size" 1 1)
                                        (("2"
                                          (expand "max" 1)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (split 1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (expand "max_size" 5)
                                                  (("2"
                                                    (expand "max" 5)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (case
                                         "max_size(P) = max_size(cdr(P))")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "max_size(choose_eq(P)`2) = max_size(choose_eq(cdr(P))`2)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -3 :dir rl)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (replace
                                                       -2
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (expand
                                                         "num_size"
                                                         2
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "choose_eq"
                                                           2)
                                                          (("1"
                                                            (expand
                                                             "num_size"
                                                             2
                                                             2)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "choose_eq"
                                                 1
                                                 1)
                                                (("2"
                                                  (expand
                                                   "max_size"
                                                   1
                                                   1)
                                                  (("2"
                                                    (expand "max" 1 1)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (split 1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide 4)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "max_size" 1 1)
                                          (("2"
                                            (expand "max" 1)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (split)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "max_size"
                                                     5)
                                                    (("2"
                                                      (expand "max" 5)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (num_size def-decl "nat" nominal_AC_ac_step nil)
    (> const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (choose_eq def-decl "[unif_pair, unif_prb]" nominal_AC_ac_step nil)
    (size const-decl "nat" nominal_AC_unification nil)
    (max_size def-decl "nat" nominal_AC_ac_step nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (choose_eq_max_size 0
  (choose_eq_max_size-1 nil 3886259938
   ("" (skeep)
    (("" (expand "num_max_size")
      (("" (use "choose_eq_max_size_aux") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((choose_eq_max_size_aux formula-decl nil nominal_AC_ac_step nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (num_max_size const-decl "nat" nominal_AC_ac_step nil))
   shostak))
 (choose_eq_unifies 0
  (choose_eq_unifies-1 nil 3887095912
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "choose_eq" 2 1)
            (("" (lift-if)
              (("" (assert)
                (("" (split 2)
                  (("1" (flatten)
                    (("1" (iff)
                      (("1" (expand "choose_eq" 1)
                        (("1" (assert)
                          (("1" (hide -2)
                            (("1" (prop)
                              (("1"
                                (expand "unifies?" -1)
                                (("1" (flatten) nil nil))
                                nil)
                               ("2"
                                (expand "unifies?" -1)
                                (("2" (flatten) nil nil))
                                nil)
                               ("3"
                                (expand "unifies?" 1)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (expand "choose_eq" 2 2)
                      (("2" (assert)
                        (("2" (inst -1 "cdr(P)")
                          (("2" (expand "length" -1 2)
                            (("2" (assert)
                              (("2"
                                (inst?)
                                (("2"
                                  (split -1)
                                  (("1"
                                    (iff 2)
                                    (("1"
                                      (split 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "unifies?" -1 1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "unifies?"
                                                     1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (expand "unifies?" -2)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "unifies?" 1 1)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (expand "max_size" 1 1)
                                      (("2"
                                        (expand "max_size" 1 1)
                                        (("2"
                                          (assert)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (max_size def-decl "nat" nominal_AC_ac_step nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (size const-decl "nat" nominal_AC_unification nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (choose_eq def-decl "[unif_pair, unif_prb]" nominal_AC_ac_step nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (unifies? def-decl "bool" nominal_AC_unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (choose_eq_nice_input 0
  (choose_eq_nice_input-1 nil 3888312111
   ("" (skeep)
    (("" (lemma "nice_input_subterms")
      (("" (inst -1 "G" "P" "choose_eq(P)`2" "PV" "V" "sigma")
        (("" (assert)
          (("" (prop)
            (("1" (use "choose_eq_subterms") (("1" (assert) nil nil))
              nil)
             ("2" (use "choose_eq_vars_rhs") nil nil)
             ("3" (use "choose_eq_no_pair")
              (("3" (assert)
                (("3" (expand "nice_input?") (("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (choose_eq def-decl "[unif_pair, unif_prb]" nominal_AC_ac_step nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (choose_eq_subterms formula-decl nil nominal_AC_ac_step nil)
    (choose_eq_vars_rhs formula-decl nil nominal_AC_ac_step nil)
    (nice_input? const-decl "bool" nominal_AC_ac_step nil)
    (choose_eq_no_pair formula-decl nil nominal_AC_ac_step nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nice_input_subterms formula-decl nil nominal_AC_ac_step nil))
   shostak))
 (choose_eq_nice_input2 0
  (choose_eq_nice_input2-1 nil 3888693647
   ("" (skolem 1 "inp")
    (("" (assert)
      (("" (flatten)
        (("" (name-replace "G" "inp`1")
          (("" (name-replace "P" "inp`2")
            (("" (name-replace "sig" "inp`3")
              (("" (name-replace "V" "inp`4")
                (("" (name-replace "PV" "inp`5")
                  (("" (name-replace "up" "choose_eq(P)`1")
                    (("" (name-replace "P1" "choose_eq(P)`2")
                      (("" (name-replace "t" "up`1")
                        (("" (name-replace "s" "up`2")
                          (("" (reveal -1 -2 -3 -4 -5 -6 -7 -8 -9)
                            (("" (typepred "inp")
                              ((""
                                (expand "nice_input?")
                                ((""
                                  (flatten)
                                  ((""
                                    (assert)
                                    ((""
                                      (replace -14 :hide? t)
                                      ((""
                                        (replace -14 :hide? t)
                                        ((""
                                          (replace -14 :hide? t)
                                          ((""
                                            (replace -14 :hide? t)
                                            ((""
                                              (replace -14 :hide? t)
                                              ((""
                                                (case
                                                 "subset?(vars(cons((t, s), P1)), vars(P))")
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (hide-all-but
                                                     (-1 -3 1))
                                                    (("1"
                                                      (expand
                                                       "disjoint?")
                                                      (("1"
                                                        (expand
                                                         "empty?")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (expand
                                                               "subset?")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     ("member"
                                                                      "intersection")
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       ("member"
                                                                        "intersection")
                                                                       -1)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-1 -5 1))
                                                    (("2"
                                                      (expand
                                                       "subset?")
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (rewrite
                                                     "well_formed_unif_prb")
                                                    (("3"
                                                      (rewrite
                                                       "well_formed_unif_prb")
                                                      (("3"
                                                        (skolem 1 "u")
                                                        (("3"
                                                          (inst -8 "u")
                                                          (("3"
                                                            (flatten)
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (hide
                                                                 -2
                                                                 -3
                                                                 -4
                                                                 -5
                                                                 -6
                                                                 -7
                                                                 -8
                                                                 -9
                                                                 -10)
                                                                (("3"
                                                                  (expand
                                                                   "member"
                                                                   -1)
                                                                  (("3"
                                                                    (split)
                                                                    (("1"
                                                                      (rewrite
                                                                       "member_unif_prb_equiv"
                                                                       2)
                                                                      (("1"
                                                                        (inst
                                                                         2
                                                                         "up")
                                                                        (("1"
                                                                          (use
                                                                           "choose_eq_mem1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -6)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (expand
                                                                         "P1"
                                                                         -1)
                                                                        (("2"
                                                                          (lemma
                                                                           "choose_eq_mem")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "P"
                                                                             "u")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (hide
                                                     -1
                                                     -2
                                                     -3
                                                     -4
                                                     -5
                                                     -6
                                                     -7
                                                     -8
                                                     -9)
                                                    (("4"
                                                      (expand
                                                       "match_problem?"
                                                       -1)
                                                      (("4"
                                                        (expand
                                                         "match_problem?"
                                                         1)
                                                        (("4"
                                                          (skolem
                                                           1
                                                           "x")
                                                          (("4"
                                                            (flatten)
                                                            (("4"
                                                              (expand
                                                               "rhs"
                                                               -1)
                                                              (("4"
                                                                (expand
                                                                 "sec_proj"
                                                                 -1)
                                                                (("4"
                                                                  (expand
                                                                   "vars"
                                                                   -1)
                                                                  (("4"
                                                                    (expand
                                                                     ("member"
                                                                      "union")
                                                                     -1)
                                                                    (("4"
                                                                      (prop)
                                                                      (("1"
                                                                        (inst
                                                                         -2
                                                                         "x")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (rewrite
                                                                             "vars_args"
                                                                             2)
                                                                            (("1"
                                                                              (inst
                                                                               2
                                                                               "s")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "rhs"
                                                                                   2)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "sec_proj_mem"
                                                                                     2)
                                                                                    (("1"
                                                                                      (inst
                                                                                       2
                                                                                       "up")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (use
                                                                                           "choose_eq_mem1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (use
                                                                         "choose_eq_vars_rhs")
                                                                        (("2"
                                                                          (expand
                                                                           "rhs"
                                                                           -1
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "subset?"
                                                                             -1)
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -3
                                                                                   "x")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 3)
                                                  (("2"
                                                    (hide
                                                     -1
                                                     -2
                                                     -3
                                                     -4
                                                     -5
                                                     -6
                                                     -7
                                                     -8
                                                     -9)
                                                    (("2"
                                                      (use
                                                       "choose_eq_vars")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (replace -5)
                                                          (("2"
                                                            (replace
                                                             -6)
                                                            (("2"
                                                              (expand
                                                               "subset?")
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nice_input? const-decl "bool" nominal_AC_ac_step nil)
    (nice_input type-eq-decl nil nominal_AC_ac_step nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (choose_eq_vars formula-decl nil nominal_AC_ac_step nil)
    (max_size def-decl "nat" nominal_AC_ac_step nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (size const-decl "nat" nominal_AC_unification nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (union const-decl "set" sets nil)
    (choose_eq_mem formula-decl nil nominal_AC_ac_step nil)
    (member_unif_prb_equiv formula-decl nil nominal_AC_unification nil)
    (choose_eq_mem1 formula-decl nil nominal_AC_ac_step nil)
    (well_formed_unif_prb formula-decl nil nominal_AC_unification nil)
    (match_problem? const-decl "bool" nominal_AC_unification nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (sec_proj_mem formula-decl nil list_aux_equational_reasoning2 nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (choose_eq_vars_rhs formula-decl nil nominal_AC_ac_step nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (choose_eq def-decl "[unif_pair, unif_prb]" nominal_AC_ac_step nil))
   shostak))
 (choose_eq_not_unifies_atom 0
  (choose_eq_not_unifies_atom-1 nil 3888085484
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "up" "choose_eq(P)`1")
        (("" (reveal -1)
          (("" (name-replace "t" "up`1")
            (("" (name-replace "s" "up`2")
              (("" (flatten)
                (("" (reveal -1 -2)
                  (("" (expand "unifies?" -4)
                    (("" (replace -1)
                      (("" (replace -2)
                        (("" (use "nominal_AC_term_at_eta")
                          (("" (replace -1 -5 :dir rl)
                            (("" (rewrite "subs_const" -5)
                              ((""
                                (expand "equal?" -5)
                                ((""
                                  (lemma "subs_ord")
                                  ((""
                                    (inst -1 "s" "delta" "t")
                                    ((""
                                      (assert)
                                      ((""
                                        (prop)
                                        (("1"
                                          (expand "ord" -1)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (lemma "nominal_AC_term_at_eta")
                                                  (("1"
                                                    (inst -1 "s")
                                                    (("1"
                                                      (replace
                                                       -1
                                                       -7
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (rewrite
                                                         "subs_const"
                                                         -7)
                                                        (("1"
                                                          (decompose-equality
                                                           -7)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "match_problem?" -8)
                                          (("2"
                                            (inst -8 "V(s)")
                                            (("2"
                                              (prop)
                                              (("1"
                                                (expand
                                                 "disjoint?"
                                                 -10)
                                                (("1"
                                                  (expand "empty?" -10)
                                                  (("1"
                                                    (inst -10 "V(s)")
                                                    (("1"
                                                      (expand
                                                       ("member"
                                                        "intersection")
                                                       1)
                                                      (("1"
                                                        (prop)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite "vars_args" 1)
                                                (("2"
                                                  (inst 1 "s")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "vars" 1)
                                                      (("2"
                                                        (expand
                                                         "member"
                                                         1
                                                         2)
                                                        (("2"
                                                          (expand
                                                           "singleton"
                                                           1)
                                                          (("2"
                                                            (use
                                                             "choose_eq_mem1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "rhs"
                                                                 1)
                                                                (("2"
                                                                  (rewrite
                                                                   "sec_proj_mem"
                                                                   1)
                                                                  (("2"
                                                                    (inst
                                                                     1
                                                                     "up")
                                                                    (("2"
                                                                      (expand
                                                                       "s"
                                                                       1)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (choose_eq def-decl "[unif_pair, unif_prb]" nominal_AC_ac_step nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (at adt-constructor-decl "[atom -> (atom?)]" nominal_AC_term_adt nil)
    (ord const-decl "upto(6)" nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (choose_eq_mem1 formula-decl nil nominal_AC_ac_step nil)
    (sec_proj_mem formula-decl nil list_aux_equational_reasoning2 nil)
    (singleton const-decl "(singleton?)" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (match_problem? const-decl "bool" nominal_AC_unification nil)
    (subs_ord formula-decl nil nominal_AC_substitution nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (a adt-accessor-decl "[(atom?) -> atom]" nominal_AC_term_adt nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (atom? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (nominal_AC_term_at_eta formula-decl nil nominal_AC_term_adt nil))
   shostak))
 (choose_eq_not_unifies_var 0
  (choose_eq_not_unifies_var-1 nil 3888226284
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (name-replace "up" "choose_eq(P)`1")
          (("" (reveal -1)
            (("" (name-replace "t" "up`1")
              (("" (name-replace "s" "up`2")
                (("" (reveal -1 -2)
                  (("" (expand "unifies?" -4)
                    (("" (replace -1)
                      (("" (replace -2)
                        (("" (case "member(V(t), dom(delta))")
                          (("1" (expand "disjoint?" -8)
                            (("1" (expand "empty?" -8)
                              (("1"
                                (inst -8 "V(t)")
                                (("1"
                                  (expand ("member" "intersection") 1)
                                  (("1"
                                    (split 1)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (case "subs(delta)(s) = s")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (expand
                                             "match_problem?"
                                             -7)
                                            (("1"
                                              (inst -7 "V(t)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite
                                                   "vars_args"
                                                   2)
                                                  (("1"
                                                    (inst 2 "s")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "rhs"
                                                         2)
                                                        (("1"
                                                          (rewrite
                                                           "sec_proj_mem")
                                                          (("1"
                                                            (inst
                                                             2
                                                             "up")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (use
                                                                 "choose_eq_mem1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (use "subs_no_effect_t")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "disjoint?")
                                              (("2"
                                                (expand "empty?" 1)
                                                (("2"
                                                  (skolem 1 "y")
                                                  (("2"
                                                    (expand
                                                     ("member "
                                                      "intersection")
                                                     -1)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (reveal -2)
                                                        (("2"
                                                          (inst -1 "y")
                                                          (("2"
                                                            (expand
                                                             ("member"
                                                              "intersection")
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "match_problem?"
                                                                 -8)
                                                                (("2"
                                                                  (inst
                                                                   -8
                                                                   "y")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (rewrite
                                                                       "vars_args")
                                                                      (("2"
                                                                        (inst
                                                                         4
                                                                         "s")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "rhs"
                                                                             4)
                                                                            (("2"
                                                                              (rewrite
                                                                               "sec_proj_mem"
                                                                               4)
                                                                              (("2"
                                                                                (inst
                                                                                 4
                                                                                 "up")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (use
                                                                                     "choose_eq_mem1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand ("member" "dom") 1)
                            (("2" (flatten)
                              (("2"
                                (use "nominal_AC_term_times_eta")
                                (("2"
                                  (replace -1 -6 :dir rl)
                                  (("2"
                                    (rewrite "subs_ext_pi" -6)
                                    (("2"
                                      (replace -2)
                                      (("2"
                                        (expand "ext" -6)
                                        (("2"
                                          (rewrite "append_null")
                                          (("2"
                                            (case "subs(delta)(s) = s")
                                            (("1"
                                              (replace -1 -7)
                                              (("1"
                                                (expand "equal?" -7)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -1 -2 -6 3 4)
                                              (("2"
                                                (use
                                                 "subs_no_effect_t")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "disjoint?"
                                                     1)
                                                    (("2"
                                                      (expand
                                                       "empty?"
                                                       1)
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (expand
                                                           ("member"
                                                            "intersection")
                                                           -1)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "disjoint?")
                                                              (("2"
                                                                (expand
                                                                 "empty?")
                                                                (("2"
                                                                  (inst
                                                                   -8
                                                                   "x")
                                                                  (("2"
                                                                    (expand
                                                                     ("member"
                                                                      "intersection")
                                                                     2)
                                                                    (("2"
                                                                      (prop)
                                                                      (("2"
                                                                        (expand
                                                                         "match_problem?"
                                                                         -6)
                                                                        (("2"
                                                                          (inst
                                                                           -6
                                                                           "x")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (rewrite
                                                                               "vars_args"
                                                                               3)
                                                                              (("2"
                                                                                (inst
                                                                                 3
                                                                                 "s")
                                                                                (("2"
                                                                                  (prop)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "rhs"
                                                                                     1)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "sec_proj_mem")
                                                                                      (("2"
                                                                                        (inst
                                                                                         1
                                                                                         "up")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (use
                                                                                             "choose_eq_mem1")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (choose_eq def-decl "[unif_pair, unif_prb]" nominal_AC_ac_step nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (sec_proj_mem formula-decl nil list_aux_equational_reasoning2 nil)
    (choose_eq_mem1 formula-decl nil nominal_AC_ac_step nil)
    (match_problem? const-decl "bool" nominal_AC_unification nil)
    (disjoint? const-decl "bool" sets nil)
    (append_null formula-decl nil list_props nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (nominal_AC_term_times_eta formula-decl nil nominal_AC_term_adt nil)
    (unifies? const-decl "bool" nominal_AC_unification nil))
   shostak))
 (choose_eq_not_unifies_unit 0
  (choose_eq_not_unifies_unit-1 nil 3888236770
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (name-replace "up" "choose_eq(P)`1")
          (("" (expand "unifies?" -1)
            (("" (name-replace "t" "up`1")
              (("" (name-replace "s" "up`2")
                (("" (reveal -1 -2)
                  (("" (case "t = unit")
                    (("1" (replace -1)
                      (("1" (rewrite "subs_unit" -4)
                        (("1" (expand "equal?" -4)
                          (("1" (case "subs(delta)(s) = s")
                            (("1" (replace -1) (("1" (propax) nil nil))
                              nil)
                             ("2" (use "subs_no_effect_t")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "disjoint?")
                                  (("2"
                                    (expand "empty?")
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (expand
                                           ("member" "intersection")
                                           -1)
                                          (("2"
                                            (expand
                                             ("member" "intersection")
                                             2)
                                            (("2"
                                              (prop)
                                              (("2"
                                                (expand
                                                 "match_problem?")
                                                (("2"
                                                  (inst -7 "x")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (rewrite
                                                       "vars_args"
                                                       3)
                                                      (("2"
                                                        (inst 3 "s")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "rhs"
                                                             3)
                                                            (("2"
                                                              (rewrite
                                                               "sec_proj_mem")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (inst
                                                                   3
                                                                   "up")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (use
                                                                       "choose_eq_mem1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "up"
                                                                           3)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (choose_eq def-decl "[unif_pair, unif_prb]" nominal_AC_ac_step nil)
    (subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (sec_proj_mem formula-decl nil list_aux_equational_reasoning2 nil)
    (choose_eq_mem1 formula-decl nil nominal_AC_ac_step nil)
    (match_problem? const-decl "bool" nominal_AC_unification nil)
    (empty? const-decl "bool" sets nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (unit adt-constructor-decl "(unit?)" nominal_AC_term_adt nil)
    (unit? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (unifies? const-decl "bool" nominal_AC_unification nil))
   shostak))
 (choose_eq_not_unifies_app 0
  (choose_eq_not_unifies_app-1 nil 3888238983
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (name-replace "up" "choose_eq(P)`1")
          (("" (name-replace "t" "up`1")
            (("" (name-replace "s" "up`2")
              (("" (case "disjoint?(dom(delta), vars(s))")
                (("1" (expand "unifies?" -2)
                  (("1" (reveal -1 -2)
                    (("1" (replace -1)
                      (("1" (replace -2)
                        (("1" (use "nominal_AC_term_app_eta")
                          (("1" (name-replace "f" "f_sym(t)")
                            (("1" (reveal -1)
                              (("1"
                                (case "app?(s) AND f = f_sym(s)")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma "decompose_not_fail2")
                                      (("1"
                                        (inst
                                         -1
                                         "G"
                                         "f"
                                         "arg(s)"
                                         "delta"
                                         "arg(t)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "unifies?" 1)
                                            (("1"
                                              (replace -4)
                                              (("1"
                                                (lemma "nominal_AC_term_app_eta")
                                                (("1"
                                                  (inst -1 "s")
                                                  (("1"
                                                    (replace -3)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 3)
                                  (("2"
                                    (replace -2 -6 :dir rl)
                                    (("2"
                                      (rewrite "subs_app" -6)
                                      (("2"
                                        (expand "equal?" -6)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (case "subs(delta)(s) = s")
                                            (("1"
                                              (replace -1)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (use "subs_no_effect_t")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 3 -1 -3)
                  (("2" (reveal -3 -4 -5)
                    (("2" (expand "disjoint?")
                      (("2" (expand "empty?")
                        (("2" (skeep)
                          (("2" (inst?)
                            (("2" (expand ("member" "intersection"))
                              (("2"
                                (prop)
                                (("2"
                                  (expand "match_problem?" -6)
                                  (("2"
                                    (inst -6 "x")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (rewrite "vars_args" 2)
                                        (("2"
                                          (inst 2 "s")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "rhs" 2)
                                              (("2"
                                                (rewrite
                                                 "sec_proj_mem"
                                                 2)
                                                (("2"
                                                  (inst 2 "up")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (use
                                                       "choose_eq_mem1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (choose_eq def-decl "[unif_pair, unif_prb]" nominal_AC_ac_step nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (match_problem? const-decl "bool" nominal_AC_unification nil)
    (choose_eq_mem1 formula-decl nil nominal_AC_ac_step nil)
    (sec_proj_mem formula-decl nil list_aux_equational_reasoning2 nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (empty? const-decl "bool" sets nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (nominal_AC_term_app_eta formula-decl nil nominal_AC_term_adt nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (decompose_not_fail2 formula-decl nil nominal_AC_unification nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (string type-eq-decl nil strings nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (set type-eq-decl nil sets nil)
    (disjoint? const-decl "bool" sets nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil))
   shostak))
 (choose_eq_not_unifies_abs 0
  (choose_eq_not_unifies_abs-1 nil 3888243353
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (name-replace "up" "choose_eq(P)`1")
          (("" (name-replace "t" "up`1")
            (("" (name-replace "s" "up`2")
              (("" (case "disjoint?(dom(delta), vars(s))")
                (("1" (expand "unifies?" -2)
                  (("1" (reveal -1 -2)
                    (("1" (replace -1)
                      (("1" (replace -2)
                        (("1" (case "abs?(s)")
                          (("1" (assert)
                            (("1" (lemma "decompose_not_fail3")
                              (("1"
                                (inst
                                 -1
                                 "G"
                                 "abstr(t)"
                                 "abstr(s)"
                                 "body(s)"
                                 "delta"
                                 "body(t)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma "nominal_AC_term_abs_eta")
                                    (("1"
                                      (inst -1 "t")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (lemma "nominal_AC_term_abs_eta")
                                          (("1"
                                            (inst -1 "s")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (expand "unifies?" 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 3)
                            (("2" (lemma "nominal_AC_term_abs_eta")
                              (("2"
                                (inst -1 "t")
                                (("2"
                                  (replace -1 -5 :dir rl)
                                  (("2"
                                    (rewrite "subs_abs" -5)
                                    (("2"
                                      (expand "equal?" -5)
                                      (("2"
                                        (case "subs(delta)(s) = s")
                                        (("1"
                                          (replace -1)
                                          (("1" (flatten) nil nil))
                                          nil)
                                         ("2"
                                          (hide -5)
                                          (("2"
                                            (use "subs_no_effect_t")
                                            (("2" (prop) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 3)
                  (("2" (hide -1 -3 -5)
                    (("2" (expand "disjoint?")
                      (("2" (expand "empty?")
                        (("2" (skeep)
                          (("2" (inst?)
                            (("2" (expand ("member" "intersection"))
                              (("2"
                                (prop)
                                (("2"
                                  (expand "match_problem?")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (rewrite "vars_args" 2)
                                        (("2"
                                          (inst 2 "s")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "rhs" 2)
                                              (("2"
                                                (rewrite
                                                 "sec_proj_mem")
                                                (("2"
                                                  (inst 2 "up")
                                                  (("2"
                                                    (reveal -6 -7 -8)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (use
                                                         "choose_eq_mem1")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (disjoint? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (subs_abs formula-decl nil nominal_AC_substitution nil)
    (subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (nominal_AC_term_abs_eta formula-decl nil nominal_AC_term_adt nil)
    (decompose_not_fail3 formula-decl nil nominal_AC_unification nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (empty? const-decl "bool" sets nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (sec_proj_mem formula-decl nil list_aux_equational_reasoning2 nil)
    (choose_eq_mem1 formula-decl nil nominal_AC_ac_step nil)
    (match_problem? const-decl "bool" nominal_AC_unification nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (choose_eq def-decl "[unif_pair, unif_prb]" nominal_AC_ac_step nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (choose_eq_not_unifies_ac_app 0
  (choose_eq_not_unifies_ac_app-1 nil 3888694549
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "up" "choose_eq(P)`1")
        (("" (flatten)
          (("" (expand "unifies?" -1)
            (("" (name-replace "t" "up`1")
              (("" (name-replace "s" "up`2")
                (("" (lemma "nominal_AC_term_ac_app_eta")
                  (("" (inst -1 "t")
                    (("" (replace -1 -2 :dir rl)
                      (("" (rewrite "subs_ac" -2)
                        (("" (name-replace "f" "ac_sym(t)")
                          (("" (reveal -1)
                            (("" (expand "equal?" -3)
                              ((""
                                (flatten)
                                ((""
                                  (hide -5)
                                  ((""
                                    (lemma "subs_ac3")
                                    ((""
                                      (inst -1 "f" "delta" "s")
                                      ((""
                                        (assert)
                                        ((""
                                          (expand "is_ac_sym?" -1)
                                          ((""
                                            (use "subs_no_effect_t")
                                            ((""
                                              (prop)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "disjoint?")
                                                (("2"
                                                  (expand "empty?")
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst -9 "x")
                                                      (("2"
                                                        (expand
                                                         ("member"
                                                          "intersection")
                                                         -1)
                                                        (("2"
                                                          (expand
                                                           ("member"
                                                            "intersection")
                                                           2)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "match_problem?"
                                                                 -8)
                                                                (("2"
                                                                  (inst
                                                                   -8
                                                                   "x")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (rewrite
                                                                       "vars_args"
                                                                       1)
                                                                      (("2"
                                                                        (inst
                                                                         1
                                                                         "s")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "rhs"
                                                                             1)
                                                                            (("2"
                                                                              (reveal
                                                                               -8
                                                                               -10)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "sec_proj_mem"
                                                                                 1)
                                                                                (("2"
                                                                                  (inst
                                                                                   1
                                                                                   "up")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (use
                                                                                       "choose_eq_mem1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (choose_eq def-decl "[unif_pair, unif_prb]" nominal_AC_ac_step nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (subs_ac3 formula-decl nil nominal_AC_substitution nil)
    (subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (match_problem? const-decl "bool" nominal_AC_unification nil)
    (sec_proj_mem formula-decl nil list_aux_equational_reasoning2 nil)
    (choose_eq_mem1 formula-decl nil nominal_AC_ac_step nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (empty? const-decl "bool" sets nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (nominal_AC_term_ac_app_eta formula-decl nil nominal_AC_term_adt nil))
   shostak))
 (apply_ac_TCC1 0
  (apply_ac_TCC1-1 nil 3884076175
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (lemma "nice_input_cdr")
          (("" (inst -1 "G" "P" "PV" "V" "sigma")
            (("" (assert)
              (("" (typepred "input")
                (("" (case "input = (G, P, sigma, V, PV)")
                  (("1" (replace -1) (("1" (propax) nil nil)) nil)
                   ("2" (decompose-equality 1) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nice_input_cdr formula-decl nil nominal_AC_ac_step nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nice_input? const-decl "bool" nominal_AC_ac_step nil)
    (nice_input type-eq-decl nil nominal_AC_ac_step nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (apply_ac subtype
    "(nominal_AC_ac_step.G, nominal_AC_ac_step.P1, nominal_AC_ac_step.sigma, nominal_AC_ac_step.V, nominal_AC_ac_step.PV)"
    "nice_input")))
 (apply_ac_TCC2 0
  (apply_ac_TCC2-1 nil 3884076175
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (rewrite "every_nth")
          (("" (skeep)
            (("" (typepred "i")
              (("" (expand "length" -1) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((every_nth formula-decl nil list_props nil)
    (nice_input? const-decl "bool" nominal_AC_ac_step nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (apply_ac subtype
    "list_adt[[nominal_AC_freshness.fresh_context, nominal_AC_unification.unif_prb, nominal_AC_substitution.sub, finite_set[variable], finite_set[variable]]].null"
    "list[nice_input]")))
 (apply_ac_TCC3 0
  (apply_ac_TCC3-1 nil 3884076175
   ("" (skeep)
    (("" (skeep)
      (("" (skeep) (("" (skeep) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((ac_prb? const-decl "bool" nominal_AC_unification nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil))
   nil
   (apply_ac subtype "nominal_AC_ac_step.t"
    "(nominal_AC_term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].ac_app?)")))
 (apply_ac_TCC4 0
  (apply_ac_TCC4-1 nil 3884076175
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (rewrite "every_nth")
            (("" (skeep)
              (("" (typepred "i")
                ((""
                  (name-replace "input1"
                   "nth(input_apply_ac(ac_results_subs, G, P1, sigma, new_V, PV), i)")
                  (("" (reveal -1)
                    (("" (lemma "member_nth_lst[pre_nice_input]")
                      (("" (inst?)
                        (("" (assert)
                          (("" (replace -2)
                            (("" (hide -2)
                              ((""
                                (hide -2)
                                ((""
                                  (rewrite "input_apply_ac_mem")
                                  ((""
                                    (skolem -1 ("G1" "PI" "sigma1"))
                                    ((""
                                      (flatten)
                                      ((""
                                        (hide 2)
                                        ((""
                                          (replace -19 -1 :hide? T)
                                          ((""
                                            (expand "nice_input?" 2)
                                            ((""
                                              (replace -2 :hide? t)
                                              ((""
                                                (replace -2 :hide? t)
                                                ((""
                                                  (replace -2 :hide? t)
                                                  ((""
                                                    (replace
                                                     -2
                                                     :hide?
                                                     t)
                                                    ((""
                                                      (replace
                                                       -2
                                                       :hide?
                                                       t)
                                                      ((""
                                                        (use
                                                         "inst_step_mem")
                                                        ((""
                                                          (assert)
                                                          ((""
                                                            (hide 2)
                                                            ((""
                                                              (skolem
                                                               -1
                                                               "PC")
                                                              ((""
                                                                (flatten)
                                                                ((""
                                                                  (hide
                                                                   -5)
                                                                  ((""
                                                                    (replace
                                                                     -15
                                                                     -1
                                                                     :hide?
                                                                     T)
                                                                    ((""
                                                                      (typepred
                                                                       "input")
                                                                      ((""
                                                                        (expand
                                                                         "nice_input?"
                                                                         -1)
                                                                        ((""
                                                                          (replace
                                                                           -6
                                                                           :dir
                                                                           rl
                                                                           :hide?
                                                                           t)
                                                                          ((""
                                                                            (replace
                                                                             -6
                                                                             :dir
                                                                             rl
                                                                             :hide?
                                                                             t)
                                                                            ((""
                                                                              (replace
                                                                               -6
                                                                               :dir
                                                                               rl
                                                                               :hide?
                                                                               t)
                                                                              ((""
                                                                                (replace
                                                                                 -6
                                                                                 :dir
                                                                                 rl
                                                                                 :hide?
                                                                                 t)
                                                                                ((""
                                                                                  (replace
                                                                                   -6
                                                                                   :dir
                                                                                   rl
                                                                                   :hide?
                                                                                   t)
                                                                                  ((""
                                                                                    (reveal
                                                                                     1)
                                                                                    ((""
                                                                                      (hide
                                                                                       -6
                                                                                       -7
                                                                                       -8)
                                                                                      ((""
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (use
                                                                                           "inst_step_idempotent3")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -14
                                                                                               :dir
                                                                                               rl)
                                                                                              (("1"
                                                                                                (use
                                                                                                 "idempotent_append")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (use
                                                                                                       "inst_step_vars_img")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -15
                                                                                                           :dir
                                                                                                           rl)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -17
                                                                                                             -12)
                                                                                                            (("1"
                                                                                                              (use
                                                                                                               "solve_ac_vars2")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (prop)
                                                                                                                  (("1"
                                                                                                                    (hide-all-but
                                                                                                                     (-1
                                                                                                                      -2
                                                                                                                      1))
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "disjoint?")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "empty?")
                                                                                                                        (("1"
                                                                                                                          (skeep)
                                                                                                                          (("1"
                                                                                                                            (inst?)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "subset?"
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (inst?)
                                                                                                                                (("1"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (reveal
                                                                                                                     -7
                                                                                                                     -8)
                                                                                                                    (("2"
                                                                                                                      (hide-all-but
                                                                                                                       (-1
                                                                                                                        -2
                                                                                                                        1
                                                                                                                        4))
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           -5
                                                                                           -6
                                                                                           -7
                                                                                           -8
                                                                                           -9)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "disjoint?"
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "empty?"
                                                                                               1)
                                                                                              (("2"
                                                                                                (skeep)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   ("member"
                                                                                                    "intersection")
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "dom_append")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "subset?"
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "x")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -3)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 ("member"
                                                                                                                  "union")
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (prop)
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     "vars_unif_prb_append")
                                                                                                                    (("1"
                                                                                                                      (prop)
                                                                                                                      (("1"
                                                                                                                        (use
                                                                                                                         "inst_step_vars_unif")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -11
                                                                                                                             :dir
                                                                                                                             rl)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -10
                                                                                                                               :dir
                                                                                                                               rl)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "disjoint?"
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "empty?")
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "x")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       ("member"
                                                                                                                                        "intersection")
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (use
                                                                                                                         "apply_sub_elim_var2")
                                                                                                                        (("2"
                                                                                                                          (prop)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "disjoint?"
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "empty?")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "x")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   ("member"
                                                                                                                                    "intersection")
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (use
                                                                                                                             "inst_step_idempotent3")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (case
                                                                                                                     "disjoint?(dom(sigma), vars(PC))")
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "vars_unif_prb_append")
                                                                                                                      (("1"
                                                                                                                        (prop)
                                                                                                                        (("1"
                                                                                                                          (use
                                                                                                                           "inst_step_vars_unif2")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -11
                                                                                                                               :dir
                                                                                                                               rl)
                                                                                                                              (("1"
                                                                                                                                (hide-all-but
                                                                                                                                 (-1
                                                                                                                                  -2
                                                                                                                                  -3
                                                                                                                                  -4))
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "disjoint?"
                                                                                                                                   -3)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "empty?"
                                                                                                                                     -3)
                                                                                                                                    (("1"
                                                                                                                                      (inst?)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "subset?"
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (case
                                                                                                                           "member(x, vars(PC))")
                                                                                                                          (("1"
                                                                                                                            (hide-all-but
                                                                                                                             (-1
                                                                                                                              -3
                                                                                                                              -4))
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "disjoint?")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "empty?")
                                                                                                                                (("1"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (use
                                                                                                                             "apply_sub_vars")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "subset?"
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (inst?)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     ("member"
                                                                                                                                      "union")
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (prop)
                                                                                                                                      (("1"
                                                                                                                                        (use
                                                                                                                                         "inst_step_vars_img")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -13
                                                                                                                                             :dir
                                                                                                                                             rl)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "subset?"
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (inst?)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (hide-all-but
                                                                                                                                         (-1
                                                                                                                                          -4
                                                                                                                                          -6
                                                                                                                                          -13))
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "disjoint?"
                                                                                                                                           -3)
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "empty?"
                                                                                                                                             -3)
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -3
                                                                                                                                               "x")
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 ("member"
                                                                                                                                                  "intersection")
                                                                                                                                                 1)
                                                                                                                                                (("2"
                                                                                                                                                  (hide
                                                                                                                                                   -2)
                                                                                                                                                  (("2"
                                                                                                                                                    (grind)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (replace
                                                                                                                       -12
                                                                                                                       -7)
                                                                                                                      (("2"
                                                                                                                        (use
                                                                                                                         "solve_ac_vars2")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (prop)
                                                                                                                            (("1"
                                                                                                                              (hide-all-but
                                                                                                                               (-1
                                                                                                                                1))
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "disjoint?")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "empty?")
                                                                                                                                  (("1"
                                                                                                                                    (skeep)
                                                                                                                                    (("1"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (hide-all-but
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (reveal
                                                                                                                                 -24
                                                                                                                                 -25
                                                                                                                                 -26
                                                                                                                                 -28)
                                                                                                                                (("2"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (use
                                                                                           "contained_append")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (hide
                                                                                               2)
                                                                                              (("3"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "contained_supset")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "sigma1"
                                                                                                     "vars(PC)"
                                                                                                     "new_V")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (use
                                                                                                           "inst_step_cont")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (replace
                                                                                                           -15
                                                                                                           -16)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "solve_ac_first_proj_sec_proj_vars2")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (hide-all-but
                                                                                                                 (-4
                                                                                                                  -15
                                                                                                                  -16
                                                                                                                  1))
                                                                                                                (("2"
                                                                                                                  (reveal
                                                                                                                   -22)
                                                                                                                  (("2"
                                                                                                                    (reveal
                                                                                                                     -19
                                                                                                                     -20)
                                                                                                                    (("2"
                                                                                                                      (case
                                                                                                                       "subset?(vars(t, s), vars(P))")
                                                                                                                      (("1"
                                                                                                                        (hide-all-but
                                                                                                                         (-1
                                                                                                                          -5
                                                                                                                          1))
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "subset?")
                                                                                                                          (("1"
                                                                                                                            (skeep)
                                                                                                                            (("1"
                                                                                                                              (inst?)
                                                                                                                              (("1"
                                                                                                                                (inst?)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (hide-all-but
                                                                                                                         (-1
                                                                                                                          -2
                                                                                                                          1))
                                                                                                                        (("2"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (lemma
                                                                                                   "contained_supset")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "sigma"
                                                                                                     "V"
                                                                                                     "new_V")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -15
                                                                                                         -16)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -15
                                                                                                           -10)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "solve_ac_sec_proj_vars2")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (hide
                                                                                           -5
                                                                                           -6
                                                                                           -7
                                                                                           -8
                                                                                           -9
                                                                                           2)
                                                                                          (("4"
                                                                                            (case
                                                                                             "subset?(vars(PC), new_V)")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "subset?"
                                                                                               1)
                                                                                              (("1"
                                                                                                (skeep)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "vars_unif_prb_append")
                                                                                                  (("1"
                                                                                                    (prop)
                                                                                                    (("1"
                                                                                                      (use
                                                                                                       "inst_step_vars_unif2")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -10
                                                                                                           :dir
                                                                                                           rl)
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             (-1
                                                                                                              -2
                                                                                                              -3
                                                                                                              1))
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "subset?")
                                                                                                              (("1"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (use
                                                                                                       "apply_sub_vars")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "subset?"
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (inst?)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -2)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 ("member"
                                                                                                                  "union")
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (prop)
                                                                                                                  (("1"
                                                                                                                    (use
                                                                                                                     "inst_step_vars_img")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -11
                                                                                                                         :dir
                                                                                                                         rl)
                                                                                                                        (("1"
                                                                                                                          (hide-all-but
                                                                                                                           (-1
                                                                                                                            -2
                                                                                                                            -3
                                                                                                                            1))
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "subset?")
                                                                                                                            (("1"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (case
                                                                                                                     "subset?(V, new_V)")
                                                                                                                    (("1"
                                                                                                                      (hide-all-but
                                                                                                                       (-1
                                                                                                                        -2
                                                                                                                        -7
                                                                                                                        1))
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "subset?")
                                                                                                                        (("1"
                                                                                                                          (inst?)
                                                                                                                          (("1"
                                                                                                                            (inst?)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (reveal
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (replace
                                                                                                                       -12)
                                                                                                                      (("2"
                                                                                                                        (use
                                                                                                                         "solve_ac_sec_proj_vars2")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replace
                                                                                               -10
                                                                                               -5)
                                                                                              (("2"
                                                                                                (use
                                                                                                 "solve_ac_first_proj_sec_proj_vars2")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (hide-all-but
                                                                                                     (-10
                                                                                                      -11
                                                                                                      1
                                                                                                      -4))
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -2
                                                                                                       -3)
                                                                                                      (("2"
                                                                                                        (reveal
                                                                                                         -18
                                                                                                         -19)
                                                                                                        (("2"
                                                                                                          (case
                                                                                                           "subset?(vars(t, s), vars(P))")
                                                                                                          (("1"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide
                                                                                                             -3
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("5"
                                                                                          (use
                                                                                           "inst_step_vars_context")
                                                                                          (("5"
                                                                                            (assert)
                                                                                            (("5"
                                                                                              (replace
                                                                                               -12
                                                                                               :dir
                                                                                               rl)
                                                                                              (("5"
                                                                                                (hide
                                                                                                 -5
                                                                                                 -8
                                                                                                 -9
                                                                                                 -7
                                                                                                 -10
                                                                                                 -15)
                                                                                                (("5"
                                                                                                  (expand
                                                                                                   "subset?"
                                                                                                   1)
                                                                                                  (("5"
                                                                                                    (skeep)
                                                                                                    (("5"
                                                                                                      (expand
                                                                                                       "subset?"
                                                                                                       -1)
                                                                                                      (("5"
                                                                                                        (inst?)
                                                                                                        (("5"
                                                                                                          (assert)
                                                                                                          (("5"
                                                                                                            (hide
                                                                                                             -2)
                                                                                                            (("5"
                                                                                                              (expand
                                                                                                               ("member"
                                                                                                                "union")
                                                                                                               -1)
                                                                                                              (("5"
                                                                                                                (prop)
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "subset?(V, new_V)")
                                                                                                                  (("1"
                                                                                                                    (hide-all-but
                                                                                                                     (-1
                                                                                                                      -2
                                                                                                                      -6
                                                                                                                      1))
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "subset?")
                                                                                                                      (("1"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (replace
                                                                                                                     -10)
                                                                                                                    (("2"
                                                                                                                      (use
                                                                                                                       "solve_ac_sec_proj_vars2")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (replace
                                                                                                                   -10
                                                                                                                   -6)
                                                                                                                  (("2"
                                                                                                                    (use
                                                                                                                     "solve_ac_first_proj_sec_proj_vars2")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (prop)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -11
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -12
                                                                                                                             :dir
                                                                                                                             rl)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "subset?")
                                                                                                                              (("1"
                                                                                                                                (inst?)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide-all-but
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (reveal
                                                                                                                             -23
                                                                                                                             -24
                                                                                                                             -26
                                                                                                                             -28)
                                                                                                                            (("2"
                                                                                                                              (case
                                                                                                                               "subset?(vars(t, s), vars(P))")
                                                                                                                              (("1"
                                                                                                                                (case
                                                                                                                                 "subset?(vars(P), V)")
                                                                                                                                (("1"
                                                                                                                                  (hide-all-but
                                                                                                                                   (-1
                                                                                                                                    -2
                                                                                                                                    1))
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "subset?")
                                                                                                                                    (("1"
                                                                                                                                      (skeep)
                                                                                                                                      (("1"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (typepred
                                                                                                                                   "input")
                                                                                                                                  (("2"
                                                                                                                                    (reveal
                                                                                                                                     -15)
                                                                                                                                    (("2"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("6"
                                                                                          (case
                                                                                           "subset?(V, new_V)")
                                                                                          (("1"
                                                                                            (hide-all-but
                                                                                             (-1
                                                                                              -7
                                                                                              1))
                                                                                            (("1"
                                                                                              (expand
                                                                                               "subset?")
                                                                                              (("1"
                                                                                                (skeep)
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             -4
                                                                                             -5
                                                                                             -6
                                                                                             -7
                                                                                             -8
                                                                                             -9)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -9)
                                                                                              (("2"
                                                                                                (use
                                                                                                 "solve_ac_sec_proj_vars2")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("7"
                                                                                          (hide
                                                                                           -2
                                                                                           -3
                                                                                           -9
                                                                                           2)
                                                                                          (("7"
                                                                                            (case
                                                                                             "well_formed?(PC)")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "well_formed_unif_prb_append")
                                                                                              (("1"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (use
                                                                                                   "inst_step_well_formed2")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (use
                                                                                                   "well_formed_apply_sub")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (prop)
                                                                                                      (("1"
                                                                                                        (hide-all-but
                                                                                                         (-6
                                                                                                          -12
                                                                                                          1))
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "well_formed_unif_prb")
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "well_formed_unif_prb")
                                                                                                            (("1"
                                                                                                              (skeep)
                                                                                                              (("1"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (use
                                                                                                         "inst_step_well_formed")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replace
                                                                                               -12
                                                                                               -7)
                                                                                              (("2"
                                                                                                (use
                                                                                                 "solve_ac_well_formed")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (hide-all-but
                                                                                                     (-5
                                                                                                      -12
                                                                                                      -13
                                                                                                      1))
                                                                                                    (("2"
                                                                                                      (reveal
                                                                                                       -16
                                                                                                       -17)
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         "well_formed_unif_prb")
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -4
                                                                                                           -5)
                                                                                                          (("2"
                                                                                                            (prop)
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("8"
                                                                                          (rewrite
                                                                                           "well_formed_append")
                                                                                          (("8"
                                                                                            (hide
                                                                                             2
                                                                                             3
                                                                                             -2
                                                                                             -3
                                                                                             -14)
                                                                                            (("8"
                                                                                              (case
                                                                                               "well_formed?(PC)")
                                                                                              (("1"
                                                                                                (use
                                                                                                 "inst_step_well_formed")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replace
                                                                                                 -12
                                                                                                 -8)
                                                                                                (("2"
                                                                                                  (use
                                                                                                   "solve_ac_well_formed")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (hide-all-but
                                                                                                       (-5
                                                                                                        1))
                                                                                                      (("2"
                                                                                                        (reveal
                                                                                                         -18
                                                                                                         -19)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "well_formed_unif_prb")
                                                                                                          (("2"
                                                                                                            (prop)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -3
                                                                                                               "s")
                                                                                                              (("1"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (inst
                                                                                                               -3
                                                                                                               "t")
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("9"
                                                                                          (hide
                                                                                           -7
                                                                                           -8
                                                                                           -2
                                                                                           -3)
                                                                                          (("9"
                                                                                            (rewrite
                                                                                             "match_prb_append")
                                                                                            (("9"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (use
                                                                                                 "inst_step_match")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -11
                                                                                                       -6)
                                                                                                      (("1"
                                                                                                        (use
                                                                                                         "solve_ac_match_condition")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             2
                                                                                                             3
                                                                                                             4)
                                                                                                            (("1"
                                                                                                              (prop)
                                                                                                              (("1"
                                                                                                                (hide-all-but
                                                                                                                 (-5
                                                                                                                  -12
                                                                                                                  1))
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (reveal
                                                                                                                     -20)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "subset?")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "match_problem?"
                                                                                                                         -2)
                                                                                                                        (("1"
                                                                                                                          (skolem
                                                                                                                           1
                                                                                                                           "X")
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -2
                                                                                                                             "X")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "subset?"
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (skeep)
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     "mem_lst2set"
                                                                                                                     1
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "finset2list_mem")
                                                                                                                      (("2"
                                                                                                                        (hide-all-but
                                                                                                                         (-1
                                                                                                                          -12
                                                                                                                          -13
                                                                                                                          -3
                                                                                                                          1))
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "subset?"
                                                                                                                           -2)
                                                                                                                          (("2"
                                                                                                                            (inst?)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (reveal
                                                                                                                                 -18
                                                                                                                                 -19)
                                                                                                                                (("2"
                                                                                                                                  (hide
                                                                                                                                   -4
                                                                                                                                   -5)
                                                                                                                                  (("2"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (use
                                                                                                 "match_prb_apply_sub")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (prop)
                                                                                                      (("1"
                                                                                                        (hide-all-but
                                                                                                         (-5
                                                                                                          -10
                                                                                                          1))
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "match_problem?")
                                                                                                          (("1"
                                                                                                            (skeep)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -2
                                                                                                               "X")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (lemma
                                                                                                         "inst_step_match_img2")
                                                                                                        (("2"
                                                                                                          (inst?)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (use
                                                                                                                 "solve_ac_match_condition")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (prop)
                                                                                                                    (("1"
                                                                                                                      (hide-all-but
                                                                                                                       (-5
                                                                                                                        -12
                                                                                                                        1))
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         -2)
                                                                                                                        (("1"
                                                                                                                          (reveal
                                                                                                                           -21)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "match_problem?")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "subset?")
                                                                                                                              (("1"
                                                                                                                                (skeep)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -3
                                                                                                                                   "x")
                                                                                                                                  (("1"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (replace
                                                                                                                       -11
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "subset?"
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (skeep)
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "mem_lst2set"
                                                                                                                             1
                                                                                                                             :dir
                                                                                                                             rl)
                                                                                                                            (("2"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (rewrite
                                                                                                                                 "finset2list_mem")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "subset?"
                                                                                                                                   -3)
                                                                                                                                  (("2"
                                                                                                                                    (inst?)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (hide-all-but
                                                                                                                                         (-1
                                                                                                                                          -11
                                                                                                                                          -12
                                                                                                                                          4))
                                                                                                                                        (("2"
                                                                                                                                          (reveal
                                                                                                                                           -19
                                                                                                                                           -20)
                                                                                                                                          (("2"
                                                                                                                                            (hide
                                                                                                                                             -4
                                                                                                                                             -5)
                                                                                                                                            (("2"
                                                                                                                                              (grind)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member_nth_lst formula-decl nil list_aux_equational_reasoning nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (input_apply_ac_mem formula-decl nil nominal_AC_ac_step nil)
    (nice_input type-eq-decl nil nominal_AC_ac_step nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (match_problem? const-decl "bool" nominal_AC_unification nil)
    (finset2list_mem formula-decl nil list_aux_equational_reasoning nil)
    (mem_lst2set formula-decl nil list_aux_equational_reasoning nil)
    (solve_ac_match_condition formula-decl nil aux_nominal_AC_unification nil)
    (inst_step_match formula-decl nil nominal_AC_inst_step nil)
    (inst_step_match_img2 formula-decl nil nominal_AC_inst_step nil)
    (match_prb_apply_sub formula-decl nil nominal_AC_unification nil)
    (match_prb_append formula-decl nil nominal_AC_unification nil)
    (well_formed_append formula-decl nil nominal_AC_substitution nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (finset2list def-decl "list[T]" list_aux_equational_reasoning nil)
    (solve_ac_well_formed formula-decl nil aux_nominal_AC_unification nil)
    (well_formed_unif_prb_append formula-decl nil nominal_AC_unification nil)
    (well_formed_apply_sub formula-decl nil nominal_AC_unification nil)
    (well_formed_unif_prb formula-decl nil nominal_AC_unification nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (inst_step_well_formed formula-decl nil nominal_AC_inst_step nil)
    (inst_step_well_formed2 formula-decl nil nominal_AC_inst_step nil)
    (inst_step_vars_context formula-decl nil nominal_AC_inst_step nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (contained_append formula-decl nil nominal_AC_substitution nil)
    (solve_ac_sec_proj_vars2 formula-decl nil aux_nominal_AC_unification nil)
    (contained_supset formula-decl nil nominal_AC_substitution nil)
    (solve_ac_first_proj_sec_proj_vars2 formula-decl nil
     aux_nominal_AC_unification nil)
    (inst_step_cont formula-decl nil nominal_AC_inst_step nil)
    (dom_append formula-decl nil nominal_AC_substitution nil)
    (inst_step_vars_unif formula-decl nil nominal_AC_inst_step nil)
    (apply_sub_elim_var2 formula-decl nil nominal_AC_unification nil)
    (vars_unif_prb_append formula-decl nil nominal_AC_unification nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (ac_prb? const-decl "bool" nominal_AC_unification nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (apply_sub_vars formula-decl nil nominal_AC_unification nil)
    (inst_step_vars_unif2 formula-decl nil nominal_AC_inst_step nil)
    (union const-decl "set" sets nil)
    (inst_step_idempotent3 formula-decl nil nominal_AC_inst_step nil)
    (inst_step_vars_img formula-decl nil nominal_AC_inst_step nil)
    (solve_ac_vars2 formula-decl nil aux_nominal_AC_unification nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (intersection const-decl "set" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (member def-decl "bool" list_props nil)
    (idempotent_append formula-decl nil nominal_AC_substitution nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (inst_step_mem formula-decl nil nominal_AC_inst_step nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (input_apply_ac def-decl "list[pre_nice_input]" nominal_AC_ac_step nil)
    (pre_nice_input type-eq-decl nil nominal_AC_ac_step nil)
    (nice_input? const-decl "bool" nominal_AC_ac_step nil)
    (every_nth formula-decl nil list_props nil))
   nil
   (apply_ac subtype
    "nominal_AC_ac_step.input_apply_ac(nominal_AC_ac_step.ac_results_subs, nominal_AC_ac_step.G, nominal_AC_ac_step.P1, nominal_AC_ac_step.sigma, nominal_AC_ac_step.new_V, nominal_AC_ac_step.PV)"
    "list[nice_input]")))
 (apply_ac_is_nice_input 0
  (apply_ac_is_nice_input-1 nil 3897218209
   ("" (skolem 1 ("G1" "P1" "PV1" "V1" "inp" "sig1"))
    (("" (flatten)
      (("" (expand "apply_ac" -1)
        (("" (name-replace "G" "inp`1")
          (("" (name-replace "P" "inp`2")
            (("" (name-replace "sig" "inp`3")
              (("" (name-replace "V" "inp`4")
                (("" (name-replace "PV" "inp`5")
                  (("" (lift-if)
                    (("" (split -1)
                      (("1" (flatten)
                        (("1" (expand "member" -2)
                          (("1" (propax) nil nil)) nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split -2)
                          (("1" (flatten)
                            (("1" (lemma "apply_ac_TCC1")
                              (("1"
                                (inst -1 "inp" "G" "P" "sig" "V" "PV")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand ("G" "P" "sig" "V" "PV"))
                                    (("1"
                                      (inst
                                       -1
                                       "car(inp`2)`1"
                                       "car(inp`2)`2")
                                      (("1"
                                        (inst -1 "cdr(inp`2)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "member" -3)
                                            (("1"
                                              (expand "member" -3)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (reveal -1 -2 -3 -4 -5)
                              (("2"
                                (name-replace "t" "car(P)`1")
                                (("2"
                                  (name-replace "s" "car(P)`2")
                                  (("2"
                                    (name-replace
                                     "lst_V"
                                     "finset2list[variable](V)")
                                    (("2"
                                      (name-replace
                                       "ac_results"
                                       "first_proj(solve_ac(G, s, t, lst_V, ac_sym(t), PV))")
                                      (("2"
                                        (name-replace
                                         "new_V"
                                         "vars(sec_proj(solve_ac(G, s, t, lst_V, ac_sym(t), PV)))")
                                        (("2"
                                          (name-replace
                                           "ac_results_subs"
                                           "inst_step(PV, G, ac_results)")
                                          (("2"
                                            (reveal -1 -2 -3 -4 -5 -6)
                                            (("2"
                                              (lemma "apply_ac_TCC4")
                                              (("2"
                                                (inst
                                                 -1
                                                 "inp"
                                                 "G"
                                                 "P"
                                                 "sig"
                                                 "V"
                                                 "PV")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst -1 "t" "s")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "cdr(P)")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "lst_V"
                                                           "ac_results"
                                                           "new_V"
                                                           "ac_results_subs")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (rewrite
                                                               "every_nth2")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "(G1, P1, sig1, V1, PV1)")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nice_input? const-decl "bool" nominal_AC_ac_step nil)
    (nice_input type-eq-decl nil nominal_AC_ac_step nil)
    (member def-decl "bool" list_props nil)
    (apply_ac_TCC1 subtype-tcc nil nominal_AC_ac_step nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (solve_ac const-decl "list[ac_sol]" aux_nominal_AC_unification nil)
    (ac_sol type-eq-decl nil aux_nominal_AC_unification nil)
    (string type-eq-decl nil strings nil)
    (first_proj def-decl "list[T1]" list_aux_equational_reasoning2 nil)
    (nominal_AC_inst_step def-decl "list[[fresh_context, unif_prb, sub]]"
     nominal_AC_inst_step nil)
    (apply_ac_TCC4 subtype-tcc nil nominal_AC_ac_step nil)
    (every_nth2 formula-decl nil list_aux_equational_reasoning nil)
    (input_apply_ac def-decl "list[pre_nice_input]" nominal_AC_ac_step nil)
    (pre_nice_input type-eq-decl nil nominal_AC_ac_step nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (finset2list def-decl "list[T]" list_aux_equational_reasoning nil)
    (apply_ac const-decl "list[nice_input]" nominal_AC_ac_step nil))
   shostak))
 (apply_ac_mem5 0
  (apply_ac_mem5-1 nil 3887291288
   ("" (skeep)
    (("" (expand "apply_ac" -1)
      (("" (lift-if)
        (("" (name-replace "G" "input`1")
          (("" (name-replace "P" "input`2")
            (("" (name-replace "sig" "input`3")
              (("" (name-replace "V" "input`4")
                (("" (name-replace "PV" "input`5")
                  (("" (split -1)
                    (("1" (flatten)
                      (("1" (expand "member" -2)
                        (("1" (propax) nil nil)) nil))
                      nil)
                     ("2" (flatten)
                      (("2" (name-replace "P1" "cdr(P)")
                        (("2" (name-replace "t" "car(P)`1")
                          (("2" (name-replace "s" "car(P)`2")
                            (("2" (split -2)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "member" -2)
                                  (("1"
                                    (expand "member" -2)
                                    (("1"
                                      (decompose-equality -2)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (name-replace
                                   "lst_V"
                                   "finset2list[variable](V)")
                                  (("2"
                                    (name-replace
                                     "ac_results"
                                     "first_proj(solve_ac(G, s, t, lst_V, ac_sym(t), PV))")
                                    (("2"
                                      (name-replace
                                       "new_V"
                                       "vars(sec_proj(solve_ac(G, s, t, lst_V, ac_sym(t), PV)))")
                                      (("2"
                                        (name-replace
                                         "ac_results_subs"
                                         "inst_step(PV, G, ac_results)")
                                        (("2"
                                          (rewrite
                                           "input_apply_ac_mem"
                                           -1)
                                          (("2" (skeep) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_ac const-decl "list[nice_input]" nominal_AC_ac_step nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nice_input? const-decl "bool" nominal_AC_ac_step nil)
    (nice_input type-eq-decl nil nominal_AC_ac_step nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (finset2list def-decl "list[T]" list_aux_equational_reasoning nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (pre_nice_input type-eq-decl nil nominal_AC_ac_step nil)
    (input_apply_ac_mem formula-decl nil nominal_AC_ac_step nil)
    (nominal_AC_inst_step def-decl "list[[fresh_context, unif_prb, sub]]"
     nominal_AC_inst_step nil)
    (first_proj def-decl "list[T1]" list_aux_equational_reasoning2 nil)
    (string type-eq-decl nil strings nil)
    (ac_sol type-eq-decl nil aux_nominal_AC_unification nil)
    (solve_ac const-decl "list[ac_sol]" aux_nominal_AC_unification nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (member def-decl "bool" list_props nil))
   shostak))
 (apply_ac_vars 0
  (apply_ac_vars-2 nil 3886229630
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (expand "apply_ac" -1)
          (("" (name-replace "G" "input`1")
            (("" (name-replace "P" "input`2")
              (("" (name-replace "sig" "input`3")
                (("" (name-replace "V" "input`4")
                  (("" (name-replace "PV" "input`5")
                    (("" (lift-if)
                      (("" (split)
                        (("1" (flatten)
                          (("1" (expand "member" -2)
                            (("1" (propax) nil nil)) nil))
                          nil)
                         ("2" (flatten)
                          (("2" (name-replace "P1" "cdr(P)")
                            (("2" (name-replace "t" "car(P)`1")
                              (("2"
                                (name-replace "s" "car(P)`2")
                                (("2"
                                  (name-replace
                                   "lst_V"
                                   "finset2list[variable](V)")
                                  (("2"
                                    (name-replace
                                     "ac_results"
                                     "first_proj(solve_ac(G, s, t, lst_V, ac_sym(t), PV))")
                                    (("1"
                                      (name-replace
                                       "new_V"
                                       "vars(sec_proj(solve_ac(G, s, t, lst_V, ac_sym(t), PV)))")
                                      (("1"
                                        (name-replace
                                         "ac_results_subs"
                                         "inst_step(PV, G, ac_results)")
                                        (("1"
                                          (split -2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "member" -2)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (replace -1 2)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide-all-but 2)
                                                      (("1"
                                                        (expand "P1")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "member" -1)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (rewrite
                                               "input_apply_ac_mem")
                                              (("2"
                                                (skolem
                                                 -1
                                                 ("G1" "PI" "sig1"))
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (replace -3 3)
                                                    (("2"
                                                      (hide
                                                       -2
                                                       -3
                                                       -4
                                                       -5
                                                       -6)
                                                      (("2"
                                                        (expand
                                                         "ac_results_subs"
                                                         -1)
                                                        (("2"
                                                          (use
                                                           "inst_step_mem")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (skolem
                                                               -1
                                                               "Pc")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (hide
                                                                   -5)
                                                                  (("2"
                                                                    (expand
                                                                     "ac_results"
                                                                     -1)
                                                                    (("2"
                                                                      (expand
                                                                       "lst_V"
                                                                       -1)
                                                                      (("2"
                                                                        (expand
                                                                         "subset?"
                                                                         4)
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (rewrite
                                                                             "vars_unif_prb_append")
                                                                            (("2"
                                                                              (case
                                                                               "member(x, vars(PI)) OR member(x, vars(img(sig1))) OR member(x, vars(P1))")
                                                                              (("1"
                                                                                (hide
                                                                                 -7)
                                                                                (("1"
                                                                                  (case
                                                                                   "member(x, vars(P1))")
                                                                                  (("1"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        3
                                                                                        4))
                                                                                      (("1"
                                                                                        (expand
                                                                                         "P1")
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (hide
                                                                                       1)
                                                                                      (("2"
                                                                                        (case
                                                                                         "member(x, vars(Pc))")
                                                                                        (("1"
                                                                                          (hide
                                                                                           -2)
                                                                                          (("1"
                                                                                            (case
                                                                                             "member(x, vars(lhs(Pc)))")
                                                                                            (("1"
                                                                                              (use
                                                                                               "solve_ac_vars_lhs")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "subset?(vars(t, s), vars(P))")
                                                                                                  (("1"
                                                                                                    (hide-all-but
                                                                                                     (-1
                                                                                                      -2
                                                                                                      -3
                                                                                                      4))
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "subset?")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (inst?)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     (1
                                                                                                      4))
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       ("t"
                                                                                                        "s"))
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (case
                                                                                               "member(x, vars(rhs(Pc)))")
                                                                                              (("1"
                                                                                                (hide
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (use
                                                                                                   "solve_ac_rhs_not_protected")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (prop)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "disjoint?")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "empty?")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "x")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               ("member"
                                                                                                                "intersection")
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (use
                                                                                                                 "inst_step_match_dom")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (prop)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -7
                                                                                                                         :dir
                                                                                                                         rl)
                                                                                                                        (("1"
                                                                                                                          (reveal
                                                                                                                           -5)
                                                                                                                          (("1"
                                                                                                                            (prop)
                                                                                                                            (("1"
                                                                                                                              (rewrite
                                                                                                                               "vars_unif_prb")
                                                                                                                              (("1"
                                                                                                                                (skolem
                                                                                                                                 -1
                                                                                                                                 "t1")
                                                                                                                                (("1"
                                                                                                                                  (prop)
                                                                                                                                  (("1"
                                                                                                                                    (use
                                                                                                                                     "inst_step2_mem")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -9
                                                                                                                                         :dir
                                                                                                                                         rl)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -10
                                                                                                                                           :dir
                                                                                                                                           rl)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (skolem
                                                                                                                                               -1
                                                                                                                                               "t1p")
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -2)
                                                                                                                                                  (("1"
                                                                                                                                                    (use
                                                                                                                                                     "apply_sub_elim_var_t")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (use
                                                                                                                                                         "inst_step_idempotent3")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -13
                                                                                                                                                             :dir
                                                                                                                                                             rl)
                                                                                                                                                            (("1"
                                                                                                                                                              (use
                                                                                                                                                               "idempotent_disjoint_dom_img")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (hide-all-but
                                                                                                                                                                   (-1
                                                                                                                                                                    -3
                                                                                                                                                                    -8))
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "disjoint?")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (grind)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (use
                                                                                                                               "inst_step_idempotent3")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -9
                                                                                                                                   :dir
                                                                                                                                   rl)
                                                                                                                                  (("2"
                                                                                                                                    (use
                                                                                                                                     "idempotent_disjoint_dom_img")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (hide-all-but
                                                                                                                                         (-1
                                                                                                                                          -3
                                                                                                                                          -4))
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "disjoint?")
                                                                                                                                          (("2"
                                                                                                                                            (grind)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (use
                                                                                                                         "solve_ac_match_condition")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (prop)
                                                                                                                            (("1"
                                                                                                                              (hide-all-but
                                                                                                                               (1
                                                                                                                                6))
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "PV"
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "s"
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "P")
                                                                                                                                    (("1"
                                                                                                                                      (typepred
                                                                                                                                       "input")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "nice_input?")
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "match_problem?"
                                                                                                                                             -9)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "subset?"
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (skolem
                                                                                                                                                 1
                                                                                                                                                 "X")
                                                                                                                                                (("1"
                                                                                                                                                  (inst?)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (rewrite
                                                                                                                                                           "vars_args"
                                                                                                                                                           1)
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             1
                                                                                                                                                             "car(input`2)`2")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (grind)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (hide-all-but
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "subset?"
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (skolem
                                                                                                                                   1
                                                                                                                                   "y")
                                                                                                                                  (("2"
                                                                                                                                    (prop)
                                                                                                                                    (("2"
                                                                                                                                      (rewrite
                                                                                                                                       "mem_list2set"
                                                                                                                                       :dir
                                                                                                                                       rl)
                                                                                                                                      (("2"
                                                                                                                                        (rewrite
                                                                                                                                         "finset2list_mem")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "V"
                                                                                                                                           1)
                                                                                                                                          (("2"
                                                                                                                                            (case
                                                                                                                                             "subset?(vars(t, s), vars(P))")
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "subset?")
                                                                                                                                              (("1"
                                                                                                                                                (inst?)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "P")
                                                                                                                                                    (("1"
                                                                                                                                                      (typepred
                                                                                                                                                       "input")
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "nice_input?")
                                                                                                                                                        (("1"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "subset?"
                                                                                                                                                             -4)
                                                                                                                                                            (("1"
                                                                                                                                                              (inst?)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (expand
                                                                                                                                               ("t"
                                                                                                                                                "s"))
                                                                                                                                              (("2"
                                                                                                                                                (grind)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           ("PV"
                                                                                                            "V"))
                                                                                                          (("2"
                                                                                                            (typepred
                                                                                                             "input")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "nice_input?")
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (rewrite
                                                                                                 "vars_unif_prb"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (skolem
                                                                                                   -1
                                                                                                   "t1")
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       "member_lhs_rhs")
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         "vars_args"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "vars_args"
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (prop)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               2
                                                                                                               "t1")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (inst
                                                                                                               1
                                                                                                               "t1")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (use
                                                                                             "inst_step_vars_unif2")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -5
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    -2
                                                                                                    1))
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "subset?")
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (use
                                                                                             "inst_step_vars_img")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -6
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("2"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    -2
                                                                                                    1))
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (prop)
                                                                                  (("2"
                                                                                    (use
                                                                                     "apply_sub_vars")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "subset?")
                                                                                      (("2"
                                                                                        (inst?)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             ("member"
                                                                                              "union")
                                                                                             -1)
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-1 1))
                                        (("2"
                                          (expand "t" 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-1 1 2))
                                      (("2"
                                        (expand "t")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (apply_ac const-decl "list[nice_input]" nominal_AC_ac_step nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (finset2list def-decl "list[T]" list_aux_equational_reasoning nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pre_nice_input type-eq-decl nil nominal_AC_ac_step nil)
    (input_apply_ac_mem formula-decl nil nominal_AC_ac_step nil)
    (inst_step_mem formula-decl nil nominal_AC_inst_step nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (inst_step_vars_unif2 formula-decl nil nominal_AC_inst_step nil)
    (inst_step_vars_img formula-decl nil nominal_AC_inst_step nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (solve_ac_rhs_not_protected formula-decl nil aux_nominal_AC_unification nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (vars_unif_prb formula-decl nil nominal_AC_unification nil)
    (idempotent_disjoint_dom_img formula-decl nil nominal_AC_substitution nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (inst_step_idempotent3 formula-decl nil nominal_AC_inst_step nil)
    (apply_sub_elim_var_t formula-decl nil nominal_AC_substitution nil)
    (inst_step2_mem formula-decl nil nominal_AC_inst_step nil)
    (mem_list2set formula-decl nil list_aux_equational_reasoning nil)
    (finset2list_mem formula-decl nil list_aux_equational_reasoning nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (subterms const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_unification nil)
    (contained? const-decl "bool" nominal_AC_substitution nil)
    (idempotent? const-decl "bool" nominal_AC_substitution nil)
    (match_problem? const-decl "bool" nominal_AC_unification nil)
    (solve_ac_match_condition formula-decl nil aux_nominal_AC_unification nil)
    (inst_step_match_dom formula-decl nil nominal_AC_inst_step nil)
    (disjoint? const-decl "bool" sets nil)
    (member_lhs_rhs formula-decl nil nominal_AC_unification nil)
    (solve_ac_vars_lhs formula-decl nil aux_nominal_AC_unification nil)
    (lhs const-decl "args" nominal_AC_unification nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (apply_sub_vars formula-decl nil nominal_AC_unification nil)
    (vars_unif_prb_append formula-decl nil nominal_AC_unification nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (nominal_AC_inst_step def-decl "list[[fresh_context, unif_prb, sub]]"
     nominal_AC_inst_step nil)
    (ac_prb? const-decl "bool" nominal_AC_unification nil)
    (first_proj def-decl "list[T1]" list_aux_equational_reasoning2 nil)
    (string type-eq-decl nil strings nil)
    (ac_sol type-eq-decl nil aux_nominal_AC_unification nil)
    (solve_ac const-decl "list[ac_sol]" aux_nominal_AC_unification nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (member def-decl "bool" list_props nil)
    (nice_input type-eq-decl nil nominal_AC_ac_step nil)
    (nice_input? const-decl "bool" nominal_AC_ac_step nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (apply_ac_vars-1 nil 3884076182
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (expand "apply_ac" -1)
          (("" (name-replace "G" "input`1")
            (("" (name-replace "P" "input`2")
              (("" (name-replace "sig" "input`3")
                (("" (name-replace "V" "input`4")
                  (("" (name-replace "PV" "input`5")
                    (("" (lift-if)
                      (("" (split)
                        (("1" (flatten)
                          (("1" (expand "member" -2)
                            (("1" (propax) nil nil)) nil))
                          nil)
                         ("2" (flatten)
                          (("2" (name-replace "P_r" "choose_ac(P)`3")
                            (("2" (name-replace "up" "choose_ac(P)`2")
                              (("2"
                                (name-replace "t" "up`1")
                                (("2"
                                  (name-replace "s" "up`2")
                                  (("2"
                                    (name-replace
                                     "lst_V"
                                     "finset2list[variable](V)")
                                    (("2"
                                      (name-replace
                                       "ac_results"
                                       "first_proj(solve_ac(G, s, t, lst_V, ac_sym(t), PV))")
                                      (("1"
                                        (name-replace
                                         "new_V"
                                         "vars(sec_proj(solve_ac(G, s, t, lst_V, ac_sym(t), PV)))")
                                        (("1"
                                          (name-replace
                                           "ac_results_subs"
                                           "inst_step(PV, G, ac_results)")
                                          (("1"
                                            (split -2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "member" -2)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (replace -1 2)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide-all-but
                                                         2)
                                                        (("1"
                                                          (expand
                                                           "P_r")
                                                          (("1"
                                                            (use
                                                             "choose_ac_vars")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "member"
                                                     -1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (rewrite
                                                 "input_apply_ac_mem")
                                                (("2"
                                                  (skolem
                                                   -1
                                                   ("G1" "PI" "sig1"))
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (replace -3 3)
                                                      (("2"
                                                        (hide
                                                         -2
                                                         -3
                                                         -4
                                                         -5
                                                         -6)
                                                        (("2"
                                                          (expand
                                                           "ac_results_subs"
                                                           -1)
                                                          (("2"
                                                            (use
                                                             "inst_step_mem")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (skolem
                                                                 -1
                                                                 "Pc")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide
                                                                     -5)
                                                                    (("2"
                                                                      (expand
                                                                       "ac_results"
                                                                       -1)
                                                                      (("2"
                                                                        (expand
                                                                         "lst_V"
                                                                         -1)
                                                                        (("2"
                                                                          (expand
                                                                           "subset?"
                                                                           4)
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (rewrite
                                                                               "vars_unif_prb_append")
                                                                              (("2"
                                                                                (case
                                                                                 "member(x, vars(PI)) OR member(x, vars(img(sig1))) OR member(x, vars(P_r))")
                                                                                (("1"
                                                                                  (hide
                                                                                   -7)
                                                                                  (("1"
                                                                                    (case
                                                                                     "member(x, vars(P_r))")
                                                                                    (("1"
                                                                                      (hide
                                                                                       -2)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          4))
                                                                                        (("1"
                                                                                          (expand
                                                                                           "P_r")
                                                                                          (("1"
                                                                                            (use
                                                                                             "choose_ac_vars")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "subset?")
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (hide
                                                                                         1)
                                                                                        (("2"
                                                                                          (case
                                                                                           "member(x, vars(Pc))")
                                                                                          (("1"
                                                                                            (hide
                                                                                             -2)
                                                                                            (("1"
                                                                                              (case
                                                                                               "member(x, vars(lhs(Pc)))")
                                                                                              (("1"
                                                                                                (use
                                                                                                 "solve_ac_vars_lhs")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "subset?(vars(t, s), vars(P))")
                                                                                                    (("1"
                                                                                                      (hide-all-but
                                                                                                       (-1
                                                                                                        -2
                                                                                                        -3
                                                                                                        4))
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "subset?")
                                                                                                        (("1"
                                                                                                          (inst?)
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         ("t"
                                                                                                          "s"))
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "up")
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "choose_ac_vars2")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (case
                                                                                                 "member(x, vars(rhs(Pc)))")
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (use
                                                                                                     "solve_ac_rhs_not_protected")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "disjoint?")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "empty?")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "x")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 ("member"
                                                                                                                  "intersection")
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (use
                                                                                                                   "inst_step_match_dom")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (prop)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -7
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (reveal
                                                                                                                             -5)
                                                                                                                            (("1"
                                                                                                                              (prop)
                                                                                                                              (("1"
                                                                                                                                (rewrite
                                                                                                                                 "vars_unif_prb")
                                                                                                                                (("1"
                                                                                                                                  (skolem
                                                                                                                                   -1
                                                                                                                                   "t1")
                                                                                                                                  (("1"
                                                                                                                                    (prop)
                                                                                                                                    (("1"
                                                                                                                                      (use
                                                                                                                                       "inst_step2_mem")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -9
                                                                                                                                           :dir
                                                                                                                                           rl)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -10
                                                                                                                                             :dir
                                                                                                                                             rl)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (skolem
                                                                                                                                                 -1
                                                                                                                                                 "t1p")
                                                                                                                                                (("1"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -2)
                                                                                                                                                    (("1"
                                                                                                                                                      (use
                                                                                                                                                       "apply_sub_elim_var_t")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (use
                                                                                                                                                           "inst_step_idempotent3")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -13
                                                                                                                                                               :dir
                                                                                                                                                               rl)
                                                                                                                                                              (("1"
                                                                                                                                                                (use
                                                                                                                                                                 "idempotent_disjoint_dom_img")
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (hide-all-but
                                                                                                                                                                     (-1
                                                                                                                                                                      -3
                                                                                                                                                                      -8))
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "disjoint?")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (use
                                                                                                                                 "inst_step_idempotent3")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (replace
                                                                                                                                     -9
                                                                                                                                     :dir
                                                                                                                                     rl)
                                                                                                                                    (("2"
                                                                                                                                      (use
                                                                                                                                       "idempotent_disjoint_dom_img")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (hide-all-but
                                                                                                                                           (-1
                                                                                                                                            -3
                                                                                                                                            -4))
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "disjoint?")
                                                                                                                                            (("2"
                                                                                                                                              (grind)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (use
                                                                                                                           "solve_ac_match_condition")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (prop)
                                                                                                                              (("1"
                                                                                                                                (hide-all-but
                                                                                                                                 (1
                                                                                                                                  6))
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "PV"
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "s"
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "up"
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "P")
                                                                                                                                        (("1"
                                                                                                                                          (typepred
                                                                                                                                           "input")
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "nice_input?")
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "match_problem?"
                                                                                                                                                 -9)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "subset?"
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (skolem
                                                                                                                                                     1
                                                                                                                                                     "X")
                                                                                                                                                    (("1"
                                                                                                                                                      (inst?)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (rewrite
                                                                                                                                                               "vars_args"
                                                                                                                                                               1)
                                                                                                                                                              (("1"
                                                                                                                                                                (inst
                                                                                                                                                                 1
                                                                                                                                                                 "choose_ac(input`2)`2`2")
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (reveal
                                                                                                                                                                     -8)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "P"
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (use
                                                                                                                                                                         "choose_ac_rhs")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide-all-but
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "subset?"
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (skolem
                                                                                                                                     1
                                                                                                                                     "y")
                                                                                                                                    (("2"
                                                                                                                                      (prop)
                                                                                                                                      (("2"
                                                                                                                                        (rewrite
                                                                                                                                         "mem_list2set"
                                                                                                                                         :dir
                                                                                                                                         rl)
                                                                                                                                        (("2"
                                                                                                                                          (rewrite
                                                                                                                                           "finset2list_mem")
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "V"
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (case
                                                                                                                                               "subset?(vars(t, s), vars(P))")
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "subset?")
                                                                                                                                                (("1"
                                                                                                                                                  (inst?)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "P")
                                                                                                                                                      (("1"
                                                                                                                                                        (typepred
                                                                                                                                                         "input")
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "nice_input?")
                                                                                                                                                          (("1"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "subset?"
                                                                                                                                                               -4)
                                                                                                                                                              (("1"
                                                                                                                                                                (inst?)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (expand
                                                                                                                                                 ("t"
                                                                                                                                                  "s")
                                                                                                                                                 1)
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "up")
                                                                                                                                                  (("2"
                                                                                                                                                    (use
                                                                                                                                                     "choose_ac_vars2")
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             ("PV"
                                                                                                              "V"))
                                                                                                            (("2"
                                                                                                              (typepred
                                                                                                               "input")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "nice_input?")
                                                                                                                (("2"
                                                                                                                  (flatten)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (rewrite
                                                                                                   "vars_unif_prb"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (skolem
                                                                                                     -1
                                                                                                     "t1")
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         "member_lhs_rhs")
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "vars_args"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             "vars_args"
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (prop)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 2
                                                                                                                 "t1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (inst
                                                                                                                 1
                                                                                                                 "t1")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (use
                                                                                               "inst_step_vars_unif2")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -5
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (hide-all-but
                                                                                                     (-1
                                                                                                      -2
                                                                                                      1))
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "subset?")
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (use
                                                                                               "inst_step_vars_img")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -6
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("2"
                                                                                                    (hide-all-but
                                                                                                     (-1
                                                                                                      -2
                                                                                                      1))
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (prop)
                                                                                    (("2"
                                                                                      (use
                                                                                       "apply_sub_vars")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "subset?")
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               ("member"
                                                                                                "union")
                                                                                               -1)
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-1 1))
                                          (("2"
                                            (expand "t" 1)
                                            (("2"
                                              (expand "up" 1)
                                              (("2"
                                                (use "exists_ac_is_ac")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-1 1))
                                        (("2"
                                          (expand "t")
                                          (("2"
                                            (expand "up" 1)
                                            (("2"
                                              (use "exists_ac_is_ac")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (perm type-eq-decl nil atoms nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (finset2list def-decl "list[T]" list_aux_equational_reasoning nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (inst_step_mem formula-decl nil nominal_AC_inst_step nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (inst_step_vars_unif2 formula-decl nil nominal_AC_inst_step nil)
    (inst_step_vars_img formula-decl nil nominal_AC_inst_step nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (solve_ac_rhs_not_protected formula-decl nil aux_nominal_AC_unification nil)
    (vars_unif_prb formula-decl nil nominal_AC_unification nil)
    (idempotent_disjoint_dom_img formula-decl nil nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (inst_step_idempotent3 formula-decl nil nominal_AC_inst_step nil)
    (apply_sub_elim_var_t formula-decl nil nominal_AC_substitution nil)
    (inst_step2_mem formula-decl nil nominal_AC_inst_step nil)
    (mem_list2set formula-decl nil list_aux_equational_reasoning nil)
    (finset2list_mem formula-decl nil list_aux_equational_reasoning nil)
    (match_problem? const-decl "bool" nominal_AC_unification nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (solve_ac_match_condition formula-decl nil aux_nominal_AC_unification nil)
    (inst_step_match_dom formula-decl nil nominal_AC_inst_step nil)
    (member_lhs_rhs formula-decl nil nominal_AC_unification nil)
    (solve_ac_vars_lhs formula-decl nil aux_nominal_AC_unification nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (lhs const-decl "args" nominal_AC_unification nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (apply_sub_vars formula-decl nil nominal_AC_unification nil)
    (vars_unif_prb_append formula-decl nil nominal_AC_unification nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (nominal_AC_inst_step def-decl "list[[fresh_context, unif_prb, sub]]"
     nominal_AC_inst_step nil)
    (first_proj def-decl "list[T1]" list_aux_equational_reasoning2 nil)
    (ac_sol type-eq-decl nil aux_nominal_AC_unification nil)
    (solve_ac const-decl "list[ac_sol]" aux_nominal_AC_unification nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil))
   shostak))
 (apply_ac_vars2 0
  (apply_ac_vars2-1 nil 3888733096
   ("" (skolem 1 ("inp" "inp1"))
    (("" (assert)
      (("" (prop)
        (("" (expand "apply_ac" -1)
          (("" (lift-if)
            (("" (name-replace "G" "inp`1")
              (("" (name-replace "P" "inp`2")
                (("" (name-replace "sig" "inp`3")
                  (("" (name-replace "V" "inp`4")
                    (("" (name-replace "PV" "inp`5")
                      (("" (split -1)
                        (("1" (flatten)
                          (("1" (expand "member" -2)
                            (("1" (propax) nil nil)) nil))
                          nil)
                         ("2" (flatten)
                          (("2" (name-replace "P1" "cdr(P)")
                            (("2" (name-replace "t" "car(P)`1")
                              (("2"
                                (name-replace "s" "car(P)`2")
                                (("2"
                                  (split -2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "member" -2)
                                      (("1"
                                        (expand "member" -2)
                                        (("1"
                                          (replace -2 2)
                                          (("1"
                                            (hide-all-but 2)
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (name-replace
                                       "lst_V"
                                       "finset2list[variable](V)")
                                      (("2"
                                        (name-replace
                                         "ac_results"
                                         "first_proj(solve_ac(G, s, t, lst_V, ac_sym(t), PV))")
                                        (("2"
                                          (name-replace
                                           "new_V"
                                           "vars(sec_proj(solve_ac(G, s, t, lst_V, ac_sym(t), PV)))")
                                          (("2"
                                            (name-replace
                                             "ac_results_subs"
                                             "inst_step(PV, G, ac_results)")
                                            (("2"
                                              (rewrite
                                               "input_apply_ac_mem"
                                               -1)
                                              (("2"
                                                (skolem
                                                 -1
                                                 ("G2" "P2" "sig2"))
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "ac_results_subs"
                                                     -1)
                                                    (("2"
                                                      (use
                                                       "inst_step_mem")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (skolem
                                                           -1
                                                           "PC")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "ac_results"
                                                               -1)
                                                              (("2"
                                                                (reveal
                                                                 -3)
                                                                (("2"
                                                                  (expand
                                                                   "lst_V"
                                                                   -2)
                                                                  (("2"
                                                                    (use
                                                                     "solve_ac_sec_proj_vars2")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "lst_V"
                                                                         -2)
                                                                        (("2"
                                                                          (replace
                                                                           -2)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (apply_ac const-decl "list[nice_input]" nominal_AC_ac_step nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nice_input? const-decl "bool" nominal_AC_ac_step nil)
    (nice_input type-eq-decl nil nominal_AC_ac_step nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (finset2list def-decl "list[T]" list_aux_equational_reasoning nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (pre_nice_input type-eq-decl nil nominal_AC_ac_step nil)
    (input_apply_ac_mem formula-decl nil nominal_AC_ac_step nil)
    (inst_step_mem formula-decl nil nominal_AC_inst_step nil)
    (solve_ac_sec_proj_vars2 formula-decl nil aux_nominal_AC_unification nil)
    (nominal_AC_inst_step def-decl "list[[fresh_context, unif_prb, sub]]"
     nominal_AC_inst_step nil)
    (first_proj def-decl "list[T1]" list_aux_equational_reasoning2 nil)
    (string type-eq-decl nil strings nil)
    (ac_sol type-eq-decl nil aux_nominal_AC_unification nil)
    (solve_ac const-decl "list[ac_sol]" aux_nominal_AC_unification nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (member def-decl "bool" list_props nil))
   shostak))
 (apply_ac_vars_ctx 0
  (apply_ac_vars_ctx-1 nil 3888666664
   ("" (skolem 1 ("inp" "inp1"))
    (("" (assert)
      (("" (flatten)
        (("" (name-replace "G" "inp`1")
          (("" (name-replace "P" "inp`2")
            (("" (name-replace "sig" "inp`3")
              (("" (name-replace "V" "inp`4")
                (("" (name-replace "PV" "inp`5")
                  (("" (expand "apply_ac" -4)
                    (("" (reveal -1 -2)
                      (("" (replace -1)
                        (("" (replace -2)
                          (("" (lift-if)
                            (("" (split -6)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "member" -2)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (name-replace "P1" "cdr(P)")
                                  (("2"
                                    (name-replace "t" "car(P)`1")
                                    (("2"
                                      (name-replace "s" "car(P)`2")
                                      (("2"
                                        (split -2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "member" -2)
                                            (("1"
                                              (expand "member" -2)
                                              (("1"
                                                (replace -8)
                                                (("1"
                                                  (replace -7)
                                                  (("1"
                                                    (replace -6)
                                                    (("1"
                                                      (expand
                                                       "subset?"
                                                       2)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (replace
                                                           -2
                                                           -9)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               ("member"
                                                                "union"))
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (replace -5)
                                            (("2"
                                              (replace -6)
                                              (("2"
                                                (replace -7)
                                                (("2"
                                                  (name-replace
                                                   "lst_V"
                                                   "finset2list[variable](V)")
                                                  (("2"
                                                    (name-replace
                                                     "ac_results"
                                                     "first_proj(solve_ac(G, s, t, lst_V, ac_sym(t), PV))")
                                                    (("2"
                                                      (name-replace
                                                       "new_V"
                                                       "vars(sec_proj(solve_ac(G, s, t, lst_V, ac_sym(t), PV)))")
                                                      (("2"
                                                        (name-replace
                                                         "ac_results_subs"
                                                         "inst_step(PV, G, ac_results)")
                                                        (("2"
                                                          (rewrite
                                                           "input_apply_ac_mem"
                                                           -1)
                                                          (("2"
                                                            (skolem
                                                             -1
                                                             ("G2"
                                                              "P2"
                                                              "sig2"))
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (replace
                                                                 -2)
                                                                (("2"
                                                                  (expand
                                                                   "ac_results_subs"
                                                                   -1)
                                                                  (("2"
                                                                    (use
                                                                     "inst_step_mem")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (skolem
                                                                         -1
                                                                         "PC")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (hide
                                                                             -6
                                                                             -7
                                                                             -8
                                                                             -9
                                                                             -10)
                                                                            (("2"
                                                                              (expand
                                                                               "ac_results"
                                                                               -1)
                                                                              (("2"
                                                                                (hide
                                                                                 1)
                                                                                (("2"
                                                                                  (use
                                                                                   "inst_step_vars_context")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -3)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "subset?"
                                                                                         3)
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "subset?"
                                                                                             -1)
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   ("member"
                                                                                                    "union")
                                                                                                   3)
                                                                                                  (("2"
                                                                                                    (prop)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       ("member"
                                                                                                        "union")
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (prop)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "solve_ac_match_condition")
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             -9
                                                                                                             -10
                                                                                                             -11
                                                                                                             -12
                                                                                                             -13)
                                                                                                            (("2"
                                                                                                              (inst?)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (split
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     "vars_unif_prb")
                                                                                                                    (("1"
                                                                                                                      (skolem
                                                                                                                       -2
                                                                                                                       "u")
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "member_lhs_rhs")
                                                                                                                          (("1"
                                                                                                                            (prop)
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               -8)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "solve_ac_vars_lhs")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "lst_V"
                                                                                                                                   -5)
                                                                                                                                  (("1"
                                                                                                                                    (inst?)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "subset?"
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (inst?)
                                                                                                                                          (("1"
                                                                                                                                            (prop)
                                                                                                                                            (("1"
                                                                                                                                              (hide-all-but
                                                                                                                                               (-1
                                                                                                                                                3))
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 ("t"
                                                                                                                                                  "s"))
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "vars"
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (grind)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (rewrite
                                                                                                                                               "vars_args")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 1
                                                                                                                                                 "u")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (expand
                                                                                                                               "lst_V"
                                                                                                                               -4)
                                                                                                                              (("2"
                                                                                                                                (use
                                                                                                                                 "solve_ac_rhs_not_protected")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (prop)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -6
                                                                                                                                       :dir
                                                                                                                                       rl)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "disjoint?")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "empty?")
                                                                                                                                          (("1"
                                                                                                                                            (inst?)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               ("member"
                                                                                                                                                "intersection")
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (prop)
                                                                                                                                                  (("1"
                                                                                                                                                    (rewrite
                                                                                                                                                     "vars_args"
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       1
                                                                                                                                                       "u")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (lemma
                                                                                                                                                     "inst_step_match_not_in_context")
                                                                                                                                                    (("2"
                                                                                                                                                      (hide
                                                                                                                                                       -5)
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         "G"
                                                                                                                                                         "PC"
                                                                                                                                                         "PV"
                                                                                                                                                         "x")
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (rewrite
                                                                                                                                                               "vars_args"
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (inst
                                                                                                                                                                 1
                                                                                                                                                                 "u")
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide-all-but
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "inp")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           ("PV"
                                                                                                                                            "V"))
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "nice_input?")
                                                                                                                                            (("2"
                                                                                                                                              (flatten)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide-all-but
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (typepred
                                                                                                                       "inp")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "nice_input?")
                                                                                                                        (("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "subset?"
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (skeep)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "match_problem?"
                                                                                                                                 -9)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -9
                                                                                                                                   "x!1")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     ("s"
                                                                                                                                      "PV"))
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "P"
                                                                                                                                       -10)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "rhs"
                                                                                                                                           1)
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "sec_proj"
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "vars"
                                                                                                                                               1)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 ("member"
                                                                                                                                                  "union")
                                                                                                                                                 1)
                                                                                                                                                (("2"
                                                                                                                                                  (propax)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (case
                                                                                                                     "subset?(vars(t, s), vars(P))")
                                                                                                                    (("1"
                                                                                                                      (case
                                                                                                                       "subset?(vars(P), lst_V)")
                                                                                                                      (("1"
                                                                                                                        (hide-all-but
                                                                                                                         (-1
                                                                                                                          -2
                                                                                                                          1))
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "subset?")
                                                                                                                          (("1"
                                                                                                                            (skolem
                                                                                                                             1
                                                                                                                             "y")
                                                                                                                            (("1"
                                                                                                                              (inst?)
                                                                                                                              (("1"
                                                                                                                                (inst?)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (hide-all-but
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "subset?"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (skolem
                                                                                                                             1
                                                                                                                             "y")
                                                                                                                            (("2"
                                                                                                                              (prop)
                                                                                                                              (("2"
                                                                                                                                (rewrite
                                                                                                                                 "mem_list2set"
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "lst_V"
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (rewrite
                                                                                                                                     "finset2list_mem")
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       ("P"
                                                                                                                                        "V"))
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "inp")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "nice_input?")
                                                                                                                                          (("2"
                                                                                                                                            (flatten)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "subset?"
                                                                                                                                               -4)
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -4
                                                                                                                                                 "y")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide-all-but
                                                                                                                       (1
                                                                                                                        4))
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         ("t"
                                                                                                                          "s"))
                                                                                                                        (("2"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nice_input? const-decl "bool" nominal_AC_ac_step nil)
    (nice_input type-eq-decl nil nominal_AC_ac_step nil)
    (member def-decl "bool" list_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (finset2list def-decl "list[T]" list_aux_equational_reasoning nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (pre_nice_input type-eq-decl nil nominal_AC_ac_step nil)
    (input_apply_ac_mem formula-decl nil nominal_AC_ac_step nil)
    (inst_step_vars_context formula-decl nil nominal_AC_inst_step nil)
    (solve_ac_match_condition formula-decl nil aux_nominal_AC_unification nil)
    (member_lhs_rhs formula-decl nil nominal_AC_unification nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (inst_step_match_not_in_context formula-decl nil nominal_AC_inst_step nil)
    (disjoint? const-decl "bool" sets nil)
    (solve_ac_rhs_not_protected formula-decl nil aux_nominal_AC_unification nil)
    (lhs const-decl "args" nominal_AC_unification nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (solve_ac_vars_lhs formula-decl nil aux_nominal_AC_unification nil)
    (vars_unif_prb formula-decl nil nominal_AC_unification nil)
    (match_problem? const-decl "bool" nominal_AC_unification nil)
    (list2set def-decl "set[T]" list2set nil)
    (finset2list_mem formula-decl nil list_aux_equational_reasoning nil)
    (mem_list2set formula-decl nil list_aux_equational_reasoning nil)
    (inst_step_mem formula-decl nil nominal_AC_inst_step nil)
    (nominal_AC_inst_step def-decl "list[[fresh_context, unif_prb, sub]]"
     nominal_AC_inst_step nil)
    (first_proj def-decl "list[T1]" list_aux_equational_reasoning2 nil)
    (string type-eq-decl nil strings nil)
    (ac_sol type-eq-decl nil aux_nominal_AC_unification nil)
    (solve_ac const-decl "list[ac_sol]" aux_nominal_AC_unification nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (subset? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (apply_ac const-decl "list[nice_input]" nominal_AC_ac_step nil))
   shostak))
 (apply_ac_max_size_le_TCC1 0
  (apply_ac_max_size_le_TCC1-1 nil 3886229771
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nice_input? const-decl "bool" nominal_AC_ac_step nil)
    (nice_input type-eq-decl nil nominal_AC_ac_step nil)
    (ac_prb? const-decl "bool" nominal_AC_unification nil))
   nil
   (apply_ac_max_size_le subtype "nominal_AC_ac_step.t"
    "(nominal_AC_term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].ac_app?)")))
 (apply_ac_max_size_le 0
  (apply_ac_max_size_le-1 nil 3886229782
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "G" "input`1")
        (("" (name-replace "P" "input`2")
          (("" (name-replace "sig" "input`3")
            (("" (name-replace "V" "input`4")
              (("" (name-replace "PV" "input`5")
                (("" (name-replace "P1" "cdr(P)")
                  (("" (name-replace "t" "car(P)`1")
                    (("" (name-replace "s" "car(P)`2")
                      ((""
                        (name-replace "lst_V"
                         "finset2list[variable](V)")
                        ((""
                          (name-replace "ac_results"
                           "first_proj(solve_ac(G, s, t, lst_V, ac_sym(t), PV))")
                          ((""
                            (name-replace "new_V"
                             "vars(sec_proj(solve_ac(G, s, t, lst_V, ac_sym(t), PV)))")
                            (("1"
                              (name-replace "ac_results_subs"
                               "inst_step(PV, G, ac_results)")
                              (("1"
                                (hide -1 -2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "ac_results_subs" -2)
                                    (("1"
                                      (use "inst_step_mem")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skolem -1 "Pc")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide -6)
                                              (("1"
                                                (expand
                                                 "ac_results"
                                                 -1)
                                                (("1"
                                                  (use
                                                   "max_size_unif_pair")
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (skolem -1 "upI")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (hide 3)
                                                          (("1"
                                                            (replace
                                                             -2
                                                             3
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (lemma
                                                                 "inst_step_skip_ind_mem")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "G"
                                                                   "Pc"
                                                                   "PV"
                                                                   "upI")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (replace
                                                                           -8
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (expand
                                                                             "apply_sub"
                                                                             -2)
                                                                            (("1"
                                                                              (name-replace
                                                                               "u"
                                                                               "nth(Pc, i)`1")
                                                                              (("1"
                                                                                (name-replace
                                                                                 "v"
                                                                                 "nth(Pc, i)`2")
                                                                                (("1"
                                                                                  (case
                                                                                   "disjoint?(dom(sigma1), vars(lhs(Pc)))")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -3
                                                                                     3)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "size"
                                                                                       3
                                                                                       1)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "subs_no_effect_t")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "sigma1"
                                                                                           "u")
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "var?(v) AND p(v) = null")
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "NOT member(V(v), PV)")
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "inst_step_match_skip_ind")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "G"
                                                                                                         "Pc"
                                                                                                         "PV"
                                                                                                         "V(v)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -13
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (prop)
                                                                                                                (("1"
                                                                                                                  (skolem
                                                                                                                   -1
                                                                                                                   "j")
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -10
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "nominal_AC_term_times_eta")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "v")
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -6)
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               -5
                                                                                                                               -6)
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "subs"
                                                                                                                                   -4
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (name-replace
                                                                                                                                       "uj"
                                                                                                                                       "nth(Pc, j)`1")
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -4)
                                                                                                                                        (("1"
                                                                                                                                          (case
                                                                                                                                           "NOT i = j")
                                                                                                                                          (("1"
                                                                                                                                            (case
                                                                                                                                             "subs(sigma1)(uj) = uj")
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (hide
                                                                                                                                                 2
                                                                                                                                                 3)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "uj"
                                                                                                                                                   3)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "u"
                                                                                                                                                     3)
                                                                                                                                                    (("1"
                                                                                                                                                      (use
                                                                                                                                                       "size_lhs_nth")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (case
                                                                                                                                                           "size(lhs(Pc)) < size(s) + size(t)")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (hide
                                                                                                                                                             4
                                                                                                                                                             -1)
                                                                                                                                                            (("2"
                                                                                                                                                              (use
                                                                                                                                                               "solve_ac_lhs_elim_com_arg")
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (replace
                                                                                                                                                                   -1
                                                                                                                                                                   1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "elim_com_arg"
                                                                                                                                                                     1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (rewrite
                                                                                                                                                                       "size_args_append")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (name-replace
                                                                                                                                                                         "f"
                                                                                                                                                                         "ac_sym(t)")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (name-replace
                                                                                                                                                                           "args_t"
                                                                                                                                                                           "get_args(f)(t)")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (name-replace
                                                                                                                                                                             "args_s"
                                                                                                                                                                             "get_args(f)(s)")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (name-replace
                                                                                                                                                                               "args_s1"
                                                                                                                                                                               "remove_common(args_s, args_t, equal?(G))")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (name-replace
                                                                                                                                                                                 "args_t1"
                                                                                                                                                                                 "remove_common(args_t, args_s, equal?(G))")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (use
                                                                                                                                                                                   "count_elem_size_cor")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (lemma
                                                                                                                                                                                     "count_elem_size_cor")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (inst
                                                                                                                                                                                       -1
                                                                                                                                                                                       "G"
                                                                                                                                                                                       "args_t1")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (case
                                                                                                                                                                                         "size(args_s1) + size(args_t1) < size(s) + size(t)")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (hide-all-but
                                                                                                                                                                                           (-1
                                                                                                                                                                                            -2
                                                                                                                                                                                            -3
                                                                                                                                                                                            1))
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (hide
                                                                                                                                                                                           -1
                                                                                                                                                                                           -2
                                                                                                                                                                                           2)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             ("args_s1"
                                                                                                                                                                                              "args_t1"))
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (use
                                                                                                                                                                                               "remove_common_size")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (lemma
                                                                                                                                                                                                 "remove_common_size")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (inst
                                                                                                                                                                                                   -1
                                                                                                                                                                                                   "G"
                                                                                                                                                                                                   "args_t "
                                                                                                                                                                                                   "args_s")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (case
                                                                                                                                                                                                     "size(args_s) + size(args_t) < size(s) + size(t)")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (hide-all-but
                                                                                                                                                                                                       (-1
                                                                                                                                                                                                        -2
                                                                                                                                                                                                        -3
                                                                                                                                                                                                        1))
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil)
                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                      (hide
                                                                                                                                                                                                       -1
                                                                                                                                                                                                       -2
                                                                                                                                                                                                       2)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (expand
                                                                                                                                                                                                         "args_s"
                                                                                                                                                                                                         1)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (expand
                                                                                                                                                                                                           "args_t"
                                                                                                                                                                                                           1)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (lemma
                                                                                                                                                                                                             "get_args_size3")
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (inst
                                                                                                                                                                                                               -1
                                                                                                                                                                                                               "f"
                                                                                                                                                                                                               "t")
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (prop)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (lemma
                                                                                                                                                                                                                   "get_args_size2")
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (inst
                                                                                                                                                                                                                     -1
                                                                                                                                                                                                                     "f"
                                                                                                                                                                                                                     "s")
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (hide-all-but
                                                                                                                                                                                                                       (-1
                                                                                                                                                                                                                        -2
                                                                                                                                                                                                                        1))
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil)
                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                   "is_ac_sym?"
                                                                                                                                                                                                                   1)
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                     "f"
                                                                                                                                                                                                                     1)
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (hide-all-but
                                                                                                                                                                                                                         (-16
                                                                                                                                                                                                                          1))
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                           "t")
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (grind)
                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (use
                                                                                                                                               "subs_no_effect_t")
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "disjoint?")
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "empty?")
                                                                                                                                                    (("2"
                                                                                                                                                      (skeep)
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -7
                                                                                                                                                         "x")
                                                                                                                                                        (("2"
                                                                                                                                                          (hide
                                                                                                                                                           3
                                                                                                                                                           5)
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             ("member"
                                                                                                                                                              "intersection")
                                                                                                                                                             -1)
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               ("member"
                                                                                                                                                                "intersection")
                                                                                                                                                               3)
                                                                                                                                                              (("2"
                                                                                                                                                                (flatten)
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "uj"
                                                                                                                                                                     -2)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (rewrite
                                                                                                                                                                       "vars_args"
                                                                                                                                                                       3)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (inst
                                                                                                                                                                         3
                                                                                                                                                                         "nth(Pc, j)`1")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "lhs"
                                                                                                                                                                             3)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (rewrite
                                                                                                                                                                               "first_proj_mem")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (inst
                                                                                                                                                                                 3
                                                                                                                                                                                 "nth(Pc, j)")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (rewrite
                                                                                                                                                                                   "member_nth_lst")
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (reveal
                                                                                                                                             -5
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (rewrite
                                                                                                                   "vars_args")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     1
                                                                                                                     "v")
                                                                                                                    (("2"
                                                                                                                      (prop)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "rhs"
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "v"
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "sec_proj_mem")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               1
                                                                                                                               "nth(Pc, i)")
                                                                                                                              (("1"
                                                                                                                                (rewrite
                                                                                                                                 "member_nth_lst")
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (expand
                                                                                                                         "vars"
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (hide-all-but
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (expand
                                                                                                                   "lst_V"
                                                                                                                   -9)
                                                                                                                  (("3"
                                                                                                                    (use
                                                                                                                     "solve_ac_match_condition")
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (prop)
                                                                                                                        (("1"
                                                                                                                          (hide-all-but
                                                                                                                           (-13
                                                                                                                            1))
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "s"
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               ("P"
                                                                                                                                "PV"))
                                                                                                                              (("1"
                                                                                                                                (typepred
                                                                                                                                 "input")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "nice_input?"
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (reveal
                                                                                                                                       4)
                                                                                                                                      (("1"
                                                                                                                                        (hide-all-but
                                                                                                                                         (-9
                                                                                                                                          1
                                                                                                                                          2))
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "match_problem?"
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "subset?")
                                                                                                                                            (("1"
                                                                                                                                              (skeep)
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 "x")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "rhs"
                                                                                                                                                     2)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "sec_proj"
                                                                                                                                                       2)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "P")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (expand
                                                                                                                           "subset?"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (skeep)
                                                                                                                            (("2"
                                                                                                                              (rewrite
                                                                                                                               "mem_list2set"
                                                                                                                               :dir
                                                                                                                               rl)
                                                                                                                              (("2"
                                                                                                                                (rewrite
                                                                                                                                 "finset2list_mem")
                                                                                                                                (("2"
                                                                                                                                  (hide-all-but
                                                                                                                                   (-1
                                                                                                                                    1))
                                                                                                                                  (("2"
                                                                                                                                    (case
                                                                                                                                     "subset?(vars(P), V)")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "subset?"
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (inst?)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             ("t"
                                                                                                                                              "s"))
                                                                                                                                            (("1"
                                                                                                                                              (grind)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (expand
                                                                                                                                       ("P"
                                                                                                                                        "V"))
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "input")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "nice_input?")
                                                                                                                                          (("2"
                                                                                                                                            (flatten)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "lst_V"
                                                                                                       -10)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "solve_ac_rhs_not_protected")
                                                                                                        (("2"
                                                                                                          (inst?)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (prop)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "disjoint?"
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "empty?"
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "V(v)")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       ("member"
                                                                                                                        "intersection")
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "vars_args"
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           1
                                                                                                                           "v")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "vars"
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (prop)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "rhs"
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (rewrite
                                                                                                                                   "sec_proj_mem"
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "v"
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       1
                                                                                                                                       "nth(Pc, i)")
                                                                                                                                      (("1"
                                                                                                                                        (rewrite
                                                                                                                                         "member_nth_lst")
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide-all-but
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide-all-but
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   ("PV"
                                                                                                                    "V"))
                                                                                                                  (("2"
                                                                                                                    (typepred
                                                                                                                     "input")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "nice_input?")
                                                                                                                      (("2"
                                                                                                                        (flatten)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (case
                                                                                                   "var?(v)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "solve_ac_var_rhs_perm_null")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (inst?)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "lst_V"
                                                                                                             -9)
                                                                                                            (("1"
                                                                                                              (inst?)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide-all-but
                                                                                                                   (-4
                                                                                                                    1))
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "rhs"
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "v"
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "sec_proj_mem")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           1
                                                                                                                           "nth(Pc, i)")
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "member_nth_lst")
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "lst_V"
                                                                                                       -7)
                                                                                                      (("2"
                                                                                                        (use
                                                                                                         "solve_ac_vars_unptc")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (split
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "v"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (reveal
                                                                                                               -4
                                                                                                               -5)
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -2)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "inst_step_inst_left_dom")
                                                                                                                  (("2"
                                                                                                                    (inst?)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "v"
                                                                                                                       "u")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           -14
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          (("2"
                                                                                                                            (prop)
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               -11
                                                                                                                               -12
                                                                                                                               -13)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "disjoint?"
                                                                                                                                 -6)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "empty?"
                                                                                                                                   -6)
                                                                                                                                  (("1"
                                                                                                                                    (inst?)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       ("member"
                                                                                                                                        "intersection")
                                                                                                                                       2)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (rewrite
                                                                                                                                           "vars_args"
                                                                                                                                           2)
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             2
                                                                                                                                             "u")
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "unptc_var?"
                                                                                                                                               -4)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "vars"
                                                                                                                                                   3)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (prop)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "lhs"
                                                                                                                                                         1)
                                                                                                                                                        (("1"
                                                                                                                                                          (rewrite
                                                                                                                                                           "first_proj_mem")
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             1
                                                                                                                                                             "nth(Pc, i)")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (rewrite
                                                                                                                                                                 "member_nth_lst"
                                                                                                                                                                 1)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (hide-all-but
                                                                                                                                                         1)
                                                                                                                                                        (("2"
                                                                                                                                                          (grind)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (case
                                                                                                                               "nth(Pc, i) = (u, v)")
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("1"
                                                                                                                                  (rewrite
                                                                                                                                   "member_nth_lst")
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("3"
                                                                                                                              (expand
                                                                                                                               "unptc_var?"
                                                                                                                               -3)
                                                                                                                              (("3"
                                                                                                                                (flatten)
                                                                                                                                (("3"
                                                                                                                                  (expand
                                                                                                                                   "inst_left?"
                                                                                                                                   1)
                                                                                                                                  (("3"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               (-1
                                                                                                1
                                                                                                -2))
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "disjoint?")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "empty?")
                                                                                                  (("2"
                                                                                                    (skeep)
                                                                                                    (("2"
                                                                                                      (inst?)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         ("member"
                                                                                                          "intersection"))
                                                                                                        (("2"
                                                                                                          (prop)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "u"
                                                                                                             -2)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "lhs"
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 "vars_args"
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   1
                                                                                                                   "nth(Pc, i)`1")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "first_proj_mem")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         1
                                                                                                                         "nth(Pc, i)")
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "member_nth_lst")
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     3
                                                                                     4
                                                                                     -1
                                                                                     -2
                                                                                     -3
                                                                                     -4)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "disjoint?")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "empty?")
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (expand
                                                                                             ("member"
                                                                                              "intersection")
                                                                                             -1)
                                                                                            (("2"
                                                                                              (prop)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "subset?(vars(lhs(Pc)), vars(P))")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -9
                                                                                                   -1
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "subset?")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "vars_unif_prb_append")
                                                                                                          (("1"
                                                                                                            (prop)
                                                                                                            (("1"
                                                                                                              (use
                                                                                                               "inst_step_vars_unif")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -7
                                                                                                                   :dir
                                                                                                                   rl)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -8
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "disjoint?"
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "empty?"
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (inst?)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             ("member"
                                                                                                                              "intersection")
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (use
                                                                                                               "apply_sub_elim_var2")
                                                                                                              (("2"
                                                                                                                (prop)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "disjoint?"
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "empty?"
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (inst?)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         ("member"
                                                                                                                          "intersection")
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (use
                                                                                                                   "inst_step_idempotent3")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "lst_V"
                                                                                                   -3)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "solve_ac_vars_lhs")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (hide-all-but
                                                                                                         (-1
                                                                                                          -8
                                                                                                          1))
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "subset?")
                                                                                                          (("2"
                                                                                                            (skolem
                                                                                                             1
                                                                                                             "x1")
                                                                                                            (("2"
                                                                                                              (inst?)
                                                                                                              (("2"
                                                                                                                (prop)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   ("t"
                                                                                                                    "s"))
                                                                                                                  (("2"
                                                                                                                    (hide-all-but
                                                                                                                     (-1
                                                                                                                      1))
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (use
                                                         "size_ge1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "max_size"
                                                             4)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (hide-all-but (-2 1 2))
                                (("2"
                                  (expand "t")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (solve_ac const-decl "list[ac_sol]" aux_nominal_AC_unification nil)
    (ac_sol type-eq-decl nil aux_nominal_AC_unification nil)
    (string type-eq-decl nil strings nil)
    (first_proj def-decl "list[T1]" list_aux_equational_reasoning2 nil)
    (nominal_AC_inst_step def-decl "list[[fresh_context, unif_prb, sub]]"
     nominal_AC_inst_step nil)
    (inst_step_mem formula-decl nil nominal_AC_inst_step nil)
    (max_size_unif_pair formula-decl nil nominal_AC_ac_step nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max_size def-decl "nat" nominal_AC_ac_step nil)
    (size_ge1 formula-decl nil nominal_AC_term_properties nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (disjoint? const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (lhs const-decl "args" nominal_AC_unification nil)
    (size const-decl "nat" nominal_AC_unification nil)
    (solve_ac_var_rhs_perm_null formula-decl nil aux_nominal_AC_unification nil)
    (inst_step_inst_left_dom formula-decl nil nominal_AC_inst_step nil)
    (inst_left? const-decl "bool" nominal_AC_inst_step nil)
    (unptc_var? const-decl "bool" nominal_AC_term_properties nil)
    (solve_ac_vars_unptc formula-decl nil aux_nominal_AC_unification nil)
    (solve_ac_rhs_not_protected formula-decl nil aux_nominal_AC_unification nil)
    (inst_step_match_skip_ind formula-decl nil nominal_AC_inst_step nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (mem_list2set formula-decl nil list_aux_equational_reasoning nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (finset2list_mem formula-decl nil list_aux_equational_reasoning nil)
    (match_problem? const-decl "bool" nominal_AC_unification nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (solve_ac_match_condition formula-decl nil aux_nominal_AC_unification nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (sec_proj_mem formula-decl nil list_aux_equational_reasoning2 nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (first_proj_mem formula-decl nil list_aux_equational_reasoning2 nil)
    (member_nth_lst formula-decl nil list_aux_equational_reasoning nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (size_lhs_nth formula-decl nil nominal_AC_unification nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (solve_ac_lhs_elim_com_arg formula-decl nil aux_nominal_AC_unification nil)
    (remove_common def-decl "list[T]" list_aux_equational_reasoning nil)
    (count_elem def-decl "[list[T], list[nat]]" list_aux_equational_reasoning nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (equivalence? const-decl "bool" relations nil)
    (size_args_append formula-decl nil nominal_AC_term_properties nil)
    (count_elem_size_cor formula-decl nil nominal_AC_equality nil)
    (remove_common_size formula-decl nil nominal_AC_equality nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (ac_prb? const-decl "bool" nominal_AC_unification nil)
    (get_args_size2 formula-decl nil nominal_AC_term_properties nil)
    (get_args_size3 formula-decl nil nominal_AC_term_properties nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (elim_com_arg const-decl "[args, list[nat], list[nat]]"
     aux_nominal_AC_unification nil)
    (nominal_AC_term_times_eta formula-decl nil nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (solve_ac_vars_lhs formula-decl nil aux_nominal_AC_unification nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (vars_unif_prb_append formula-decl nil nominal_AC_unification nil)
    (apply_sub_elim_var2 formula-decl nil nominal_AC_unification nil)
    (inst_step_idempotent3 formula-decl nil nominal_AC_inst_step nil)
    (inst_step_vars_unif formula-decl nil nominal_AC_inst_step nil)
    (apply_sub const-decl "unif_pair" nominal_AC_unification nil)
    (inst_step_skip_ind_mem formula-decl nil nominal_AC_inst_step nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (finset2list def-decl "list[T]" list_aux_equational_reasoning nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (nice_input type-eq-decl nil nominal_AC_ac_step nil)
    (nice_input? const-decl "bool" nominal_AC_ac_step nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (apply_ac_apply_sub_no_effect 0
  (apply_ac_apply_sub_no_effect-1 nil 3886448199
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (name-replace "G" "input`1")
          (("" (name-replace "P" "input`2")
            (("" (name-replace "sig" "input`3")
              (("" (name-replace "V" "input`4")
                (("" (name-replace "PV" "input`5")
                  (("" (name-replace "P1" "cdr(P)")
                    (("" (name-replace "t" "car(P)`1")
                      (("" (name-replace "s" "car(P)`2")
                        ((""
                          (name-replace "lst_V"
                           "finset2list[variable](V)")
                          ((""
                            (name-replace "ac_results"
                             "first_proj(solve_ac(G, s, t, lst_V, ac_sym(t), PV))")
                            ((""
                              (name-replace "new_V"
                               "vars(sec_proj(solve_ac(G, s, t, lst_V, ac_sym(t), PV)))")
                              (("1"
                                (name-replace
                                 "ac_results_subs"
                                 "inst_step(PV, G, ac_results)")
                                (("1"
                                  (expand "ac_results_subs")
                                  (("1"
                                    (use "inst_step_mem")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skolem -1 "PC")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (lemma
                                             "apply_sub_no_effect")
                                            (("1"
                                              (inst -1 "sigma1" "P1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   "disjoint?(dom(sigma1), vars(P))")
                                                  (("1"
                                                    (hide-all-but
                                                     (-1 1 3))
                                                    (("1"
                                                      (expand "P1" 1)
                                                      (("1"
                                                        (expand
                                                         "disjoint?")
                                                        (("1"
                                                          (expand
                                                           "empty?")
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2 6 5)
                                                    (("2"
                                                      (expand
                                                       "disjoint?"
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "empty?"
                                                         1)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (expand
                                                             ("member"
                                                              "intersection")
                                                             -1)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (use
                                                                 "inst_step_idempotent3")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (replace
                                                                     -7
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (use
                                                                       "idempotent_disjoint_dom_img")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "disjoint?")
                                                                          (("2"
                                                                            (expand
                                                                             "empty?")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "x")
                                                                              (("2"
                                                                                (expand
                                                                                 ("member"
                                                                                  "intersection")
                                                                                 1)
                                                                                (("2"
                                                                                  (replace
                                                                                   -12
                                                                                   -3
                                                                                   :dir
                                                                                   rl)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "vars_unif_prb")
                                                                                    (("2"
                                                                                      (skolem
                                                                                       -3
                                                                                       "t1")
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "member_unif_prb_append"
                                                                                           -3)
                                                                                          (("2"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (use
                                                                                               "inst_step2_mem")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -9
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -8
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (skolem
                                                                                                         -1
                                                                                                         "s1")
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "apply_sub_elim_var_t2")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "x"
                                                                                                                 "sigma1"
                                                                                                                 "s1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (use
                                                                                               "apply_sub_elim_var")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "vars_unif_prb")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     1
                                                                                                     "t1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "t" 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nice_input? const-decl "bool" nominal_AC_ac_step nil)
    (nice_input type-eq-decl nil nominal_AC_ac_step nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (finset2list def-decl "list[T]" list_aux_equational_reasoning nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (disjoint? const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (idempotent_disjoint_dom_img formula-decl nil nominal_AC_substitution nil)
    (member_unif_prb_append formula-decl nil nominal_AC_unification nil)
    (apply_sub_elim_var formula-decl nil nominal_AC_unification nil)
    (inst_step2_mem formula-decl nil nominal_AC_inst_step nil)
    (apply_sub_elim_var_t2 formula-decl nil nominal_AC_substitution nil)
    (vars_unif_prb formula-decl nil nominal_AC_unification nil)
    (append def-decl "list[T]" list_props nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (inst_step_idempotent3 formula-decl nil nominal_AC_inst_step nil)
    (apply_sub_no_effect formula-decl nil nominal_AC_unification nil)
    (inst_step_mem formula-decl nil nominal_AC_inst_step nil)
    (nominal_AC_inst_step def-decl "list[[fresh_context, unif_prb, sub]]"
     nominal_AC_inst_step nil)
    (ac_prb? const-decl "bool" nominal_AC_unification nil)
    (first_proj def-decl "list[T1]" list_aux_equational_reasoning2 nil)
    (string type-eq-decl nil strings nil)
    (ac_sol type-eq-decl nil aux_nominal_AC_unification nil)
    (solve_ac const-decl "list[ac_sol]" aux_nominal_AC_unification nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil))
   shostak))
 (apply_ac_sound_TCC1 0
  (apply_ac_sound_TCC1-1 nil 3887290768
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (use "choose_eq_nice_input2")
          (("" (assert) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((choose_eq_nice_input2 formula-decl nil nominal_AC_ac_step nil)
    (nice_input type-eq-decl nil nominal_AC_ac_step nil)
    (nice_input? const-decl "bool" nominal_AC_ac_step nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (apply_ac_sound subtype
    "(nominal_AC_ac_step.G, list_adt[[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol], nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]].cons((nominal_AC_ac_step.t, nominal_AC_ac_step.s), nominal_AC_ac_step.P1), nominal_AC_ac_step.sigma, nominal_AC_ac_step.V, nominal_AC_ac_step.PV)"
    "nice_input")))
 (apply_ac_sound 0
  (apply_ac_sound-1 nil 3887291667
   ("" (skolem 1 ("Del" "del" "input" "input1"))
    (("" (assert)
      (("" (name-replace "G" "input`1")
        (("" (name-replace "P" "input`2")
          (("" (name-replace "sig" "input`3")
            (("" (name-replace "V" "input`4")
              (("" (name-replace "PV" "input`5")
                (("" (flatten)
                  (("" (name-replace "up" "choose_eq(P)`1")
                    (("" (name-replace "P1" "choose_eq(P)`2")
                      (("" (name-replace "t" "up`1")
                        (("" (name-replace "s" "up`2")
                          (("" (expand "apply_ac" -2)
                            (("" (lift-if)
                              ((""
                                (assert)
                                ((""
                                  (split -2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "member" -2)
                                      (("1"
                                        (expand "member" -2)
                                        (("1"
                                          (decompose-equality -2)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (replace -3)
                                                (("1"
                                                  (replace -5)
                                                  (("1"
                                                    (expand "is_sol?")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (rewrite
                                                           "choose_eq_unifies"
                                                           2)
                                                          (("1"
                                                            (reveal
                                                             -3
                                                             -4)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -2)
                                                                (("1"
                                                                  (expand
                                                                   "unifies?"
                                                                   2)
                                                                  (("1"
                                                                    (reveal
                                                                     -1
                                                                     -2)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (replace
                                                                         -2)
                                                                        (("1"
                                                                          (use
                                                                           "subs_equal?")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (hide 1)
                                      (("2"
                                        (name-replace
                                         "lst_V"
                                         "finset2list[variable](V)")
                                        (("2"
                                          (name-replace
                                           "ac_results"
                                           "first_proj(solve_ac(G, s, t, lst_V, ac_sym(t), PV))")
                                          (("2"
                                            (name-replace
                                             "new_V"
                                             "vars(sec_proj(solve_ac(G, s, t, lst_V, ac_sym(t), PV)))")
                                            (("2"
                                              (rewrite
                                               "input_apply_ac_mem")
                                              (("2"
                                                (skolem
                                                 -1
                                                 ("G1" "PI" "sig1"))
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (replace -2)
                                                    (("2"
                                                      (replace -3)
                                                      (("2"
                                                        (replace -4)
                                                        (("2"
                                                          (replace -6)
                                                          (("2"
                                                            (hide
                                                             -2
                                                             -3
                                                             -4
                                                             -5
                                                             -6)
                                                            (("2"
                                                              (expand
                                                               "is_sol?")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (use
                                                                     "inst_step_mem")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (skolem
                                                                         -1
                                                                         "Pc")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (expand
                                                                             "ac_results"
                                                                             -1)
                                                                            (("2"
                                                                              (prop)
                                                                              (("1"
                                                                                (replace
                                                                                 -2
                                                                                 -7)
                                                                                (("1"
                                                                                  (use
                                                                                   "inst_step_ctx_correct")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -3
                                                                                       :dir
                                                                                       rl)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         -8)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "nominal_AC_fresh_subs_append_context")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (rewrite
                                                                                 "choose_eq_unifies"
                                                                                 1)
                                                                                (("2"
                                                                                  (reveal
                                                                                   -12
                                                                                   -13)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -2)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "unifies?_append"
                                                                                         -10)
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "solve_ac_sound")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "Del"
                                                                                                 "G"
                                                                                                 "Pc"
                                                                                                 "PV"
                                                                                                 "del"
                                                                                                 "ac_sym(t)"
                                                                                                 "lst_V"
                                                                                                 "s"
                                                                                                 "t")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (reveal
                                                                                                       -11
                                                                                                       -12)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "(t, s) = up")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (decompose-equality
                                                                                                             1)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "more_general?"
                                                                                                         -12)
                                                                                                        (("2"
                                                                                                          (skolem
                                                                                                           -12
                                                                                                           "del1")
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "unifies?_equal")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "Del"
                                                                                                               "append(del1, append(sig1, sig))"
                                                                                                               "del"
                                                                                                               "Pc")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (prop)
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     "equal_sub_sym"
                                                                                                                     1)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (lemma
                                                                                                                     "unifies?_equal")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "Del"
                                                                                                                       "del"
                                                                                                                       "append(del1, append(sig1, sig))"
                                                                                                                       "PI")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "inst_step_sound")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "Del"
                                                                                                                             "G"
                                                                                                                             "Pc"
                                                                                                                             "PV"
                                                                                                                             "del1"
                                                                                                                             "sig")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -7
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -5
                                                                                                                                   :dir
                                                                                                                                   rl)
                                                                                                                                  (("2"
                                                                                                                                    (prop)
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       2
                                                                                                                                       3
                                                                                                                                       4
                                                                                                                                       -10
                                                                                                                                       -11
                                                                                                                                       -12
                                                                                                                                       -13
                                                                                                                                       -14
                                                                                                                                       -15)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "lst_V"
                                                                                                                                         -4)
                                                                                                                                        (("1"
                                                                                                                                          (use
                                                                                                                                           "solve_ac_vars2")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (hide
                                                                                                                                               -5
                                                                                                                                               -6
                                                                                                                                               -7
                                                                                                                                               -8)
                                                                                                                                              (("1"
                                                                                                                                                (prop)
                                                                                                                                                (("1"
                                                                                                                                                  (hide-all-but
                                                                                                                                                   (-1
                                                                                                                                                    1))
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "disjoint?")
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "empty?")
                                                                                                                                                      (("1"
                                                                                                                                                        (skeep)
                                                                                                                                                        (("1"
                                                                                                                                                          (inst?
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             ("member"
                                                                                                                                                              "intersection"))
                                                                                                                                                            (("1"
                                                                                                                                                              (prop)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (hide-all-but
                                                                                                                                                   1)
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     ("sig"
                                                                                                                                                      "V")
                                                                                                                                                     1)
                                                                                                                                                    (("2"
                                                                                                                                                      (typepred
                                                                                                                                                       "input")
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         "nice_input?")
                                                                                                                                                        (("2"
                                                                                                                                                          (flatten)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("3"
                                                                                                                                                  (use
                                                                                                                                                   "choose_eq_mem1")
                                                                                                                                                  (("3"
                                                                                                                                                    (assert)
                                                                                                                                                    (("3"
                                                                                                                                                      (replace
                                                                                                                                                       -4)
                                                                                                                                                      (("3"
                                                                                                                                                        (case
                                                                                                                                                         "(t, s) = up")
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (propax)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (expand
                                                                                                                                                           ("t"
                                                                                                                                                            "s"))
                                                                                                                                                          (("2"
                                                                                                                                                            (decompose-equality
                                                                                                                                                             1)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("4"
                                                                                                                                                  (hide-all-but
                                                                                                                                                   1)
                                                                                                                                                  (("4"
                                                                                                                                                    (typepred
                                                                                                                                                     "input")
                                                                                                                                                    (("4"
                                                                                                                                                      (expand
                                                                                                                                                       "nice_input?")
                                                                                                                                                      (("4"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("4"
                                                                                                                                                          (expand
                                                                                                                                                           ("P"
                                                                                                                                                            "sig"))
                                                                                                                                                          (("4"
                                                                                                                                                            (propax)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide
                                                                                                                                       -5
                                                                                                                                       -6
                                                                                                                                       -7)
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "nominal_AC_fresh_subs_equal")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "G1"
                                                                                                                                           "Del"
                                                                                                                                           "del"
                                                                                                                                           "append(del1, append(sig1, sig))")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (expand
                                                                                                       "ac_prb?"
                                                                                                       -8)
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "are_ac?"
                                                                                                         1)
                                                                                                        (("3"
                                                                                                          (flatten)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("4"
                                                                                                      (use
                                                                                                       "inst_step_ctx_correct")
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        (("4"
                                                                                                          (replace
                                                                                                           -5
                                                                                                           :dir
                                                                                                           rl)
                                                                                                          (("4"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             -10)
                                                                                                            (("4"
                                                                                                              (rewrite
                                                                                                               "nominal_AC_fresh_subs_append_context")
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (lemma
                                                                                               "unifies_more_general_sub_no_effect")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "Del"
                                                                                                 "P1"
                                                                                                 "del"
                                                                                                 "sig"
                                                                                                 "sig1")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "inst_step_idempotent3")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (case
                                                                                                         "disjoint?(dom(sig), vars(P))")
                                                                                                        (("1"
                                                                                                          (prop)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "subset?(vars(P1), vars(P))")
                                                                                                            (("1"
                                                                                                              (hide-all-but
                                                                                                               (-1
                                                                                                                -2
                                                                                                                1))
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "disjoint?")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   ("empty?"
                                                                                                                    "subset"))
                                                                                                                  (("1"
                                                                                                                    (skeep)
                                                                                                                    (("1"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide-all-but
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "P1")
                                                                                                                (("2"
                                                                                                                  (use
                                                                                                                   "choose_eq_vars")
                                                                                                                  (("2"
                                                                                                                    (flatten)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (case
                                                                                                             "subset?(vars(img(sig1)), vars(Pc))")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "lst_V"
                                                                                                               -6)
                                                                                                              (("1"
                                                                                                                (use
                                                                                                                 "solve_ac_vars2")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -7
                                                                                                                     -8
                                                                                                                     -14
                                                                                                                     -12
                                                                                                                     -15
                                                                                                                     -17
                                                                                                                     -18
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (prop)
                                                                                                                      (("1"
                                                                                                                        (hide-all-but
                                                                                                                         (-1
                                                                                                                          -2
                                                                                                                          1))
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "disjoint?")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "empty?")
                                                                                                                            (("1"
                                                                                                                              (skeep)
                                                                                                                              (("1"
                                                                                                                                (inst?)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "subset?"
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (hide-all-but
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           ("sig"
                                                                                                                            "V"))
                                                                                                                          (("2"
                                                                                                                            (typepred
                                                                                                                             "input")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "nice_input?"
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (flatten)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (hide-all-but
                                                                                                                         (1
                                                                                                                          4))
                                                                                                                        (("3"
                                                                                                                          (use
                                                                                                                           "choose_eq_mem1")
                                                                                                                          (("3"
                                                                                                                            (assert)
                                                                                                                            (("3"
                                                                                                                              (reveal
                                                                                                                               -31
                                                                                                                               -32
                                                                                                                               -34)
                                                                                                                              (("3"
                                                                                                                                (replace
                                                                                                                                 -3)
                                                                                                                                (("3"
                                                                                                                                  (case
                                                                                                                                   "up = (t, s)")
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (decompose-equality
                                                                                                                                     1)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("4"
                                                                                                                        (hide-all-but
                                                                                                                         (-2
                                                                                                                          1))
                                                                                                                        (("4"
                                                                                                                          (expand
                                                                                                                           "disjoint?")
                                                                                                                          (("4"
                                                                                                                            (expand
                                                                                                                             "empty?")
                                                                                                                            (("4"
                                                                                                                              (skeep)
                                                                                                                              (("4"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (use
                                                                                                               "inst_step_vars_img")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             ("sig"
                                                                                                              "P"))
                                                                                                            (("2"
                                                                                                              (typepred
                                                                                                               "input")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "nice_input?")
                                                                                                                (("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (hide-all-but
                                                                                                                       (-2
                                                                                                                        1))
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "disjoint?")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "empty?")
                                                                                                                          (("2"
                                                                                                                            (skeep)
                                                                                                                            (("2"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (hide-all-but
                                                                                 (-9
                                                                                  1))
                                                                                (("3"
                                                                                  (expand
                                                                                   "more_general?")
                                                                                  (("3"
                                                                                    (skolem
                                                                                     -1
                                                                                     "del1")
                                                                                    (("3"
                                                                                      (inst
                                                                                       1
                                                                                       "append(del1, sig1)")
                                                                                      (("3"
                                                                                        (rewrite
                                                                                         "append_assoc")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nice_input? const-decl "bool" nominal_AC_ac_step nil)
    (nice_input type-eq-decl nil nominal_AC_ac_step nil)
    (choose_eq def-decl "[unif_pair, unif_prb]" nominal_AC_ac_step nil)
    (apply_ac const-decl "list[nice_input]" nominal_AC_ac_step nil)
    (finset2list def-decl "list[T]" list_aux_equational_reasoning nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (inst_step_mem formula-decl nil nominal_AC_inst_step nil)
    (append_assoc formula-decl nil list_props nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (unifies?_append formula-decl nil nominal_AC_unification nil)
    (unifies?_equal formula-decl nil nominal_AC_unification nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (choose_eq_mem1 formula-decl nil nominal_AC_ac_step nil)
    (solve_ac_vars2 formula-decl nil aux_nominal_AC_unification nil)
    (nominal_AC_fresh_subs_equal formula-decl nil nominal_AC_fresh_subs nil)
    (inst_step_sound formula-decl nil nominal_AC_inst_step nil)
    (equal_sub_sym formula-decl nil nominal_AC_substitution nil)
    (append def-decl "list[T]" list_props nil)
    (are_ac? const-decl "bool" nominal_AC_term_properties nil)
    (ac_prb? const-decl "bool" nominal_AC_unification nil)
    (solve_ac_sound formula-decl nil aux_nominal_AC_unification nil)
    (inst_step_idempotent3 formula-decl nil nominal_AC_inst_step nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (inst_step_vars_img formula-decl nil nominal_AC_inst_step nil)
    (subset? const-decl "bool" sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (union const-decl "set" sets nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (choose_eq_vars formula-decl nil nominal_AC_ac_step nil)
    (unifies_more_general_sub_no_effect formula-decl nil nominal_AC_unification
     nil)
    (nominal_AC_fresh_subs_append_context formula-decl nil nominal_AC_fresh_subs nil)
    (inst_step_ctx def-decl "fresh_context" nominal_AC_inst_step nil)
    (inst_step_ctx_correct formula-decl nil nominal_AC_inst_step nil)
    (input_apply_ac_mem formula-decl nil nominal_AC_ac_step nil)
    (nominal_AC_inst_step def-decl "list[[fresh_context, unif_prb, sub]]"
     nominal_AC_inst_step nil)
    (pre_nice_input type-eq-decl nil nominal_AC_ac_step nil)
    (first_proj def-decl "list[T1]" list_aux_equational_reasoning2 nil)
    (string type-eq-decl nil strings nil)
    (ac_sol type-eq-decl nil aux_nominal_AC_unification nil)
    (solve_ac const-decl "list[ac_sol]" aux_nominal_AC_unification nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (is_sol? const-decl "bool" nominal_AC_unification nil)
    (subs_equal? formula-decl nil nominal_AC_fresh_subs nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (choose_eq_unifies formula-decl nil nominal_AC_ac_step nil)
    (member def-decl "bool" list_props nil))
   shostak))
 (apply_ac_complete 0
  (apply_ac_complete-1 nil 3888307622
   ("" (skolem 1 ("Del" "del" "inp"))
    (("" (assert)
      (("" (flatten)
        (("" (name-replace "G" "inp`1")
          (("" (name-replace "P" "inp`2")
            (("" (name-replace "sig" "inp`3")
              (("" (name-replace "V" "inp`4")
                (("" (name-replace "PV" "inp`5")
                  (("" (name-replace "up" "choose_eq(P)`1")
                    (("" (name-replace "P1" "choose_eq(P)`2")
                      (("" (name-replace "t" "up`1")
                        (("" (name-replace "s" "up`2")
                          (("" (case "equal?(G)(t, s)")
                            (("1" (inst 2 "null" "(G, P1, sig, V, PV)")
                              (("1"
                                (prop)
                                (("1"
                                  (expand "apply_ac" 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "member" 1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "append" 1)
                                  (("2"
                                    (expand "is_sol?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "P1")
                                          (("2"
                                            (rewrite
                                             "choose_eq_unifies"
                                             -4)
                                            (("2" (flatten) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (expand "well_formed?" 1)
                                  (("3"
                                    (rewrite "well_formed_null")
                                    (("3"
                                      (rewrite "dom_null")
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (hide-all-but 1)
                                  (("4"
                                    (rewrite "dom_null")
                                    (("4" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("5"
                                  (hide-all-but 1)
                                  (("5"
                                    (expand "contained?")
                                    (("5"
                                      (rewrite "dom_null")
                                      (("5"
                                        (rewrite "img_null")
                                        (("5" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "inp")
                                (("2"
                                  (expand ("G" "P1" "sig" "V" "PV"))
                                  (("2"
                                    (expand "P" 1)
                                    (("2"
                                      (use "choose_eq_nice_input")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "P")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "inp = (inp`1, inp`2, inp`3, inp`4, inp`5)")
                                              (("1"
                                                (replace -1 :dir rl)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (decompose-equality 1)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (name-replace "lst_V"
                               "finset2list[variable](V)")
                              (("2"
                                (name-replace
                                 "ac_results"
                                 "first_proj(solve_ac(G, s, t, lst_V, ac_sym(t), PV))")
                                (("1"
                                  (name-replace
                                   "new_V"
                                   "vars(sec_proj(solve_ac(G, s, t, lst_V, ac_sym(t), PV)))")
                                  (("1"
                                    (name-replace
                                     "ac_results_subs"
                                     "inst_step(PV, G, ac_results)")
                                    (("1"
                                      (expand "is_sol?" -6)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide 3)
                                          (("1"
                                            (lemma "solve_ac_complete")
                                            (("1"
                                              (expand "ac_prb?" -6)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "Del"
                                                   "G"
                                                   "PV"
                                                   "del"
                                                   "ac_sym(t)"
                                                   "lst_V"
                                                   "s"
                                                   "t")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "list2set[variable](lst_V) = V")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -2)
                                                            (("1"
                                                              (skolem
                                                               -1
                                                               ("P0_"
                                                                "gam"
                                                                "lst_V1"))
                                                              (("1"
                                                                (name-replace
                                                                 "V1"
                                                                 "list2set(lst_V1)")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (hide
                                                                     -6
                                                                     -10)
                                                                    (("1"
                                                                      (name-replace
                                                                       "quad_inst"
                                                                       "inst_step(PV, G, P0_, null, null)")
                                                                      (("1"
                                                                        (name-replace
                                                                         "flag"
                                                                         "inst_step(PV, G, P0_, null, null)`4")
                                                                        (("1"
                                                                          (name-replace
                                                                           "G1"
                                                                           "inst_step(PV, G, P0_, null, null)`1")
                                                                          (("1"
                                                                            (name-replace
                                                                             "PI"
                                                                             "inst_step(PV, G, P0_, null, null)`2")
                                                                            (("1"
                                                                              (name-replace
                                                                               "sig1"
                                                                               "inst_step(PV, G, P0_, null, null)`3")
                                                                              (("1"
                                                                                (hide
                                                                                 -11
                                                                                 -12
                                                                                 -13
                                                                                 -14
                                                                                 -15
                                                                                 -16)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1
                                                                                   -2
                                                                                   -3
                                                                                   -4
                                                                                   -5)
                                                                                  (("1"
                                                                                    (case
                                                                                     "match_condition?(P0_, PV)")
                                                                                    (("1"
                                                                                      (case
                                                                                       "well_formed?(P0_)")
                                                                                      (("1"
                                                                                        (case
                                                                                         "disjoint?(dom(append(gam, del)), PV) AND nominal_AC_fresh_subs(Del)(append(gam, del), G)")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -10
                                                                                             -13)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -10)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "NOT flag")
                                                                                                (("1"
                                                                                                  (reveal
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     1
                                                                                                     "gam"
                                                                                                     "(G1, append(PI, apply_sub(sig1, P1)), append(sig1, sig), new_V, PV)")
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "apply_ac"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (lift-if)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (reveal
                                                                                                                 -12
                                                                                                                 -13
                                                                                                                 -14)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "ac_prb?"
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (hide
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   -7
                                                                                                                   -8
                                                                                                                   -9
                                                                                                                   -10
                                                                                                                   -11
                                                                                                                   -12)
                                                                                                                  (("2"
                                                                                                                    (reveal
                                                                                                                     -16
                                                                                                                     -17
                                                                                                                     -18)
                                                                                                                    (("2"
                                                                                                                      (reveal
                                                                                                                       -23)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           -4)
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -3)
                                                                                                                            (("2"
                                                                                                                              (rewrite
                                                                                                                               "input_apply_ac_mem"
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 1
                                                                                                                                 "G1"
                                                                                                                                 "PI"
                                                                                                                                 "sig1")
                                                                                                                                (("2"
                                                                                                                                  (reveal
                                                                                                                                   -11
                                                                                                                                   -12
                                                                                                                                   -13
                                                                                                                                   -14)
                                                                                                                                  (("2"
                                                                                                                                    (use
                                                                                                                                     "inst_step_mem2")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         1
                                                                                                                                         "P0_")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "ac_results"
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (rewrite
                                                                                                                                               "first_proj_mem")
                                                                                                                                              (("2"
                                                                                                                                                (inst?)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "is_sol?"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (prop)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "G1"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (use
                                                                                                               "inst_step_complete_nominal_AC_fresh_subs")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (rewrite
                                                                                                             "unifies?_append")
                                                                                                            (("2"
                                                                                                              (prop)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "PI"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "inst_step_complete_unifies")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "Del"
                                                                                                                     "G"
                                                                                                                     "P0_"
                                                                                                                     "PV"
                                                                                                                     "append(gam, del)")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (lemma
                                                                                                                 "unifies?_equal")
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "apply_sub_unifies"
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "Del"
                                                                                                                     "append(gam, del)"
                                                                                                                     "append(append(gam, del), sig1)"
                                                                                                                     "P1")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (prop)
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           2
                                                                                                                           3)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "inst_step_complete_equal")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "Del"
                                                                                                                               "G"
                                                                                                                               "P0_"
                                                                                                                               "PV"
                                                                                                                               "append(gam, del)")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "sig1"
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           2
                                                                                                                           3)
                                                                                                                          (("2"
                                                                                                                            (reveal
                                                                                                                             -2
                                                                                                                             -22)
                                                                                                                            (("2"
                                                                                                                              (rewrite
                                                                                                                               "choose_eq_unifies")
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -2)
                                                                                                                                (("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (rewrite
                                                                                                                                       "apply_sub_unifies"
                                                                                                                                       1
                                                                                                                                       :dir
                                                                                                                                       rl)
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "unifies?_append_disjoint3")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "Del"
                                                                                                                                           " gam"
                                                                                                                                           "null"
                                                                                                                                           "apply_sub(del, P1)")
                                                                                                                                          (("2"
                                                                                                                                            (split
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "append"
                                                                                                                                               -1
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (rewrite
                                                                                                                                                   "apply_sub_unifies"
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "append"
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (case
                                                                                                                                               "disjoint?(dom(gam), V)")
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 "subset?(vars(P1), V)")
                                                                                                                                                (("1"
                                                                                                                                                  (hide-all-but
                                                                                                                                                   (-1
                                                                                                                                                    -2
                                                                                                                                                    -16
                                                                                                                                                    1))
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "disjoint?")
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "empty?")
                                                                                                                                                      (("1"
                                                                                                                                                        (skeep)
                                                                                                                                                        (("1"
                                                                                                                                                          (inst?)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             ("member"
                                                                                                                                                              "intersection"))
                                                                                                                                                            (("1"
                                                                                                                                                              (prop)
                                                                                                                                                              (("1"
                                                                                                                                                                (use
                                                                                                                                                                 "apply_sub_vars")
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "subset?")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst?)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         ("member"
                                                                                                                                                                          "union")
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (prop)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (expand
                                                                                                                                                                             "contained?")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (flatten)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "subset?"
                                                                                                                                                                                 -6)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -6
                                                                                                                                                                                   "x")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (inst
                                                                                                                                                                             -2
                                                                                                                                                                             "x")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (case
                                                                                                                                                   "subset?(vars(P), V)")
                                                                                                                                                  (("1"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     (-1
                                                                                                                                                      1))
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "P1"
                                                                                                                                                       1)
                                                                                                                                                      (("1"
                                                                                                                                                        (use
                                                                                                                                                         "choose_eq_vars")
                                                                                                                                                        (("1"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("1"
                                                                                                                                                            (hide
                                                                                                                                                             -2)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "subset?")
                                                                                                                                                              (("1"
                                                                                                                                                                (skeep)
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst?)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst?)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     1)
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       ("P"
                                                                                                                                                        "V"))
                                                                                                                                                      (("2"
                                                                                                                                                        (typepred
                                                                                                                                                         "inp")
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "nice_input?")
                                                                                                                                                          (("2"
                                                                                                                                                            (flatten)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (hide-all-but
                                                                                                                                                 (-9
                                                                                                                                                  1))
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "disjoint?")
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "subset?"
                                                                                                                                                     -1)
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       "empty?")
                                                                                                                                                      (("2"
                                                                                                                                                        (skeep)
                                                                                                                                                        (("2"
                                                                                                                                                          (inst?)
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             ("member"
                                                                                                                                                              "intersection")
                                                                                                                                                             -1)
                                                                                                                                                            (("2"
                                                                                                                                                              (prop)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 ("member"
                                                                                                                                                                  "difference")
                                                                                                                                                                 -1)
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (expand
                                                                                                             "sig1")
                                                                                                            (("3"
                                                                                                              (lemma
                                                                                                               "inst_step_complete_more_general")
                                                                                                              (("3"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "Del"
                                                                                                                 "G"
                                                                                                                 "P0_"
                                                                                                                 "PV"
                                                                                                                 "append(gam, del)"
                                                                                                                 "sig")
                                                                                                                (("3"
                                                                                                                  (assert)
                                                                                                                  (("3"
                                                                                                                    (assert)
                                                                                                                    (("3"
                                                                                                                      (prop)
                                                                                                                      (("1"
                                                                                                                        (hide-all-but
                                                                                                                         (-10
                                                                                                                          1))
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "more_general?")
                                                                                                                          (("1"
                                                                                                                            (skeep)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               1
                                                                                                                               "append(gam, delta2)")
                                                                                                                              (("1"
                                                                                                                                (reveal
                                                                                                                                 -12
                                                                                                                                 -7)
                                                                                                                                (("1"
                                                                                                                                  (lemma
                                                                                                                                   "equal_sub_nominal_AC_fresh_subs_append")
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "Del"
                                                                                                                                     "Del"
                                                                                                                                     "gam"
                                                                                                                                     "del"
                                                                                                                                     "append(delta2, sig)")
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       "append_assoc"
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (use
                                                                                                                                           "nominal_AC_fresh_subs_disjoint_dom")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (hide
                                                                                                                                               -3
                                                                                                                                               2
                                                                                                                                               3)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "disjoint?")
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "empty?")
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "subset?")
                                                                                                                                                    (("1"
                                                                                                                                                      (skeep)
                                                                                                                                                      (("1"
                                                                                                                                                        (inst?)
                                                                                                                                                        (("1"
                                                                                                                                                          (inst?)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               ("member"
                                                                                                                                                                "intersection")
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (flatten)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (grind)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (hide
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "solve_ac_vars2")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "G"
                                                                                                                             "P0_"
                                                                                                                             "P"
                                                                                                                             "PV"
                                                                                                                             "V"
                                                                                                                             "ac_sym(t)"
                                                                                                                             "s"
                                                                                                                             "sig"
                                                                                                                             "t")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (split
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (hide-all-but
                                                                                                                                   (-1
                                                                                                                                    1))
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "disjoint?")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "empty?")
                                                                                                                                      (("1"
                                                                                                                                        (skeep)
                                                                                                                                        (("1"
                                                                                                                                          (inst?)
                                                                                                                                          (("1"
                                                                                                                                            (grind)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (expand
                                                                                                                                   "lst_V"
                                                                                                                                   -5)
                                                                                                                                  (("2"
                                                                                                                                    (rewrite
                                                                                                                                     "first_proj_mem"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (inst?)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("3"
                                                                                                                                  (hide-all-but
                                                                                                                                   1)
                                                                                                                                  (("3"
                                                                                                                                    (typepred
                                                                                                                                     "inp")
                                                                                                                                    (("3"
                                                                                                                                      (expand
                                                                                                                                       "nice_input?")
                                                                                                                                      (("3"
                                                                                                                                        (expand
                                                                                                                                         ("sig"
                                                                                                                                          "V"))
                                                                                                                                        (("3"
                                                                                                                                          (flatten)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("4"
                                                                                                                                  (reveal
                                                                                                                                   -21
                                                                                                                                   -22
                                                                                                                                   -24)
                                                                                                                                  (("4"
                                                                                                                                    (hide-all-but
                                                                                                                                     (-1
                                                                                                                                      -2
                                                                                                                                      -3
                                                                                                                                      1
                                                                                                                                      5))
                                                                                                                                    (("4"
                                                                                                                                      (use
                                                                                                                                       "choose_eq_mem1")
                                                                                                                                      (("4"
                                                                                                                                        (assert)
                                                                                                                                        (("4"
                                                                                                                                          (replace
                                                                                                                                           -4)
                                                                                                                                          (("4"
                                                                                                                                            (case
                                                                                                                                             "up = (t, s)")
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (propax)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (decompose-equality
                                                                                                                                               1)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("5"
                                                                                                                                  (hide-all-but
                                                                                                                                   1)
                                                                                                                                  (("5"
                                                                                                                                    (expand
                                                                                                                                     ("P"
                                                                                                                                      "sig"))
                                                                                                                                    (("5"
                                                                                                                                      (typepred
                                                                                                                                       "inp")
                                                                                                                                      (("5"
                                                                                                                                        (expand
                                                                                                                                         "nice_input?")
                                                                                                                                        (("5"
                                                                                                                                          (flatten)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("4"
                                                                                                            (hide-all-but
                                                                                                             (-9
                                                                                                              -11
                                                                                                              1))
                                                                                                            (("4"
                                                                                                              (expand
                                                                                                               "well_formed?"
                                                                                                               -1)
                                                                                                              (("4"
                                                                                                                (flatten)
                                                                                                                (("4"
                                                                                                                  (rewrite
                                                                                                                   "well_formed_append"
                                                                                                                   1)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("4"
                                                                                                        (case
                                                                                                         "subset?(V1, new_V)")
                                                                                                        (("1"
                                                                                                          (hide-all-but
                                                                                                           (-1
                                                                                                            -8
                                                                                                            1))
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "subset?")
                                                                                                            (("1"
                                                                                                              (skeep)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 ("member"
                                                                                                                  "difference")
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (inst?)
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         ("member"
                                                                                                                          "difference")
                                                                                                                         -3)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           (-5
                                                                                                            1))
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "subset?"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (skeep)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "V1"
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "mem_list2set"
                                                                                                                   :dir
                                                                                                                   rl)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "new_V"
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "vars_lst_lst_vars")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         1
                                                                                                                         "lst_V1")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "sec_proj_mem")
                                                                                                                            (("2"
                                                                                                                              (inst?)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("5"
                                                                                                        (case
                                                                                                         "subset?(V1, new_V)")
                                                                                                        (("1"
                                                                                                          (hide-all-but
                                                                                                           (-1
                                                                                                            -8
                                                                                                            -9
                                                                                                            1))
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "contained?")
                                                                                                            (("1"
                                                                                                              (prop)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "subset?")
                                                                                                                (("1"
                                                                                                                  (skeep)
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    (("1"
                                                                                                                      (inst?)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           ("member"
                                                                                                                            "difference")
                                                                                                                           -2)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "subset?")
                                                                                                                (("2"
                                                                                                                  (skeep)
                                                                                                                  (("2"
                                                                                                                    (inst?)
                                                                                                                    (("2"
                                                                                                                      (inst?)
                                                                                                                      (("2"
                                                                                                                        (inst?)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           (-5
                                                                                                            1))
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "new_V"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "subset?")
                                                                                                              (("2"
                                                                                                                (skeep)
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "vars_lst_lst_vars")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     1
                                                                                                                     "lst_V1")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "V1"
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "mem_list2set"
                                                                                                                         :dir
                                                                                                                         rl)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "sec_proj_mem")
                                                                                                                            (("2"
                                                                                                                              (inst?)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (lemma
                                                                                                       "apply_ac_TCC4")
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         -2
                                                                                                         -3
                                                                                                         -4
                                                                                                         -5
                                                                                                         -8
                                                                                                         -9
                                                                                                         -10
                                                                                                         -11
                                                                                                         -12
                                                                                                         -13
                                                                                                         -14)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "(G, cons((t, s), P1), sig, V, PV)"
                                                                                                           "G"
                                                                                                           "cons((t, s), P1)"
                                                                                                           "sig"
                                                                                                           "V"
                                                                                                           "PV")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (prop)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "t"
                                                                                                                 "s")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "P1")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "lst_V"
                                                                                                                       "ac_results"
                                                                                                                       "new_V"
                                                                                                                       "ac_results_subs")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "every_nth")
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "member((G1, append(PI, apply_sub(sig1, P1)), append(sig1, sig), new_V, PV), input_apply_ac(ac_results_subs, G, P1, sig, new_V, PV))")
                                                                                                                            (("1"
                                                                                                                              (rewrite
                                                                                                                               "member_nth2"
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (skolem
                                                                                                                                 -1
                                                                                                                                 "i")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -2
                                                                                                                                   "i")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -1
                                                                                                                                       :dir
                                                                                                                                       rl)
                                                                                                                                      (("1"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (hide
                                                                                                                               -1
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (rewrite
                                                                                                                                 "input_apply_ac_mem"
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   1
                                                                                                                                   "G1"
                                                                                                                                   "PI"
                                                                                                                                   "sig1")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "ac_results_subs"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (use
                                                                                                                                       "inst_step_mem2")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           1
                                                                                                                                           "P0_")
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "G1"
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "PI"
                                                                                                                                               1)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "sig1"
                                                                                                                                                 1)
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "flag"
                                                                                                                                                   3)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       "ac_results"
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (rewrite
                                                                                                                                                         "first_proj_mem"
                                                                                                                                                         1)
                                                                                                                                                        (("2"
                                                                                                                                                          (inst?)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (reveal
                                                                                                                 -24
                                                                                                                 -25
                                                                                                                 -26)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "ac_prb?"
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               2
                                                                                                               3
                                                                                                               -1
                                                                                                               -2)
                                                                                                              (("2"
                                                                                                                (reveal
                                                                                                                 -33
                                                                                                                 -34
                                                                                                                 -35
                                                                                                                 -36
                                                                                                                 -37
                                                                                                                 -38
                                                                                                                 -39
                                                                                                                 -40
                                                                                                                 -41)
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "inp")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "nice_input?"
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -6
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -6)
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           -7)
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -8)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -9)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -10)
                                                                                                                                (("2"
                                                                                                                                  (hide
                                                                                                                                   -6
                                                                                                                                   -7
                                                                                                                                   -8
                                                                                                                                   -9
                                                                                                                                   -10)
                                                                                                                                  (("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "nice_input?"
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (case
                                                                                                                                           "subset?(vars(cons((t, s), P1)), vars(P))")
                                                                                                                                          (("1"
                                                                                                                                            (prop)
                                                                                                                                            (("1"
                                                                                                                                              (hide-all-but
                                                                                                                                               (-1
                                                                                                                                                -3
                                                                                                                                                1))
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "disjoint?")
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "empty?")
                                                                                                                                                  (("1"
                                                                                                                                                    (skeep)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "subset?")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst?)
                                                                                                                                                        (("1"
                                                                                                                                                          (inst?)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               ("member"
                                                                                                                                                                "intersection")
                                                                                                                                                               1)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 ("member"
                                                                                                                                                                  "intersection")
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (flatten)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (hide-all-but
                                                                                                                                               (-1
                                                                                                                                                -5
                                                                                                                                                1))
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "subset?")
                                                                                                                                                (("2"
                                                                                                                                                  (skeep)
                                                                                                                                                  (("2"
                                                                                                                                                    (inst?)
                                                                                                                                                    (("2"
                                                                                                                                                      (inst?)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("3"
                                                                                                                                              (hide-all-but
                                                                                                                                               (-8
                                                                                                                                                -11
                                                                                                                                                -12
                                                                                                                                                -13
                                                                                                                                                -14
                                                                                                                                                1
                                                                                                                                                2))
                                                                                                                                              (("3"
                                                                                                                                                (rewrite
                                                                                                                                                 "well_formed_unif_prb")
                                                                                                                                                (("3"
                                                                                                                                                  (rewrite
                                                                                                                                                   "well_formed_unif_prb")
                                                                                                                                                  (("3"
                                                                                                                                                    (skolem
                                                                                                                                                     1
                                                                                                                                                     "t1")
                                                                                                                                                    (("3"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("3"
                                                                                                                                                        (inst
                                                                                                                                                         -2
                                                                                                                                                         "t1")
                                                                                                                                                        (("3"
                                                                                                                                                          (assert)
                                                                                                                                                          (("3"
                                                                                                                                                            (expand
                                                                                                                                                             "member"
                                                                                                                                                             -1)
                                                                                                                                                            (("3"
                                                                                                                                                              (split
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (use
                                                                                                                                                                 "choose_eq_mem1")
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -6)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (rewrite
                                                                                                                                                                       "member_unif_prb_equiv")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (inst
                                                                                                                                                                         2
                                                                                                                                                                         "up")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (prop)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (flatten)
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "choose_eq_mem")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     "P"
                                                                                                                                                                     "t1")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("4"
                                                                                                                                              (hide
                                                                                                                                               -1
                                                                                                                                               -2
                                                                                                                                               -3
                                                                                                                                               -4
                                                                                                                                               -5
                                                                                                                                               -6
                                                                                                                                               -7
                                                                                                                                               -8
                                                                                                                                               -9)
                                                                                                                                              (("4"
                                                                                                                                                (expand
                                                                                                                                                 "match_problem?"
                                                                                                                                                 1)
                                                                                                                                                (("4"
                                                                                                                                                  (skolem
                                                                                                                                                   1
                                                                                                                                                   "x")
                                                                                                                                                  (("4"
                                                                                                                                                    (prop)
                                                                                                                                                    (("4"
                                                                                                                                                      (expand
                                                                                                                                                       "rhs"
                                                                                                                                                       -1)
                                                                                                                                                      (("4"
                                                                                                                                                        (expand
                                                                                                                                                         "sec_proj"
                                                                                                                                                         -1)
                                                                                                                                                        (("4"
                                                                                                                                                          (expand
                                                                                                                                                           "vars"
                                                                                                                                                           -1)
                                                                                                                                                          (("4"
                                                                                                                                                            (expand
                                                                                                                                                             ("member"
                                                                                                                                                              "union")
                                                                                                                                                             -1)
                                                                                                                                                            (("4"
                                                                                                                                                              (prop)
                                                                                                                                                              (("1"
                                                                                                                                                                (lemma
                                                                                                                                                                 "choose_eq_vars_rhs2")
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst?)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "s"
                                                                                                                                                                       -2)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "up"
                                                                                                                                                                         -2)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "subset?")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (inst?)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (use
                                                                                                                                                                   "choose_eq_vars_rhs")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (replace
                                                                                                                                                                     -6)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "rhs"
                                                                                                                                                                       -1
                                                                                                                                                                       1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "subset?"
                                                                                                                                                                         -1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (inst?)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "match_problem?"
                                                                                                                                                                               -3)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (inst?)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (hide
                                                                                                                                             2)
                                                                                                                                            (("2"
                                                                                                                                              (hide
                                                                                                                                               -1
                                                                                                                                               -2
                                                                                                                                               -3
                                                                                                                                               -4
                                                                                                                                               -5
                                                                                                                                               -6
                                                                                                                                               -7
                                                                                                                                               -8)
                                                                                                                                              (("2"
                                                                                                                                                (use
                                                                                                                                                 "choose_eq_vars")
                                                                                                                                                (("2"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "subset?")
                                                                                                                                                    (("2"
                                                                                                                                                      (skeep)
                                                                                                                                                      (("2"
                                                                                                                                                        (inst?)
                                                                                                                                                        (("2"
                                                                                                                                                          (inst?)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "vars"
                                                                                                                                                               -1)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 ("member"
                                                                                                                                                                  "union")
                                                                                                                                                                 -1)
                                                                                                                                                                (("2"
                                                                                                                                                                  (propax)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "flag"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "inst_step_unifies_not_fail")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (case
                                                                                             "disjoint?(dom(gam), PV)")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "disjoint?"
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "empty?"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (skeep)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     ("member"
                                                                                                      "intersection")
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (use
                                                                                                         "dom_append")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "subset?")
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 ("member"
                                                                                                                  "union")
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (prop)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "disjoint?"
                                                                                                                     -2)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "empty?")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -2
                                                                                                                         "x")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           ("member"
                                                                                                                            "intersection")
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "disjoint?"
                                                                                                                     -15)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "empty?"
                                                                                                                       -15)
                                                                                                                      (("2"
                                                                                                                        (inst?
                                                                                                                         -15)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           ("member"
                                                                                                                            "intersection")
                                                                                                                           3)
                                                                                                                          (("2"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (case
                                                                                               "subset?(PV, V)")
                                                                                              (("1"
                                                                                                (hide-all-but
                                                                                                 (-1
                                                                                                  -6
                                                                                                  1))
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "disjoint?")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "empty?")
                                                                                                    (("1"
                                                                                                      (skeep)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "subset?")
                                                                                                        (("1"
                                                                                                          (inst?)
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               ("member"
                                                                                                                "intersection")
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (prop)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     ("member"
                                                                                                                      "difference")
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (prop)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   ("PV"
                                                                                                    "V"))
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "inp")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "nice_input?")
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (use
                                                                                             "nominal_AC_fresh_subs_append_subs2")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "disjoint?(dom(gam), V)")
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "subset?(union(vars(G), vars(img(del))), V)")
                                                                                                  (("1"
                                                                                                    (hide-all-but
                                                                                                     (-1
                                                                                                      -2
                                                                                                      1))
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "disjoint?")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "empty?")
                                                                                                        (("1"
                                                                                                          (skeep)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "subset?")
                                                                                                            (("1"
                                                                                                              (inst?)
                                                                                                              (("1"
                                                                                                                (inst?)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   ("member"
                                                                                                                    "intersection")
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     (-14
                                                                                                      1))
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "subset?")
                                                                                                      (("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           ("member"
                                                                                                            "union")
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (prop)
                                                                                                            (("1"
                                                                                                              (typepred
                                                                                                               "inp")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "nice_input?")
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     ("G"
                                                                                                                      "V"))
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "subset?"
                                                                                                                       -5)
                                                                                                                      (("1"
                                                                                                                        (inst?)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (expand
                                                                                                               "contained?")
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "subset?"
                                                                                                                   -3)
                                                                                                                  (("2"
                                                                                                                    (inst?)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   (-5
                                                                                                    1))
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "disjoint?")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "empty?")
                                                                                                      (("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "subset?")
                                                                                                          (("2"
                                                                                                            (inst?)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               ("member"
                                                                                                                "intersection")
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     ("member"
                                                                                                                      "difference")
                                                                                                                     -3)
                                                                                                                    (("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (use
                                                                                         "solve_ac_well_formed")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (case
                                                                                             "well_formed?(P)")
                                                                                            (("1"
                                                                                              (reveal
                                                                                               -18
                                                                                               -19
                                                                                               -21)
                                                                                              (("1"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "first_proj_mem"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (use
                                                                                                   "choose_eq_well_formed")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -4)
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "well_formed?"
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (use
                                                                                                   "choose_eq_well_formed")
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    (("3"
                                                                                                      (flatten)
                                                                                                      (("3"
                                                                                                        (replace
                                                                                                         -5)
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "well_formed?"
                                                                                                           -1)
                                                                                                          (("3"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "P")
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "inp")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "nice_input?")
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (lemma
                                                                                       "solve_ac_match_condition")
                                                                                      (("2"
                                                                                        (inst?)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "P0_")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "first_proj_mem"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (reveal
                                                                                                 -18
                                                                                                 -21)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "choose_eq_vars_rhs2")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "P"
                                                                                                     "PV")
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -3)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -2)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (hide-all-but
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               ("P"
                                                                                                                "PV"))
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 "inp")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "nice_input?")
                                                                                                                  (("2"
                                                                                                                    (flatten)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (case
                                                                                                 "subset?(vars(t, s), vars(P))")
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "subset?(vars(P), V)")
                                                                                                  (("1"
                                                                                                    (hide-all-but
                                                                                                     (-1
                                                                                                      -2
                                                                                                      1))
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "subset?")
                                                                                                      (("1"
                                                                                                        (skeep)
                                                                                                        (("1"
                                                                                                          (inst?)
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       ("P"
                                                                                                        "V"))
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "inp")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "nice_input?")
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (reveal
                                                                                                   -18
                                                                                                   -19
                                                                                                   -21)
                                                                                                  (("2"
                                                                                                    (hide-all-but
                                                                                                     (-1
                                                                                                      -2
                                                                                                      -3
                                                                                                      1))
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "choose_eq_vars")
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -5)
                                                                                                          (("2"
                                                                                                            (case
                                                                                                             "up = (t, s)")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (decompose-equality
                                                                                                               1)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (reveal
                                                               -2
                                                               -3
                                                               -5)
                                                              (("2"
                                                                (rewrite
                                                                 "choose_eq_unifies"
                                                                 -13)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (replace
                                                                     -3)
                                                                    (("2"
                                                                      (case
                                                                       "up = (t, s)")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (decompose-equality
                                                                         1)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (expand
                                                               "is_ac_sym?"
                                                               1)
                                                              (("3"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (expand
                                                               "is_ac_sym?"
                                                               1)
                                                              (("4"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("5"
                                                              (expand
                                                               "contained?"
                                                               -14)
                                                              (("5"
                                                                (flatten)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("6"
                                                              (expand
                                                               "contained?"
                                                               -14)
                                                              (("6"
                                                                (flatten)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("7"
                                                              (case
                                                               "subset?(vars(t, s), vars(P))")
                                                              (("1"
                                                                (case
                                                                 "subset?(vars(P), V)")
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -2
                                                                    1))
                                                                  (("1"
                                                                    (expand
                                                                     "subset?")
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (prop)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     ("P"
                                                                      "V"))
                                                                    (("2"
                                                                      (typepred
                                                                       "inp")
                                                                      (("2"
                                                                        (expand
                                                                         "nice_input?")
                                                                        (("2"
                                                                          (flatten)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (reveal
                                                                 -2
                                                                 -3
                                                                 -4
                                                                 -5)
                                                                (("2"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -2
                                                                    -3
                                                                    -4
                                                                    1))
                                                                  (("2"
                                                                    (use
                                                                     "choose_eq_vars")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (replace
                                                                         -6)
                                                                        (("2"
                                                                          (case
                                                                           "up = (t, s)")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (decompose-equality
                                                                             1)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("8"
                                                              (expand
                                                               "well_formed?"
                                                               1)
                                                              (("8"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("9"
                                                              (case
                                                               "well_formed?(P)")
                                                              (("1"
                                                                (reveal
                                                                 -2
                                                                 -3
                                                                 -5)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -2
                                                                    -3
                                                                    -4
                                                                    1))
                                                                  (("1"
                                                                    (use
                                                                     "choose_eq_well_formed")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "P")
                                                                  (("2"
                                                                    (typepred
                                                                     "inp")
                                                                    (("2"
                                                                      (expand
                                                                       "nice_input?")
                                                                      (("2"
                                                                        (flatten)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("10"
                                                              (hide-all-but
                                                               1)
                                                              (("10"
                                                                (expand
                                                                 ("PV"
                                                                  "V"))
                                                                (("10"
                                                                  (typepred
                                                                   "inp")
                                                                  (("10"
                                                                    (expand
                                                                     "nice_input?")
                                                                    (("10"
                                                                      (flatten)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("11"
                                                              (hide-all-but
                                                               1)
                                                              (("11"
                                                                (expand
                                                                 ("G"
                                                                  "V"))
                                                                (("11"
                                                                  (typepred
                                                                   "inp")
                                                                  (("11"
                                                                    (expand
                                                                     "nice_input?")
                                                                    (("11"
                                                                      (flatten)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace
                                                         -5
                                                         1
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (rewrite
                                                             "subset_antisymmetric")
                                                            (("1"
                                                              (expand
                                                               "subset?")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (rewrite
                                                                   "mem_list2set"
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (rewrite
                                                                     "finset2list_mem")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "subset?")
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (rewrite
                                                                   "mem_list2set"
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (rewrite
                                                                     "finset2list_mem")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "ac_prb?" -2)
                                  (("2" (flatten) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((choose_eq def-decl "[unif_pair, unif_prb]" nominal_AC_ac_step nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (choose_eq_nice_input formula-decl nil nominal_AC_ac_step nil)
    (member def-decl "bool" list_props nil)
    (apply_ac const-decl "list[nice_input]" nominal_AC_ac_step nil)
    (is_sol? const-decl "bool" nominal_AC_unification nil)
    (choose_eq_unifies formula-decl nil nominal_AC_ac_step nil)
    (append def-decl "list[T]" list_props nil)
    (well_formed_null formula-decl nil nominal_AC_substitution nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (dom_null formula-decl nil nominal_AC_substitution nil)
    (finite_difference application-judgement "finite_set" finite_sets
     nil)
    (subset? const-decl "bool" sets nil)
    (difference const-decl "set" sets nil)
    (contained? const-decl "bool" nominal_AC_substitution nil)
    (img_null formula-decl nil nominal_AC_substitution nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (solve_ac const-decl "list[ac_sol]" aux_nominal_AC_unification nil)
    (ac_sol type-eq-decl nil aux_nominal_AC_unification nil)
    (string type-eq-decl nil strings nil)
    (first_proj def-decl "list[T1]" list_aux_equational_reasoning2 nil)
    (nominal_AC_inst_step def-decl "list[[fresh_context, unif_prb, sub]]"
     nominal_AC_inst_step nil)
    (solve_ac_complete formula-decl nil aux_nominal_AC_unification nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (finset2list_mem formula-decl nil list_aux_equational_reasoning nil)
    (solve_ac_well_formed formula-decl nil aux_nominal_AC_unification nil)
    (choose_eq_well_formed formula-decl nil nominal_AC_ac_step nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (nominal_AC_fresh_subs def-decl "bool" nominal_AC_fresh_subs nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (sec_proj_mem formula-decl nil list_aux_equational_reasoning2 nil)
    (vars_lst_lst_vars formula-decl nil nominal_AC_term_properties nil)
    (mem_list2set formula-decl nil list_aux_equational_reasoning nil)
    (well_formed_append formula-decl nil nominal_AC_substitution nil)
    (choose_eq_mem1 formula-decl nil nominal_AC_ac_step nil)
    (solve_ac_vars2 formula-decl nil aux_nominal_AC_unification nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (nominal_AC_fresh_subs_disjoint_dom formula-decl nil nominal_AC_fresh_subs nil)
    (append_assoc formula-decl nil list_props nil)
    (equal_sub_nominal_AC_fresh_subs_append formula-decl nil nominal_AC_fresh_subs nil)
    (inst_step_complete_more_general formula-decl nil nominal_AC_inst_step nil)
    (unifies?_append formula-decl nil nominal_AC_unification nil)
    (unifies?_equal formula-decl nil nominal_AC_unification nil)
    (inst_step_complete_equal formula-decl nil nominal_AC_inst_step nil)
    (unifies?_append_disjoint3 formula-decl nil nominal_AC_unification nil)
    (apply_sub_vars formula-decl nil nominal_AC_unification nil)
    (union const-decl "set" sets nil)
    (choose_eq_vars formula-decl nil nominal_AC_ac_step nil)
    (apply_sub_unifies formula-decl nil nominal_AC_unification nil)
    (inst_step_complete_unifies formula-decl nil nominal_AC_inst_step nil)
    (inst_step_complete_nominal_AC_fresh_subs formula-decl nil nominal_AC_inst_step nil)
    (inst_step_mem2 formula-decl nil nominal_AC_inst_step nil)
    (first_proj_mem formula-decl nil list_aux_equational_reasoning2 nil)
    (input_apply_ac_mem formula-decl nil nominal_AC_ac_step nil)
    (pre_nice_input type-eq-decl nil nominal_AC_ac_step nil)
    (well_formed_unif_prb formula-decl nil nominal_AC_unification nil)
    (choose_eq_mem formula-decl nil nominal_AC_ac_step nil)
    (member_unif_prb_equiv formula-decl nil nominal_AC_unification nil)
    (match_problem? const-decl "bool" nominal_AC_unification nil)
    (choose_eq_vars_rhs formula-decl nil nominal_AC_ac_step nil)
    (choose_eq_vars_rhs2 formula-decl nil nominal_AC_ac_step nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (member_nth2 formula-decl nil list_aux_equational_reasoning nil)
    (every_nth formula-decl nil list_props nil)
    (input_apply_ac def-decl "list[pre_nice_input]" nominal_AC_ac_step nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (apply_ac_TCC4 subtype-tcc nil nominal_AC_ac_step nil)
    (inst_step_unifies_not_fail formula-decl nil nominal_AC_inst_step nil)
    (nominal_AC_fresh_subs_append_subs2 formula-decl nil nominal_AC_fresh_subs nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (vars def-decl "finite_set[variable]" nominal_AC_freshness nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (dom_append formula-decl nil nominal_AC_substitution nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (solve_ac_match_condition formula-decl nil aux_nominal_AC_unification nil)
    (nominal_AC_inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     nominal_AC_inst_step nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (list2set def-decl "set[T]" list2set nil)
    (ac_prb? const-decl "bool" nominal_AC_unification nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2 nil)
    (finset2list def-decl "list[T]" list_aux_equational_reasoning nil)
    (nice_input type-eq-decl nil nominal_AC_ac_step nil)
    (nice_input? const-decl "bool" nominal_AC_ac_step nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   shostak))
 (apply_ac_complete2 0
  (apply_ac_complete2-1 nil 3888695704
   ("" (skolem 1 ("Del" "del" "inp"))
    (("" (assert)
      (("" (name-replace "G" "inp`1")
        (("" (name-replace "P" "inp`2")
          (("" (name-replace "sig" "inp`3")
            (("" (name-replace "V" "inp`4")
              (("" (name-replace "PV" "inp`5")
                (("" (name-replace "up" "choose_eq(P)`1")
                  (("" (name-replace "P1" "choose_eq(P)`2")
                    (("" (name-replace "t" "up`1")
                      (("" (name-replace "s" "up`2")
                        (("" (flatten)
                          (("" (lemma "apply_ac_complete")
                            (("" (inst -1 "Del" "del" "inp")
                              ((""
                                (assert)
                                ((""
                                  (reveal -2 -3 -4 -5 -6 -7 -8 -9 -10)
                                  ((""
                                    (assert)
                                    ((""
                                      (skolem -10 ("gam" "inp1"))
                                      ((""
                                        (replace -9 :hide? t)
                                        ((""
                                          (replace -5 :hide? t)
                                          ((""
                                            (replace -6 :hide? t)
                                            ((""
                                              (replace -5 :hide? t)
                                              ((""
                                                (replace -5 :hide? t)
                                                ((""
                                                  (replace -4)
                                                  ((""
                                                    (replace -3)
                                                    ((""
                                                      (replace -2)
                                                      ((""
                                                        (replace -1)
                                                        ((""
                                                          (flatten)
                                                          ((""
                                                            (inst
                                                             2
                                                             "gam"
                                                             "inp1")
                                                            ((""
                                                              (assert)
                                                              ((""
                                                                (case
                                                                 "subset?(V, inp1`4)")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (rewrite
                                                                     "contained_append")
                                                                    (("1"
                                                                      (hide-all-but
                                                                       (-1
                                                                        -13
                                                                        1))
                                                                      (("1"
                                                                        (expand
                                                                         "contained?")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (expand
                                                                               "subset?")
                                                                              (("1"
                                                                                (skeep)
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "subset?")
                                                                              (("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      -14
                                                                      1))
                                                                    (("2"
                                                                      (expand
                                                                       "subset?")
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide-all-but
                                                                     (-9
                                                                      -13
                                                                      1))
                                                                    (("3"
                                                                      (expand
                                                                       "equal?"
                                                                       1)
                                                                      (("3"
                                                                        (skolem
                                                                         1
                                                                         "x")
                                                                        (("3"
                                                                          (flatten)
                                                                          (("3"
                                                                            (expand
                                                                             "subs"
                                                                             1)
                                                                            (("3"
                                                                              (rewrite
                                                                               "subs_append2")
                                                                              (("3"
                                                                                (name-replace
                                                                                 "u"
                                                                                 "subs(del)(null * x)")
                                                                                (("3"
                                                                                  (use
                                                                                   "subs_no_effect_t")
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (use
                                                                                           "equal?_ref")
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "u"
                                                                                         1)
                                                                                        (("2"
                                                                                          (use
                                                                                           "vars_subs_t")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "disjoint?"
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "empty?"
                                                                                               1)
                                                                                              (("2"
                                                                                                (skolem
                                                                                                 1
                                                                                                 "y")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   ("member"
                                                                                                    "intersection")
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "subset?"
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (inst?)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             ("member"
                                                                                                              "union")
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "subset?"
                                                                                                               -5)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -5
                                                                                                                 "y")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     ("member"
                                                                                                                      "difference")
                                                                                                                     -5)
                                                                                                                    (("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (prop)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "contained?"
                                                                                                                           -6)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "subset?"
                                                                                                                               -7)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -7
                                                                                                                                 "y")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "apply_ac_vars2")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "(G, cons((t, s), P1), sig, V, PV)"
                                                                     "inp1")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nice_input? const-decl "bool" nominal_AC_ac_step nil)
    (nice_input type-eq-decl nil nominal_AC_ac_step nil)
    (apply_ac_complete formula-decl nil nominal_AC_ac_step nil)
    (subset? const-decl "bool" sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (difference const-decl "set" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (vars_subs_t formula-decl nil nominal_AC_substitution nil)
    (equal?_ref formula-decl nil nominal_AC_equality nil)
    (subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (contained_append formula-decl nil nominal_AC_substitution nil)
    (contained? const-decl "bool" nominal_AC_substitution nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (apply_ac_vars2 formula-decl nil nominal_AC_ac_step nil)
    (finite_difference application-judgement "finite_set" finite_sets
     nil)
    (choose_eq def-decl "[unif_pair, unif_prb]" nominal_AC_ac_step nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   shostak)))

