(nominal_AC_unification
 (member_TCC1 0
  (member_TCC1-1 nil 3827268617 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil))
   nil
   (member subtype "nominal_AC_unification.unif_prb"
     "(list_adt[unif_pair].cons?)")))
 (member_TCC2 0
  (member_TCC2-1 nil 3827268617 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil))
   nil
   (member termination
           "nominal_AC_unification.member(nominal_AC_unification.t, list_adt[unif_pair].cdr(nominal_AC_unification.unif_prb))"
     "nil")))
 (member_TCC3 0
  (member_TCC3-1 nil 3827268617 ("" (subtype-tcc) nil nil) nil nil
   (member subtype "nominal_AC_unification.unif_prb"
     "(list_adt[unif_pair].cons?)")))
 (member_TCC4 0
  (member_TCC4-1 nil 3827268617 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil))
   nil
   (member subtype "nominal_AC_unification.lst_unif_prb"
     "(list_adt[nominal_AC_unification.unif_prb].cons?)")))
 (member_TCC5 0
  (member_TCC5-1 nil 3827268617 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil))
   nil
   (member termination
           "nominal_AC_unification.member(nominal_AC_unification.t, list_adt[nominal_AC_unification.unif_prb].cdr(nominal_AC_unification.lst_unif_prb))"
     "nil")))
 (member_TCC6 0
  (member_TCC6-1 nil 3827268617 ("" (subtype-tcc) nil nil) nil nil
   (member subtype "nominal_AC_unification.lst_unif_prb"
     "(list_adt[nominal_AC_unification.unif_prb].cons?)")))
 (vars_TCC1 0
  (vars_TCC1-1 nil 3823281024 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)) nil
   (vars termination
    "nominal_AC_unification.vars(list_adt[unif_pair].cdr(nominal_AC_unification.unif_prb))"
    "nil")))
 (vars_TCC2 0
  (vars_TCC2-1 nil 3830541001 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)) nil
   (vars termination
    "nominal_AC_unification.vars(list_adt[nominal_AC_unification.unif_prb].cdr(nominal_AC_unification.lst_unif_prb))"
    "nil")))
 (select_greater_TCC1 0
  (select_greater_TCC1-1 nil 3837702470 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (select_greater const-decl "nominal_AC_term" nominal_AC_unification nil))
   nil
   (select_greater termination
    "nominal_AC_unification.select_greater(list_adt[unif_pair].cdr(nominal_AC_unification.unif_prb))"
    "nil")))
 (decompose_TCC1 0
  (decompose_TCC2-1 nil 3850474952 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (<< adt-def-decl "(strict_well_founded?[nominal_AC_term])" nominal_AC_term_adt nil))
   nil
   (decompose termination
    "nominal_AC_unification.decompose(nominal_AC_term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].term2(nominal_AC_unification.t), nominal_AC_term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].term2(nominal_AC_unification.s))"
    "nil")))
 (decompose_TCC2 0
  (decompose_TCC1-1 nil 3850474952 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (<< adt-def-decl "(strict_well_founded?[nominal_AC_term])" nominal_AC_term_adt nil))
   nil
   (decompose termination
    "nominal_AC_unification.decompose(nominal_AC_term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].term1(nominal_AC_unification.t), nominal_AC_term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].term1(nominal_AC_unification.s))"
    "nil")))
 (first_proj_unif_prb 0
  (first_proj_unif_prb-1 nil 3836595772
   ("" (induct "args1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "pareate" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "first_proj" 2 1)
                  (("2" (inst -1 "cdr(args2)") (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (pareate def-decl "list[[T, T]]" list_aux_equational_reasoning nil)
    (first_proj def-decl "list[T1]" list_aux_equational_reasoning2parameters nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil))
   shostak))
 (member_unif_prb_equiv 0
  (member_unif_prb_equiv-1 nil 3827331147
   ("" (induct "unif_prb")
    (("1" (skeep)
      (("1" (prop)
        (("1" (hide 1) (("1" (grind) nil nil)) nil)
         ("2" (skolem -1 "unif_pair1")
          (("2" (hide 1)
            (("2" (flatten)
              (("2" (hide -1) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (expand "member" -1)
              (("1" (split)
                (("1" (hide -2)
                  (("1" (inst 1 "hd") (("1" (grind) nil nil)) nil))
                  nil)
                 ("2" (flatten)
                  (("2" (inst -2 "t")
                    (("2" (assert)
                      (("2" (skolem -2 "unif_pair1")
                        (("2" (inst 3 "unif_pair1")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem -1 "unif_pair1")
              (("2" (flatten)
                (("2" (expand "member" -2)
                  (("2" (split -2)
                    (("1" (hide -3) (("1" (grind) nil nil)) nil)
                     ("2" (inst -3 "t")
                      (("2" (flatten)
                        (("2" (hide -3)
                          (("2" (split -3)
                            (("1" (grind) nil nil)
                             ("2" (inst 1 "unif_pair1")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (member def-decl "bool" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (member_unif_prb_append 0
  (member_unif_prb_append-1 nil 3828518065
   ("" (induct "unif_prb1")
    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (append def-decl "list[T]" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (member_unif_prb_append2 0
  (member_unif_prb_append2-1 nil 3884179746
   ("" (induct "unif_prb1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skolem 1 ("up" "P2"))
          (("2" (expand "append" 1)
            (("2" (inst -1 "up" "P2") (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (append def-decl "list[T]" list_props nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (member_lst_unif_prb_equiv 0
  (member_lst_unif_prb_equiv-1 nil 3827436365
   ("" (induct "lst_unif_prb")
    (("1" (skeep)
      (("1" (prop)
        (("1" (hide 1) (("1" (grind) nil nil)) nil)
         ("2" (skolem -1 "unif_prb1")
          (("2" (flatten)
            (("2" (hide-all-but -2) (("2" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (expand "member" -1)
              (("1" (prop)
                (("1" (inst 1 "hd") (("1" (grind) nil nil)) nil)
                 ("2" (inst -2 "t")
                  (("2" (assert)
                    (("2" (skolem -2 "unif_prb1")
                      (("2" (inst 1 "unif_prb1")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem -1 "unif_prb1")
              (("2" (prop)
                (("2" (expand "member" -2)
                  (("2" (prop)
                    (("1" (grind) nil nil)
                     ("2" (inst -3 "t")
                      (("2" (flatten)
                        (("2" (hide -3)
                          (("2" (prop)
                            (("1" (grind) nil nil)
                             ("2" (inst 1 "unif_prb1")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (is_finite_mem_unif_prb 0
  (is_finite_mem_unif_prb-1 nil 3834828190
   ("" (measure-induct "length(unif_prb)" "unif_prb")
    (("" (skolem 1 "unif_prb1")
      (("" (prop)
        (("" (case "null?(unif_prb1)")
          (("1" (hide -2)
            (("1" (case "{t | member(t, unif_prb1)} = emptyset")
              (("1" (replace -1)
                (("1" (rewrite "finite_emptyset") nil nil)) nil)
               ("2" (hide 2)
                (("2" (rewrite "subset_antisymmetric")
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2"
            (case "{t | member(t, unif_prb1)} = add(car(unif_prb1)`1, add(car(unif_prb1)`2, {t | member(t, cdr(unif_prb1))}))")
            (("1" (replace -1)
              (("1" (hide -1 -2)
                (("1" (lemma "finite_add[nominal_AC_term]")
                  (("1" (inst?)
                    (("1" (hide 3)
                      (("1" (lemma "finite_add[nominal_AC_term]")
                        (("1" (inst?)
                          (("1" (hide 2)
                            (("1" (reveal -3)
                              (("1"
                                (inst -1 "cdr(unif_prb1)")
                                (("1" (grind) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -1 3)
              (("2" (decompose-equality 1) (("2" (grind) nil nil))
                nil))
              nil)
             ("3" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset judgement-tcc nil finite_sets nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (finite_add formula-decl nil finite_sets nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (injective? const-decl "bool" functions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (member_lhs_rhs 0
  (member_lhs_rhs-1 nil 3832859176
   ("" (induct "unif_prb")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop) (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((sec_proj def-decl "list[T2]" list_aux_equational_reasoning2parameters nil)
    (first_proj def-decl "list[T1]" list_aux_equational_reasoning2parameters nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (lhs const-decl "args" nominal_AC_unification nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (member def-decl "bool" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (lhs_rhs_len 0
  (lhs_rhs_len-1 nil 3886593668
   ("" (induct "P") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((first_proj def-decl "list[T1]" list_aux_equational_reasoning2parameters nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2parameters nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (lhs const-decl "args" nominal_AC_unification nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (member_lhs_pareate 0
  (member_lhs_pareate-1 nil 3832929998
   ("" (induct "args1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "pareate" -2)
            (("2" (lift-if)
              (("2" (split)
                (("1" (flatten)
                  (("1" (expand "lhs" -2)
                    (("1" (expand "first_proj" -2)
                      (("1" (expand "member" -2)
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "lhs" -1)
                    (("2" (expand "first_proj" -1)
                      (("2" (expand "member" -1)
                        (("2" (prop)
                          (("1" (grind) nil nil)
                           ("2" (inst? -2)
                            (("2" (inst -2 "t")
                              (("2"
                                (expand "lhs" -2)
                                (("2"
                                  (assert)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (first_proj def-decl "list[T1]" list_aux_equational_reasoning2parameters nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (pareate def-decl "list[[T, T]]" list_aux_equational_reasoning nil)
    (lhs const-decl "args" nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil))
   shostak))
 (lhs_pareate 0
  (lhs_pareate-1 nil 3884881702
   ("" (induct "args1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (flatten)
        (("2" (skeep)
          (("2" (expand "pareate" 1 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (hide -2) (("1" (grind) nil nil)) nil)
                 ("2" (expand "lhs" 2 1)
                  (("2" (expand "first_proj" 2 1)
                    (("2" (decompose-equality 2)
                      (("2" (inst -1 "cdr(args2)")
                        (("2" (expand "lhs" -1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (first_proj def-decl "list[T1]" list_aux_equational_reasoning2parameters nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (pareate def-decl "list[[T, T]]" list_aux_equational_reasoning nil)
    (lhs const-decl "args" nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil))
   shostak))
 (rhs_pareate 0
  (rhs_pareate-1 nil 3886605522
   ("" (induct "args1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (flatten)
        (("2" (skeep)
          (("2" (expand "pareate" 1 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (hide -2) (("1" (grind) nil nil)) nil)
                 ("2" (expand "rhs" 2 1)
                  (("2" (expand "sec_proj" 2 1)
                    (("2" (decompose-equality 2)
                      (("2" (inst -1 "cdr(args2)")
                        (("2" (expand "rhs" -1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2parameters nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (pareate def-decl "list[[T, T]]" list_aux_equational_reasoning nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil))
   shostak))
 (member_rhs_pareate 0
  (member_rhs_pareate-1 nil 3832945912
   ("" (induct "args1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "pareate" -2)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (hide-all-but -2) (("1" (grind) nil nil)) nil)
                 ("2" (expand "rhs" -1)
                  (("2" (expand "sec_proj")
                    (("2" (expand "member" -1)
                      (("2" (prop)
                        (("1" (hide -2) (("1" (grind) nil nil)) nil)
                         ("2" (inst -2 "cdr(args2)" "t")
                          (("2" (assert) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2parameters nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (pareate def-decl "list[[T, T]]" list_aux_equational_reasoning nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil))
   shostak))
 (member_rhs_append 0
  (member_rhs_append-1 nil 3882517952
   ("" (skeep)
    (("" (expand "rhs")
      (("" (prop)
        (("1" (rewrite "sec_proj_append") (("1" (prop) nil nil)) nil)
         ("2" (rewrite "sec_proj_append") (("2" (prop) nil nil)) nil)
         ("3" (rewrite "sec_proj_append") (("3" (prop) nil nil)) nil))
        nil))
      nil))
    nil)
   ((rhs const-decl "args" nominal_AC_unification nil)
    (sec_proj_append formula-decl nil list_aux_equational_reasoning2parameters nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil))
   shostak))
 (member_lhs_append 0
  (member_lhs_append-1 nil 3882517992
   ("" (induct "unif_prb1")
    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (first_proj def-decl "list[T1]" list_aux_equational_reasoning2parameters nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (append def-decl "list[T]" list_props nil)
    (lhs const-decl "args" nominal_AC_unification nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (vars_unif_prb 0
  (vars_unif_prb-1 nil 3827693007
   ("" (induct "unif_prb")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (expand "vars" -1)
              (("1" (expand "union" -1)
                (("1" (expand "member" -1 1)
                  (("1" (prop)
                    (("1" (expand "vars" -1)
                      (("1" (expand "member" -1)
                        (("1" (expand "union" -1)
                          (("1" (prop)
                            (("1" (inst 1 "hd`1")
                              (("1" (grind) nil nil)) nil)
                             ("2" (inst 1 "hd`2")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst -2 "X")
                      (("2" (assert)
                        (("2" (skeep)
                          (("2" (inst 1 "t") (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (expand "member" -1)
                (("2" (prop)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)
                   ("3" (inst -3 "X")
                    (("3" (assert)
                      (("3" (flatten)
                        (("3" (hide -3)
                          (("3" (prop)
                            (("1" (expand "member" 3)
                              (("1"
                                (expand "vars" 3)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (inst 1 "t") (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (union const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (vars_unif_prb_append 0
  (vars_unif_prb_append-1 nil 3882602560
   ("" (skeep)
    (("" (prop)
      (("1" (rewrite "vars_unif_prb")
        (("1" (skeep)
          (("1" (rewrite "member_unif_prb_append")
            (("1" (rewrite "vars_unif_prb")
              (("1" (rewrite "vars_unif_prb")
                (("1" (prop)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (rewrite "vars_unif_prb")
        (("2" (rewrite "vars_unif_prb")
          (("2" (skeep)
            (("2" (inst 1 "t")
              (("2" (assert)
                (("2" (rewrite "member_unif_prb_append") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (rewrite "vars_unif_prb")
        (("3" (rewrite "vars_unif_prb")
          (("3" (skeep)
            (("3" (inst 1 "t")
              (("3" (assert)
                (("3" (rewrite "member_unif_prb_append") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (member_unif_prb_append formula-decl nil nominal_AC_unification nil)
    (append def-decl "list[T]" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (vars_unif_prb formula-decl nil nominal_AC_unification nil))
   shostak))
 (vars_lst_unif_prb 0
  (vars_lst_unif_prb-1 nil 3837780831
   ("" (induct "lst_unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (expand "member" -1)
              (("1" (expand "vars" -1)
                (("1" (expand "union" -1)
                  (("1" (prop)
                    (("1" (rewrite "vars_unif_prb")
                      (("1" (skolem -1 "t")
                        (("1" (inst 1 "t") (("1" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst -2 "X") (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem -1 "t")
              (("2" (prop)
                (("2" (expand "member" -1)
                  (("2" (prop)
                    (("1" (expand "member" 1)
                      (("1" (expand "vars" 1)
                        (("1" (expand "union" 1)
                          (("1" (prop)
                            (("1" (rewrite "vars_unif_prb")
                              (("1"
                                (inst 1 "t")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "member" 1)
                      (("2" (expand "vars" 1)
                        (("2" (expand "union" 1)
                          (("2" (prop)
                            (("2" (inst -3 "X") (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((union const-decl "set" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (vars_unif_prb formula-decl nil nominal_AC_unification nil)
    (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (lst_vars_append 0
  (lst_vars_append-1 nil 3830546802
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "append" 1 1)
            (("2" (expand "lst_vars" 1 1)
              (("2" (expand "lst_vars" 1 3)
                (("2" (rewrite "append_assoc")
                  (("2" (inst? -1) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lst_vars const-decl "list[variable]" nominal_AC_unification nil)
    (append_assoc formula-decl nil list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (append def-decl "list[T]" list_props nil)
    (lst_vars def-decl "list[variable]" nominal_AC_unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (vars_lst_vars_unif_prb 0
  (vars_lst_vars_unif_prb-1 nil 3830541084
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (lemma "subset_antisymmetric[variable]")
          (("2"
            (inst -1 "vars(cons(hd, tail))" "lst_vars(cons(hd, tail))")
            (("2" (prop)
              (("1" (hide 2)
                (("1" (expand "subset?" 1)
                  (("1" (skeep)
                    (("1" (expand "vars" -1)
                      (("1" (expand "member" -1)
                        (("1" (expand "union" -1)
                          (("1" (prop)
                            (("1" (expand "lst_vars" 1)
                              (("1"
                                (lemma "lst2set_append_mem[variable]")
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "vars" -1)
                                        (("1"
                                          (expand "union" -1)
                                          (("1"
                                            (expand "member" -1 1)
                                            (("1"
                                              (expand "lst_vars" 1)
                                              (("1"
                                                (hide 2 3)
                                                (("1"
                                                  (lemma
                                                   "lst2set_append_mem[variable]")
                                                  (("1"
                                                    (inst? -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (rewrite
                                                             "vars_lst_vars")
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "vars_lst_vars")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -2 -1)
                              (("2"
                                (hide -2)
                                (("2"
                                  (expand "lst_vars" 1)
                                  (("2"
                                    (lemma
                                     "lst2set_append_mem[variable]")
                                    (("2"
                                      (inst? -1)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "subset?" 1)
                  (("2" (skeep)
                    (("2" (expand "lst_vars" -1)
                      (("2" (lemma "lst2set_append_mem[variable]")
                        (("2" (inst? -1)
                          (("2" (assert)
                            (("2" (prop)
                              (("1"
                                (hide -2)
                                (("1"
                                  (expand "vars" 1)
                                  (("1"
                                    (expand "member" 1)
                                    (("1"
                                      (expand "union" 1)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (expand "lst_vars" -1)
                                          (("1"
                                            (expand "vars" 1)
                                            (("1"
                                              (expand "member" 1)
                                              (("1"
                                                (expand "union" 1)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (hide 3)
                                                    (("1"
                                                      (rewrite
                                                       "lst2set_append_mem")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (rewrite
                                                           "vars_lst_vars")
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           "vars_lst_vars")
                                                          (("2"
                                                            (rewrite
                                                             "vars_lst_vars")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -3 :dir rl)
                                (("2"
                                  (hide -2 -3)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_antisymmetric formula-decl nil sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (lst_vars const-decl "list[variable]" nominal_AC_unification nil)
    (vars_lst_vars formula-decl nil nominal_AC_term_properties nil)
    (lst_vars def-decl "list[variable]" nominal_AC_term_properties nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (lst2set_append_mem formula-decl nil list_aux_equational_reasoning nil)
    (member const-decl "bool" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (lst_vars def-decl "list[variable]" nominal_AC_unification nil)
    (list2set def-decl "set[T]" list2set nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (vars_lst_vars_flatten_lst_unif_prb 0
  (vars_lst_vars_flatten_lst_unif_prb-1 nil 3830545936
   ("" (induct "lst_unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (lemma "vars_lst_vars_unif_prb")
          (("2" (inst -1 "hd")
            (("2" (lemma "subset_antisymmetric[variable]")
              (("2"
                (inst -1 "vars(cons(hd, tail))"
                 "list2set(lst_vars(flatten(cons(hd, tail))))")
                (("2" (assert)
                  (("2" (prop)
                    (("1" (expand "subset?" 1)
                      (("1" (skeep)
                        (("1" (expand "member" -1)
                          (("1" (expand "vars" -1)
                            (("1" (expand "union" -1)
                              (("1"
                                (expand "flatten" 1)
                                (("1"
                                  (rewrite "lst_vars_append")
                                  (("1"
                                    (rewrite "lst2set_append_mem")
                                    (("1"
                                      (prop)
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "subset?" 1)
                      (("2" (skeep)
                        (("2" (expand "vars" 1)
                          (("2" (expand "member" 1)
                            (("2" (expand "union" 1)
                              (("2"
                                (prop)
                                (("2"
                                  (expand "flatten" -1)
                                  (("2"
                                    (rewrite "lst_vars_append")
                                    (("2"
                                      (rewrite "lst2set_append_mem")
                                      (("2"
                                        (prop)
                                        (("1" (assert) nil nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vars_lst_vars_unif_prb formula-decl nil nominal_AC_unification nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (lst_vars_append formula-decl nil nominal_AC_unification nil)
    (lst2set_append_mem formula-decl nil list_aux_equational_reasoning nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (flatten def-decl "list[T]" list_aux_equational_reasoning nil)
    (lst_vars def-decl "list[variable]" nominal_AC_unification nil)
    (list2set def-decl "set[T]" list2set nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil))
   shostak))
 (no_var_pair_append 0
  (no_var_pair_append-1 nil 3832698793
   ("" (skeep)
    (("" (case "no_var_pair?(append(unif_prb!1, unif_prb1))")
      (("1" (assert)
        (("1" (prop)
          (("1" (expand "no_var_pair?" 1)
            (("1" (skeep)
              (("1" (expand "no_var_pair?" -2)
                (("1" (inst -2 "t")
                  (("1" (assert)
                    (("1" (rewrite "member_unif_prb_append") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "no_var_pair?" 1)
            (("2" (skeep)
              (("2" (expand "no_var_pair?" -2)
                (("2" (inst -2 "t")
                  (("2" (rewrite "member_unif_prb_append")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2"
        (case "(no_var_pair?(unif_prb!1) AND no_var_pair?(unif_prb1))")
        (("1" (hide 2)
          (("1" (prop)
            (("1" (expand "no_var_pair?" 1)
              (("1" (skeep)
                (("1" (rewrite "member_unif_prb_append")
                  (("1" (split -3)
                    (("1" (expand "no_var_pair?" -2)
                      (("1" (inst -2 "t") (("1" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (expand "no_var_pair?" -3)
                      (("2" (inst -3 "t") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((append def-decl "list[T]" list_props nil)
    (no_var_pair? const-decl "bool" nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (member_unif_prb_append formula-decl nil nominal_AC_unification nil))
   shostak))
 (no_pair_append 0
  (no_pair_append-1 nil 3850659431
   ("" (skolem 1 ("P" "P1"))
    (("" (expand "no_pair?")
      (("" (iff)
        (("" (prop)
          (("1" (skeep)
            (("1" (inst -3 "t")
              (("1" (rewrite "member_unif_prb_append")
                (("1" (grind) nil nil)) nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (inst -3 "t")
              (("2" (rewrite "member_unif_prb_append")
                (("2" (grind) nil nil)) nil))
              nil))
            nil)
           ("3" (skeep)
            (("3" (rewrite "member_unif_prb_append")
              (("3" (inst -1 "t")
                (("3" (inst -2 "t") (("3" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((no_pair? const-decl "bool" nominal_AC_unification nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (member_unif_prb_append formula-decl nil nominal_AC_unification nil))
   shostak))
 (all_ac_prb_no_var_pair 0
  (all_ac_prb_no_var_pair-1 nil 3834091178
   ("" (skeep)
    (("" (expand "all_ac_prb?" -1)
      (("" (expand "no_var_pair?" 1)
        (("" (skeep)
          (("" (rewrite "member_unif_prb_equiv")
            (("" (skolem -2 "unif_pair1")
              (("" (inst -1 "unif_pair1")
                (("" (assert)
                  (("" (flatten)
                    (("" (assert) (("" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((all_ac_prb? const-decl "bool" nominal_AC_unification nil)
    (ac_prb? const-decl "bool" nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (member_unif_prb_equiv formula-decl nil nominal_AC_unification nil)
    (no_var_pair? const-decl "bool" nominal_AC_unification nil))
   shostak))
 (all_ac_prb_is_ac 0
  (all_ac_prb_is_ac-1 nil 3837707124
   ("" (skolem 1 ("t1" "unif_prb1"))
    (("" (prop)
      (("" (expand "all_ac_prb?" -1)
        (("" (rewrite "member_unif_prb_equiv")
          (("" (skolem -2 "unif_pair1")
            (("" (inst -1 "unif_pair1") (("" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member_unif_prb_equiv formula-decl nil nominal_AC_unification nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (ac_prb? const-decl "bool" nominal_AC_unification nil)
    (all_ac_prb? const-decl "bool" nominal_AC_unification nil))
   shostak))
 (size_app_unif_prb 0
  (size_app_unif_prb-1 nil 3824128807
   ("" (induct "unif_prb1")
    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size const-decl "nat" nominal_AC_unification nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (append def-decl "list[T]" list_props nil)
    (size def-decl "nat" nominal_AC_unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (size_lhs_mem 0
  (size_lhs_mem-1 nil 3884885582
   ("" (induct "P")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "lhs")
            (("2" (expand "first_proj" -2)
              (("2" (expand "member" -2)
                (("2" (prop)
                  (("1" (grind) nil nil)
                   ("2" (inst?) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (first_proj def-decl "list[T1]" list_aux_equational_reasoning2parameters nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (<= const-decl "bool" reals nil)
    (lhs const-decl "args" nominal_AC_unification nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (size_lhs_nth 0
  (size_lhs_nth-1 nil 3884882125
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "nth" 2 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (expand "lhs" 1)
                  (("1" (expand "first_proj" 1)
                    (("1" (assert)
                      (("1" (lift-if)
                        (("1" (prop)
                          (("1" (hide-all-but (-1 -4))
                            (("1" (grind) nil nil)) nil)
                           ("2" (expand "size" 2 3)
                            (("2" (assert)
                              (("2"
                                (case
                                 "size(nth(P, j)`1) <= size(first_proj(cdr(P)))")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide 3)
                                  (("2"
                                    (expand "nth" 1 1)
                                    (("2"
                                      (use "size_lhs_mem")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "lhs")
                                          (("2"
                                            (rewrite "first_proj_mem")
                                            (("2"
                                              (inst
                                               1
                                               "nth(cdr(P), j-1)")
                                              (("2"
                                                (rewrite "member_nth_lst")
                                                (("2"
                                                  (expand "length" -4)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "nth" 2 2)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (expand "lhs")
                        (("1" (expand "first_proj" 1)
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1"
                                (hide-all-but (-1 -4))
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (expand "size" 2 3)
                                (("2"
                                  (assert)
                                  (("2"
                                    (lemma "size_lhs_mem")
                                    (("2"
                                      (inst
                                       -1
                                       "cdr(P)"
                                       "nth(cdr(P), i-1)`1")
                                      (("2"
                                        (prop)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "lhs" -1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "lhs" 1)
                                          (("2"
                                            (rewrite "first_proj_mem")
                                            (("2"
                                              (inst
                                               1
                                               "nth(cdr(P), i-1)")
                                              (("2"
                                                (rewrite "member_nth_lst")
                                                (("2"
                                                  (expand
                                                   "length"
                                                   -3
                                                   1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "lhs")
                        (("2" (expand "first_proj" 2)
                          (("2" (lift-if)
                            (("2" (prop)
                              (("1"
                                (hide-all-but (-1 -3))
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (expand "size" 2 3)
                                (("2"
                                  (inst -1 "cdr(P)")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst -1 "i-1" "j-1")
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2" (assert) nil nil)
                                       ("3" (assert) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (size_lhs_mem formula-decl nil nominal_AC_unification nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (member_nth_lst formula-decl nil list_aux_equational_reasoning nil)
    (first_proj_mem formula-decl nil list_aux_equational_reasoning2parameters nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (first_proj def-decl "list[T1]" list_aux_equational_reasoning2parameters nil)
    (lhs const-decl "args" nominal_AC_unification nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (nth def-decl "T" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (subterms_mem 0
  (subterms_mem-1 nil 3823963076
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "subterms" 1 1)
            (("2" (expand "member" 1 1)
              (("2" (expand "union" 1 1)
                (("2" (prop)
                  (("1" (inst 1 "hd") (("1" (grind) nil nil)) nil)
                   ("2" (inst -2 "t")
                    (("2" (assert)
                      (("2" (skeep)
                        (("2" (inst 1 "unif_pair!1")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skolem -1 "unif_pair1")
                    (("3" (flatten)
                      (("3" (expand "member" -2)
                        (("3" (prop)
                          (("1" (grind) nil nil)
                           ("2" (inst -3 "t")
                            (("2" (assert)
                              (("2"
                                (inst 3 "unif_pair1")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (member def-decl "bool" list_props nil)
    (subterms const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_unification nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (subterms_mem_unif_prb 0
  (subterms_mem_unif_prb-1 nil 3830009261
   ("" (skolem 1 ("s" "unif_prb1"))
    (("" (lemma "subterms_mem")
      (("" (prop)
        (("1" (inst -2 "s" "unif_prb1")
          (("1" (assert)
            (("1" (skolem -2 "unif_pair1")
              (("1" (prop)
                (("1" (expand "subterms" -2)
                  (("1" (expand "member" -2)
                    (("1" (expand "union" -2)
                      (("1" (prop)
                        (("1" (inst 1 "unif_pair1`1")
                          (("1" (prop)
                            (("1" (lemma "member_unif_prb_equiv")
                              (("1"
                                (inst -1 "unif_pair1`1" "unif_prb1")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst 1 "unif_pair1`2")
                          (("2" (prop)
                            (("2" (lemma "member_unif_prb_equiv")
                              (("2"
                                (inst -1 "unif_pair1`2" "unif_prb1")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skolem -1 "t")
          (("2" (prop)
            (("2" (inst -3 "s" "unif_prb1")
              (("2" (assert)
                (("2" (hide 1)
                  (("2" (lemma "member_unif_prb_equiv")
                    (("2" (inst? -1)
                      (("2" (assert)
                        (("2" (skeep) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subterms_mem formula-decl nil nominal_AC_unification nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (subterms const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_unification nil)
    (union const-decl "set" sets nil)
    (member_unif_prb_equiv formula-decl nil nominal_AC_unification nil)
    (member const-decl "bool" sets nil))
   shostak))
 (subterms_mem_lst_unif_prb 0
  (subterms_mem_lst_unif_prb-1 nil 3837781535
   ("" (induct "lst_unif_prb")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (expand "subterms" -1)
              (("1" (expand "member" -1)
                (("1" (expand "union" -1)
                  (("1" (prop)
                    (("1" (rewrite "subterms_mem_unif_prb")
                      (("1" (skeep)
                        (("1" (inst 1 "t") (("1" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst -2 "s")
                      (("2" (assert)
                        (("2" (skeep)
                          (("2" (inst 1 "t") (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (expand "member" -2)
                (("2" (prop)
                  (("1" (expand "subterms" 1)
                    (("1" (expand "member" 1)
                      (("1" (expand "union" 1)
                        (("1" (prop)
                          (("1" (rewrite "subterms_mem_unif_prb")
                            (("1" (inst 1 "t") (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst -3 "s")
                    (("2" (expand "member" 1)
                      (("2" (expand "subterms" 1)
                        (("2" (expand "union" 1)
                          (("2" (flatten) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((union const-decl "set" sets nil)
    (subterms_mem_unif_prb formula-decl nil nominal_AC_unification nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (subterms_append 0
  (subterms_append-1 nil 3832333109
   ("" (induct "unif_prb1")
    (("1" (expand "append" 1)
      (("1" (skeep)
        (("1" (expand "subterms" 1 2)
          (("1" (expand "member" 1 2)
            (("1" (expand "emptyset" 1) (("1" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "append" 1 1)
            (("2" (expand "subterms" 1 1)
              (("2" (expand "subterms" 1 3)
                (("2" (split 1)
                  (("1" (flatten)
                    (("1" (expand "member" -1)
                      (("1" (expand "union" -1)
                        (("1" (expand "member" 1)
                          (("1" (expand "union" 1)
                            (("1" (assert)
                              (("1"
                                (prop)
                                (("1"
                                  (inst? -2)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (expand "member" -1 1)
                      (("2" (expand "union" -1 1)
                        (("2" (expand "member" 1)
                          (("2" (expand "union" 1)
                            (("2" (prop)
                              (("1"
                                (inst? -2)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (inst? -2)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((union const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (append def-decl "list[T]" list_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (subterms_pareate 0
  (subterms_pareate-1 nil 3832793186
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "pareate" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (expand "subterms" -1)
                  (("3" (expand "union" -1)
                    (("3" (expand "member" -1 1)
                      (("3" (prop)
                        (("1" (hide -2) (("1" (grind) nil nil)) nil)
                         ("2" (inst -2 "cdr(args1)")
                          (("2" (prop)
                            (("1" (inst -1 "cdr(args2)" "t")
                              (("1" (grind) nil nil)) nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (subterms const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_unification nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (pareate def-decl "list[[T, T]]" list_aux_equational_reasoning nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (subset_vars 0
  (subset_vars-1 nil 3857041486
   ("" (skolem 1 ("P1" "P2"))
    (("" (prop)
      (("" (expand "subset?")
        (("" (skeep)
          (("" (rewrite "vars_unif_prb")
            (("" (rewrite "vars_unif_prb")
              (("" (skeep)
                (("" (inst 1 "t")
                  (("" (assert)
                    (("" (rewrite "member_unif_prb_equiv")
                      (("" (rewrite "member_unif_prb_equiv")
                        (("" (skolem -2 "up")
                          (("" (inst -1 "up")
                            (("" (inst 1 "up") (("" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member_unif_prb_equiv formula-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (vars_unif_prb formula-decl nil nominal_AC_unification nil)
    (subset? const-decl "bool" nominal_AC_unification nil)
    (subset? const-decl "bool" sets nil))
   shostak))
 (subset_unif_prb_append 0
  (subset_unif_prb_append-1 nil 3857046143
   ("" (skolem 1 ("P" "P1" "P2"))
    (("" (prop)
      (("1" (expand "subset?")
        (("1" (skolem 1 "up")
          (("1" (inst -1 "up")
            (("1" (flatten)
              (("1" (assert) (("1" (rewrite "member_append") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "subset?")
        (("2" (skolem 1 "up")
          (("2" (inst -1 "up")
            (("2" (flatten)
              (("2" (assert) (("2" (rewrite "member_append") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member_append formula-decl nil list_aux_equational_reasoning nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subset? const-decl "bool" nominal_AC_unification nil))
   shostak))
 (unifies?_append 0
  (unifies?_append-1 nil 3805641015
   ("" (measure-induct "length(unif_prb1)" "unif_prb1")
    (("" (skolem 1 "lst1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "unifies?" 1 2)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (lemma "list_cons_eta[unif_pair]")
                    (("2" (inst? -1)
                      (("1" (expand "append" 2 1)
                        (("1" (assert)
                          (("1" (expand "unifies?" 2 1)
                            (("1" (hide -1)
                              (("1"
                                (inst -1 "cdr(lst1)")
                                (("1"
                                  (prop)
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (list_cons_eta formula-decl nil list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (unifies? def-decl "bool" nominal_AC_unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (unifies?_pareate 0
  (unifies?_pareate-1 nil 3807735593
   ("" (induct "args1")
    (("1" (skeep)
      (("1" (expand "pareate" -2)
        (("1" (case "args2 = null")
          (("1" (grind) nil nil)
           ("2" (hide 2 -2) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "pareate" -3)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (hide -3 1) (("1" (grind) nil nil)) nil)
                 ("2" (expand "unifies?" -1)
                  (("2" (flatten)
                    (("2" (expand "length" -4 2)
                      (("2" (assert)
                        (("2" (expand "subs" 2 2)
                          (("2" (expand "subs" 2 1)
                            (("2" (expand "equal?" 2)
                              (("2"
                                (expand "length" -4 1)
                                (("2"
                                  (inst? -3)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (subs def-decl "args" nominal_AC_substitution nil)
    (pareate def-decl "list[[T, T]]" list_aux_equational_reasoning nil)
    (unifies? def-decl "bool" nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (args type-eq-decl nil nominal_AC_term_properties nil))
   SHOSTAK))
 (unifies?_lhs_rhs 0
  (unifies?_lhs_rhs-1 nil 3886577659
   ("" (induct "P")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "lhs" 1)
            (("2" (expand "rhs" 1)
              (("2" (expand "first_proj" 1)
                (("2" (expand "sec_proj" 1)
                  (("2" (expand "subs" 1)
                    (("2" (expand "equal?" 1)
                      (("2" (prop)
                        (("1" (expand "unifies?" -2)
                          (("1" (flatten)
                            (("1" (expand "unifies?" -2)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (expand "unifies?" -2)
                          (("2" (flatten)
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (expand ("lhs" "rhs") -1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unifies? const-decl "bool" nominal_AC_unification nil)
    (first_proj def-decl "list[T1]" list_aux_equational_reasoning2parameters nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2parameters nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (lhs const-decl "args" nominal_AC_unification nil)
    (subs def-decl "args" nominal_AC_substitution nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (unifies? def-decl "bool" nominal_AC_unification nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (unifies?_equiv 0
  (unifies?_equiv-1 nil 3838229694
   ("" (induct "unif_prb")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (expand "unifies?" -1)
              (("1" (prop)
                (("1" (skolem 1 "unif_pair1")
                  (("1" (prop)
                    (("1" (expand "member" -3)
                      (("1" (prop)
                        (("1" (assert) nil nil)
                         ("2" (inst?)
                          (("2" (assert)
                            (("2" (inst -4 "unif_pair1")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "unifies?" 1)
              (("2" (prop)
                (("1" (inst -1 "hd") (("1" (grind) nil nil)) nil)
                 ("2" (inst? -2)
                  (("2" (assert)
                    (("2" (hide 1)
                      (("2" (skolem 1 "unif_pair1")
                        (("2" (prop)
                          (("2" (inst -1 "unif_pair1")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (unifies? def-decl "bool" nominal_AC_unification nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (unifies?_equal 0
  (unifies?_equal-1 nil 3842108248
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "unifies?" (-3 1))
            (("2" (prop)
              (("1" (hide -4)
                (("1" (expand "unifies?" (-3 1))
                  (("1" (lemma "equal_sub_equiv")
                    (("1" (hide -2)
                      (("1"
                        (case "equal?(G)(subs(sigma1)(hd`1), subs(sigma)(hd`1))")
                        (("1"
                          (case "equal?(G)(subs(sigma)(hd`1), subs(sigma1)(hd`2))")
                          (("1" (lemma "equal?_trans")
                            (("1"
                              (inst -1 "G" "subs(sigma1)(hd`1)"
                               "subs(sigma)(hd`1)"
                               "subs(sigma1)(hd`2)")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (hide -1 2)
                            (("2"
                              (case "equal?(G)(subs(sigma)(hd`2), subs(sigma1)(hd`2))")
                              (("1"
                                (lemma "equal?_trans")
                                (("1"
                                  (inst
                                   -1
                                   " G"
                                   "subs(sigma)(hd`1)"
                                   "subs(sigma)(hd`2)"
                                   "subs(sigma1)(hd`2)")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -1 "G" "sigma" "sigma1" "hd`2")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst -1 "G" "sigma" "sigma1" "hd`1")
                          (("2" (assert)
                            (("2" (lemma "equal?_sym")
                              (("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst?) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unifies? const-decl "bool" nominal_AC_unification nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil)
    (equal?_trans formula-decl nil nominal_AC_equality nil)
    (equal_sub_equiv formula-decl nil nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unifies? def-decl "bool" nominal_AC_unification nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (unifies?_equal_alt 0
  (unifies?_equal_alt-1 nil 3851186268
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "unifies?" (-3 1))
            (("2" (prop)
              (("1" (hide -4)
                (("1" (expand "unifies?" (-3 1))
                  (("1" (lemma "equal_sub_equiv_alt")
                    (("1" (hide -2)
                      (("1"
                        (case "equal?(G)(subs(sigma1)(hd`1), subs(sigma)(hd`1))")
                        (("1"
                          (case "equal?(G)(subs(sigma)(hd`1), subs(sigma1)(hd`2))")
                          (("1" (lemma "equal?_trans")
                            (("1"
                              (inst -1 "G" "subs(sigma1)(hd`1)"
                               "subs(sigma)(hd`1)"
                               "subs(sigma1)(hd`2)")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (hide -1 2)
                            (("2"
                              (case "equal?(G)(subs(sigma)(hd`2), subs(sigma1)(hd`2))")
                              (("1"
                                (lemma "equal?_trans")
                                (("1"
                                  (inst
                                   -1
                                   "G"
                                   "subs(sigma)(hd`1)"
                                   "subs(sigma)(hd`2)"
                                   "subs(sigma1)(hd`2)")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (inst
                                 -1
                                 "G"
                                 "sigma "
                                 "set_vars "
                                 "sigma1"
                                 "hd`2")
                                (("2"
                                  (assert)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2"
                            (inst -1 "G" "sigma" "set_vars" "sigma1"
                             "hd`1")
                            (("2" (assert)
                              (("2"
                                (split -1)
                                (("1"
                                  (lemma "equal?_sym")
                                  (("1"
                                    (inst
                                     -1
                                     "G"
                                     "subs(sigma1)(hd`1)"
                                     "subs(sigma)(hd`1)")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst?) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unifies? const-decl "bool" nominal_AC_unification nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (equal?_trans formula-decl nil nominal_AC_equality nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (union const-decl "set" sets nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (equal_sub_equiv_alt formula-decl nil nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (subset? const-decl "bool" sets nil)
    (unifies? def-decl "bool" nominal_AC_unification nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (unifies?_subset 0
  (unifies?_subset-1 nil 3842362704
   ("" (skolem 1 ("G" "sigma" "unif_prb1" "unif_prb2"))
    (("" (prop)
      (("" (expand "subset?" -1)
        (("" (rewrite "unifies?_equiv")
          (("" (rewrite "unifies?_equiv")
            (("" (skolem 1 "unif_pair1")
              (("" (prop)
                (("" (inst -1 "unif_pair1")
                  (("" (assert)
                    (("" (inst -2 "unif_pair1") (("" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unifies?_equiv formula-decl nil nominal_AC_unification nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (subset? const-decl "bool" nominal_AC_unification nil))
   shostak))
 (unifies?_append_disjoint 0
  (unifies?_append_disjoint-1 nil 3842109360
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "unifies?" 1)
            (("2" (prop)
              (("1" (expand "unifies?" -2)
                (("1" (prop)
                  (("1" (hide -3)
                    (("1" (expand "unifies?" (-2 1))
                      (("1" (rewrite "subs_append2")
                        (("1" (rewrite "subs_append2")
                          (("1" (case "subs(sigma)(hd`1) = hd`1")
                            (("1" (replace -1)
                              (("1"
                                (case "subs(sigma)(hd`2) = hd`2")
                                (("1"
                                  (replace -1)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (hide -2 2)
                                  (("2"
                                    (lemma "subs_no_effect_t")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "disjoint?")
                                          (("2"
                                            (expand "empty?")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst -4 "x")
                                                (("2"
                                                  (expand
                                                   ("member"
                                                    "intersection"))
                                                  (("2"
                                                    (prop)
                                                    (("2"
                                                      (expand
                                                       "member"
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "vars"
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "union"
                                                           1)
                                                          (("2"
                                                            (prop)
                                                            (("2"
                                                              (expand
                                                               "member"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "vars"
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "union"
                                                                   1)
                                                                  (("2"
                                                                    (prop)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1 -2 2)
                              (("2"
                                (lemma "subs_no_effect_t")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (expand "disjoint?")
                                        (("2"
                                          (expand "empty?")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (inst -2 "x")
                                              (("2"
                                                (expand
                                                 ("member"
                                                  "intersection"))
                                                (("2"
                                                  (prop)
                                                  (("2"
                                                    (expand "vars" 1)
                                                    (("2"
                                                      (expand
                                                       ("member"
                                                        "union")
                                                       1)
                                                      (("2"
                                                        (prop)
                                                        (("2"
                                                          (expand
                                                           "vars"
                                                           1)
                                                          (("2"
                                                            (expand
                                                             ("member"
                                                              "union")
                                                             1)
                                                            (("2"
                                                              (prop)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "unifies?" -2)
                (("2" (prop)
                  (("2" (hide -2)
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (expand "disjoint?")
                          (("2" (expand "empty?")
                            (("2" (skeep)
                              (("2"
                                (inst -3 "x")
                                (("2"
                                  (expand ("member" "intersection"))
                                  (("2"
                                    (prop)
                                    (("2"
                                      (expand "vars" 1)
                                      (("2"
                                        (expand ("member" "union"))
                                        (("2"
                                          (prop)
                                          (("2"
                                            (expand "member")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unifies? const-decl "bool" nominal_AC_unification nil)
    (union const-decl "set" sets nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (append def-decl "list[T]" list_props nil)
    (unifies? def-decl "bool" nominal_AC_unification nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (unifies?_append_disjoint2 0
  (unifies?_append_disjoint2-1 nil 3842122992
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "unifies?" 1)
            (("2" (prop)
              (("1" (expand "unifies?" -2)
                (("1" (prop)
                  (("1" (hide -3)
                    (("1" (expand "unifies?" 1)
                      (("1" (rewrite "subs_append2")
                        (("1" (rewrite "subs_append2")
                          (("1" (case "subs(sigma)(hd`1) = hd`1")
                            (("1" (replace -1)
                              (("1"
                                (case "subs(sigma)(hd`2) = hd`2")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (expand "unifies?" -4)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -2 2)
                                  (("2"
                                    (lemma "subs_no_effect_t")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "disjoint?")
                                          (("2"
                                            (expand "empty?")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst -4 "x")
                                                (("2"
                                                  (expand
                                                   ("member"
                                                    "intersection"))
                                                  (("2"
                                                    (prop)
                                                    (("2"
                                                      (expand
                                                       "member"
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "vars"
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "union"
                                                           1)
                                                          (("2"
                                                            (prop)
                                                            (("2"
                                                              (expand
                                                               "member"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "vars"
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "union"
                                                                   1)
                                                                  (("2"
                                                                    (prop)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1 -2 2)
                              (("2"
                                (lemma "subs_no_effect_t")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (expand "disjoint?")
                                        (("2"
                                          (expand "empty?")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (inst -2 "x")
                                              (("2"
                                                (expand
                                                 ("member"
                                                  "intersection"))
                                                (("2"
                                                  (prop)
                                                  (("2"
                                                    (expand "vars" 1)
                                                    (("2"
                                                      (expand
                                                       ("member"
                                                        "union")
                                                       1)
                                                      (("2"
                                                        (prop)
                                                        (("2"
                                                          (expand
                                                           "vars"
                                                           1)
                                                          (("2"
                                                            (expand
                                                             ("member"
                                                              "union")
                                                             1)
                                                            (("2"
                                                              (prop)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "unifies?" -2)
                (("2" (prop)
                  (("2" (hide -2)
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (expand "disjoint?")
                          (("2" (expand "empty?")
                            (("2" (skeep)
                              (("2"
                                (inst -3 "x")
                                (("2"
                                  (expand ("member" "intersection"))
                                  (("2"
                                    (prop)
                                    (("2"
                                      (expand "vars" 1)
                                      (("2"
                                        (expand ("member" "union"))
                                        (("2"
                                          (prop)
                                          (("2"
                                            (expand "member")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unifies? const-decl "bool" nominal_AC_unification nil)
    (union const-decl "set" sets nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (append def-decl "list[T]" list_props nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (unifies? def-decl "bool" nominal_AC_unification nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (unifies?_append_disjoint3 0
  (unifies?_append_disjoint3-1 nil 3850328809
   ("" (skeep)
    (("" (iff)
      (("" (prop)
        (("1" (lemma "unifies?_append_disjoint")
          (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
         ("2" (lemma "unifies?_append_disjoint2")
          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((unifies?_append_disjoint2 formula-decl nil nominal_AC_unification nil)
    (unifies?_append_disjoint formula-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (apply_sub_mem 0
  (apply_sub_mem-1 nil 3827693738
   ("" (induct "unif_prb")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (expand "apply_sub" -1)
              (("1" (expand "member" -1)
                (("1" (prop)
                  (("1" (expand "apply_sub" -1)
                    (("1" (inst 1 "hd`1") (("1" (grind) nil nil)) nil))
                    nil)
                   ("2" (expand "apply_sub" -1)
                    (("2" (inst 1 "hd`2") (("2" (grind) nil nil)) nil))
                    nil)
                   ("3" (inst -2 "sigma" "t")
                    (("3" (assert)
                      (("3" (skeep)
                        (("3" (inst 3 "s") (("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (expand "member" -1)
                (("2" (prop)
                  (("1" (expand "apply_sub" 1)
                    (("1" (expand "member" 1)
                      (("1" (prop)
                        (("1" (expand "apply_sub" 1)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "apply_sub" 1)
                    (("2" (expand "member" 1)
                      (("2" (prop)
                        (("2" (expand "apply_sub" 2)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (inst -3 "sigma" "t")
                    (("3" (assert)
                      (("3" (flatten)
                        (("3" (hide -3)
                          (("3" (prop)
                            (("1" (expand "apply_sub" 3)
                              (("1"
                                (expand "member" 3)
                                (("1" (prop) nil nil))
                                nil))
                              nil)
                             ("2" (inst 1 "s") (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub const-decl "unif_pair" nominal_AC_unification nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (apply_sub_unif_pair 0
  (apply_sub_unif_pair-1 nil 3832969464
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skolem 1 ("sigma" "unif_pair2"))
          (("2" (prop)
            (("1" (expand "apply_sub" -1)
              (("1" (expand "member" -1)
                (("1" (prop)
                  (("1" (inst 1 "hd") (("1" (grind) nil nil)) nil)
                   ("2" (inst -2 "sigma" "unif_pair2")
                    (("2" (assert)
                      (("2" (skolem -2 "unif_pair1")
                        (("2" (inst 1 "unif_pair1")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem -1 "unif_pair1")
              (("2" (prop)
                (("2" (expand "member" -1)
                  (("2" (prop)
                    (("1" (grind) nil nil)
                     ("2" (inst -3 "sigma" "unif_pair2")
                      (("2" (prop)
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (apply_sub const-decl "unif_pair" nominal_AC_unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (apply_sub_subterms 0
  (apply_sub_subterms-1 nil 3832603309
   ("" (skeep)
    (("" (rewrite "subterms_mem_unif_prb")
      (("" (skolem -1 "t1_sigma")
        (("" (prop)
          (("" (rewrite "apply_sub_mem")
            (("" (skolem -2 "t1")
              (("" (prop)
                (("" (replace -3 -1)
                  (("" (lemma "subterms_subs2")
                    (("" (inst?)
                      (("" (assert)
                        (("" (skolem -1 "t1s")
                          (("" (flatten)
                            (("" (inst 1 "t1s")
                              ((""
                                (case
                                 "member(t1s, subterms(unif_prb!1))")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (hide -2)
                                    (("2"
                                      (rewrite "subterms_mem_unif_prb")
                                      (("2"
                                        (inst 1 "t1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subterms_mem_unif_prb formula-decl nil nominal_AC_unification nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (subterms_subs2 formula-decl nil nominal_AC_substitution nil)
    (apply_sub_mem formula-decl nil nominal_AC_unification nil))
   shostak))
 (apply_sub_rhs 0
  (apply_sub_rhs-1 nil 3883484227
   ("" (measure-induct "length(unif_prb)" "unif_prb")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "rhs" 1)
            (("" (prop)
              (("1" (expand "apply_sub" -1)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (grind) nil nil)
                     ("2" (expand "sec_proj" -1)
                      (("2" (expand "apply_sub" -1 1)
                        (("2" (expand "member" -1)
                          (("2" (prop)
                            (("1" (inst 2 "car(P)`2")
                              (("1" (grind) nil nil)) nil)
                             ("2" (inst -2 "cdr(P)")
                              (("2"
                                (expand "length" -2 2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst -2 "sigma" "t")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "rhs" -2)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst 2 "s")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (expand "sec_proj" -1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (grind) nil nil)
                       ("2" (expand "member" -1)
                        (("2" (prop)
                          (("1" (grind) nil nil)
                           ("2" (inst -3 "cdr(P)")
                            (("2" (expand "length" -3 2)
                              (("2"
                                (assert)
                                (("2"
                                  (inst -3 "sigma" "t")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "rhs")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (expand "apply_sub" 2)
                                            (("1"
                                              (expand "sec_proj" 2)
                                              (("1"
                                                (expand "member" 2)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst 1 "s")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (apply_sub const-decl "unif_pair" nominal_AC_unification nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2parameters nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (apply_sub_null 0
  (apply_sub_null-1 nil 3828517939
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (expand "apply_sub" 1)
        (("2" (replace -1)
          (("2" (expand "apply_sub" 1)
            (("2" (expand "subs" 1)
              (("2" (assert)
                (("2" (grind)
                  (("2" (case "cons1_var = (cons1_var`1, cons1_var`2)")
                    (("1" (replace -1 :dir rl) (("1" (propax) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub const-decl "unif_pair" nominal_AC_unification nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (apply_sub_append 0
  (apply_sub_append-1 nil 3832355737
   ("" (induct "unif_prb1")
    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((apply_sub const-decl "unif_pair" nominal_AC_unification nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (append def-decl "list[T]" list_props nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (apply_sub_sub_append 0
  (apply_sub_sub_append-1 nil 3828518211
   ("" (measure-induct "length(unif_prb)" "unif_prb")
    (("" (skolem 1 "unif_prb1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "apply_sub" 1 2)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "apply_sub" 2 1)
                  (("2" (expand "apply_sub" 2 5)
                    (("2" (lift-if)
                      (("2" (assert)
                        (("2"
                          (case "apply_sub(sigma, apply_sub(sigma1, car(unif_prb1))) = apply_sub(append(sigma, sigma1), car(unif_prb1))")
                          (("1" (inst -2 "cdr(unif_prb1)")
                            (("1" (prop)
                              (("1"
                                (inst? -1)
                                (("1" (assert) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (hide 3)
                            (("2" (expand "apply_sub" 1 2)
                              (("2"
                                (expand "apply_sub" 1 1)
                                (("2"
                                  (expand "apply_sub" 1)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (rewrite "subs_append2")
                                      nil
                                      nil)
                                     ("2"
                                      (rewrite "subs_append2")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub const-decl "unif_pair" nominal_AC_unification nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (append def-decl "list[T]" list_props nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (apply_sub_len 0
  (apply_sub_len-1 nil 3825711568
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "apply_sub" 1)
            (("2" (expand "length" 1) (("2" (inst -1 "sigma") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (apply_sub_nth_TCC1 0
  (apply_sub_nth_TCC1-1 nil 3883201993
   ("" (skeep) (("" (rewrite "apply_sub_len") nil nil)) nil)
   ((apply_sub_len formula-decl nil nominal_AC_unification nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   nil
   (apply_sub_nth subtype "nominal_AC_unification.i"
    "below[length[unif_pair](apply_sub(sigma, unif_prb))]")))
 (apply_sub_nth 0
  (apply_sub_nth-1 nil 3883206148
   ("" (measure-induct "length(unif_prb)" "unif_prb")
    (("1" (skolem 1 "P")
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "apply_sub" 1 1)
            (("1" (lift-if)
              (("1" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "nth" 2 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (replace -1)
                        (("1" (expand "nth" 1) (("1" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (expand "nth" 2 2)
                        (("2" (assert)
                          (("2" (inst -1 "cdr(P)")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep) (("2" (rewrite "apply_sub_len") nil nil)) nil))
      nil))
    nil)
   ((apply_sub_len formula-decl nil nominal_AC_unification nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (apply_sub const-decl "unif_pair" nominal_AC_unification nil)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (apply_sub_first_proj 0
  (apply_sub_first_proj-1 nil 3825711776
   ("" (induct "unif_prb")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "apply_sub" 1)
            (("2" (expand "first_proj" 1)
              (("2" (expand "subs" 1)
                (("2" (inst? -1)
                  (("2" (assert)
                    (("2" (replace -1 1)
                      (("2" (expand "apply_sub" 1 2)
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub const-decl "unif_pair" nominal_AC_unification nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (first_proj def-decl "list[T1]" list_aux_equational_reasoning2parameters nil)
    (subs def-decl "args" nominal_AC_substitution nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (apply_sub_sec_proj 0
  (apply_sub_sec_proj-1 nil 3825712010
   ("" (induct "unif_prb")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (inst? -1)
            (("2" (expand "sec_proj" 1 1)
              (("2" (expand "subs" 1)
                (("2" (expand "apply_sub" 1)
                  (("2" (expand "sec_proj" 1 2)
                    (("2" (replace -1 1)
                      (("2" (expand "apply_sub" 1 2)
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub const-decl "unif_pair" nominal_AC_unification nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2parameters nil)
    (subs def-decl "args" nominal_AC_substitution nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (apply_sub_subset_unif_prb 0
  (apply_sub_subset_unif_prb-1 nil 3857048185
   ("" (measure-induct "length(unif_prb)" "unif_prb")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skolem 1 ("sig" "P1"))
          (("" (prop)
            (("" (case "null?(P)")
              (("1" (inst 1 "null") (("1" (grind) nil nil)) nil)
               ("2" (inst -1 "cdr(P)")
                (("1" (prop)
                  (("1" (inst -1 "sig" "P1")
                    (("1" (prop)
                      (("1" (skolem -1 "P2")
                        (("1" (flatten)
                          (("1" (expand "subset?" -3)
                            (("1" (inst -3 "car(P)")
                              (("1"
                                (expand "member" -3 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite "apply_sub_unif_pair")
                                    (("1"
                                      (skolem -3 "up1")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (inst 2 "cons(up1, P2)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "subset?" 1)
                                              (("1"
                                                (skolem 1 "up2")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "apply_sub" 1)
                                              (("2"
                                                (replace -2 :dir rl)
                                                (("2"
                                                  (replace -4 :dir rl)
                                                  (("2"
                                                    (decompose-equality
                                                     1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 3)
                        (("2" (expand "subset?")
                          (("2" (skolem 1 "up")
                            (("2" (inst -1 "up")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "length" 1 2) (("2" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (member def-decl "bool" list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (apply_sub const-decl "unif_pair" nominal_AC_unification nil)
    (apply_sub_unif_pair formula-decl nil nominal_AC_unification nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (subset? const-decl "bool" nominal_AC_unification nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (apply_sub_pareate 0
  (apply_sub_pareate-1 nil 3855927476
   ("" (induct "args1" 1)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "pareate" 1 2)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (inst -1 "cdr(args2)" "sigma")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (apply_sub const-decl "unif_pair" nominal_AC_unification nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (subs def-decl "args" nominal_AC_substitution nil)
    (pareate def-decl "list[[T, T]]" list_aux_equational_reasoning nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (args type-eq-decl nil nominal_AC_term_properties nil))
   shostak))
 (apply_sub_elim_var_unif_pair 0
  (apply_sub_elim_var_unif_pair-1 nil 3823281928
   ("" (skeep)
    (("" (expand "apply_sub" -2)
      (("" (expand "vars" -2)
        (("" (expand "member" -2)
          (("" (expand "union" -2)
            (("" (prop)
              (("1" (rewrite "apply_sub_elim_var_t") nil nil)
               ("2" (rewrite "apply_sub_elim_var_t") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub const-decl "unif_pair" nominal_AC_unification nil)
    (member const-decl "bool" sets nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (apply_sub_elim_var_t formula-decl nil nominal_AC_substitution nil)
    (union const-decl "set" sets nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil))
   shostak))
 (apply_sub_elim_var 0
  (apply_sub_elim_var-1 nil 3823281548
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "apply_sub" -3)
            (("2" (expand "vars" -3)
              (("2" (expand "member" -3)
                (("2" (expand "union" -3)
                  (("2" (prop)
                    (("1" (hide -2)
                      (("1" (lemma "apply_sub_elim_var_unif_pair")
                        (("1" (inst? -1) (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (inst -2 "X" "sigma")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((union const-decl "set" sets nil)
    (apply_sub_elim_var_unif_pair formula-decl nil nominal_AC_unification nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (empty? const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (apply_sub_elim_var2 0
  (apply_sub_elim_var2-1 nil 3882555120
   ("" (skeep)
    (("" (lemma "apply_sub_elim_var")
      (("" (expand "disjoint?")
        (("" (expand "empty?")
          (("" (skeep)
            (("" (expand ("member" "intersection") -3)
              (("" (prop)
                (("" (inst?)
                  (("" (assert)
                    (("" (lemma "idempotent_disjoint_dom_img")
                      (("" (inst?)
                        (("" (assert)
                          (("" (expand "disjoint?" -1)
                            (("" (expand "empty?" -1)
                              ((""
                                (inst -1 "x")
                                ((""
                                  (expand ("member" "intersection") 1)
                                  (("" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub_elim_var formula-decl nil nominal_AC_unification nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (idempotent_disjoint_dom_img formula-decl nil nominal_AC_substitution nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil))
   shostak))
 (apply_sub_elim_var3 0
  (apply_sub_elim_var3-1 nil 3886316140
   ("" (skeep)
    (("" (lemma "apply_sub_elim_var")
      (("" (inst -1 "X" "cons((X, ext(pi)(t)), null)" "P")
        (("" (assert)
          (("" (prop)
            (("1" (expand ("member" "dom") 1)
              (("1" (flatten)
                (("1" (expand "subs" -1)
                  (("1" (expand "subs" -1)
                    (("1" (expand "subs" -1 2)
                      (("1" (expand "subs" -1)
                        (("1" (rewrite "ext_identity")
                          (("1" (lemma "ext_vars")
                            (("1" (inst -1 "pi" "t")
                              (("1"
                                (replace -1 :dir rl)
                                (("1"
                                  (replace -2)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2)
              (("2" (rewrite "vars_finset")
                (("2" (skolem -1 "s")
                  (("2" (prop)
                    (("2" (expand ("member" "img") -1)
                      (("2" (skolem -1 "Y")
                        (("2" (prop)
                          (("2" (expand "subs" -2)
                            (("2" (expand "subs" -2)
                              (("2"
                                (expand "subs" -2 2)
                                (("2"
                                  (expand ("member " "dom") -1)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand "subs" 1)
                                      (("2"
                                        (expand "subs" 1)
                                        (("2"
                                          (expand "subs" 1 2)
                                          (("2"
                                            (expand "subs" 1)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (prop)
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (expand "subs" -2)
                                                    (("2"
                                                      (rewrite
                                                       "ext_identity")
                                                      (("2"
                                                        (replace -2)
                                                        (("2"
                                                          (replace
                                                           -2
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (rewrite
                                                             "ext_vars")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub_elim_var formula-decl nil nominal_AC_unification nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (vars_finset formula-decl nil nominal_AC_term_properties nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (ext_identity formula-decl nil nominal_AC_term_properties nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (ext_vars formula-decl nil nominal_AC_term_properties nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (apply_sub_vars 0
  (apply_sub_vars-1 nil 3882546527
   ("" (skolem 1 ("sig" "P"))
    (("" (expand "subset?" 1)
      (("" (skeep)
        (("" (rewrite "vars_unif_prb")
          (("" (skolem -1 "t")
            (("" (prop)
              (("" (rewrite "apply_sub_mem")
                (("" (skolem -1 "t1")
                  (("" (prop)
                    (("" (replace -2 -3)
                      (("" (lemma "vars_subs_t")
                        (("" (inst -1 "sig" "t1")
                          (("" (expand "subset?" -1)
                            (("" (inst -1 "x")
                              ((""
                                (assert)
                                ((""
                                  (expand ("member" "union") -1)
                                  ((""
                                    (expand ("member" "union") 1)
                                    ((""
                                      (prop)
                                      ((""
                                        (rewrite "vars_unif_prb")
                                        ((""
                                          (inst 2 "t1")
                                          (("" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (vars_unif_prb formula-decl nil nominal_AC_unification nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (vars_subs_t formula-decl nil nominal_AC_substitution nil)
    (apply_sub_mem formula-decl nil nominal_AC_unification nil))
   shostak))
 (apply_sub_no_pair 0
  (apply_sub_no_pair-1 nil 3832677979
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "apply_sub" 1)
            (("2" (expand "no_pair?" 1)
              (("2" (skeep)
                (("2" (expand "member" -4)
                  (("2" (prop)
                    (("1" (expand "apply_sub" -1)
                      (("1" (expand "no_pair?" -3)
                        (("1" (inst -3 "hd`1")
                          (("1" (replace -1 -5)
                            (("1" (lemma "subs_pair2")
                              (("1"
                                (inst? -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -1)
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (hide -4 -3)
                                      (("2"
                                        (expand "no_pair?" -3)
                                        (("2"
                                          (lemma "nominal_AC_term_times_eta")
                                          (("2"
                                            (inst -1 "hd`1")
                                            (("2"
                                              (inst
                                               -4
                                               "subs(sigma)(V(hd`1))")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (replace
                                                     -1
                                                     -4
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (rewrite
                                                       "subs_ext_pi")
                                                      (("1"
                                                        (lemma
                                                         "ext_preserves_type")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "p(hd`1)"
                                                           "subs(sigma)(V(hd`1))")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     ("member" "img")
                                                     1)
                                                    (("2"
                                                      (inst
                                                       1
                                                       "V(hd`1)")
                                                      (("2"
                                                        (expand
                                                         ("member"
                                                          "dom")
                                                         1)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (replace
                                                             -2
                                                             -5
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (rewrite
                                                               "subs_ext_pi")
                                                              (("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -2)
                      (("2" (expand "apply_sub" -1)
                        (("2" (replace -1)
                          (("2" (lemma "subs_pair2")
                            (("2" (inst? -1)
                              (("2"
                                (assert)
                                (("2"
                                  (prop)
                                  (("1"
                                    (expand "no_pair?" -3)
                                    (("1"
                                      (inst -3 "hd`2")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "nominal_AC_term_times_eta")
                                    (("2"
                                      (inst -1 "hd`2")
                                      (("2"
                                        (expand "no_pair?" -5)
                                        (("2"
                                          (inst
                                           -5
                                           "subs(sigma)(V(hd`2))")
                                          (("2"
                                            (prop)
                                            (("1"
                                              (replace -1 -5 :dir rl)
                                              (("1"
                                                (rewrite "subs_ext_pi")
                                                (("1"
                                                  (lemma
                                                   "ext_preserves_type")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand
                                               ("member" "img")
                                               1)
                                              (("2"
                                                (inst 1 "V(hd`2)")
                                                (("2"
                                                  (expand
                                                   ("member" "dom")
                                                   1)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (replace
                                                       -2
                                                       -6
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (rewrite
                                                         "subs_ext_pi")
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (inst -2 "sigma")
                      (("3" (prop)
                        (("1" (expand "no_pair?" -1)
                          (("1" (inst -1 "t") (("1" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (expand "no_pair?" 1)
                          (("2" (skeep)
                            (("2" (expand "no_pair?" -4)
                              (("2"
                                (inst -4 "t!1")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (apply_sub const-decl "unif_pair" nominal_AC_unification nil)
    (subs_pair2 formula-decl nil nominal_AC_substitution nil)
    (nominal_AC_term_times_eta formula-decl nil nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (ord const-decl "upto(6)" nominal_AC_term_adt nil)
    (ext_preserves_type formula-decl nil nominal_AC_term_properties nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (no_pair? const-decl "bool" nominal_AC_unification nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (apply_sub_no_var_pair 0
  (apply_sub_no_var_pair-1 nil 3832097815
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "apply_sub" 1)
            (("2" (expand "no_var_pair?" 1)
              (("2" (skeep)
                (("2" (expand "member" -3)
                  (("2" (split -3)
                    (("1" (split -1)
                      (("1" (expand "no_var_pair?" -3)
                        (("1" (inst -3 "hd`1")
                          (("1" (expand "member" -3)
                            (("1" (expand "apply_sub" -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (lemma "subs_var")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (replace -3)
                                      (("1"
                                        (inst? -2)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -3 -1)
                                      (("2"
                                        (hide -2)
                                        (("2"
                                          (lemma "subs_pair2")
                                          (("2"
                                            (inst? -1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "apply_sub" -1)
                        (("2" (hide -2)
                          (("2" (expand "no_var_pair?" -2)
                            (("2" (inst -2 "hd`2")
                              (("2"
                                (split -2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (lemma "subs_var")
                                        (("1"
                                          (inst? -1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "subs_pair2")
                                      (("2"
                                        (inst? -1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (inst -2 "sigma")
                        (("2" (split -2)
                          (("1" (expand "no_var_pair?" -1)
                            (("1" (inst -1 "t") (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (expand "no_var_pair?" -2)
                            (("2" (expand "no_var_pair?" 1)
                              (("2"
                                (hide 2 3 4)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (inst -3 "t!1")
                                    (("2"
                                      (assert)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub const-decl "unif_pair" nominal_AC_unification nil)
    (subs_var formula-decl nil nominal_AC_substitution nil)
    (subs_pair2 formula-decl nil nominal_AC_substitution nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (no_var_pair? const-decl "bool" nominal_AC_unification nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (apply_sub_all_ac 0
  (apply_sub_all_ac-1 nil 3850316809
   ("" (skolem 1 ("sig" "P"))
    (("" (prop)
      (("" (expand "all_ac_prb?" 1)
        (("" (skolem 1 "u_pair")
          (("" (prop)
            (("" (rewrite "apply_sub_unif_pair")
              (("" (skolem -2 "u_pair2")
                (("" (prop)
                  (("" (expand "apply_sub" -3)
                    (("" (expand "all_ac_prb?" -1)
                      (("" (inst -1 "u_pair2")
                        (("" (assert)
                          (("" (expand "ac_prb?" -1)
                            (("" (flatten)
                              ((""
                                (name-replace "t" "u_pair2`1")
                                ((""
                                  (name-replace "s" "u_pair2`2")
                                  ((""
                                    (expand "ac_prb?" 1)
                                    ((""
                                      (replace -5)
                                      ((""
                                        (lemma "nominal_AC_term_ac_app_eta")
                                        ((""
                                          (inst -1 "t")
                                          ((""
                                            (replace -1 1 :dir rl)
                                            ((""
                                              (rewrite "subs_ac")
                                              ((""
                                                (assert)
                                                ((""
                                                  (lemma
                                                   "nominal_AC_term_ac_app_eta")
                                                  ((""
                                                    (inst -1 "s")
                                                    ((""
                                                      (replace
                                                       -1
                                                       1
                                                       :dir
                                                       rl)
                                                      ((""
                                                        (rewrite
                                                         "subs_ac")
                                                        ((""
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub_unif_pair formula-decl nil nominal_AC_unification nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (nominal_AC_term_ac_app_eta formula-decl nil nominal_AC_term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ac_prb? const-decl "bool" nominal_AC_unification nil)
    (apply_sub const-decl "unif_pair" nominal_AC_unification nil)
    (all_ac_prb? const-decl "bool" nominal_AC_unification nil))
   shostak))
 (ac_prb_renaming 0
  (ac_prb_renaming-1 nil 3854626121
   ("" (skolem 1 ("rho" "up"))
    (("" (prop)
      (("1" (expand "ac_prb?")
        (("1" (flatten)
          (("1" (name-replace "t" "up`1")
            (("1" (name-replace "s" "up`2")
              (("1" (lemma "nominal_AC_term_ac_app_eta")
                (("1" (inst -1 "t")
                  (("1" (expand "apply_sub" 1)
                    (("1" (reveal -2 -3)
                      (("1" (replace -1)
                        (("1" (replace -2)
                          (("1" (replace -3 1 :dir rl)
                            (("1" (rewrite "subs_ac")
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "nominal_AC_term_ac_app_eta")
                                  (("1"
                                    (inst -1 "s")
                                    (("1"
                                      (replace -1 :dir rl)
                                      (("1"
                                        (rewrite "subs_ac")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "ac_prb?")
        (("2" (flatten)
          (("2" (expand "apply_sub")
            (("2" (typepred "rho")
              (("2" (name-replace "t" "up`1")
                (("2" (name-replace "s" "up`2")
                  (("2" (lemma "renaming_ord")
                    (("2" (inst -1 "rho" "t")
                      (("2" (expand "ord" -1)
                        (("2" (assert)
                          (("2" (lift-if)
                            (("2" (assert)
                              (("2"
                                (case "ac_app?(t)")
                                (("1"
                                  (hide -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case "ac_app?(s)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "nominal_AC_term_ac_app_eta")
                                          (("1"
                                            (inst -1 "t")
                                            (("1"
                                              (replace -1 -7 :dir rl)
                                              (("1"
                                                (rewrite "subs_ac")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "nominal_AC_term_ac_app_eta")
                                                    (("1"
                                                      (inst -1 "s")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           -8
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (rewrite
                                                             "subs_ac")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "renaming_ord")
                                        (("2"
                                          (inst -1 "rho" "s")
                                          (("2"
                                            (expand "ord" -1)
                                            (("2"
                                              (assert)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (apply_sub const-decl "unif_pair" nominal_AC_unification nil)
    (nominal_AC_term_ac_app_eta formula-decl nil nominal_AC_term_adt nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ac_prb? const-decl "bool" nominal_AC_unification nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (ord const-decl "upto(6)" nominal_AC_term_adt nil)
    (renaming_ord formula-decl nil nominal_AC_substitution nil))
   shostak))
 (all_ac_prb_renaming 0
  (all_ac_prb_renaming-1 nil 3854625403
   ("" (skolem 1 ("rho" "P"))
    (("" (prop)
      (("1" (expand "all_ac_prb?")
        (("1" (skolem 1 "up")
          (("1" (prop)
            (("1" (rewrite "apply_sub_unif_pair")
              (("1" (skolem -2 "up1")
                (("1" (flatten)
                  (("1" (inst -1 "up1")
                    (("1" (assert)
                      (("1" (replace -3 1)
                        (("1" (lemma "ac_prb_renaming")
                          (("1" (inst?) (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "all_ac_prb?")
        (("2" (skolem 1 "up")
          (("2" (prop)
            (("2" (inst -1 "apply_sub(rho, up)")
              (("2" (prop)
                (("1" (lemma "ac_prb_renaming")
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                 ("2" (rewrite "apply_sub_unif_pair")
                  (("2" (inst 1 "up") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub_unif_pair formula-decl nil nominal_AC_unification nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (ac_prb_renaming formula-decl nil nominal_AC_unification nil)
    (all_ac_prb? const-decl "bool" nominal_AC_unification nil)
    (apply_sub const-decl "unif_pair" nominal_AC_unification nil))
   shostak))
 (apply_sub_unifies 0
  (apply_sub_unifies-1 nil 3850242967
   ("" (skolem 1 ("G" "sigma" "sigma1" "P"))
    (("" (prop)
      (("1" (rewrite "unifies?_equiv")
        (("1" (rewrite "unifies?_equiv")
          (("1" (skolem 1 "u_pair")
            (("1" (flatten)
              (("1" (inst -1 "apply_sub(sigma1, u_pair)")
                (("1" (use "apply_sub_mem")
                  (("1" (hide -1)
                    (("1" (prop)
                      (("1" (expand "apply_sub" -1)
                        (("1" (expand "unifies?" -1)
                          (("1" (expand "unifies?" 1)
                            (("1" (rewrite "subs_append2")
                              (("1" (rewrite "subs_append2") nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (use "apply_sub_unif_pair")
                        (("2" (assert)
                          (("2" (inst 1 "u_pair") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (rewrite "unifies?_equiv")
        (("2" (rewrite "unifies?_equiv")
          (("2" (skolem 1 "u_pair")
            (("2" (flatten)
              (("2" (use "apply_sub_unif_pair")
                (("2" (assert)
                  (("2" (skolem -1 "u_pair1")
                    (("2" (flatten)
                      (("2" (inst -3 "u_pair1")
                        (("2" (assert)
                          (("2" (expand "unifies?")
                            (("2" (replace -2)
                              (("2"
                                (expand "apply_sub" 1)
                                (("2"
                                  (rewrite "subs_append2")
                                  (("2"
                                    (rewrite "subs_append2")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((append def-decl "list[T]" list_props nil)
    (apply_sub_mem formula-decl nil nominal_AC_unification nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (apply_sub_unif_pair formula-decl nil nominal_AC_unification nil)
    (apply_sub const-decl "unif_pair" nominal_AC_unification nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (unifies?_equiv formula-decl nil nominal_AC_unification nil))
   shostak))
 (apply_sub_unifies2 0
  (apply_sub_unifies2-1 nil 3887388817
   ("" (skolem 1 ("G" "sig" "sig1" "up"))
    (("" (expand "unifies?")
      (("" (expand "apply_sub")
        (("" (rewrite "subs_append2")
          (("" (rewrite "subs_append2") (("" (prop) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((unifies? const-decl "bool" nominal_AC_unification nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (apply_sub const-decl "unif_pair" nominal_AC_unification nil))
   shostak))
 (apply_sub_eq 0
  (apply_sub_eq-1 nil 3854739761
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "apply_sub" 1)
            (("2" (decompose-equality 1)
              (("1" (hide -1)
                (("1" (expand "apply_sub" 1)
                  (("1" (prop)
                    (("1" (lemma "equal_syn_t")
                      (("1" (inst?)
                        (("1" (assert) (("1" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (lemma "equal_syn_t") (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst -1 "sigma" "sigma1") (("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub const-decl "unif_pair" nominal_AC_unification nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (equal_syn_t formula-decl nil nominal_AC_substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (union const-decl "set" sets nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (equal_syn? const-decl "bool" nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (apply_sub_no_effect 0
  (apply_sub_no_effect-1 nil 3856374760
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "apply_sub" 1)
            (("2" (decompose-equality 1)
              (("1" (expand "apply_sub" 1)
                (("1" (lemma "subs_no_effect_t")
                  (("1" (hide -2)
                    (("1" (expand "vars" -2)
                      (("1" (decompose-equality 1)
                        (("1" (inst -1 "sigma" "hd`1")
                          (("1" (grind) nil nil)) nil)
                         ("2" (inst -1 "sigma" "hd`2")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst -1 "sigma") (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub const-decl "unif_pair" nominal_AC_unification nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (union const-decl "set" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (select_greater_cor 0
  (select_greater_cor-1 nil 3837707713
   ("" (measure-induct "length(unif_prb)" "unif_prb")
    (("" (skolem 1 "unif_prb1")
      (("" (flatten)
        (("" (prop)
          (("1" (expand "select_greater" 1)
            (("1" (lift-if)
              (("1" (assert)
                (("1" (split)
                  (("1" (flatten) (("1" (grind) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (split 2)
                      (("1" (flatten) (("1" (grind) nil nil)) nil)
                       ("2" (flatten)
                        (("2" (inst -1 "cdr(unif_prb1)")
                          (("2" (prop)
                            (("1" (expand "member" 2)
                              (("1" (assert) nil nil)) nil)
                             ("2" (hide 1 2) (("2" (grind) nil nil))
                              nil)
                             ("3" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (expand "select_greater" 1)
              (("2" (lift-if)
                (("2" (assert)
                  (("2" (split 1)
                    (("1" (flatten)
                      (("1" (hide -3)
                        (("1" (case "null?(cdr(unif_prb1))")
                          (("1" (expand "member" -3)
                            (("1" (prop)
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil)
                               ("3"
                                (expand "member" -1)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split 2)
                        (("1" (flatten)
                          (("1" (expand "member" -2)
                            (("1" (split -2)
                              (("1"
                                (hide -2 -3)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (inst -3 "cdr(unif_prb1)")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst -2 "t")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (hide -2 -3 1 2 3)
                                      (("2" (grind) nil nil))
                                      nil)
                                     ("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "member" -1)
                            (("2" (split -1)
                              (("1"
                                (hide -2)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (hide 1 2)
                                  (("2"
                                    (inst -2 "cdr(unif_prb1)")
                                    (("2"
                                      (prop)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (inst -1 "t")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 1 2)
                                        (("2" (grind) nil nil))
                                        nil)
                                       ("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (select_greater const-decl "nominal_AC_term" nominal_AC_unification nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (select_greater def-decl "nominal_AC_term" nominal_AC_unification nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (well_formed_unif_prb 0
  (well_formed_unif_prb-1 nil 3846963079
   ("" (skolem 1 "unif_prb1")
    (("" (prop)
      (("1" (skeep)
        (("1" (expand "well_formed?" 1)
          (("1" (prop)
            (("1" (expand "well_formed?" -2)
              (("1" (inst -2 "t") (("1" (assert) nil nil)) nil)) nil)
             ("2" (skolem 1 "ti")
              (("2" (prop)
                (("2" (expand "well_formed?" -3)
                  (("2" (inst -3 "ti")
                    (("2" (assert)
                      (("2" (rewrite "subterms_mem_unif_prb")
                        (("2" (inst 2 "t") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "well_formed?" 1)
        (("2" (skeep)
          (("2" (prop)
            (("1" (rewrite "subterms_mem_unif_prb")
              (("1" (skolem -1 "tS")
                (("1" (prop)
                  (("1" (inst -4 "tS")
                    (("1" (assert)
                      (("1" (expand "well_formed?" -4)
                        (("1" (prop)
                          (("1" (inst -4 "t") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst -3 "t") (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (subterms_mem_unif_prb formula-decl nil nominal_AC_unification nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil))
   shostak))
 (well_formed_apply_sub 0
  (well_formed_apply_sub-1 nil 3842186910
   ("" (skolem 1 ("sigma" "unif_prb1"))
    (("" (prop)
      (("" (expand "well_formed?" 1)
        (("" (skeep)
          (("" (prop)
            (("1" (rewrite "subterms_mem_unif_prb")
              (("1" (skolem -1 "tS")
                (("1" (prop)
                  (("1" (rewrite "apply_sub_mem")
                    (("1" (skolem -2 "tS_p")
                      (("1" (prop)
                        (("1" (lemma "well_formed_subs")
                          (("1" (inst -1 "sigma" "tS_p")
                            (("1" (assert)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "well_formed?" -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst -1 "t")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "well_formed_unif_prb")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst -1 "tS_p")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite "apply_sub_mem")
              (("2" (skolem -1 "s")
                (("2" (flatten)
                  (("2" (lemma "subs_pair2")
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (prop)
                          (("1" (rewrite "well_formed_unif_prb")
                            (("1" (inst -5 "s")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "well_formed?" -5)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "well_formed?" -6)
                            (("2" (inst -6 "V(s)")
                              (("2"
                                (assert)
                                (("2"
                                  (prop)
                                  (("2"
                                    (expand "subs" 1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lemma "nominal_AC_term_times_eta")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (replace -1 -4 :dir rl)
                                            (("2"
                                              (replace -4 -5)
                                              (("2"
                                                (rewrite
                                                 "subs_ext_pi"
                                                 -5)
                                                (("2"
                                                  (expand "subs" -5)
                                                  (("2"
                                                    (hide-all-but
                                                     (-5 1))
                                                    (("2"
                                                      (use
                                                       "ext_preserves_type")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (ext_preserves_type formula-decl nil nominal_AC_term_properties nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (ord const-decl "upto(6)" nominal_AC_term_adt nil)
    (subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (nominal_AC_term_times_eta formula-decl nil nominal_AC_term_adt nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs_pair2 formula-decl nil nominal_AC_substitution nil)
    (subterms_mem_unif_prb formula-decl nil nominal_AC_unification nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (well_formed_subs formula-decl nil nominal_AC_substitution nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (well_formed_unif_prb formula-decl nil nominal_AC_unification nil)
    (apply_sub_mem formula-decl nil nominal_AC_unification nil))
   shostak))
 (well_formed_subset 0
  (well_formed_subset-1 nil 3842362851
   ("" (skolem 1 ("unif_prb1" "unif_prb2"))
    (("" (prop)
      (("" (expand "subset?" -1)
        (("" (rewrite "well_formed_unif_prb")
          (("" (rewrite "well_formed_unif_prb")
            (("" (skeep)
              (("" (inst -2 "t")
                (("" (assert)
                  (("" (rewrite "member_unif_prb_equiv")
                    (("" (rewrite "member_unif_prb_equiv")
                      (("" (skolem -2 "unif_pair1")
                        (("" (flatten)
                          (("" (inst 1 "unif_pair1")
                            (("" (assert)
                              ((""
                                (inst -1 "unif_pair1")
                                (("" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((well_formed_unif_prb formula-decl nil nominal_AC_unification nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (member_unif_prb_equiv formula-decl nil nominal_AC_unification nil)
    (subset? const-decl "bool" nominal_AC_unification nil))
   shostak))
 (well_formed_unif_prb_append 0
  (well_formed_unif_prb_append-1 nil 3882858375
   ("" (skeep)
    (("" (prop)
      (("1" (rewrite "well_formed_unif_prb")
        (("1" (rewrite "well_formed_unif_prb")
          (("1" (skeep)
            (("1" (inst -2 "t")
              (("1" (assert)
                (("1" (rewrite "member_unif_prb_append") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (rewrite "well_formed_unif_prb")
        (("2" (rewrite "well_formed_unif_prb")
          (("2" (skeep)
            (("2" (inst -2 "t")
              (("2" (prop)
                (("2" (rewrite "member_unif_prb_append")
                  (("2" (prop) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (rewrite "well_formed_unif_prb")
        (("3" (rewrite "well_formed_unif_prb")
          (("3" (rewrite "well_formed_unif_prb")
            (("3" (skeep)
              (("3" (inst -1 "t")
                (("3" (inst -2 "t")
                  (("3" (assert)
                    (("3" (rewrite "member_unif_prb_append") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((append def-decl "list[T]" list_props nil)
    (member_unif_prb_append formula-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (well_formed_unif_prb formula-decl nil nominal_AC_unification nil))
   shostak))
 (unifies?_impossible_TCC1 0
  (unifies?_impossible_TCC1-1 nil 3844435724
   ("" (use "equal?_equiv") nil nil)
   ((equal?_equiv formula-decl nil nominal_AC_equality nil)) nil
   (unifies?_impossible subtype "nominal_AC_equality.equal?(nominal_AC_unification.G)"
    "equiv[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]")))
 (unifies?_impossible 0
  (unifies?_impossible-2 nil 3881759524
   ("" (measure-induct "size(t)" "t")
    (("1" (skolem 1 "t")
      (("1" (prop)
        (("1" (hide -1)
          (("1" (skeep)
            (("1" (expand "same_count?" 1)
              (("1" (skolem 1 "ti")
                (("1" (case "count(ti, get_args(f)(t), equal?(G)) = 0")
                  (("1" (replace -1)
                    (("1" (lemma "count_gt0[nominal_AC_term]")
                      (("1" (inst -1 "equal?(G)" "get_args(f)(s)" "ti")
                        (("1" (prop)
                          (("1" (skolem -1 "i")
                            (("1" (lemma "get_args_nth")
                              (("1"
                                (inst -1 "f" "i+1" "s")
                                (("1"
                                  (prop)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (expand "unifies?" -6)
                                        (("1"
                                          (lemma "ac_perm_args2")
                                          (("1"
                                            (inst
                                             -1
                                             "G1"
                                             "f"
                                             "subs(delta)(s)"
                                             "subs(delta)(t)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "num_arg(f, s) = 1")
                                                (("1"
                                                  (name-replace
                                                   "t_first"
                                                   "select(f, t)(1)")
                                                  (("1"
                                                    (inst -6 "t_first")
                                                    (("1"
                                                      (case
                                                       "count(t_first, get_args(f)(t), equal?(G)) > 0")
                                                      (("1"
                                                        (lemma
                                                         "count_gt0[nominal_AC_term]")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "equal?(G)"
                                                           "get_args(f)(s)"
                                                           "t_first")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skolem
                                                               -1
                                                               "j")
                                                              (("1"
                                                                (lemma
                                                                 "get_args_nth")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "f"
                                                                   "j+1"
                                                                   "s")
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (case
                                                                         "equal?(G)(ti, t_first)")
                                                                        (("1"
                                                                          (lemma
                                                                           "count_eq[nominal_AC_term]")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "equal?(G)"
                                                                             "get_args(f)(t)"
                                                                             "ti"
                                                                             "t_first")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           "j")
                                                                          (("2"
                                                                            (rewrite
                                                                             "get_args_len")
                                                                            (("2"
                                                                              (typepred
                                                                               "i")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "get_args_len")
                                                                                (("2"
                                                                                  (replace
                                                                                   -7)
                                                                                  (("2"
                                                                                    (case
                                                                                     "i = 0 AND j = 0")
                                                                                    (("1"
                                                                                      (hide
                                                                                       -2
                                                                                       -3)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -2)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "equal?_sym")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "G"
                                                                                                   "select(f, s)(1)"
                                                                                                   "t_first")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -5)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "equal?_trans")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "G"
                                                                                                           "ti"
                                                                                                           "select(f, s)(1)"
                                                                                                           "t_first")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "j")
                                                                      (("2"
                                                                        (expand
                                                                         "nice_ind?"
                                                                         1)
                                                                        (("2"
                                                                          (rewrite
                                                                           "get_args_len")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "count_mem[nominal_AC_term]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "equal?(G)"
                                                           "get_args(f)(t)"
                                                           "t_first")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "get_args"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "from_min2max"
                                                                 1)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (split)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (lemma
                                                                         "num_arg_ge1")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "f"
                                                                           "t")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (split
                                                                         2)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (expand
                                                                             "map"
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "member"
                                                                               1)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (expand
                                                                             "map"
                                                                             2
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "member"
                                                                               2
                                                                               1)
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "subs_perm_get_args_ge1")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "G1"
                                                     "f"
                                                     "1+i"
                                                     "delta"
                                                     "s")
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (lemma
                                                         "perm?_size2")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (rewrite
                                                               "map_append2")
                                                              (("1"
                                                                (rewrite
                                                                 "sum_append")
                                                                (("1"
                                                                  (hide
                                                                   -2)
                                                                  (("1"
                                                                    (lemma
                                                                     "perm?_size2")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "G1"
                                                                       "get_args(f)(subs(delta)(t))"
                                                                       "get_args(f)(subs(delta)(s))")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (case
                                                                               "num_arg(f, s) > 1")
                                                                              (("1"
                                                                                (hide
                                                                                 1)
                                                                                (("1"
                                                                                  (case
                                                                                   "FORALL t1: count(t1, get_args(f)(delete(f, s)(1+i)), equal?(G)) >= count(t1, get_args(f)(t), equal?(G))")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "subs_count_ge")
                                                                                    (("1"
                                                                                      (hide
                                                                                       -8)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "G"
                                                                                         "G1"
                                                                                         "f"
                                                                                         "delete(f, s)(1+i)"
                                                                                         "delta"
                                                                                         "t")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -2)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "count_size2_ge")
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (prop)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (name-replace
                                                                                                         "si_delta"
                                                                                                         "subs(delta)(select(f, s)(1 + i))")
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -4)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "get_args"
                                                                                                             -3
                                                                                                             3)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "from_min2max"
                                                                                                               -3
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (lift-if)
                                                                                                                (("1"
                                                                                                                  (split)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "num_arg_ge1")
                                                                                                                      (("1"
                                                                                                                        (inst?)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "map"
                                                                                                                           -2
                                                                                                                           4)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "map"
                                                                                                                             -2
                                                                                                                             3)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "sum"
                                                                                                                               -2
                                                                                                                               3)
                                                                                                                              (("1"
                                                                                                                                (hide-all-but
                                                                                                                                 (-2
                                                                                                                                  -3))
                                                                                                                                (("1"
                                                                                                                                  (lemma
                                                                                                                                   "size2_ge0")
                                                                                                                                  (("1"
                                                                                                                                    (inst?)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "map"
                                                                                                                           -1
                                                                                                                           4)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "map"
                                                                                                                             -1
                                                                                                                             3)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "sum"
                                                                                                                               -1
                                                                                                                               3)
                                                                                                                              (("2"
                                                                                                                                (hide-all-but
                                                                                                                                 (-1
                                                                                                                                  -2))
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   "size2_ge0")
                                                                                                                                  (("2"
                                                                                                                                    (inst?)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -2)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "subs_perm_get_args_ge1")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "G"
                                                                                           "f"
                                                                                           "1+i"
                                                                                           "null"
                                                                                           "s")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "subs"
                                                                                               -1)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "perm?_equiv_same_count?")
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "same_count?"
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "t1")
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             "count_append")
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "get_args_not_pair_ac")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "f"
                                                                                                                 "select(f, s)(1+i)")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (prop)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "count"
                                                                                                                         -2
                                                                                                                         3)
                                                                                                                        (("1"
                                                                                                                          (lift-if)
                                                                                                                          (("1"
                                                                                                                            (split
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "count_eq[nominal_AC_term]")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "equal?(G)"
                                                                                                                                   "get_args(f)(t)"
                                                                                                                                   "t1"
                                                                                                                                   "ti")
                                                                                                                                  (("1"
                                                                                                                                    (prop)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -8)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide-all-but
                                                                                                                                       (-1
                                                                                                                                        -6
                                                                                                                                        1))
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "equal?_sym")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "G"
                                                                                                                                           "select(f, s)(1+i)"
                                                                                                                                           "ti")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "equal?_trans")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 "G"
                                                                                                                                                 "t1"
                                                                                                                                                 "select(f, s)(1+i)"
                                                                                                                                                 "ti")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "count"
                                                                                                                                 -1
                                                                                                                                 3)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -7
                                                                                                                                   "t1")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (use
                                                                                                                       "select_not_pair")
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (use
                                                                                                                       "select_not_ac")
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 "num_arg_ge1")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "num_arg_ge1")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "i")
                                    (("2"
                                      (expand "nice_ind?" 1)
                                      (("2"
                                        (rewrite "get_args_len")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "count_gt0[nominal_AC_term]")
                    (("2" (inst -1 "equal?(G)" "get_args(f)(t)" "ti")
                      (("2" (assert)
                        (("2" (skolem -1 "i")
                          (("2" (lemma "get_args_nth")
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (prop)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (expand "unifies?" -5)
                                        (("1"
                                          (lemma "ac_perm_args2")
                                          (("1"
                                            (inst
                                             -1
                                             "G1"
                                             "f"
                                             "subs(delta)(s)"
                                             "subs(delta)(t)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "num_arg(f, t) = 1")
                                                (("1"
                                                  (lemma
                                                   "subs_get_args1")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (inst -1 "1+i")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (case
                                                             "i = 0")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     -5
                                                                     "ti")
                                                                    (("1"
                                                                      (case
                                                                       "num_arg(f, s) = 1")
                                                                      (("1"
                                                                        (expand
                                                                         "get_args"
                                                                         -6
                                                                         1)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "from_min2max"
                                                                             -6)
                                                                            (("1"
                                                                              (expand
                                                                               "map"
                                                                               -6)
                                                                              (("1"
                                                                                (expand
                                                                                 "map"
                                                                                 -6)
                                                                                (("1"
                                                                                  (expand
                                                                                   "get_args"
                                                                                   -6
                                                                                   1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -3)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "from_min2max"
                                                                                       -6)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "map"
                                                                                         -6)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "map"
                                                                                           -6)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "count"
                                                                                             -6
                                                                                             2)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "count"
                                                                                               -6
                                                                                               2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "count"
                                                                                                 -6)
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -6)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "count"
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "get_args"
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -3)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -5)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "from_min2max"
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "map"
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "map"
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "count"
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (lift-if)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "count"
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (case
                                                                         "num_arg(f, s) > 1")
                                                                        (("1"
                                                                          (hide
                                                                           1)
                                                                          (("1"
                                                                            (lemma
                                                                             "count_gt0[nominal_AC_term]")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "equal?(G)"
                                                                               "get_args(f)(s)"
                                                                               "ti")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (skolem
                                                                                   -1
                                                                                   "j")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "get_args_nth")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "subs_perm_get_args_ge1")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "G1"
                                                                                                   "f"
                                                                                                   "1+j"
                                                                                                   "delta"
                                                                                                   "s")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "perm?_size2")
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         2)
                                                                                                        (("1"
                                                                                                          (inst?)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "perm?_size2")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "G1"
                                                                                                                   "get_args(f)(subs(delta)(select(f, t)(1)))"
                                                                                                                   "get_args(f)(subs(delta)(s))")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -2)
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         -2)
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "map_append2")
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "sum_append")
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "equal?(G)(select(f, t)(1), select(f, s)(1+j))")
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "subs_equal?")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "G"
                                                                                                                                   "G1"
                                                                                                                                   "select(f, s)(1+j)"
                                                                                                                                   "delta"
                                                                                                                                   "select(f, t)(1)")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       -2)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "ac_perm_args2")
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "G1"
                                                                                                                                           "f"
                                                                                                                                           "subs(delta)(select(f, s)(1 + j))"
                                                                                                                                           "subs(delta)(select(f, t)(1))")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (lemma
                                                                                                                                               "perm?_size2")
                                                                                                                                              (("1"
                                                                                                                                                (inst?)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (name-replace
                                                                                                                                                         "sj_delta"
                                                                                                                                                         "subs(delta)(delete(f, s)(1 + j))")
                                                                                                                                                        (("1"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           -4)
                                                                                                                                                          (("1"
                                                                                                                                                            (use
                                                                                                                                                             "size2_get_args")
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -1
                                                                                                                                                               :dir
                                                                                                                                                               rl)
                                                                                                                                                              (("1"
                                                                                                                                                                (lemma
                                                                                                                                                                 "size2_ge0")
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst?)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide-all-but
                                                                                                                                 (-2
                                                                                                                                  -7
                                                                                                                                  1))
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   "equal?_sym")
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "G"
                                                                                                                                     "select(f, t)(1)"
                                                                                                                                     "ti")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "equal?_trans")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "G"
                                                                                                                                           "select(f, t)(1)"
                                                                                                                                           "ti"
                                                                                                                                           "select(f, s)(1+j)")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "j")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "nice_ind?"
                                                                                               1)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "get_args_len")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "num_arg_ge1")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "i")
                                                              (("2"
                                                                (rewrite
                                                                 "get_args_len")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case
                                                   "num_arg(f, t) > 1")
                                                  (("1"
                                                    (hide 1)
                                                    (("1"
                                                      (case
                                                       "num_arg(f, s) > 1")
                                                      (("1"
                                                        (lemma
                                                         "subs_perm_get_args_ge1")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "G"
                                                           "f"
                                                           "1+i"
                                                           "null"
                                                           "t")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "subs"
                                                               -1)
                                                              (("1"
                                                                (lemma
                                                                 "perm?_equiv_same_count?")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       -2)
                                                                      (("1"
                                                                        (expand
                                                                         "same_count?"
                                                                         -1)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "ti")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             2)
                                                                            (("1"
                                                                              (rewrite
                                                                               "count_append")
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (inst
                                                                                   -5
                                                                                   "ti")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "count_gt0[nominal_AC_term]")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "equal?(G)"
                                                                                       "get_args(f)(s)"
                                                                                       "ti")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (skolem
                                                                                           -1
                                                                                           "j")
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "get_args_nth")
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (prop)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "subs_perm_get_args_ge1")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "G"
                                                                                                         "f"
                                                                                                         "1+j"
                                                                                                         "null"
                                                                                                         "s")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "subs"
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "perm?_equiv_same_count?")
                                                                                                              (("1"
                                                                                                                (inst?)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -2)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "same_count?"
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "ti")
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -1
                                                                                                                           2)
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "count_append")
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "ac_perm_args2")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "G"
                                                                                                                                   "f"
                                                                                                                                   "select(f, t)(1+i)"
                                                                                                                                   "select(f, s)(1+j)")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (prop)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "perm?_equiv_same_count?")
                                                                                                                                        (("1"
                                                                                                                                          (inst?)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "same_count?"
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 "ti")
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (hide-all-but
                                                                                                                                                       2)
                                                                                                                                                      (("1"
                                                                                                                                                        (reveal
                                                                                                                                                         -27)
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -1
                                                                                                                                                           "delete(f, t)(1+i)")
                                                                                                                                                          (("1"
                                                                                                                                                            (reveal
                                                                                                                                                             -5
                                                                                                                                                             -6)
                                                                                                                                                            (("1"
                                                                                                                                                              (prop)
                                                                                                                                                              (("1"
                                                                                                                                                                (inst
                                                                                                                                                                 -1
                                                                                                                                                                 "G"
                                                                                                                                                                 "G1"
                                                                                                                                                                 "delta"
                                                                                                                                                                 "f"
                                                                                                                                                                 "delete(f, s)(1+j)")
                                                                                                                                                                (("1"
                                                                                                                                                                  (reveal
                                                                                                                                                                   -8
                                                                                                                                                                   -11
                                                                                                                                                                   -5
                                                                                                                                                                   -8)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (reveal
                                                                                                                                                                     -9)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (case
                                                                                                                                                                       "equal?(G)(select(f, t)(1+i), select(f, s)(1+j))")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (case
                                                                                                                                                                         "are_ac?(delete(f, t)(1 + i), delete(f, s)(1 + j), f)")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (prop)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (expand
                                                                                                                                                                               "unifies?"
                                                                                                                                                                               1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (lemma
                                                                                                                                                                                 "perm_args_ac")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -1
                                                                                                                                                                                   "G1"
                                                                                                                                                                                   "subs(delta)(delete(f, s)(1 + j))"
                                                                                                                                                                                   "f"
                                                                                                                                                                                   "subs(delta)(delete(f, t)(1 + i))")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (prop)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (hide
                                                                                                                                                                                         2
                                                                                                                                                                                         3)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (hide
                                                                                                                                                                                           -3
                                                                                                                                                                                           -4)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (reveal
                                                                                                                                                                                             -4)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (lemma
                                                                                                                                                                                               "subs_perm_get_args_ge1")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (inst
                                                                                                                                                                                                 -1
                                                                                                                                                                                                 "G1"
                                                                                                                                                                                                 "f"
                                                                                                                                                                                                 "i+1"
                                                                                                                                                                                                 "delta"
                                                                                                                                                                                                 "t")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (lemma
                                                                                                                                                                                                     "perm?_sym")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (inst
                                                                                                                                                                                                       -1
                                                                                                                                                                                                       "G1"
                                                                                                                                                                                                       "get_args(f)(subs(delta)(t))"
                                                                                                                                                                                                       "append(get_args(f)(subs(delta)(select(f, t)(1 + i))),
                                                                           get_args(f)(subs(delta)(delete(f, t)(1 + i))))")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (hide
                                                                                                                                                                                                           -2)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (lemma
                                                                                                                                                                                                             "perm?_trans")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (inst
                                                                                                                                                                                                               -1
                                                                                                                                                                                                               "G1"
                                                                                                                                                                                                               "append(get_args(f)(subs(delta)(select(f, t)(1 + i))), get_args(f)(subs(delta)(delete(f, t)(1 + i))))"
                                                                                                                                                                                                               "get_args(f)(subs(delta)(t))"
                                                                                                                                                                                                               "get_args(f)(subs(delta)(s))")
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (hide
                                                                                                                                                                                                                   -2
                                                                                                                                                                                                                   -3
                                                                                                                                                                                                                   -6)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (lemma
                                                                                                                                                                                                                     "subs_perm_get_args_ge1")
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (inst
                                                                                                                                                                                                                       -1
                                                                                                                                                                                                                       "G1"
                                                                                                                                                                                                                       "f"
                                                                                                                                                                                                                       "1+j"
                                                                                                                                                                                                                       "delta"
                                                                                                                                                                                                                       "s")
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (lemma
                                                                                                                                                                                                                           "perm?_trans")
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (inst
                                                                                                                                                                                                                             -1
                                                                                                                                                                                                                             "G1"
                                                                                                                                                                                                                             "append(get_args(f)(subs(delta)(select(f, t)(1 + i))), get_args(f)(subs(delta)(delete(f, t)(1 + i))))"
                                                                                                                                                                                                                             "get_args(f)(subs(delta)(s))"
                                                                                                                                                                                                                             "append(get_args(f)(subs(delta)(select(f, s)(1 + j))), get_args(f)(subs(delta)(delete(f, s)(1 + j))))")
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (hide
                                                                                                                                                                                                                                 -2
                                                                                                                                                                                                                                 -3)
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (lemma
                                                                                                                                                                                                                                   "perm?_equiv_same_count?")
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (inst?)
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (hide
                                                                                                                                                                                                                                         -2)
                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                          (lemma
                                                                                                                                                                                                                                           "perm?_equiv_same_count?")
                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                            (inst?)
                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                (hide
                                                                                                                                                                                                                                                 2)
                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                                                   "same_count?"
                                                                                                                                                                                                                                                   1)
                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                    (skolem
                                                                                                                                                                                                                                                     1
                                                                                                                                                                                                                                                     "t2")
                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                                       "same_count?"
                                                                                                                                                                                                                                                       -1)
                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                        (inst
                                                                                                                                                                                                                                                         -1
                                                                                                                                                                                                                                                         "t2")
                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                          (rewrite
                                                                                                                                                                                                                                                           "count_append")
                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                            (rewrite
                                                                                                                                                                                                                                                             "count_append")
                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                              (lemma
                                                                                                                                                                                                                                                               "subs_equal?")
                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                (inst
                                                                                                                                                                                                                                                                 -1
                                                                                                                                                                                                                                                                 "G"
                                                                                                                                                                                                                                                                 "G1"
                                                                                                                                                                                                                                                                 "select(f, s)(1 + j)"
                                                                                                                                                                                                                                                                 "delta"
                                                                                                                                                                                                                                                                 "select(f, t)(1 + i)")
                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                                    (lemma
                                                                                                                                                                                                                                                                     "ac_perm_args2")
                                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                                      (hide
                                                                                                                                                                                                                                                                       -5)
                                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                                        (inst
                                                                                                                                                                                                                                                                         -1
                                                                                                                                                                                                                                                                         "G1"
                                                                                                                                                                                                                                                                         "f"
                                                                                                                                                                                                                                                                         "subs(delta)(select(f, s)(1 + j))"
                                                                                                                                                                                                                                                                         "subs(delta)(select(f, t)(1 + i))")
                                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                                            (lemma
                                                                                                                                                                                                                                                                             "perm?_equiv_same_count?")
                                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                                              (inst?)
                                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                                  (hide
                                                                                                                                                                                                                                                                                   -2
                                                                                                                                                                                                                                                                                   -3)
                                                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                                                                                     "same_count?"
                                                                                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                                                      (inst
                                                                                                                                                                                                                                                                                       -1
                                                                                                                                                                                                                                                                                       "t2")
                                                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                                                        (replace
                                                                                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "are_ac?")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (flatten)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (hide
                                                                                                                                                                                             -5
                                                                                                                                                                                             -6
                                                                                                                                                                                             -7
                                                                                                                                                                                             -8
                                                                                                                                                                                             2
                                                                                                                                                                                             3)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (lemma
                                                                                                                                                                                               "nominal_AC_term_ac_app_eta")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (inst
                                                                                                                                                                                                 -1
                                                                                                                                                                                                 "delete(f, t)(1+i)")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (replace
                                                                                                                                                                                                   -4
                                                                                                                                                                                                   :dir
                                                                                                                                                                                                   rl)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (replace
                                                                                                                                                                                                     -1
                                                                                                                                                                                                     1
                                                                                                                                                                                                     :dir
                                                                                                                                                                                                     rl)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (rewrite
                                                                                                                                                                                                       "subs_ac")
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (hide
                                                                                                                                                                                                           -1)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (lemma
                                                                                                                                                                                                             "nominal_AC_term_ac_app_eta")
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (inst
                                                                                                                                                                                                               -1
                                                                                                                                                                                                               "delete(f, s)(1+j)")
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (replace
                                                                                                                                                                                                                 -1
                                                                                                                                                                                                                 1
                                                                                                                                                                                                                 :dir
                                                                                                                                                                                                                 rl)
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (replace
                                                                                                                                                                                                                   -5
                                                                                                                                                                                                                   1
                                                                                                                                                                                                                   :dir
                                                                                                                                                                                                                   rl)
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (rewrite
                                                                                                                                                                                                                     "subs_ac")
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (hide
                                                                                                                                                                               2
                                                                                                                                                                               -1
                                                                                                                                                                               -2
                                                                                                                                                                               -3
                                                                                                                                                                               -4
                                                                                                                                                                               -5)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (reveal
                                                                                                                                                                                 -20)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (reveal
                                                                                                                                                                                   -19
                                                                                                                                                                                   -23)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (skolem
                                                                                                                                                                                     1
                                                                                                                                                                                     "t2")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (inst
                                                                                                                                                                                       -3
                                                                                                                                                                                       "t2")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (reveal
                                                                                                                                                                                         -2)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (reveal
                                                                                                                                                                                           -5)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (lemma
                                                                                                                                                                                             "perm?_equiv_same_count?")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (inst
                                                                                                                                                                                               -1
                                                                                                                                                                                               "G"
                                                                                                                                                                                               "get_args(f)(s)"
                                                                                                                                                                                               "append(get_args(f)(select(f, s)(1 + j)), get_args(f)(delete(f, s)(1 + j)))")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (prop)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (hide
                                                                                                                                                                                                   -1
                                                                                                                                                                                                   -5)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (lemma
                                                                                                                                                                                                     "perm?_equiv_same_count?")
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (inst
                                                                                                                                                                                                       -1
                                                                                                                                                                                                       "G"
                                                                                                                                                                                                       "get_args(f)(t)"
                                                                                                                                                                                                       "append(get_args(f)(select(f, t)(1 + i)), get_args(f)(delete(f, t)(1 + i)))")
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (prop)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (hide
                                                                                                                                                                                                           -1
                                                                                                                                                                                                           -6)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (lemma
                                                                                                                                                                                                             "perm?_equiv_same_count?")
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (inst
                                                                                                                                                                                                               -1
                                                                                                                                                                                                               "G"
                                                                                                                                                                                                               "get_args(f)(select(f, s)(1 + j))"
                                                                                                                                                                                                               "get_args(f)(select(f, t)(1 + i))")
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (prop)
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (hide
                                                                                                                                                                                                                   -1
                                                                                                                                                                                                                   -5)
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                     "same_count?"
                                                                                                                                                                                                                     -2)
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (inst
                                                                                                                                                                                                                       -2
                                                                                                                                                                                                                       "t2")
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (replace
                                                                                                                                                                                                                         -2
                                                                                                                                                                                                                         -5)
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (rewrite
                                                                                                                                                                                                                           "count_append")
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (hide
                                                                                                                                                                                                                             -2)
                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                               "same_count?"
                                                                                                                                                                                                                               -2)
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (inst
                                                                                                                                                                                                                                 -2
                                                                                                                                                                                                                                 "t2")
                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                  (replace
                                                                                                                                                                                                                                   -2
                                                                                                                                                                                                                                   -4)
                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                    (hide
                                                                                                                                                                                                                                     -2)
                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                      (rewrite
                                                                                                                                                                                                                                       "count_append"
                                                                                                                                                                                                                                       -3)
                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                                         "same_count?"
                                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                          (inst
                                                                                                                                                                                                                                           -1
                                                                                                                                                                                                                                           "t2")
                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                            (replace
                                                                                                                                                                                                                                             -1)
                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("3"
                                                                                                                                                                              (expand
                                                                                                                                                                               "same_count?"
                                                                                                                                                                               -1)
                                                                                                                                                                              (("3"
                                                                                                                                                                                (inst
                                                                                                                                                                                 -1
                                                                                                                                                                                 "ti")
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (hide
                                                                                                                                                                           -6
                                                                                                                                                                           2)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "are_ac?")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (flatten)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (lemma
                                                                                                                                                                                 "delete_ac_num_arg_gt1")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -1
                                                                                                                                                                                   "f"
                                                                                                                                                                                   "1+i"
                                                                                                                                                                                   "t")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "is_ac_sym?"
                                                                                                                                                                                       -1
                                                                                                                                                                                       1)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "is_ac_sym?"
                                                                                                                                                                                         -1)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (flatten)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (lemma
                                                                                                                                                                                               "delete_ac_num_arg_gt1")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (inst
                                                                                                                                                                                                 -1
                                                                                                                                                                                                 "f"
                                                                                                                                                                                                 "1+j"
                                                                                                                                                                                                 "s")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "is_ac_sym?"
                                                                                                                                                                                                     -1
                                                                                                                                                                                                     1)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "is_ac_sym?"
                                                                                                                                                                                                       -1)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (propax)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (hide-all-but
                                                                                                                                                                         (-1
                                                                                                                                                                          -2
                                                                                                                                                                          1))
                                                                                                                                                                        (("2"
                                                                                                                                                                          (lemma
                                                                                                                                                                           "equal?_sym")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (inst
                                                                                                                                                                             -1
                                                                                                                                                                             "G"
                                                                                                                                                                             "select(f, t)(1 + i)"
                                                                                                                                                                             "ti")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (lemma
                                                                                                                                                                                 "equal?_trans")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -1
                                                                                                                                                                                   "G"
                                                                                                                                                                                   "select(f, t)(1+i)"
                                                                                                                                                                                   "ti"
                                                                                                                                                                                   "select(f, s)(1+j)")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (lemma
                                                                                                                                                                 "num_arg_delete_size")
                                                                                                                                                                (("2"
                                                                                                                                                                  (inst?)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (hide-all-but
                                                                                                                                         (-2
                                                                                                                                          -6
                                                                                                                                          1))
                                                                                                                                        (("2"
                                                                                                                                          (lemma
                                                                                                                                           "equal?_sym")
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "G"
                                                                                                                                             "select(f, s)(1 + j)"
                                                                                                                                             "ti")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "equal?_trans")
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   -1
                                                                                                                                                   "G"
                                                                                                                                                   "select(f, s)(1 + j)"
                                                                                                                                                   "ti"
                                                                                                                                                   "select(f, t)(1+i)")
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "nice_ind?"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "j")
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         "get_args_len")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "num_arg(f, s) = 1")
                                                        (("1"
                                                          (hide 1)
                                                          (("1"
                                                            (hide
                                                             -6
                                                             1
                                                             2)
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "select(f, t)(1)")
                                                              (("1"
                                                                (hide
                                                                 -3
                                                                 -4)
                                                                (("1"
                                                                  (expand
                                                                   "get_args"
                                                                   -3
                                                                   2)
                                                                  (("1"
                                                                    (expand
                                                                     "from_min2max"
                                                                     -3
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "map"
                                                                         -3
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "count"
                                                                           -3
                                                                           2)
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (split)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (expand
                                                                                   "get_args"
                                                                                   -2
                                                                                   1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -3)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "from_min2max"
                                                                                       -2
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "map"
                                                                                         -2
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "map"
                                                                                           -2
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "count"
                                                                                             -2
                                                                                             1)
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (reveal
                                                                                                         -4)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "select(f, t)(2)")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "get_args"
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -4)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "from_min2max"
                                                                                                                 -1
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "map"
                                                                                                                   -1
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "count"
                                                                                                                     -1
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (lift-if)
                                                                                                                      (("1"
                                                                                                                        (split)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "from_min2max"
                                                                                                                             -2
                                                                                                                             2)
                                                                                                                            (("1"
                                                                                                                              (lift-if)
                                                                                                                              (("1"
                                                                                                                                (split
                                                                                                                                 -2)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "map"
                                                                                                                                     -2
                                                                                                                                     2)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "map"
                                                                                                                                       -2
                                                                                                                                       2)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "count"
                                                                                                                                         -2
                                                                                                                                         2)
                                                                                                                                        (("1"
                                                                                                                                          (lift-if)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (split
                                                                                                                                               -2)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "from_min2max"
                                                                                                                                                   -2)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "map"
                                                                                                                                                     -2)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "count"
                                                                                                                                                       -2)
                                                                                                                                                      (("1"
                                                                                                                                                        (lift-if)
                                                                                                                                                        (("1"
                                                                                                                                                          (split)
                                                                                                                                                          (("1"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("1"
                                                                                                                                                              (grind)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (flatten)
                                                                                                                                                (("2"
                                                                                                                                                  (rewrite
                                                                                                                                                   "equal?_ref")
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "map"
                                                                                                                                     -1
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "count"
                                                                                                                                       -1
                                                                                                                                       2)
                                                                                                                                      (("2"
                                                                                                                                        (lift-if)
                                                                                                                                        (("2"
                                                                                                                                          (split)
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "from_min2max"
                                                                                                                                               -2
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "map"
                                                                                                                                                 -2
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "count"
                                                                                                                                                   -2
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (lift-if)
                                                                                                                                                    (("1"
                                                                                                                                                      (split)
                                                                                                                                                      (("1"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (flatten)
                                                                                                                                            (("2"
                                                                                                                                              (rewrite
                                                                                                                                               "equal?_ref")
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "from_min2max"
                                                                                                                             -1
                                                                                                                             2)
                                                                                                                            (("2"
                                                                                                                              (lift-if)
                                                                                                                              (("2"
                                                                                                                                (split)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "map"
                                                                                                                                     -2
                                                                                                                                     2)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "count"
                                                                                                                                       -2
                                                                                                                                       2)
                                                                                                                                      (("1"
                                                                                                                                        (lift-if)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (split
                                                                                                                                             -2)
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "from_min2max"
                                                                                                                                                 -2)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "map"
                                                                                                                                                   -2
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "map"
                                                                                                                                                     -2
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "count"
                                                                                                                                                       -2
                                                                                                                                                       1)
                                                                                                                                                      (("1"
                                                                                                                                                        (lift-if)
                                                                                                                                                        (("1"
                                                                                                                                                          (split)
                                                                                                                                                          (("1"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("1"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               (-1
                                                                                                                                                                -5
                                                                                                                                                                1))
                                                                                                                                                              (("1"
                                                                                                                                                                (lemma
                                                                                                                                                                 "equal?_sym")
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst
                                                                                                                                                                   -1
                                                                                                                                                                   "G"
                                                                                                                                                                   "select(f, s)(1)"
                                                                                                                                                                   "select(f, t)(1)")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lemma
                                                                                                                                                                       "equal?_trans")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (inst
                                                                                                                                                                         -1
                                                                                                                                                                         "G"
                                                                                                                                                                         "select(f, t)(2)"
                                                                                                                                                                         "select(f, s)(1)"
                                                                                                                                                                         "select(f, t)(1)")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "count"
                                                                                                                                                               -1
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (flatten)
                                                                                                                                              (("2"
                                                                                                                                                (rewrite
                                                                                                                                                 "equal?_ref")
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "map"
                                                                                                                                     -1
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "count"
                                                                                                                                       -1
                                                                                                                                       2)
                                                                                                                                      (("2"
                                                                                                                                        (lift-if)
                                                                                                                                        (("2"
                                                                                                                                          (split)
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "from_min2max"
                                                                                                                                               -2
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "map"
                                                                                                                                                 -2
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "map"
                                                                                                                                                   -2
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "count"
                                                                                                                                                     -2
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (lift-if)
                                                                                                                                                      (("1"
                                                                                                                                                        (split
                                                                                                                                                         -2)
                                                                                                                                                        (("1"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("1"
                                                                                                                                                            (hide-all-but
                                                                                                                                                             (-1
                                                                                                                                                              -4
                                                                                                                                                              2))
                                                                                                                                                            (("1"
                                                                                                                                                              (lemma
                                                                                                                                                               "equal?_sym")
                                                                                                                                                              (("1"
                                                                                                                                                                (inst
                                                                                                                                                                 -1
                                                                                                                                                                 "G"
                                                                                                                                                                 "select(f, s)(1)"
                                                                                                                                                                 "select(f, t)(1)")
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (hide
                                                                                                                                                                     -3)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lemma
                                                                                                                                                                       "equal?_trans")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (inst
                                                                                                                                                                         -1
                                                                                                                                                                         "G"
                                                                                                                                                                         "select(f, t)(2)"
                                                                                                                                                                         "select(f, s)(1)"
                                                                                                                                                                         "select(f, t)(1)")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             "count"
                                                                                                                                                             -1
                                                                                                                                                             1)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (flatten)
                                                                                                                                            (("2"
                                                                                                                                              (rewrite
                                                                                                                                               "equal?_ref")
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "count"
                                                                                                     -1
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "equal?_ref")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "num_arg_ge1")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "num_arg_ge1")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "i")
                                    (("2"
                                      (rewrite "get_args_len")
                                      (("2"
                                        (expand "nice_ind?")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep) (("2" (rewrite "equal?_equiv") nil nil)) nil)) nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "equal?_equiv") nil nil)) nil))
      nil))
    nil)
   ((equal?_equiv formula-decl nil nominal_AC_equality nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (count_gt0 formula-decl nil list_aux_equational_reasoning nil)
    (get_args_nth formula-decl nil nominal_AC_term_properties nil)
    (ac_perm_args2 formula-decl nil nominal_AC_equality nil)
    (subs_perm_get_args_ge1 formula-decl nil nominal_AC_substitution nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (append def-decl "list[T]" list_props nil)
    (size2 def-decl "nat" nominal_AC_term_properties nil)
    (map_append2 formula-decl nil list_aux_equational_reasoning2parameters nil)
    (sum def-decl "nat" list_aux_equational_reasoning_nat nil)
    (size2_ge0 formula-decl nil nominal_AC_term_properties nil)
    (count_size2_ge formula-decl nil nominal_AC_equality nil)
    (subs_count_ge formula-decl nil nominal_AC_fresh_subs nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (get_args_not_pair_ac formula-decl nil nominal_AC_term_properties nil)
    (select_not_ac formula-decl nil nominal_AC_term_properties nil)
    (select_not_pair formula-decl nil nominal_AC_term_properties nil)
    (count_append formula-decl nil list_aux_equational_reasoning nil)
    (perm?_equiv_same_count? formula-decl nil nominal_AC_equality nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sum_append formula-decl nil list_aux_equational_reasoning_nat nil)
    (perm?_size2 formula-decl nil nominal_AC_equality nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (> const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nice_ind? const-decl "bool" nominal_AC_term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (equal?_trans formula-decl nil nominal_AC_equality nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil)
    (get_args_len formula-decl nil nominal_AC_term_properties nil)
    (count_eq formula-decl nil list_aux_equational_reasoning nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member def-decl "bool" list_props nil)
    (num_arg_ge1 formula-decl nil nominal_AC_term_properties nil)
    (from_min2max def-decl "list[nat]" list_aux_equational_reasoning nil)
    (count_mem formula-decl nil list_aux_equational_reasoning nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (delete_ac_num_arg_gt1 formula-decl nil nominal_AC_term_properties nil)
    (perm?_trans formula-decl nil nominal_AC_equality nil)
    (perm?_sym formula-decl nil nominal_AC_equality nil)
    (nominal_AC_term_ac_app_eta formula-decl nil nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (perm_args_ac formula-decl nil nominal_AC_equality nil)
    (num_arg_delete_size formula-decl nil nominal_AC_term_properties nil)
    (equal?_ref formula-decl nil nominal_AC_equality nil)
    (subs_get_args1 formula-decl nil nominal_AC_substitution nil)
    (size2_get_args formula-decl nil nominal_AC_term_properties nil)
    (subs_equal? formula-decl nil nominal_AC_fresh_subs nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (nominal_AC_fresh_subs def-decl "bool" nominal_AC_fresh_subs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (string type-eq-decl nil strings nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (are_ac? const-decl "bool" nominal_AC_term_properties nil)
    (equivalence? const-decl "bool" relations nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (unifies?_impossible-1 nil 3844436073
   ("" (measure-induct "size(t)" "t")
    (("1" (skolem 1 "t")
      (("1" (prop)
        (("1" (hide -1)
          (("1" (skeep)
            (("1" (expand "same_count?" 1)
              (("1" (skolem 1 "ti")
                (("1" (case "count(ti, get_args(f)(t), equal?) = 0")
                  (("1" (replace -1)
                    (("1" (lemma "count_gt0[nominal_AC_term]")
                      (("1" (inst -1 "equal?" "get_args(f)(s)" "ti")
                        (("1" (prop)
                          (("1" (skolem -1 "i")
                            (("1" (lemma "get_args_nth")
                              (("1"
                                (inst -1 "f" "i+1" "s")
                                (("1"
                                  (prop)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (expand "unifies?" -5)
                                        (("1"
                                          (lemma "ac_perm_args2")
                                          (("1"
                                            (inst
                                             -1
                                             "f"
                                             "subs(delta)(s)"
                                             "subs(delta)(t)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "num_arg(f, s) = 1")
                                                (("1"
                                                  (name-replace
                                                   "t_first"
                                                   "select(f, t)(1)")
                                                  (("1"
                                                    (inst -6 "t_first")
                                                    (("1"
                                                      (case
                                                       "count(t_first, get_args(f)(t), equal?) > 0")
                                                      (("1"
                                                        (lemma
                                                         "count_gt0[nominal_AC_term]")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "equal?"
                                                           "get_args(f)(s)"
                                                           "t_first")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skolem
                                                               -1
                                                               "j")
                                                              (("1"
                                                                (lemma
                                                                 "get_args_nth")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "f"
                                                                   "j+1"
                                                                   "s")
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (case
                                                                         "equal?(ti, t_first)")
                                                                        (("1"
                                                                          (lemma
                                                                           "count_eq[nominal_AC_term]")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "equal?"
                                                                             "get_args(f)(t)"
                                                                             "ti"
                                                                             "t_first")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           "j")
                                                                          (("2"
                                                                            (rewrite
                                                                             "get_args_len")
                                                                            (("2"
                                                                              (typepred
                                                                               "i")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "get_args_len")
                                                                                (("2"
                                                                                  (replace
                                                                                   -7)
                                                                                  (("2"
                                                                                    (case
                                                                                     "i = 0 AND j = 0")
                                                                                    (("1"
                                                                                      (hide
                                                                                       -2
                                                                                       -3)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -2)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "equal?_sym")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "select(f, s)(1)"
                                                                                                   "t_first")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -5)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "equal?_trans")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "ti"
                                                                                                           "select(f, s)(1)"
                                                                                                           "t_first")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "j")
                                                                      (("2"
                                                                        (expand
                                                                         "nice_ind?"
                                                                         1)
                                                                        (("2"
                                                                          (rewrite
                                                                           "get_args_len")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "count_mem[nominal_AC_term]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "equal?"
                                                           "get_args(f)(t)"
                                                           "t_first")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "get_args"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "from_min2max"
                                                                 1)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (split)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (lemma
                                                                         "num_arg_ge1")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "f"
                                                                           "t")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (split
                                                                         2)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (expand
                                                                             "map"
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "member"
                                                                               1)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (expand
                                                                             "map"
                                                                             2
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "member"
                                                                               2
                                                                               1)
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "subs_perm_get_args_ge1")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "f"
                                                     "1+i"
                                                     "delta"
                                                     "s")
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (lemma
                                                         "perm?_size2")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (rewrite
                                                               "map_append2")
                                                              (("1"
                                                                (rewrite
                                                                 "sum_append")
                                                                (("1"
                                                                  (hide
                                                                   -2)
                                                                  (("1"
                                                                    (lemma
                                                                     "perm?_size2")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "get_args(f)(subs(delta)(t))"
                                                                       "get_args(f)(subs(delta)(s))")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (case
                                                                               "num_arg(f, s) > 1")
                                                                              (("1"
                                                                                (hide
                                                                                 1)
                                                                                (("1"
                                                                                  (case
                                                                                   "FORALL t1: count(t1, get_args(f)(delete(f, s)(1+i)), equal?) >= count(t1, get_args(f)(t), equal?)")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "subs_count_ge")
                                                                                    (("1"
                                                                                      (hide
                                                                                       -8)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "f"
                                                                                         "delete(f, s)(1+i)"
                                                                                         "delta"
                                                                                         "t")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -2)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "count_size2_ge")
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (prop)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (name-replace
                                                                                                         "si_delta"
                                                                                                         "subs(delta)(select(f, s)(1 + i))")
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -4)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "get_args"
                                                                                                             -3
                                                                                                             3)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "from_min2max"
                                                                                                               -3
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (lift-if)
                                                                                                                (("1"
                                                                                                                  (split)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "num_arg_ge1")
                                                                                                                      (("1"
                                                                                                                        (inst?)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "map"
                                                                                                                           -2
                                                                                                                           4)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "map"
                                                                                                                             -2
                                                                                                                             3)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "sum"
                                                                                                                               -2
                                                                                                                               3)
                                                                                                                              (("1"
                                                                                                                                (hide-all-but
                                                                                                                                 (-2
                                                                                                                                  -3))
                                                                                                                                (("1"
                                                                                                                                  (lemma
                                                                                                                                   "size2_ge0")
                                                                                                                                  (("1"
                                                                                                                                    (inst?)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "map"
                                                                                                                           -1
                                                                                                                           4)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "map"
                                                                                                                             -1
                                                                                                                             3)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "sum"
                                                                                                                               -1
                                                                                                                               3)
                                                                                                                              (("2"
                                                                                                                                (hide-all-but
                                                                                                                                 (-1
                                                                                                                                  -2))
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   "size2_ge0")
                                                                                                                                  (("2"
                                                                                                                                    (inst?)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -2)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "subs_perm_get_args_ge1")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "f"
                                                                                           "1+i"
                                                                                           "null"
                                                                                           "s")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "subs"
                                                                                               -1)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "perm?_equiv_same_count?")
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "same_count?"
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "t1")
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             "count_append")
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "get_args_not_pair_ac")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "f"
                                                                                                                 "select(f, s)(1+i)")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (prop)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "count"
                                                                                                                         -2
                                                                                                                         3)
                                                                                                                        (("1"
                                                                                                                          (lift-if)
                                                                                                                          (("1"
                                                                                                                            (split
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "count_eq[nominal_AC_term]")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "equal?"
                                                                                                                                   "get_args(f)(t)"
                                                                                                                                   "t1"
                                                                                                                                   "ti")
                                                                                                                                  (("1"
                                                                                                                                    (prop)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -8)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide-all-but
                                                                                                                                       (-1
                                                                                                                                        -6
                                                                                                                                        1))
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "equal?_sym")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "select(f, s)(1+i)"
                                                                                                                                           "ti")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "equal?_trans")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 "t1"
                                                                                                                                                 "select(f, s)(1+i)"
                                                                                                                                                 "ti")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "count"
                                                                                                                                 -1
                                                                                                                                 3)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -7
                                                                                                                                   "t1")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (use
                                                                                                                       "select_not_pair")
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (use
                                                                                                                       "select_not_ac")
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 "num_arg_ge1")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "num_arg_ge1")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "i")
                                    (("2"
                                      (expand "nice_ind?" 1)
                                      (("2"
                                        (rewrite "get_args_len")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "count_gt0[nominal_AC_term]")
                    (("2" (inst -1 "equal?" "get_args(f)(t)" "ti")
                      (("2" (assert)
                        (("2" (skolem -1 "i")
                          (("2" (lemma "get_args_nth")
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (prop)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (expand "unifies?" -4)
                                        (("1"
                                          (lemma "ac_perm_args2")
                                          (("1"
                                            (inst
                                             -1
                                             "f"
                                             "subs(delta)(s)"
                                             "subs(delta)(t)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "num_arg(f, t) = 1")
                                                (("1"
                                                  (lemma
                                                   "subs_get_args1")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (inst -1 "1+i")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (case
                                                             "i = 0")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     -5
                                                                     "ti")
                                                                    (("1"
                                                                      (case
                                                                       "num_arg(f, s) = 1")
                                                                      (("1"
                                                                        (expand
                                                                         "get_args"
                                                                         -6
                                                                         1)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "from_min2max"
                                                                             -6)
                                                                            (("1"
                                                                              (expand
                                                                               "map"
                                                                               -6)
                                                                              (("1"
                                                                                (expand
                                                                                 "map"
                                                                                 -6)
                                                                                (("1"
                                                                                  (expand
                                                                                   "get_args"
                                                                                   -6
                                                                                   1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -3)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "from_min2max"
                                                                                       -6)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "map"
                                                                                         -6)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "map"
                                                                                           -6)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "count"
                                                                                             -6
                                                                                             2)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "count"
                                                                                               -6
                                                                                               2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "count"
                                                                                                 -6)
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -6)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "count"
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "get_args"
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -3)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -5)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "from_min2max"
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "map"
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "map"
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "count"
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (lift-if)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "count"
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (case
                                                                         "num_arg(f, s) > 1")
                                                                        (("1"
                                                                          (hide
                                                                           1)
                                                                          (("1"
                                                                            (lemma
                                                                             "count_gt0[nominal_AC_term]")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "equal?"
                                                                               "get_args(f)(s)"
                                                                               "ti")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (skolem
                                                                                   -1
                                                                                   "j")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "get_args_nth")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "subs_perm_get_args_ge1")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "f"
                                                                                                   "1+j"
                                                                                                   "delta"
                                                                                                   "s")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "perm?_size2")
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         2)
                                                                                                        (("1"
                                                                                                          (inst?)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "perm?_size2")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "get_args(f)(subs(delta)(select(f, t)(1)))"
                                                                                                                   "get_args(f)(subs(delta)(s))")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -2)
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         -2)
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "map_append2")
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "sum_append")
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "equal?(select(f, t)(1), select(f, s)(1+j))")
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "subs_equal?")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "select(f, s)(1+j)"
                                                                                                                                   "delta"
                                                                                                                                   "select(f, t)(1)")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       -2)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "ac_perm_args2")
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "f"
                                                                                                                                           "subs(delta)(select(f, s)(1 + j))"
                                                                                                                                           "subs(delta)(select(f, t)(1))")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (lemma
                                                                                                                                               "perm?_size2")
                                                                                                                                              (("1"
                                                                                                                                                (inst?)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (name-replace
                                                                                                                                                         "sj_delta"
                                                                                                                                                         "subs(delta)(delete(f, s)(1 + j))")
                                                                                                                                                        (("1"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           -4)
                                                                                                                                                          (("1"
                                                                                                                                                            (use
                                                                                                                                                             "size2_get_args")
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -1
                                                                                                                                                               :dir
                                                                                                                                                               rl)
                                                                                                                                                              (("1"
                                                                                                                                                                (lemma
                                                                                                                                                                 "size2_ge0")
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst?)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide-all-but
                                                                                                                                 (-2
                                                                                                                                  -7
                                                                                                                                  1))
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   "equal?_sym")
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "select(f, t)(1)"
                                                                                                                                     "ti")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "equal?_trans")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "select(f, t)(1)"
                                                                                                                                           "ti"
                                                                                                                                           "select(f, s)(1+j)")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "j")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "nice_ind?"
                                                                                               1)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "get_args_len")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "num_arg_ge1")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "i")
                                                              (("2"
                                                                (rewrite
                                                                 "get_args_len")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case
                                                   "num_arg(f, t) > 1")
                                                  (("1"
                                                    (hide 1)
                                                    (("1"
                                                      (case
                                                       "num_arg(f, s) > 1")
                                                      (("1"
                                                        (lemma
                                                         "subs_perm_get_args_ge1")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "f"
                                                           "1+i"
                                                           "null"
                                                           "t")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "subs"
                                                               -1)
                                                              (("1"
                                                                (lemma
                                                                 "perm?_equiv_same_count?")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       -2)
                                                                      (("1"
                                                                        (expand
                                                                         "same_count?"
                                                                         -1)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "ti")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             2)
                                                                            (("1"
                                                                              (rewrite
                                                                               "count_append")
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (inst
                                                                                   -5
                                                                                   "ti")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "count_gt0[nominal_AC_term]")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "equal?"
                                                                                       "get_args(f)(s)"
                                                                                       "ti")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (skolem
                                                                                           -1
                                                                                           "j")
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "get_args_nth")
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (prop)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "subs_perm_get_args_ge1")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "f"
                                                                                                         "1+j"
                                                                                                         "null"
                                                                                                         "s")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "subs"
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "perm?_equiv_same_count?")
                                                                                                              (("1"
                                                                                                                (inst?)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -2)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "same_count?"
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "ti")
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -1
                                                                                                                           2)
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "count_append")
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "ac_perm_args2")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "f"
                                                                                                                                   "select(f, t)(1+i)"
                                                                                                                                   "select(f, s)(1+j)")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (prop)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "perm?_equiv_same_count?")
                                                                                                                                        (("1"
                                                                                                                                          (inst?)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "same_count?"
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 "ti")
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (hide-all-but
                                                                                                                                                       2)
                                                                                                                                                      (("1"
                                                                                                                                                        (reveal
                                                                                                                                                         -26)
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -1
                                                                                                                                                           "delete(f, t)(1+i)")
                                                                                                                                                          (("1"
                                                                                                                                                            (reveal
                                                                                                                                                             -5
                                                                                                                                                             -6)
                                                                                                                                                            (("1"
                                                                                                                                                              (prop)
                                                                                                                                                              (("1"
                                                                                                                                                                (inst
                                                                                                                                                                 -1
                                                                                                                                                                 "delta"
                                                                                                                                                                 "f"
                                                                                                                                                                 "delete(f, s)(1+j)")
                                                                                                                                                                (("1"
                                                                                                                                                                  (reveal
                                                                                                                                                                   -8
                                                                                                                                                                   -11
                                                                                                                                                                   -5
                                                                                                                                                                   -8)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (reveal
                                                                                                                                                                     -9)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (case
                                                                                                                                                                       "equal?(select(f, t)(1+i), select(f, s)(1+j))")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (case
                                                                                                                                                                         "are_ac?(delete(f, t)(1 + i), delete(f, s)(1 + j), f)")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (prop)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (expand
                                                                                                                                                                               "unifies?"
                                                                                                                                                                               1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (lemma
                                                                                                                                                                                 "perm_args_ac")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -1
                                                                                                                                                                                   "subs(delta)(delete(f, s)(1 + j))"
                                                                                                                                                                                   "f"
                                                                                                                                                                                   "subs(delta)(delete(f, t)(1 + i))")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (prop)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (hide
                                                                                                                                                                                         2
                                                                                                                                                                                         3)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (hide
                                                                                                                                                                                           -3
                                                                                                                                                                                           -4)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (reveal
                                                                                                                                                                                             -4)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (lemma
                                                                                                                                                                                               "subs_perm_get_args_ge1")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (inst
                                                                                                                                                                                                 -1
                                                                                                                                                                                                 "f"
                                                                                                                                                                                                 "1+i"
                                                                                                                                                                                                 "delta"
                                                                                                                                                                                                 "t")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (lemma
                                                                                                                                                                                                     "perm?_sym")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (inst
                                                                                                                                                                                                       -1
                                                                                                                                                                                                       "get_args(f)(subs(delta)(t))"
                                                                                                                                                                                                       "append(get_args(f)(subs(delta)(select(f, t)(1 + i))),
                   get_args(f)(subs(delta)(delete(f, t)(1 + i))))")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (hide
                                                                                                                                                                                                           -2)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (lemma
                                                                                                                                                                                                             "perm?_trans")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (inst
                                                                                                                                                                                                               -1
                                                                                                                                                                                                               "append(get_args(f)(subs(delta)(select(f, t)(1 + i))), get_args(f)(subs(delta)(delete(f, t)(1 + i))))"
                                                                                                                                                                                                               "get_args(f)(subs(delta)(t))"
                                                                                                                                                                                                               "get_args(f)(subs(delta)(s))")
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (hide
                                                                                                                                                                                                                   -2
                                                                                                                                                                                                                   -3
                                                                                                                                                                                                                   -6)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (lemma
                                                                                                                                                                                                                     "subs_perm_get_args_ge1")
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (inst
                                                                                                                                                                                                                       -1
                                                                                                                                                                                                                       "f"
                                                                                                                                                                                                                       "1+j"
                                                                                                                                                                                                                       "delta"
                                                                                                                                                                                                                       "s")
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (lemma
                                                                                                                                                                                                                           "perm?_trans")
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (inst
                                                                                                                                                                                                                             -1
                                                                                                                                                                                                                             "append(get_args(f)(subs(delta)(select(f, t)(1 + i))), get_args(f)(subs(delta)(delete(f, t)(1 + i))))"
                                                                                                                                                                                                                             "get_args(f)(subs(delta)(s))"
                                                                                                                                                                                                                             "append(get_args(f)(subs(delta)(select(f, s)(1 + j))), get_args(f)(subs(delta)(delete(f, s)(1 + j))))")
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (hide
                                                                                                                                                                                                                                 -2
                                                                                                                                                                                                                                 -3)
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (lemma
                                                                                                                                                                                                                                   "perm?_equiv_same_count?")
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (inst?)
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (hide
                                                                                                                                                                                                                                         -2)
                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                          (lemma
                                                                                                                                                                                                                                           "perm?_equiv_same_count?")
                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                            (inst?)
                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                (hide
                                                                                                                                                                                                                                                 2)
                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                                                   "same_count?"
                                                                                                                                                                                                                                                   1)
                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                    (skolem
                                                                                                                                                                                                                                                     1
                                                                                                                                                                                                                                                     "t2")
                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                                       "same_count?"
                                                                                                                                                                                                                                                       -1)
                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                        (inst
                                                                                                                                                                                                                                                         -1
                                                                                                                                                                                                                                                         "t2")
                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                          (rewrite
                                                                                                                                                                                                                                                           "count_append")
                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                            (rewrite
                                                                                                                                                                                                                                                             "count_append")
                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                              (lemma
                                                                                                                                                                                                                                                               "subs_equal?")
                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                (inst
                                                                                                                                                                                                                                                                 -1
                                                                                                                                                                                                                                                                 "select(f, s)(1 + j)"
                                                                                                                                                                                                                                                                 "delta"
                                                                                                                                                                                                                                                                 "select(f, t)(1 + i)")
                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                                    (lemma
                                                                                                                                                                                                                                                                     "ac_perm_args2")
                                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                                      (hide
                                                                                                                                                                                                                                                                       -5)
                                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                                        (inst
                                                                                                                                                                                                                                                                         -1
                                                                                                                                                                                                                                                                         "f"
                                                                                                                                                                                                                                                                         "subs(delta)(select(f, s)(1 + j))"
                                                                                                                                                                                                                                                                         "subs(delta)(select(f, t)(1 + i))")
                                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                                            (lemma
                                                                                                                                                                                                                                                                             "perm?_equiv_same_count?")
                                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                                              (inst?)
                                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                                  (hide
                                                                                                                                                                                                                                                                                   -2
                                                                                                                                                                                                                                                                                   -3)
                                                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                                                                                     "same_count?"
                                                                                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                                                      (inst
                                                                                                                                                                                                                                                                                       -1
                                                                                                                                                                                                                                                                                       "t2")
                                                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                                                        (replace
                                                                                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "are_ac?")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (flatten)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (hide
                                                                                                                                                                                             -5
                                                                                                                                                                                             -6
                                                                                                                                                                                             -7
                                                                                                                                                                                             -8
                                                                                                                                                                                             2
                                                                                                                                                                                             3)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (lemma
                                                                                                                                                                                               "nominal_AC_term_ac_app_eta")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (inst
                                                                                                                                                                                                 -1
                                                                                                                                                                                                 "delete(f, t)(1+i)")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (replace
                                                                                                                                                                                                   -4
                                                                                                                                                                                                   :dir
                                                                                                                                                                                                   rl)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (replace
                                                                                                                                                                                                     -1
                                                                                                                                                                                                     1
                                                                                                                                                                                                     :dir
                                                                                                                                                                                                     rl)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (rewrite
                                                                                                                                                                                                       "subs_ac")
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (hide
                                                                                                                                                                                                           -1)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (lemma
                                                                                                                                                                                                             "nominal_AC_term_ac_app_eta")
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (inst
                                                                                                                                                                                                               -1
                                                                                                                                                                                                               "delete(f, s)(1+j)")
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (replace
                                                                                                                                                                                                                 -1
                                                                                                                                                                                                                 1
                                                                                                                                                                                                                 :dir
                                                                                                                                                                                                                 rl)
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (replace
                                                                                                                                                                                                                   -5
                                                                                                                                                                                                                   1
                                                                                                                                                                                                                   :dir
                                                                                                                                                                                                                   rl)
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (rewrite
                                                                                                                                                                                                                     "subs_ac")
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (hide
                                                                                                                                                                               2
                                                                                                                                                                               -1
                                                                                                                                                                               -2
                                                                                                                                                                               -3
                                                                                                                                                                               -4
                                                                                                                                                                               -5)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (reveal
                                                                                                                                                                                 -19)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (reveal
                                                                                                                                                                                   -18
                                                                                                                                                                                   -22)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (skolem
                                                                                                                                                                                     1
                                                                                                                                                                                     "t2")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (inst
                                                                                                                                                                                       -3
                                                                                                                                                                                       "t2")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (reveal
                                                                                                                                                                                         -2)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (reveal
                                                                                                                                                                                           -5)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (lemma
                                                                                                                                                                                             "perm?_equiv_same_count?")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (inst
                                                                                                                                                                                               -1
                                                                                                                                                                                               "get_args(f)(s)"
                                                                                                                                                                                               "append(get_args(f)(select(f, s)(1 + j)), get_args(f)(delete(f, s)(1 + j)))")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (prop)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (hide
                                                                                                                                                                                                   -1
                                                                                                                                                                                                   -5)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (lemma
                                                                                                                                                                                                     "perm?_equiv_same_count?")
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (inst
                                                                                                                                                                                                       -1
                                                                                                                                                                                                       "get_args(f)(t)"
                                                                                                                                                                                                       "append(get_args(f)(select(f, t)(1 + i)), get_args(f)(delete(f, t)(1 + i)))")
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (prop)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (hide
                                                                                                                                                                                                           -1
                                                                                                                                                                                                           -6)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (lemma
                                                                                                                                                                                                             "perm?_equiv_same_count?")
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (inst
                                                                                                                                                                                                               -1
                                                                                                                                                                                                               "get_args(f)(select(f, s)(1 + j))"
                                                                                                                                                                                                               "get_args(f)(select(f, t)(1 + i))")
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (prop)
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (hide
                                                                                                                                                                                                                   -1
                                                                                                                                                                                                                   -5)
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                     "same_count?"
                                                                                                                                                                                                                     -2)
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (inst
                                                                                                                                                                                                                       -2
                                                                                                                                                                                                                       "t2")
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (replace
                                                                                                                                                                                                                         -2
                                                                                                                                                                                                                         -5)
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (rewrite
                                                                                                                                                                                                                           "count_append")
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (hide
                                                                                                                                                                                                                             -2)
                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                               "same_count?"
                                                                                                                                                                                                                               -2)
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (inst
                                                                                                                                                                                                                                 -2
                                                                                                                                                                                                                                 "t2")
                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                  (replace
                                                                                                                                                                                                                                   -2
                                                                                                                                                                                                                                   -4)
                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                    (hide
                                                                                                                                                                                                                                     -2)
                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                      (rewrite
                                                                                                                                                                                                                                       "count_append"
                                                                                                                                                                                                                                       -3)
                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                                         "same_count?"
                                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                          (inst
                                                                                                                                                                                                                                           -1
                                                                                                                                                                                                                                           "t2")
                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                            (replace
                                                                                                                                                                                                                                             -1)
                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("3"
                                                                                                                                                                              (expand
                                                                                                                                                                               "same_count?"
                                                                                                                                                                               -1)
                                                                                                                                                                              (("3"
                                                                                                                                                                                (inst
                                                                                                                                                                                 -1
                                                                                                                                                                                 "ti")
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (hide
                                                                                                                                                                           -6
                                                                                                                                                                           2)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "are_ac?")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (flatten)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (lemma
                                                                                                                                                                                 "delete_ac_num_arg_gt1")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -1
                                                                                                                                                                                   "f"
                                                                                                                                                                                   "1+i"
                                                                                                                                                                                   "t")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "is_ac_sym?"
                                                                                                                                                                                       -1
                                                                                                                                                                                       1)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "is_ac_sym?"
                                                                                                                                                                                         -1)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (flatten)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (lemma
                                                                                                                                                                                               "delete_ac_num_arg_gt1")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (inst
                                                                                                                                                                                                 -1
                                                                                                                                                                                                 "f"
                                                                                                                                                                                                 "1+j"
                                                                                                                                                                                                 "s")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "is_ac_sym?"
                                                                                                                                                                                                     -1
                                                                                                                                                                                                     1)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "is_ac_sym?"
                                                                                                                                                                                                       -1)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (propax)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (hide-all-but
                                                                                                                                                                         (-1
                                                                                                                                                                          -2
                                                                                                                                                                          1))
                                                                                                                                                                        (("2"
                                                                                                                                                                          (lemma
                                                                                                                                                                           "equal?_sym")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (inst
                                                                                                                                                                             -1
                                                                                                                                                                             "select(f, t)(1 + i)"
                                                                                                                                                                             "ti")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (lemma
                                                                                                                                                                                 "equal?_trans")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -1
                                                                                                                                                                                   "select(f, t)(1+i)"
                                                                                                                                                                                   "ti"
                                                                                                                                                                                   "select(f, s)(1+j)")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (lemma
                                                                                                                                                                 "num_arg_delete_size")
                                                                                                                                                                (("2"
                                                                                                                                                                  (inst?)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (hide-all-but
                                                                                                                                         (-2
                                                                                                                                          -6
                                                                                                                                          1))
                                                                                                                                        (("2"
                                                                                                                                          (lemma
                                                                                                                                           "equal?_sym")
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "select(f, s)(1 + j)"
                                                                                                                                             "ti")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "equal?_trans")
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   -1
                                                                                                                                                   "select(f, s)(1 + j)"
                                                                                                                                                   "ti"
                                                                                                                                                   "select(f, t)(1+i)")
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "nice_ind?"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "j")
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         "get_args_len")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "num_arg(f, s) = 1")
                                                        (("1"
                                                          (hide 1)
                                                          (("1"
                                                            (hide
                                                             -6
                                                             1
                                                             2)
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "select(f, t)(1)")
                                                              (("1"
                                                                (hide
                                                                 -3
                                                                 -4)
                                                                (("1"
                                                                  (expand
                                                                   "get_args"
                                                                   -3
                                                                   2)
                                                                  (("1"
                                                                    (expand
                                                                     "from_min2max"
                                                                     -3
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "map"
                                                                         -3
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "count"
                                                                           -3
                                                                           2)
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (split)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (expand
                                                                                   "get_args"
                                                                                   -2
                                                                                   1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -3)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "from_min2max"
                                                                                       -2
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "map"
                                                                                         -2
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "map"
                                                                                           -2
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "count"
                                                                                             -2
                                                                                             1)
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (reveal
                                                                                                         -4)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "select(f, t)(2)")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "get_args"
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -4)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "from_min2max"
                                                                                                                 -1
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "map"
                                                                                                                   -1
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "count"
                                                                                                                     -1
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (lift-if)
                                                                                                                      (("1"
                                                                                                                        (split)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "from_min2max"
                                                                                                                             -2
                                                                                                                             2)
                                                                                                                            (("1"
                                                                                                                              (lift-if)
                                                                                                                              (("1"
                                                                                                                                (split
                                                                                                                                 -2)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "map"
                                                                                                                                     -2
                                                                                                                                     2)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "map"
                                                                                                                                       -2
                                                                                                                                       2)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "count"
                                                                                                                                         -2
                                                                                                                                         2)
                                                                                                                                        (("1"
                                                                                                                                          (lift-if)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (split
                                                                                                                                               -2)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "from_min2max"
                                                                                                                                                   -2)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "map"
                                                                                                                                                     -2)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "count"
                                                                                                                                                       -2)
                                                                                                                                                      (("1"
                                                                                                                                                        (lift-if)
                                                                                                                                                        (("1"
                                                                                                                                                          (split)
                                                                                                                                                          (("1"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("1"
                                                                                                                                                              (grind)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (flatten)
                                                                                                                                                (("2"
                                                                                                                                                  (rewrite
                                                                                                                                                   "equal?_ref")
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "map"
                                                                                                                                     -1
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "count"
                                                                                                                                       -1
                                                                                                                                       2)
                                                                                                                                      (("2"
                                                                                                                                        (lift-if)
                                                                                                                                        (("2"
                                                                                                                                          (split)
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "from_min2max"
                                                                                                                                               -2
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "map"
                                                                                                                                                 -2
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "count"
                                                                                                                                                   -2
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (lift-if)
                                                                                                                                                    (("1"
                                                                                                                                                      (split)
                                                                                                                                                      (("1"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (flatten)
                                                                                                                                            (("2"
                                                                                                                                              (rewrite
                                                                                                                                               "equal?_ref")
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "from_min2max"
                                                                                                                             -1
                                                                                                                             2)
                                                                                                                            (("2"
                                                                                                                              (lift-if)
                                                                                                                              (("2"
                                                                                                                                (split)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "map"
                                                                                                                                     -2
                                                                                                                                     2)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "count"
                                                                                                                                       -2
                                                                                                                                       2)
                                                                                                                                      (("1"
                                                                                                                                        (lift-if)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (split
                                                                                                                                             -2)
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "from_min2max"
                                                                                                                                                 -2)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "map"
                                                                                                                                                   -2
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "map"
                                                                                                                                                     -2
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "count"
                                                                                                                                                       -2
                                                                                                                                                       1)
                                                                                                                                                      (("1"
                                                                                                                                                        (lift-if)
                                                                                                                                                        (("1"
                                                                                                                                                          (split)
                                                                                                                                                          (("1"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("1"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               (-1
                                                                                                                                                                -5
                                                                                                                                                                1))
                                                                                                                                                              (("1"
                                                                                                                                                                (lemma
                                                                                                                                                                 "equal?_sym")
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst
                                                                                                                                                                   -1
                                                                                                                                                                   "select(f, s)(1)"
                                                                                                                                                                   "select(f, t)(1)")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lemma
                                                                                                                                                                       "equal?_trans")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (inst
                                                                                                                                                                         -1
                                                                                                                                                                         "select(f, t)(2)"
                                                                                                                                                                         "select(f, s)(1)"
                                                                                                                                                                         "select(f, t)(1)")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "count"
                                                                                                                                                               -1
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (flatten)
                                                                                                                                              (("2"
                                                                                                                                                (rewrite
                                                                                                                                                 "equal?_ref")
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "map"
                                                                                                                                     -1
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "count"
                                                                                                                                       -1
                                                                                                                                       2)
                                                                                                                                      (("2"
                                                                                                                                        (lift-if)
                                                                                                                                        (("2"
                                                                                                                                          (split)
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "from_min2max"
                                                                                                                                               -2
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "map"
                                                                                                                                                 -2
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "map"
                                                                                                                                                   -2
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "count"
                                                                                                                                                     -2
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (lift-if)
                                                                                                                                                      (("1"
                                                                                                                                                        (split
                                                                                                                                                         -2)
                                                                                                                                                        (("1"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("1"
                                                                                                                                                            (hide-all-but
                                                                                                                                                             (-1
                                                                                                                                                              -4
                                                                                                                                                              2))
                                                                                                                                                            (("1"
                                                                                                                                                              (lemma
                                                                                                                                                               "equal?_sym")
                                                                                                                                                              (("1"
                                                                                                                                                                (inst
                                                                                                                                                                 -1
                                                                                                                                                                 "select(f, s)(1)"
                                                                                                                                                                 "select(f, t)(1)")
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (hide
                                                                                                                                                                     -3)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lemma
                                                                                                                                                                       "equal?_trans")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (inst
                                                                                                                                                                         -1
                                                                                                                                                                         "select(f, t)(2)"
                                                                                                                                                                         "select(f, s)(1)"
                                                                                                                                                                         "select(f, t)(1)")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             "count"
                                                                                                                                                             -1
                                                                                                                                                             1)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (flatten)
                                                                                                                                            (("2"
                                                                                                                                              (rewrite
                                                                                                                                               "equal?_ref")
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "count"
                                                                                                     -1
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "equal?_ref")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "num_arg_ge1")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "num_arg_ge1")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "i")
                                    (("2"
                                      (rewrite "get_args_len")
                                      (("2"
                                        (expand "nice_ind?")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep) (("2" (rewrite "equal?_equiv") nil nil)) nil)) nil)
     ("3" (rewrite "equal?_equiv") nil nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil nominal_AC_term_properties nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (equivalence? const-decl "bool" relations nil)
    (are_ac? const-decl "bool" nominal_AC_term_properties nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (list type-decl nil list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (size2_get_args formula-decl nil nominal_AC_term_properties nil)
    (subs_get_args1 formula-decl nil nominal_AC_substitution nil)
    (equal?_ref formula-decl nil nominal_AC_equality nil)
    (num_arg_delete_size formula-decl nil nominal_AC_term_properties nil)
    (perm_args_ac formula-decl nil nominal_AC_equality nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (nominal_AC_term_ac_app_eta formula-decl nil nominal_AC_term_adt nil)
    (perm?_sym formula-decl nil nominal_AC_equality nil)
    (perm?_trans formula-decl nil nominal_AC_equality nil)
    (delete_ac_num_arg_gt1 formula-decl nil nominal_AC_term_properties nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (count_mem formula-decl nil list_aux_equational_reasoning nil)
    (from_min2max def-decl "list[nat]" list_aux_equational_reasoning nil)
    (num_arg_ge1 formula-decl nil nominal_AC_term_properties nil)
    (member def-decl "bool" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count_eq formula-decl nil list_aux_equational_reasoning nil)
    (get_args_len formula-decl nil nominal_AC_term_properties nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil)
    (equal?_trans formula-decl nil nominal_AC_equality nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nice_ind? const-decl "bool" nominal_AC_term_properties nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (> const-decl "bool" reals nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (perm?_size2 formula-decl nil nominal_AC_equality nil)
    (sum_append formula-decl nil list_aux_equational_reasoning_nat nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (perm?_equiv_same_count? formula-decl nil nominal_AC_equality nil)
    (count_append formula-decl nil list_aux_equational_reasoning nil)
    (select_not_pair formula-decl nil nominal_AC_term_properties nil)
    (select_not_ac formula-decl nil nominal_AC_term_properties nil)
    (get_args_not_pair_ac formula-decl nil nominal_AC_term_properties nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (count_size2_ge formula-decl nil nominal_AC_equality nil)
    (size2_ge0 formula-decl nil nominal_AC_term_properties nil)
    (sum def-decl "nat" list_aux_equational_reasoning_nat nil)
    (map_append2 formula-decl nil list_aux_equational_reasoning2parameters nil)
    (size2 def-decl "nat" nominal_AC_term_properties nil)
    (append def-decl "list[T]" list_props nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (subs_perm_get_args_ge1 formula-decl nil nominal_AC_substitution nil)
    (ac_perm_args2 formula-decl nil nominal_AC_equality nil)
    (get_args_nth formula-decl nil nominal_AC_term_properties nil)
    (count_gt0 formula-decl nil list_aux_equational_reasoning nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (equal?_equiv formula-decl nil nominal_AC_equality nil))
   shostak))
 (unifies?_impossible2 0
  (unifies?_impossible2-1 nil 3851160947
   ("" (skeep)
    (("" (lemma "nominal_AC_term_opt")
      (("" (inst -1 "t")
        (("" (split -1)
          (("1" (flatten)
            (("1" (expand "unifies?" -3)
              (("1" (replace -2 -3)
                (("1" (rewrite "subs_const")
                  (("1" (expand "equal?" -3)
                    (("1" (use "subs_ord")
                      (("1" (assert)
                        (("1" (flatten) (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten) nil nil)
           ("3" (replace -1 -2)
            (("3" (expand "unifies?" -2)
              (("3" (rewrite "subs_unit")
                (("3" (expand "equal?" -2)
                  (("3" (use "subs_ord")
                    (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (flatten)
            (("4" (replace -2 -3)
              (("4" (expand "unifies?" -3)
                (("4" (rewrite "subs_pair")
                  (("4" (expand "equal?")
                    (("4" (flatten)
                      (("4" (use "subs_pair2")
                        (("4" (assert)
                          (("4" (split -1)
                            (("1" (expand "ord" 2)
                              (("1" (assert) nil nil)) nil)
                             ("2" (assert)
                              (("2"
                                (lemma "subs_equal_impossible2")
                                (("2"
                                  (inst
                                   -1
                                   "G"
                                   "V(s)"
                                   "sigma"
                                   "p(s)"
                                   "t")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (use "nominal_AC_term_times_eta")
                                        (("1"
                                          (replace -1 1)
                                          (("1"
                                            (replace -4 1)
                                            (("1"
                                              (rewrite "subs_pair" 1)
                                              (("1"
                                                (expand "equal?")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "well_formed?" -7)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (flatten)
            (("5" (expand "unifies?" -3)
              (("5" (replace -2 -3)
                (("5" (rewrite "subs_app")
                  (("5" (expand "equal?" -3)
                    (("5" (flatten)
                      (("5" (use "subs_func")
                        (("5" (expand "func?" -1)
                          (("5" (assert)
                            (("5" (prop)
                              (("1"
                                (expand "same_func?" -1)
                                (("1"
                                  (flatten)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "subs_equal_impossible2")
                                (("2"
                                  (inst
                                   -1
                                   "G"
                                   "V(s)"
                                   "sigma"
                                   "p(s)"
                                   "t")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (replace -4 1)
                                        (("1"
                                          (rewrite "subs_app")
                                          (("1"
                                            (expand "equal?" 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (use "nominal_AC_term_times_eta")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "well_formed?" -9)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (lemma "subs_equal_impossible2")
                                (("3"
                                  (inst
                                   -1
                                   "G"
                                   "V(s)"
                                   "sigma"
                                   "p(s)"
                                   "t")
                                  (("3"
                                    (assert)
                                    (("3"
                                      (prop)
                                      (("1"
                                        (replace -4 1)
                                        (("1"
                                          (rewrite "subs_app")
                                          (("1"
                                            (expand "equal?" 1 1)
                                            (("1"
                                              (use "nominal_AC_term_times_eta")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "well_formed?" -9)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("6" (flatten)
            (("6" (expand "unifies?" -3)
              (("6" (replace -2 -3)
                (("6" (rewrite "subs_ac")
                  (("6" (expand "equal?" -3)
                    (("6" (flatten)
                      (("6" (hide -5)
                        (("6" (use "subs_func")
                          (("6" (expand "func?" -1)
                            (("6" (assert)
                              (("6"
                                (expand "same_func?" -1)
                                (("6"
                                  (split -1)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (lemma "subs_equal_impossible2")
                                      (("2"
                                        (inst
                                         -1
                                         "G"
                                         "V(s)"
                                         "sigma"
                                         "p(s)"
                                         "t")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (prop)
                                            (("1"
                                              (replace -3 1)
                                              (("1"
                                                (rewrite "subs_ac" 1)
                                                (("1"
                                                  (expand "equal?" 1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (use
                                                       "nominal_AC_term_times_eta")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (reveal -4)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -2)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand
                                               "well_formed?"
                                               -6)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("7" (flatten)
            (("7" (expand "unifies?" -3)
              (("7" (replace -2 -3)
                (("7" (rewrite "subs_abs")
                  (("7" (expand "equal?" -3)
                    (("7" (assert)
                      (("7" (flatten)
                        (("7" (use "subs_abs2")
                          (("7" (assert)
                            (("7" (split -1)
                              (("1"
                                (hide -5)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (lemma "subs_equal_impossible2")
                                  (("2"
                                    (inst
                                     -1
                                     "G"
                                     "V(s)"
                                     "sigma"
                                     "p(s)"
                                     "t")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (use "nominal_AC_term_times_eta")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (replace -4 1)
                                              (("1"
                                                (rewrite "subs_abs" 1)
                                                (("1"
                                                  (expand "equal?" 1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -5)
                                          (("2"
                                            (expand "well_formed?" -5)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nominal_AC_term_opt formula-decl nil nominal_AC_term_properties nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (atom? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (a adt-accessor-decl "[(atom?) -> atom]" nominal_AC_term_adt nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (subs_ord formula-decl nil nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (ord const-decl "upto(6)" nominal_AC_term_adt nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (nominal_AC_term_times_eta formula-decl nil nominal_AC_term_adt nil)
    (subs_equal_impossible2 formula-decl nil nominal_AC_substitution nil)
    (subs_pair2 formula-decl nil nominal_AC_substitution nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (func? const-decl "bool" nominal_AC_term_properties nil)
    (union const-decl "set" sets nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (sym const-decl "string" nominal_AC_term_properties nil)
    (same_func? const-decl "bool" nominal_AC_term_properties nil)
    (subs_func formula-decl nil nominal_AC_substitution nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (Union const-decl "set" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (subs_abs formula-decl nil nominal_AC_substitution nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_abs2 formula-decl nil nominal_AC_substitution nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (unifies?_impossible3 0
  (unifies?_impossible3-1 nil 3888326823
   ("" (skeep)
    (("" (case "var?(t)")
      (("1" (assert)
        (("1" (expand "vars")
          (("1" (expand "member" 2 1)
            (("1" (expand "singleton" 2)
              (("1" (expand "member" 2 1)
                (("1" (expand "singleton" 2)
                  (("1" (expand "unifies?" -2)
                    (("1"
                      (case "subs(sigma)(t) = t AND subs(sigma)(s) = s")
                      (("1" (flatten)
                        (("1" (replace -1)
                          (("1" (replace -2)
                            (("1" (expand "equal?" -4)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "disjoint?")
                        (("2" (expand "empty?" -3)
                          (("2" (prop)
                            (("1" (use "subs_no_effect_t")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "disjoint?" 1)
                                  (("1"
                                    (expand "empty?" 1)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst -4 "x")
                                        (("1"
                                          (expand
                                           ("member" "intersection")
                                           2)
                                          (("1"
                                            (expand
                                             ("member" "intersection")
                                             -1)
                                            (("1"
                                              (prop)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use "subs_no_effect_t")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "disjoint?")
                                  (("2"
                                    (expand "empty?")
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (expand
                                         ("member" "intersection")
                                         -1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (hide 2 3)
          (("2" (prop)
            (("1" (lemma "unifies?_impossible2")
              (("1" (inst -1 "G" "s" "sigma" "t")
                (("1" (assert)
                  (("1" (expand "ord" -1)
                    (("1" (assert)
                      (("1" (lift-if) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "subs(sigma)(s) = s")
              (("1" (expand "unifies?" -3)
                (("1" (replace -1)
                  (("1" (lemma "equal?_sym")
                    (("1" (inst -1 "G" "s" "subs(sigma)(t)")
                      (("1" (assert)
                        (("1" (expand "equal?" -1)
                          (("1" (flatten)
                            (("1" (lemma "subs_ord")
                              (("1"
                                (inst -1 "t" "sigma" "subs(sigma)(t)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "ord" -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lift-if)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (use "subs_no_effect_t")
                (("2" (assert)
                  (("2" (expand "disjoint?")
                    (("2" (expand "empty?")
                      (("2" (skeep)
                        (("2" (inst?)
                          (("2" (expand ("member" "intersection") -1)
                            (("2" (expand ("member" "intersection") 3)
                              (("2"
                                (prop)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (singleton const-decl "(singleton?)" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (empty? const-decl "bool" sets nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (intersection const-decl "set" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (disjoint? const-decl "bool" sets nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (member const-decl "bool" sets nil)
    (subs_ord formula-decl nil nominal_AC_substitution nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil)
    (unifies?_impossible2 formula-decl nil nominal_AC_unification nil)
    (ord const-decl "upto(6)" nominal_AC_term_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil))
   shostak))
 (unifies?_impossible4 0
  (unifies?_impossible4-1 nil 3888328827
   ("" (skeep)
    (("" (lemma "unifies?_impossible2")
      (("" (inst -1 "G" "t" "sigma" "s")
        (("" (assert)
          (("" (split -1)
            (("1" (expand "ord" -1)
              (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil)
             ("2" (assert)
              (("2" (expand "unifies?" -1)
                (("2" (case "subs(sigma)(t) = t")
                  (("1" (replace -1)
                    (("1" (expand "equal?" -2)
                      (("1" (flatten)
                        (("1" (lemma "subs_ord")
                          (("1" (inst -1 "s" "sigma" "subs(sigma)(s)")
                            (("1" (assert)
                              (("1"
                                (expand "ord" -1)
                                (("1"
                                  (lift-if)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (use "subs_no_effect_t")
                    (("2" (assert)
                      (("2" (expand "disjoint?" 1)
                        (("2" (expand "empty?")
                          (("2" (skeep)
                            (("2" (expand ("member" "intersection") -1)
                              (("2"
                                (expand "disjoint?" -4)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (expand "empty?" -5)
                                    (("2"
                                      (inst -5 "V(t)")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "unifies?")
              (("3" (rewrite "equal?_sym" 1) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unifies?_impossible2 formula-decl nil nominal_AC_unification nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subs_ord formula-decl nil nominal_AC_substitution nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (ord const-decl "upto(6)" nominal_AC_term_adt nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (remove_common_not_null_count 0
  (remove_common_not_null_count-1 nil 3844517823
   ("" (measure-induct "length(args1)" "args1")
    (("1" (skolem 1 ("args1"))
      (("1" (prop)
        (("1" (hide -1)
          (("1" (skeep)
            (("1" (expand "remove_common" -2)
              (("1" (lift-if)
                (("1" (split -2)
                  (("1" (flatten)
                    (("1" (skeep) (("1" (grind) nil nil)) nil)) nil)
                   ("2" (flatten)
                    (("2" (split -1)
                      (("1" (prop)
                        (("1"
                          (name-replace "n"
                           "pos?(car(args1), args2, equal?(G))`2")
                          (("1" (reveal -2)
                            (("1" (inst -1 "cdr(args1)")
                              (("1"
                                (prop)
                                (("1"
                                  (inst -1 "G" "remove(args2, n)")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 1 "t1")
                                        (("1"
                                          (expand "count" -3 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (lemma
                                                   "count_remove_pos[nominal_AC_term]")
                                                  (("1"
                                                    (expand "n" 1)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "count_eq[nominal_AC_term]")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "equal?(G)"
                                                             "remove(args2, pos?(car(args1), args2, equal?(G))`2)"
                                                             "t1"
                                                             "car(args1)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -2)
                                                                  (("1"
                                                                    (hide
                                                                     -1
                                                                     -2)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "count_eq[nominal_AC_term]")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "equal?(G)"
                                                                           "args2"
                                                                           "t1"
                                                                           "car(args1)")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "count_remove[nominal_AC_term]")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "equal?(G)"
                                                     "n"
                                                     "args2"
                                                     "t1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "n" 1)
                                                        (("2"
                                                          (lemma
                                                           "pos?_len[nominal_AC_term]")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep) (("2" (rewrite "equal?_equiv") nil nil)) nil)) nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "equal?_equiv") nil nil)) nil))
      nil))
    nil)
   ((equal?_equiv formula-decl nil nominal_AC_equality nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pos? def-decl "[bool, nat]" list_aux_equational_reasoning nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (count_remove formula-decl nil list_aux_equational_reasoning nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pos?_len formula-decl nil list_aux_equational_reasoning nil)
    (count_remove_pos formula-decl nil list_aux_equational_reasoning nil)
    (count_eq formula-decl nil list_aux_equational_reasoning nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (remove_common def-decl "list[T]" list_aux_equational_reasoning nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (equivalence? const-decl "bool" relations nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (remove_common_not_null_unifies 0
  (remove_common_not_null_unifies-1 nil 3849904868
   ("" (skeep)
    (("" (prop)
      (("1" (use "remove_common_not_null_count")
        (("1" (assert)
          (("1" (lemma "unifies?_impossible")
            (("1" (inst -1 "G" "G1" "delta" "f" "s" "t")
              (("1" (prop)
                (("1" (skeep)
                  (("1" (inst 2 "t1") (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (use "perm_args_ac")
                  (("2" (assert)
                    (("2" (rewrite "perm?_equiv_same_count?") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "remove_common_not_null_count")
        (("2" (assert)
          (("2" (lemma "unifies?_impossible")
            (("2" (inst -1 "G" "G1" "delta" "f" "t" "s")
              (("2" (prop)
                (("1" (expand "unifies?")
                  (("1" (use "equal?_sym") (("1" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (inst 2 "t1") (("2" (assert) nil nil)) nil))
                  nil)
                 ("3" (hide 2) (("3" (grind) nil nil)) nil)
                 ("4" (use "perm_args_ac")
                  (("4" (assert)
                    (("4" (rewrite "perm?_equiv_same_count?")
                      (("4" (hide 2)
                        (("4" (expand "same_count?")
                          (("4" (skeep)
                            (("4" (inst -1 "x")
                              (("4" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (perm_args_ac formula-decl nil nominal_AC_equality nil)
    (perm?_equiv_same_count? formula-decl nil nominal_AC_equality nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (unifies?_impossible formula-decl nil nominal_AC_unification nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil)
    (remove_common_not_null_count formula-decl nil nominal_AC_unification nil)
    (are_ac? const-decl "bool" nominal_AC_term_properties nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil))
   shostak))
 (remove_common_args_cor 0
  (remove_common_args_cor-2 nil 3886065694
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (expand "remove_common" 2 3)
          (("" (lemma "remove_common_not_null_count")
            (("" (inst -1 "G" "get_args(f)(t)" "get_args(f)(s)")
              (("" (assert)
                (("" (prop)
                  (("1" (lemma "get_args_get_ac_from_args2")
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (prop)
                          (("1" (replace -1)
                            (("1" (expand "remove_common" 3 4)
                              (("1"
                                (lemma "remove_common_not_null_count")
                                (("1"
                                  (hide -2 1)
                                  (("1"
                                    (inst
                                     -1
                                     "G"
                                     "get_args(f)(s)"
                                     "get_args(f)(t)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (lemma
                                           "get_args_get_ac_from_args2")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (lemma
                                                       "remove_common_no_effect[nominal_AC_term]")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "equal?(G)"
                                                         "remove_common(get_args(f)(t), get_args(f)(s), equal?(G))"
                                                         "remove_common(get_args(f)(s), get_args(f)(t), equal?(G))")
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 4)
                                                            (("2"
                                                              (skolem
                                                               1
                                                               "t1")
                                                              (("2"
                                                                (prop)
                                                                (("2"
                                                                  (lemma
                                                                   "count_gt0[nominal_AC_term]")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "equal?(G)"
                                                                     "remove_common(get_args(f)(s), get_args(f)(t), equal?(G))"
                                                                     "t1")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (skolem
                                                                         -1
                                                                         "i")
                                                                        (("2"
                                                                          (name-replace
                                                                           "si"
                                                                           "nth(remove_common(get_args(f)(s), get_args(f)(t), equal?(G)), i)")
                                                                          (("2"
                                                                            (lemma
                                                                             "remove_common_mem_count[nominal_AC_term]")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "equal?(G)"
                                                                               "get_args(f)(t)"
                                                                               "get_args(f)(s)"
                                                                               "t1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "remove_common_mem_count[nominal_AC_term]")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "equal?(G)"
                                                                                     "get_args(f)(s)"
                                                                                     "get_args(f)(t)"
                                                                                     "si")
                                                                                    (("2"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "count_eq[nominal_AC_term]")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "equal?(G)"
                                                                                           "get_args(f)(t)"
                                                                                           "t1"
                                                                                           "si")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "count_eq[nominal_AC_term]")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "equal?(G)"
                                                                                                   "get_args(f)(s)"
                                                                                                   "t1"
                                                                                                   "si")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "si"
                                                                                         1)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "i")
                                                                                          (("2"
                                                                                            (use
                                                                                             "member_nth_lst[nominal_AC_term]")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 4)
                                                  (("2"
                                                    (expand
                                                     "no_pair_ac?"
                                                     1)
                                                    (("2"
                                                      (skolem 1 "t1")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (use
                                                           "remove_common_mem[nominal_AC_term]")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide -2)
                                                              (("2"
                                                                (use
                                                                 "get_args_mem_not_ac")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (use
                                                                     "get_args_mem_not_pair")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 3)
                                          (("2"
                                            (case
                                             "FORALL t1: count(t1, get_args(f)(s), equal?(G)) <= count(t1, get_args(f)(t), equal?(G))")
                                            (("1"
                                              (hide 1)
                                              (("1"
                                                (lemma
                                                 "unifies?_impossible")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "G"
                                                   "G1"
                                                   "delta"
                                                   "f"
                                                   "t"
                                                   "s")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (expand
                                                         "unifies?")
                                                        (("1"
                                                          (rewrite
                                                           "equal?_sym")
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skolem 1 "t2")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "t2")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (expand
                                                         "are_ac?")
                                                        (("3"
                                                          (flatten)
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (lemma
                                                         "perm_args_ac")
                                                        (("4"
                                                          (inst?)
                                                          (("4"
                                                            (inst
                                                             -1
                                                             "f")
                                                            (("4"
                                                              (assert)
                                                              (("4"
                                                                (hide
                                                                 2)
                                                                (("4"
                                                                  (lemma
                                                                   "perm?_equiv_same_count?")
                                                                  (("4"
                                                                    (inst?)
                                                                    (("4"
                                                                      (assert)
                                                                      (("4"
                                                                        (expand
                                                                         "same_count?")
                                                                        (("4"
                                                                          (skolem
                                                                           1
                                                                           "t2")
                                                                          (("4"
                                                                            (inst
                                                                             -1
                                                                             "t2")
                                                                            (("4"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skolem 1 "t2")
                                              (("2"
                                                (inst 2 "t2")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (rewrite "equal?_equiv")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "no_pair_ac?" 1)
                            (("2" (hide 4)
                              (("2"
                                (skolem 1 "t2")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (use "remove_common_mem[nominal_AC_term]")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide -2)
                                        (("2"
                                          (use "get_args_mem_not_pair")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (use
                                               "get_args_mem_not_ac")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 3)
                    (("2"
                      (case "FORALL t1: count(t1, get_args(f)(t), equal?(G)) <= count(t1, get_args(f)(s), equal?(G))")
                      (("1"
                        (case "same_count?(get_args(f)(t), get_args(f)(s), equal?(G))")
                        (("1" (lemma "perm_args_ac")
                          (("1" (inst?)
                            (("1" (inst -1 "f")
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "perm?_equiv_same_count?")
                                  (("1"
                                    (inst?)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "unifies?_impossible")
                          (("2" (inst?)
                            (("2" (inst -1 "G" "f")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (inst 2 "t1") (("2" (assert) nil nil))
                          nil))
                        nil)
                       ("3" (lemma "equal?_equiv")
                        (("3" (rewrite "equal?_equiv") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((remove_common const-decl "[nominal_AC_term, nominal_AC_term]" nominal_AC_equality nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (remove_common def-decl "list[T]" list_aux_equational_reasoning nil)
    (equal?_equiv formula-decl nil nominal_AC_equality nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (are_ac? const-decl "bool" nominal_AC_term_properties nil)
    (perm?_equiv_same_count? formula-decl nil nominal_AC_equality nil)
    (perm_args_ac formula-decl nil nominal_AC_equality nil)
    (unifies?_impossible formula-decl nil nominal_AC_unification nil)
    (<= const-decl "bool" reals nil)
    (remove_common_mem formula-decl nil list_aux_equational_reasoning nil)
    (get_args_mem_not_pair formula-decl nil nominal_AC_term_properties nil)
    (get_args_mem_not_ac formula-decl nil nominal_AC_term_properties nil)
    (no_pair_ac? const-decl "bool" nominal_AC_term_properties nil)
    (remove_common_no_effect formula-decl nil list_aux_equational_reasoning nil)
    (count_gt0 formula-decl nil list_aux_equational_reasoning nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (count_eq formula-decl nil list_aux_equational_reasoning nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member_nth_lst formula-decl nil list_aux_equational_reasoning nil)
    (remove_common_mem_count formula-decl nil list_aux_equational_reasoning nil)
    (get_args_get_ac_from_args2 formula-decl nil nominal_AC_term_properties nil)
    (remove_common_not_null_count formula-decl nil nominal_AC_unification nil))
   nil)
  (remove_common_args_cor-1 nil 3844435888
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (expand "remove_common" 2 3)
          (("" (lemma "remove_common_not_null_count")
            (("" (inst -1 "get_args(f)(t)" "get_args(f)(s)")
              (("" (assert)
                (("" (prop)
                  (("1" (lemma "get_args_get_ac_from_args2")
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (prop)
                          (("1" (replace -1)
                            (("1" (expand "remove_common" 3 4)
                              (("1"
                                (lemma "remove_common_not_null_count")
                                (("1"
                                  (hide -2 1)
                                  (("1"
                                    (inst
                                     -1
                                     "get_args(f)(s)"
                                     "get_args(f)(t)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (lemma
                                           "get_args_get_ac_from_args2")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (lemma
                                                       "remove_common_no_effect[nominal_AC_term]")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "equal?"
                                                         "remove_common(get_args(f)(t), get_args(f)(s), equal?)"
                                                         "remove_common(get_args(f)(s), get_args(f)(t), equal?)")
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 4)
                                                            (("2"
                                                              (skolem
                                                               1
                                                               "t1")
                                                              (("2"
                                                                (prop)
                                                                (("2"
                                                                  (lemma
                                                                   "count_gt0[nominal_AC_term]")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "equal?"
                                                                     "remove_common(get_args(f)(s), get_args(f)(t), equal?)"
                                                                     "t1")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (skolem
                                                                         -1
                                                                         "i")
                                                                        (("2"
                                                                          (name-replace
                                                                           "si"
                                                                           "nth(remove_common(get_args(f)(s), get_args(f)(t), equal?), i)")
                                                                          (("2"
                                                                            (lemma
                                                                             "remove_common_mem_count[nominal_AC_term]")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "equal?"
                                                                               "get_args(f)(t)"
                                                                               "get_args(f)(s)"
                                                                               "t1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "remove_common_mem_count[nominal_AC_term]")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "equal?"
                                                                                     "get_args(f)(s)"
                                                                                     "get_args(f)(t)"
                                                                                     "si")
                                                                                    (("2"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "count_eq[nominal_AC_term]")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "equal?"
                                                                                           "get_args(f)(t)"
                                                                                           "t1"
                                                                                           "si")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "count_eq[nominal_AC_term]")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "equal?"
                                                                                                   "get_args(f)(s)"
                                                                                                   "t1"
                                                                                                   "si")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "si"
                                                                                         1)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "i")
                                                                                          (("2"
                                                                                            (use
                                                                                             "member_nth_lst[nominal_AC_term]")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 4)
                                                  (("2"
                                                    (expand
                                                     "no_pair_ac?"
                                                     1)
                                                    (("2"
                                                      (skolem 1 "t1")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (use
                                                           "remove_common_mem[nominal_AC_term]")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide -2)
                                                              (("2"
                                                                (use
                                                                 "get_args_mem_not_ac")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (use
                                                                     "get_args_mem_not_pair")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 3)
                                          (("2"
                                            (case
                                             "FORALL t1: count(t1, get_args(f)(s), equal?) <= count(t1, get_args(f)(t), equal?)")
                                            (("1"
                                              (hide 1)
                                              (("1"
                                                (lemma
                                                 "unifies?_impossible")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "delta"
                                                   "f"
                                                   "t"
                                                   "s")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (expand
                                                         "unifies?")
                                                        (("1"
                                                          (rewrite
                                                           "equal?_sym")
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skolem 1 "t2")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "t2")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (expand
                                                         "are_ac?")
                                                        (("3"
                                                          (flatten)
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (lemma
                                                         "perm_args_ac")
                                                        (("4"
                                                          (inst?)
                                                          (("4"
                                                            (assert)
                                                            (("4"
                                                              (hide 2)
                                                              (("4"
                                                                (lemma
                                                                 "perm?_equiv_same_count?")
                                                                (("4"
                                                                  (inst?)
                                                                  (("4"
                                                                    (assert)
                                                                    (("4"
                                                                      (expand
                                                                       "same_count?")
                                                                      (("4"
                                                                        (skolem
                                                                         1
                                                                         "t2")
                                                                        (("4"
                                                                          (inst
                                                                           -1
                                                                           "t2")
                                                                          (("4"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skolem 1 "t2")
                                              (("2"
                                                (inst 2 "t2")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (rewrite "equal?_equiv")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "no_pair_ac?" 1)
                            (("2" (hide 4)
                              (("2"
                                (skolem 1 "t2")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (use "remove_common_mem[nominal_AC_term]")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide -2)
                                        (("2"
                                          (use "get_args_mem_not_pair")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (use
                                               "get_args_mem_not_ac")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 3)
                    (("2"
                      (case "FORALL t1: count(t1, get_args(f)(t), equal?) <= count(t1, get_args(f)(s), equal?)")
                      (("1"
                        (case "same_count?(get_args(f)(t), get_args(f)(s), equal?)")
                        (("1" (lemma "perm_args_ac")
                          (("1" (inst?)
                            (("1" (assert)
                              (("1"
                                (lemma "perm?_equiv_same_count?")
                                (("1"
                                  (inst?)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "unifies?_impossible")
                          (("2" (inst?)
                            (("2" (inst -1 "f")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (inst 2 "t1") (("2" (assert) nil nil))
                          nil))
                        nil)
                       ("3" (lemma "equal?_equiv")
                        (("3" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((remove_common_not_null_count formula-decl nil nominal_AC_unification nil)
    (get_args_get_ac_from_args2 formula-decl nil nominal_AC_term_properties nil)
    (remove_common_mem_count formula-decl nil list_aux_equational_reasoning nil)
    (member_nth_lst formula-decl nil list_aux_equational_reasoning nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (count_eq formula-decl nil list_aux_equational_reasoning nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count_gt0 formula-decl nil list_aux_equational_reasoning nil)
    (remove_common_no_effect formula-decl nil list_aux_equational_reasoning nil)
    (no_pair_ac? const-decl "bool" nominal_AC_term_properties nil)
    (get_args_mem_not_ac formula-decl nil nominal_AC_term_properties nil)
    (get_args_mem_not_pair formula-decl nil nominal_AC_term_properties nil)
    (remove_common_mem formula-decl nil list_aux_equational_reasoning nil)
    (<= const-decl "bool" reals nil)
    (unifies?_impossible formula-decl nil nominal_AC_unification nil)
    (perm_args_ac formula-decl nil nominal_AC_equality nil)
    (perm?_equiv_same_count? formula-decl nil nominal_AC_equality nil)
    (are_ac? const-decl "bool" nominal_AC_term_properties nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (equal?_equiv formula-decl nil nominal_AC_equality nil)
    (remove_common def-decl "list[T]" list_aux_equational_reasoning nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (equivalence? const-decl "bool" relations nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (constant type-eq-decl nil nominal_AC_term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (remove_common const-decl "[nominal_AC_term, nominal_AC_term]" nominal_AC_equality nil))
   shostak))
 (get_args_remove_common 0
  (get_args_remove_common-1 nil 3844796494
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (expand "remove_common" 2 1)
          (("" (lemma "remove_common_not_null_count")
            (("" (inst?)
              (("" (prop)
                (("1" (lemma "get_args_get_ac_from_args2")
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (hide 4)
                        (("1" (expand "no_pair_ac?" 1)
                          (("1" (skolem 1 "t1")
                            (("1" (flatten)
                              (("1"
                                (lemma "remove_common_mem[nominal_AC_term]")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (use "get_args_mem_not_pair")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (use "get_args_mem_not_ac")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 3)
                  (("2" (lemma "unifies?_impossible")
                    (("2" (inst?)
                      (("2" (inst -1 "G" "f")
                        (("2" (prop)
                          (("1" (skolem 1 "t1")
                            (("1" (inst 2 "t1")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (lemma "perm_args_ac")
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (inst -1 "f")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (rewrite
                                       "perm?_equiv_same_count?")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((remove_common const-decl "[nominal_AC_term, nominal_AC_term]" nominal_AC_equality nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (perm?_equiv_same_count? formula-decl nil nominal_AC_equality nil)
    (perm_args_ac formula-decl nil nominal_AC_equality nil)
    (unifies?_impossible formula-decl nil nominal_AC_unification nil)
    (get_args_get_ac_from_args2 formula-decl nil nominal_AC_term_properties nil)
    (no_pair_ac? const-decl "bool" nominal_AC_term_properties nil)
    (get_args_mem_not_pair formula-decl nil nominal_AC_term_properties nil)
    (get_args_mem_not_ac formula-decl nil nominal_AC_term_properties nil)
    (remove_common_mem formula-decl nil list_aux_equational_reasoning nil)
    (remove_common def-decl "list[T]" list_aux_equational_reasoning nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (equivalence? const-decl "bool" relations nil)
    (remove_common_not_null_count formula-decl nil nominal_AC_unification nil))
   shostak))
 (remove_common_eq 0
  (remove_common_eq-2 nil 3886077051
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (name-replace "t1" "remove_common(t, s, f, G)`1")
          (("" (expand "unifies?" -2)
            (("" (name-replace "s1" "remove_common(t, s, f, G)`2")
              (("" (lemma "perm_args_ac")
                ((""
                  (inst -1 "G1" "subs(delta)(s1)" "f"
                   "subs(delta)(t1)")
                  (("" (assert)
                    (("" (hide 3)
                      (("" (prop)
                        (("1" (use "args_subs_ac")
                          (("1" (replace -1)
                            (("1" (hide -1)
                              (("1"
                                (use "args_subs_ac")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (lemma "get_args_remove_common")
                                      (("1"
                                        (inst
                                         -1
                                         "G"
                                         "G1"
                                         "delta"
                                         "f"
                                         "s"
                                         "t")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "unifies?" -1)
                                            (("1"
                                              (expand "t1" 1)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (lemma
                                                     "get_args_remove_common")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "G"
                                                       "G1"
                                                       "delta"
                                                       "f"
                                                       "t"
                                                       "s")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (case
                                                             "remove_common(s, t, f, G)`1 = s1")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (replace
                                                                 -2)
                                                                (("1"
                                                                  (hide
                                                                   -1
                                                                   -2)
                                                                  (("1"
                                                                    (name-replace
                                                                     "args_t"
                                                                     "remove_common(get_args(f)(t), get_args(f)(s), equal?(G))")
                                                                    (("1"
                                                                      (name-replace
                                                                       "args_s"
                                                                       "remove_common(get_args(f)(s), get_args(f)(t), equal?(G))")
                                                                      (("1"
                                                                        (reveal
                                                                         -1
                                                                         -2)
                                                                        (("1"
                                                                          (lemma
                                                                           "ac_perm_args2")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "G1"
                                                                             "f"
                                                                             "subs(delta)(s)"
                                                                             "subs(delta)(t)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 -5)
                                                                                (("1"
                                                                                  (use
                                                                                   "args_subs_ac")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("1"
                                                                                        (use
                                                                                         "args_subs_ac")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "perm?_remove_common_get_common")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "G"
                                                                                                 "get_args(f)(t)"
                                                                                                 "get_args(f)(s)")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -4)
                                                                                                  (("1"
                                                                                                    (name-replace
                                                                                                     "common_t"
                                                                                                     "get_common(get_args(f)(t), get_args(f)(s), equal?(G))")
                                                                                                    (("1"
                                                                                                      (reveal
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "perm?_remove_common_get_common")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "G"
                                                                                                           "get_args(f)(s)"
                                                                                                           "get_args(f)(t)")
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -5)
                                                                                                            (("1"
                                                                                                              (name-replace
                                                                                                               "common_s"
                                                                                                               "get_common(get_args(f)(s), get_args(f)(t), equal?(G))")
                                                                                                              (("1"
                                                                                                                (reveal
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "perm?(G1)(flatten(map(get_args(f))(map(subs(delta))(append(args_t, common_t)))),
                                      flatten(map(get_args(f))(map(subs(delta))(append(args_s, common_s)))))")
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -5
                                                                                                                     -6)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -3
                                                                                                                       2
                                                                                                                       -7)
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "perm?_equiv_same_count?")
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "perm?_equiv_same_count?")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "same_count?"
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (skeep)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "same_count?"
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "x")
                                                                                                                                  (("1"
                                                                                                                                    (rewrite
                                                                                                                                     "subs_map")
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       "subs_map")
                                                                                                                                      (("1"
                                                                                                                                        (rewrite
                                                                                                                                         "subs_map")
                                                                                                                                        (("1"
                                                                                                                                          (rewrite
                                                                                                                                           "subs_map")
                                                                                                                                          (("1"
                                                                                                                                            (rewrite
                                                                                                                                             "subs_append")
                                                                                                                                            (("1"
                                                                                                                                              (rewrite
                                                                                                                                               "subs_append")
                                                                                                                                              (("1"
                                                                                                                                                (rewrite
                                                                                                                                                 "map_append2")
                                                                                                                                                (("1"
                                                                                                                                                  (rewrite
                                                                                                                                                   "map_append2")
                                                                                                                                                  (("1"
                                                                                                                                                    (rewrite
                                                                                                                                                     "flatten_append")
                                                                                                                                                    (("1"
                                                                                                                                                      (rewrite
                                                                                                                                                       "flatten_append")
                                                                                                                                                      (("1"
                                                                                                                                                        (rewrite
                                                                                                                                                         "count_append")
                                                                                                                                                        (("1"
                                                                                                                                                          (rewrite
                                                                                                                                                           "count_append")
                                                                                                                                                          (("1"
                                                                                                                                                            (case
                                                                                                                                                             "count(x, flatten(map(get_args(f))(subs(delta)(common_t))), equal?(G1)) =
                                       count(x, flatten(map(get_args(f))(subs(delta)(common_s))), equal?(G1))")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (hide
                                                                                                                                                               -1
                                                                                                                                                               2)
                                                                                                                                                              (("2"
                                                                                                                                                                (lemma
                                                                                                                                                                 "perm?_get_common_sym")
                                                                                                                                                                (("2"
                                                                                                                                                                  (inst
                                                                                                                                                                   -1
                                                                                                                                                                   "G"
                                                                                                                                                                   "get_args(f)(t)"
                                                                                                                                                                   "get_args(f)(s)")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (replace
                                                                                                                                                                     -2)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (replace
                                                                                                                                                                       -3)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (lemma
                                                                                                                                                                         "subs_perm?_get_args")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (inst
                                                                                                                                                                           -1
                                                                                                                                                                           "G"
                                                                                                                                                                           "G1"
                                                                                                                                                                           "common_t"
                                                                                                                                                                           "common_s"
                                                                                                                                                                           "f"
                                                                                                                                                                           "delta")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (rewrite
                                                                                                                                                                               "perm?_equiv_same_count?")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "same_count?"
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -1
                                                                                                                                                                                   "x")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (rewrite
                                                                                                                                                                                     "subs_map")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (rewrite
                                                                                                                                                                                         "subs_map")
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide
                                                                                                                     -8
                                                                                                                     2
                                                                                                                     3)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "perm?_trans")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "G1"
                                                                                                                         "flatten(map(get_args(f))(map(subs(delta))(append(args_t, common_t))))"
                                                                                                                         "flatten(map(get_args(f))(map(subs(delta))(get_args(f)(t))))"
                                                                                                                         "flatten(map(get_args(f))(map(subs(delta))(append(args_s, common_s))))")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             2)
                                                                                                                            (("2"
                                                                                                                              (prop)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "subs_perm?_get_args")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "G"
                                                                                                                                   "G1"
                                                                                                                                   "append(args_t, common_t)"
                                                                                                                                   "get_args(f)(t)"
                                                                                                                                   "f"
                                                                                                                                   "delta")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       2)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "perm?_sym")
                                                                                                                                        (("1"
                                                                                                                                          (inst?)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (lemma
                                                                                                                                 "perm?_trans")
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "G1"
                                                                                                                                   "flatten(map(get_args(f))(map(subs(delta))(get_args(f)(t))))"
                                                                                                                                   "flatten(map(get_args(f))(map(subs(delta))(get_args(f)(s))))"
                                                                                                                                   "flatten(map(get_args(f))(map(subs(delta))(append(args_s, common_s))))")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (hide
                                                                                                                                       2)
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "subs_perm?_get_args")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "G"
                                                                                                                                           "G1"
                                                                                                                                           "get_args(f)(s)"
                                                                                                                                           "append(args_s, common_s)"
                                                                                                                                           "f"
                                                                                                                                           "delta")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "s1"
                                                               1)
                                                              (("2"
                                                                (use
                                                                 "remove_common_sym")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand
                                                               "unifies?"
                                                               1)
                                                              (("2"
                                                                (use
                                                                 "equal?_sym")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide 1)
                                                            (("3"
                                                              (lemma
                                                               "equal?_sym")
                                                              (("3"
                                                                (inst
                                                                 -1
                                                                 "G"
                                                                 "t"
                                                                 "s")
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (hide 2)
                                                            (("4"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "t1" 1)
                          (("2" (expand "remove_common" 1)
                            (("2" (rewrite "subs_get_ac_from_args")
                              (("2"
                                (expand "s1" 1)
                                (("2"
                                  (expand "remove_common" 1 2)
                                  (("2"
                                    (rewrite "subs_get_ac_from_args")
                                    (("2"
                                      (expand "get_ac_from_args" 1)
                                      (("2"
                                        (expand "are_ac?" 1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (remove_common const-decl "[nominal_AC_term, nominal_AC_term]" nominal_AC_equality nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (subs_get_ac_from_args formula-decl nil nominal_AC_substitution nil)
    (get_ac_from_args const-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (args_subs_ac formula-decl nil nominal_AC_substitution nil)
    (get_args_remove_common formula-decl nil nominal_AC_unification nil)
    (remove_common_sym formula-decl nil nominal_AC_equality nil)
    (ac_perm_args2 formula-decl nil nominal_AC_equality nil)
    (perm?_remove_common_get_common formula-decl nil nominal_AC_equality nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (flatten def-decl "list[T]" list_aux_equational_reasoning nil)
    (append def-decl "list[T]" list_props nil)
    (subs_perm?_get_args formula-decl nil nominal_AC_fresh_subs nil)
    (perm?_get_common_sym formula-decl nil nominal_AC_equality nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (count_append formula-decl nil list_aux_equational_reasoning nil)
    (flatten_append formula-decl nil list_aux_equational_reasoning nil)
    (map_append2 formula-decl nil list_aux_equational_reasoning2parameters nil)
    (subs def-decl "args" nominal_AC_substitution nil)
    (subs_append formula-decl nil nominal_AC_substitution nil)
    (subs_map formula-decl nil nominal_AC_substitution nil)
    (perm?_equiv_same_count? formula-decl nil nominal_AC_equality nil)
    (perm?_trans formula-decl nil nominal_AC_equality nil)
    (perm?_sym formula-decl nil nominal_AC_equality nil)
    (get_common def-decl "list[T]" list_aux_equational_reasoning nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (remove_common def-decl "list[T]" list_aux_equational_reasoning nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil)
    (are_ac? const-decl "bool" nominal_AC_term_properties nil)
    (perm_args_ac formula-decl nil nominal_AC_equality nil)
    (unifies? const-decl "bool" nominal_AC_unification nil))
   nil)
  (remove_common_eq-1 nil 3849865546
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (name-replace "t1" "remove_common(t, s, f)`1")
          (("" (expand "unifies?" -2)
            (("" (name-replace "s1" "remove_common(t, s, f)`2")
              (("" (lemma "perm_args_ac")
                (("" (inst -1 "subs(delta)(s1)" "f" "subs(delta)(t1)")
                  (("" (assert)
                    (("" (hide 3)
                      (("" (prop)
                        (("1" (use "args_subs_ac")
                          (("1" (replace -1)
                            (("1" (hide -1)
                              (("1"
                                (use "args_subs_ac")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (lemma "get_args_remove_common")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (inst -1 "delta")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "unifies?" -1)
                                              (("1"
                                                (expand "t1" 1)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (lemma
                                                       "get_args_remove_common")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "delta"
                                                         "f"
                                                         "t"
                                                         "s")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (case
                                                               "remove_common(s, t, f)`1 = s1")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -2)
                                                                  (("1"
                                                                    (hide
                                                                     -1
                                                                     -2)
                                                                    (("1"
                                                                      (name-replace
                                                                       "args_t"
                                                                       "remove_common(get_args(f)(t), get_args(f)(s), equal?)")
                                                                      (("1"
                                                                        (name-replace
                                                                         "args_s"
                                                                         "remove_common(get_args(f)(s), get_args(f)(t), equal?)")
                                                                        (("1"
                                                                          (reveal
                                                                           -1
                                                                           -2)
                                                                          (("1"
                                                                            (lemma
                                                                             "ac_perm_args2")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "f"
                                                                               "subs(delta)(s)"
                                                                               "subs(delta)(t)")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide
                                                                                   -5)
                                                                                  (("1"
                                                                                    (use
                                                                                     "args_subs_ac")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("1"
                                                                                          (use
                                                                                           "args_subs_ac")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "perm?_remove_common_get_common")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "get_args(f)(t)"
                                                                                                   "get_args(f)(s)")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -4)
                                                                                                    (("1"
                                                                                                      (name-replace
                                                                                                       "common_t"
                                                                                                       "get_common(get_args(f)(t), get_args(f)(s), equal?)")
                                                                                                      (("1"
                                                                                                        (reveal
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "perm?_remove_common_get_common")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "get_args(f)(s)"
                                                                                                             "get_args(f)(t)")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -5)
                                                                                                              (("1"
                                                                                                                (name-replace
                                                                                                                 "common_s"
                                                                                                                 "get_common(get_args(f)(s), get_args(f)(t), equal?)")
                                                                                                                (("1"
                                                                                                                  (reveal
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "perm?(flatten(map(get_args(f))(map(subs(delta))(append(args_t, common_t)))),
            flatten(map(get_args(f))(map(subs(delta))(append(args_s, common_s)))))")
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -5
                                                                                                                       -6)
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         -3
                                                                                                                         2
                                                                                                                         -7)
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "perm?_equiv_same_count?")
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "perm?_equiv_same_count?")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "same_count?"
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (skeep)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "same_count?"
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "x")
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       "subs_map")
                                                                                                                                      (("1"
                                                                                                                                        (rewrite
                                                                                                                                         "subs_map")
                                                                                                                                        (("1"
                                                                                                                                          (rewrite
                                                                                                                                           "subs_map")
                                                                                                                                          (("1"
                                                                                                                                            (rewrite
                                                                                                                                             "subs_map")
                                                                                                                                            (("1"
                                                                                                                                              (rewrite
                                                                                                                                               "subs_append")
                                                                                                                                              (("1"
                                                                                                                                                (rewrite
                                                                                                                                                 "subs_append")
                                                                                                                                                (("1"
                                                                                                                                                  (rewrite
                                                                                                                                                   "map_append2")
                                                                                                                                                  (("1"
                                                                                                                                                    (rewrite
                                                                                                                                                     "map_append2")
                                                                                                                                                    (("1"
                                                                                                                                                      (rewrite
                                                                                                                                                       "flatten_append")
                                                                                                                                                      (("1"
                                                                                                                                                        (rewrite
                                                                                                                                                         "flatten_append")
                                                                                                                                                        (("1"
                                                                                                                                                          (rewrite
                                                                                                                                                           "count_append")
                                                                                                                                                          (("1"
                                                                                                                                                            (rewrite
                                                                                                                                                             "count_append")
                                                                                                                                                            (("1"
                                                                                                                                                              (case
                                                                                                                                                               "count(x, flatten(map(get_args(f))(subs(delta)(common_t))), equal?) = 
         count(x, flatten(map(get_args(f))(subs(delta)(common_s))), equal?)")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (hide
                                                                                                                                                                 -1
                                                                                                                                                                 2)
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "perm?_get_common_sym")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     "get_args(f)(t)"
                                                                                                                                                                     "get_args(f)(s)")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (replace
                                                                                                                                                                       -2)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (replace
                                                                                                                                                                         -3)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (lemma
                                                                                                                                                                           "subs_perm?_get_args")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (inst
                                                                                                                                                                             -1
                                                                                                                                                                             "common_t"
                                                                                                                                                                             "common_s"
                                                                                                                                                                             "delta"
                                                                                                                                                                             "f")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (rewrite
                                                                                                                                                                                 "perm?_equiv_same_count?")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "same_count?"
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -1
                                                                                                                                                                                     "x")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (rewrite
                                                                                                                                                                                       "subs_map")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (rewrite
                                                                                                                                                                                           "subs_map")
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       -8
                                                                                                                       2
                                                                                                                       3)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "perm?_trans")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "flatten(map(get_args(f))(map(subs(delta))(append(args_t, common_t))))"
                                                                                                                           "flatten(map(get_args(f))(map(subs(delta))(get_args(f)(t))))"
                                                                                                                           "flatten(map(get_args(f))(map(subs(delta))(append(args_s, common_s))))")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (prop)
                                                                                                                                (("1"
                                                                                                                                  (lemma
                                                                                                                                   "subs_perm?_get_args")
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "append(args_t, common_t)"
                                                                                                                                     "get_args(f)(t)"
                                                                                                                                     "delta"
                                                                                                                                     "f")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         2)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "perm?_sym")
                                                                                                                                          (("1"
                                                                                                                                            (inst?)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (lemma
                                                                                                                                   "perm?_trans")
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "flatten(map(get_args(f))(map(subs(delta))(get_args(f)(t))))"
                                                                                                                                     "flatten(map(get_args(f))(map(subs(delta))(get_args(f)(s))))"
                                                                                                                                     "flatten(map(get_args(f))(map(subs(delta))(append(args_s, common_s))))")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (hide
                                                                                                                                         2)
                                                                                                                                        (("2"
                                                                                                                                          (lemma
                                                                                                                                           "subs_perm?_get_args")
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "get_args(f)(s)"
                                                                                                                                             "append(args_s, common_s)"
                                                                                                                                             "delta"
                                                                                                                                             "f")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "s1"
                                                                 1)
                                                                (("2"
                                                                  (use
                                                                   "remove_common_sym")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (expand
                                                                 "unifies?"
                                                                 1)
                                                                (("2"
                                                                  (use
                                                                   "equal?_sym")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide 1)
                                                              (("3"
                                                                (lemma
                                                                 "equal?_sym")
                                                                (("3"
                                                                  (inst
                                                                   -1
                                                                   "t"
                                                                   "s")
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (hide 2)
                                                              (("4"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "t1" 1)
                          (("2" (expand "remove_common" 1)
                            (("2" (rewrite "subs_get_ac_from_args")
                              (("2"
                                (expand "s1" 1)
                                (("2"
                                  (expand "remove_common" 1 2)
                                  (("2"
                                    (rewrite "subs_get_ac_from_args")
                                    (("2"
                                      (expand "get_ac_from_args" 1)
                                      (("2"
                                        (expand "are_ac?" 1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil nominal_AC_term_properties nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil)
    (remove_common const-decl "[nominal_AC_term, nominal_AC_term]" nominal_AC_equality nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (subs_get_ac_from_args formula-decl nil nominal_AC_substitution nil)
    (get_ac_from_args const-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (args_subs_ac formula-decl nil nominal_AC_substitution nil)
    (get_args_remove_common formula-decl nil nominal_AC_unification nil)
    (are_ac? const-decl "bool" nominal_AC_term_properties nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (remove_common def-decl "list[T]" list_aux_equational_reasoning nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (equivalence? const-decl "bool" relations nil)
    (get_common def-decl "list[T]" list_aux_equational_reasoning nil)
    (perm?_sym formula-decl nil nominal_AC_equality nil)
    (perm?_trans formula-decl nil nominal_AC_equality nil)
    (perm?_equiv_same_count? formula-decl nil nominal_AC_equality nil)
    (subs_map formula-decl nil nominal_AC_substitution nil)
    (subs_append formula-decl nil nominal_AC_substitution nil)
    (subs def-decl "args" nominal_AC_substitution nil)
    (map_append2 formula-decl nil list_aux_equational_reasoning2parameters nil)
    (flatten_append formula-decl nil list_aux_equational_reasoning nil)
    (count_append formula-decl nil list_aux_equational_reasoning nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (perm?_get_common_sym formula-decl nil nominal_AC_equality nil)
    (append def-decl "list[T]" list_props nil)
    (flatten def-decl "list[T]" list_aux_equational_reasoning nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (perm?_remove_common_get_common formula-decl nil nominal_AC_equality nil)
    (ac_perm_args2 formula-decl nil nominal_AC_equality nil)
    (remove_common_sym formula-decl nil nominal_AC_equality nil)
    (perm_args_ac formula-decl nil nominal_AC_equality nil)
    (unifies? const-decl "bool" nominal_AC_unification nil))
   shostak))
 (remove_common_no_common_args 0
  (remove_common_no_common_args-2 nil 3886078842
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "t1" "remove_common(t, s, f, G)`1")
        (("" (name-replace "s1" "remove_common(t, s, f, G)`2")
          (("" (prop)
            (("" (lemma "get_args_remove_common")
              (("" (inst -1 "G" "G1" "delta" "f" "s" "t")
                (("" (assert)
                  (("" (prop)
                    (("" (expand "t1 " 2)
                      (("" (replace -1)
                        (("" (hide -1)
                          (("" (expand "s1" 2)
                            (("" (lemma "get_args_remove_common")
                              ((""
                                (inst -1 "G" "G1" "delta" "f" "t" "s")
                                ((""
                                  (assert)
                                  ((""
                                    (prop)
                                    (("1"
                                      (use "remove_common_sym")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (replace -3)
                                            (("1"
                                              (hide -1 -2 -3)
                                              (("1"
                                                (name-replace
                                                 "args_t"
                                                 "get_args(f)(t)")
                                                (("1"
                                                  (name-replace
                                                   "args_s"
                                                   "get_args(f)(s)")
                                                  (("1"
                                                    (expand
                                                     "no_common_args?"
                                                     2)
                                                    (("1"
                                                      (skolem 2 "t2")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (lemma
                                                           "remove_common_count_gt[nominal_AC_term]")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "equal?(G)"
                                                             "args_t"
                                                             "args_s"
                                                             "t2")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "count(t2, remove_common(args_s, args_t, equal?(G)), equal?(G)) > 0")
                                                                (("1"
                                                                  (lemma
                                                                   "remove_common_count_gt[nominal_AC_term]")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "equal?(G)"
                                                                     "args_s"
                                                                     "args_t"
                                                                     "t2")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (use
                                                           "remove_common_count_gt[nominal_AC_term]")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (case
                                                               "count(t2, remove_common(args_t, args_s, equal?(G)), equal?(G)) > 0")
                                                              (("1"
                                                                (lemma
                                                                 "remove_common_count_gt[nominal_AC_term]")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "equal?(G)"
                                                                   "args_t"
                                                                   "args_s"
                                                                   "t2")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "unifies?")
                                      (("2"
                                        (use "equal?_sym")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (lemma "equal?_sym")
                                      (("3"
                                        (inst -1 "G" "t" "s")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (hide 3)
                                      (("4" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_args_remove_common formula-decl nil nominal_AC_unification nil)
    (are_ac? const-decl "bool" nominal_AC_term_properties nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil)
    (remove_common_sym formula-decl nil nominal_AC_equality nil)
    (remove_common_count_gt formula-decl nil list_aux_equational_reasoning nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (remove_common def-decl "list[T]" list_aux_equational_reasoning nil)
    (> const-decl "bool" reals nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (no_common_args? const-decl "bool" nominal_AC_equality nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (remove_common const-decl "[nominal_AC_term, nominal_AC_term]" nominal_AC_equality nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (string type-eq-decl nil strings nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (remove_common_no_common_args-1 nil 3849876927
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "t1" "remove_common(t, s, f)`1")
        (("" (name-replace "s1" "remove_common(t, s, f)`2")
          (("" (prop)
            (("" (lemma "get_args_remove_common")
              (("" (inst -1 "delta" "f" "s" "t")
                (("" (assert)
                  (("" (prop)
                    (("" (expand "t1 " 2)
                      (("" (replace -1)
                        (("" (hide -1)
                          (("" (expand "s1" 2)
                            (("" (lemma "get_args_remove_common")
                              ((""
                                (inst -1 "delta" "f" "t" "s")
                                ((""
                                  (assert)
                                  ((""
                                    (prop)
                                    (("1"
                                      (use "remove_common_sym")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (replace -3)
                                            (("1"
                                              (hide -1 -2 -3)
                                              (("1"
                                                (name-replace
                                                 "args_t"
                                                 "get_args(f)(t)")
                                                (("1"
                                                  (name-replace
                                                   "args_s"
                                                   "get_args(f)(s)")
                                                  (("1"
                                                    (expand
                                                     "no_common_args?"
                                                     2)
                                                    (("1"
                                                      (skolem 2 "t2")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (lemma
                                                           "remove_common_count_gt[nominal_AC_term]")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "equal?"
                                                             "args_t"
                                                             "args_s"
                                                             "t2")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "count(t2, remove_common(args_s, args_t, equal?), equal?) > 0")
                                                                (("1"
                                                                  (lemma
                                                                   "remove_common_count_gt[nominal_AC_term]")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "equal?"
                                                                     "args_s"
                                                                     "args_t"
                                                                     "t2")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (use
                                                           "remove_common_count_gt[nominal_AC_term]")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (case
                                                               "count(t2, remove_common(args_t, args_s, equal?), equal?) > 0")
                                                              (("1"
                                                                (lemma
                                                                 "remove_common_count_gt[nominal_AC_term]")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "equal?"
                                                                   "args_t"
                                                                   "args_s"
                                                                   "t2")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "unifies?")
                                      (("2"
                                        (use "equal?_sym")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (lemma "equal?_sym")
                                      (("3"
                                        (inst -1 "t" "s")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (hide 3)
                                      (("4" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_args_remove_common formula-decl nil nominal_AC_unification nil)
    (are_ac? const-decl "bool" nominal_AC_term_properties nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil)
    (remove_common_sym formula-decl nil nominal_AC_equality nil)
    (remove_common_count_gt formula-decl nil list_aux_equational_reasoning nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (> const-decl "bool" reals nil)
    (remove_common def-decl "list[T]" list_aux_equational_reasoning nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (equivalence? const-decl "bool" relations nil)
    (no_common_args? const-decl "bool" nominal_AC_equality nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (remove_common const-decl "[nominal_AC_term, nominal_AC_term]" nominal_AC_equality nil)
    (string type-eq-decl nil strings nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (constant type-eq-decl nil nominal_AC_term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (remove_common_eq2 0
  (remove_common_eq2-2 nil 3886496836
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (name-replace "t1" "remove_common(t, s, f, G)`1")
          (("" (reveal -1)
            (("" (name-replace "s1" "remove_common(t, s, f, G)`2")
              (("" (expand "unifies?")
                (("" (reveal -1)
                  (("" (lemma "perm_args_ac")
                    ((""
                      (inst -1 "G1" "subs(delta)(s)" "f"
                       "subs(delta)(t)")
                      (("" (assert)
                        (("" (hide 4)
                          (("" (prop)
                            (("1" (rewrite "args_subs_ac" 1)
                              (("1"
                                (rewrite "args_subs_ac" 1)
                                (("1"
                                  (lemma "ac_perm_args2")
                                  (("1"
                                    (inst
                                     -1
                                     "G1"
                                     "f"
                                     "subs(delta)(s1)"
                                     "subs(delta)(t1)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -5)
                                        (("1"
                                          (rewrite "args_subs_ac" -1)
                                          (("1"
                                            (rewrite "args_subs_ac" -1)
                                            (("1"
                                              (name-replace
                                               "A_t"
                                               "get_args(f)(t)")
                                              (("1"
                                                (name-replace
                                                 "A_s"
                                                 "get_args(f)(s)")
                                                (("1"
                                                  (reveal -1 -2)
                                                  (("1"
                                                    (name-replace
                                                     "A_t1"
                                                     "get_args(f)(t1)")
                                                    (("1"
                                                      (name-replace
                                                       "A_s1"
                                                       "get_args(f)(s1)")
                                                      (("1"
                                                        (reveal -1 -2)
                                                        (("1"
                                                          (case
                                                           "EXISTS args1, args2: perm?(G)(A_t, append(A_t1, args1)) AND perm?(G)(A_s, append(A_s1, args2)) AND perm?(G)(args1, args2)")
                                                          (("1"
                                                            (skolem
                                                             -1
                                                             ("B_t"
                                                              "B_s"))
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (rewrite
                                                                 "subs_map")
                                                                (("1"
                                                                  (rewrite
                                                                   "subs_map")
                                                                  (("1"
                                                                    (rewrite
                                                                     "subs_map")
                                                                    (("1"
                                                                      (rewrite
                                                                       "subs_map")
                                                                      (("1"
                                                                        (case
                                                                         "perm?(G1)(flatten(map(get_args(f))(subs(delta)(A_t))), flatten(map(get_args(f))(subs(delta)(append(A_t1, B_t)))))")
                                                                        (("1"
                                                                          (lemma
                                                                           "perm?_trans")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "G1"
                                                                             "flatten(map(get_args(f))(subs(delta)(A_t)))"
                                                                             "flatten(map(get_args(f))(subs(delta)(append(A_t1, B_t))))"
                                                                             "flatten(map(get_args(f))(subs(delta)(A_s)))")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 2)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "perm?_trans")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "G1"
                                                                                       "flatten(map(get_args(f))(subs(delta)(append(A_t1, B_t))))"
                                                                                       "flatten(map(get_args(f))(subs(delta)(append(A_s1, B_s))))"
                                                                                       "flatten(map(get_args(f))(subs(delta)(A_s)))")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "subs_append")
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "subs_append")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "map_append"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "map_append"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "flatten_append")
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "flatten_append")
                                                                                                        (("1"
                                                                                                          (use
                                                                                                           "perm?_append")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (use
                                                                                                                 "perm?_get_args_flatten")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     2
                                                                                                                     -8)
                                                                                                                    (("1"
                                                                                                                      (use
                                                                                                                       "subs_perm?")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (use
                                                                                               "perm?_get_args_flatten")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "subs_perm?")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "G"
                                                                                                       "G1"
                                                                                                       "append(A_s1, B_s)"
                                                                                                       "A_s"
                                                                                                       "delta")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "perm?_sym")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "G"
                                                                                                               "A_s"
                                                                                                               "append(A_s1, B_s)")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (use
                                                                             "perm?_get_args_flatten")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (use
                                                                                   "subs_perm?")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (lemma
                                                               "perm?_remove_common_get_common")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "G"
                                                                 "A_t"
                                                                 "A_s")
                                                                (("2"
                                                                  (case
                                                                   "remove_common(A_t, A_s, equal?(G)) = A_t1")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (lemma
                                                                       "perm?_remove_common_get_common")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "G"
                                                                         "A_s"
                                                                         "A_t")
                                                                        (("1"
                                                                          (case
                                                                           "remove_common(A_s, A_t, equal?(G)) = A_s1")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (inst
                                                                               1
                                                                               "get_common(A_t, A_s, equal?(G))"
                                                                               "get_common(A_s, A_t, equal?(G))")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (use
                                                                                   "perm?_get_common_sym")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2
                                                                             -8
                                                                             -1)
                                                                            (("2"
                                                                              (expand
                                                                               "A_s1"
                                                                               1)
                                                                              (("2"
                                                                                (expand
                                                                                 "s1"
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "remove_common"
                                                                                   1
                                                                                   2)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -5)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -6)
                                                                                      (("2"
                                                                                        (use
                                                                                         "get_args_get_ac_from_args2")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "A_s"
                                                                                             1)
                                                                                            (("2"
                                                                                              (use
                                                                                               "remove_common_no_pair_ac")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "A_t1"
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "t1"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "remove_common"
                                                                           1
                                                                           2)
                                                                          (("2"
                                                                            (replace
                                                                             -4)
                                                                            (("2"
                                                                              (replace
                                                                               -5)
                                                                              (("2"
                                                                                (use
                                                                                 "get_args_get_ac_from_args2")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -1
                                                                                     -6
                                                                                     2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "A_t"
                                                                                       1)
                                                                                      (("2"
                                                                                        (use
                                                                                         "remove_common_no_pair_ac")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use "subs_are_ac")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (remove_common const-decl "[nominal_AC_term, nominal_AC_term]" nominal_AC_equality nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (subs_are_ac formula-decl nil nominal_AC_substitution nil)
    (args_subs_ac formula-decl nil nominal_AC_substitution nil)
    (ac_perm_args2 formula-decl nil nominal_AC_equality nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (append def-decl "list[T]" list_props nil)
    (perm?_trans formula-decl nil nominal_AC_equality nil)
    (perm?_sym formula-decl nil nominal_AC_equality nil)
    (subs_append formula-decl nil nominal_AC_substitution nil)
    (map_append formula-decl nil more_map_props nil)
    (flatten_append formula-decl nil list_aux_equational_reasoning nil)
    (perm?_append formula-decl nil nominal_AC_equality nil)
    (subs_perm? formula-decl nil nominal_AC_fresh_subs nil)
    (perm?_get_args_flatten formula-decl nil nominal_AC_equality nil)
    (subs def-decl "args" nominal_AC_substitution nil)
    (flatten def-decl "list[T]" list_aux_equational_reasoning nil)
    (subs_map formula-decl nil nominal_AC_substitution nil)
    (perm?_remove_common_get_common formula-decl nil nominal_AC_equality nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (remove_common def-decl "list[T]" list_aux_equational_reasoning nil)
    (get_common def-decl "list[T]" list_aux_equational_reasoning nil)
    (perm?_get_common_sym formula-decl nil nominal_AC_equality nil)
    (remove_common_no_pair_ac formula-decl nil nominal_AC_equality nil)
    (get_args_get_ac_from_args2 formula-decl nil nominal_AC_term_properties nil)
    (perm_args_ac formula-decl nil nominal_AC_equality nil)
    (unifies? const-decl "bool" nominal_AC_unification nil))
   nil)
  (remove_common_eq2-1 nil 3886089116
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (name-replace "t1" "remove_common(t, s, f, G)`1")
          (("" (reveal -1)
            (("" (name-replace "s1" "remove_common(t, s, f, G)`2")
              (("" (expand "unifies?")
                (("" (reveal -1)
                  (("" (lemma "perm_args_ac")
                    ((""
                      (inst -1 "G1" "subs(delta)(s)" "f"
                       "subs(delta)(t)")
                      (("" (assert)
                        (("" (hide 5)
                          (("" (prop)
                            (("1" (rewrite "args_subs_ac" 1)
                              (("1"
                                (rewrite "args_subs_ac" 1)
                                (("1"
                                  (use "perm?_get_args_flatten")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide 2)
                                      (("1"
                                        (name-replace
                                         "A_t"
                                         "get_args(f)(t)")
                                        (("1"
                                          (name-replace
                                           "A_s"
                                           "get_args(f)(s)")
                                          (("1"
                                            (reveal -1 -2)
                                            (("1"
                                              (lemma
                                               "perm?_remove_common_get_common")
                                              (("1"
                                                (inst
                                                 -1
                                                 "G"
                                                 "A_t"
                                                 "A_s")
                                                (("1"
                                                  (rewrite
                                                   "subs_map"
                                                   1)
                                                  (("1"
                                                    (rewrite
                                                     "subs_map"
                                                     1)
                                                    (("1"
                                                      (case
                                                       "remove_common(A_t, A_s, equal?(G)) = get_args(f)(t1)")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (lemma
                                                           "subs_perm?")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "G"
                                                             "G1"
                                                             "A_t"
                                                             "append(get_args(f)(t1), get_common(A_t, A_s, equal?(G)))"
                                                             "delta")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "perm?(G1)(subs(delta)(append(get_args(f)(t1), get_common(A_t, A_s, equal?(G)))), subs(delta)(append(get_args(f)(s1), get_common(A_s, A_t, equal?(G)))))")
                                                                (("1"
                                                                  (case
                                                                   "perm?(G1)(subs(delta)(append(get_args(f)(s1), get_common(A_s, A_t, equal?(G)))), subs(delta)(A_s))")
                                                                  (("1"
                                                                    (lemma
                                                                     "perm?_trans")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "G1"
                                                                       "subs(delta)(A_t)"
                                                                       "subs(delta)(append(get_args(f)(t1), get_common(A_t, A_s, equal?(G))))"
                                                                       "subs(delta)(A_s)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide
                                                                           2)
                                                                          (("1"
                                                                            (lemma
                                                                             "perm?_trans")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "G1"
                                                                               "subs(delta)(append(get_args(f)(t1), get_common(A_t, A_s, equal?(G))))"
                                                                               "subs(delta)(append(get_args(f)(s1), get_common(A_s, A_t, equal?(G))))"
                                                                               "subs(delta)(A_s)")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -1
                                                                     -2
                                                                     -4
                                                                     2)
                                                                    (("2"
                                                                      (lemma
                                                                       "perm?_remove_common_get_common")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "G"
                                                                         "A_s"
                                                                         "A_t")
                                                                        (("2"
                                                                          (lemma
                                                                           "perm?_sym")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "G"
                                                                             "A_s"
                                                                             "append(remove_common(A_s, A_t, equal?(G)), get_common(A_s, A_t, equal?(G)))")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (hide
                                                                                 -2)
                                                                                (("2"
                                                                                  (case
                                                                                   "remove_common(A_s, A_t, equal?(G)) = get_args(f)(s1)")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "subs_perm?")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "G")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       ("A_s"
                                                                                        "A_t"
                                                                                        "s1")
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "remove_common"
                                                                                         1
                                                                                         2)
                                                                                        (("2"
                                                                                          (use
                                                                                           "get_args_get_ac_from_args2")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "no_pair_ac?")
                                                                                                (("2"
                                                                                                  (skolem
                                                                                                   1
                                                                                                   "u")
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "remove_common_mem[nominal_AC_term]")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (use
                                                                                                           "get_args_mem_not_pair")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (use
                                                                                                               "get_args_mem_not_ac")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (rewrite
                                                                     "subs_append")
                                                                    (("2"
                                                                      (rewrite
                                                                       "subs_append")
                                                                      (("2"
                                                                        (lemma
                                                                         "perm?_append")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "G1"
                                                                           "subs(delta)(get_args(f)(t1))"
                                                                           "subs(delta)(get_args(f)(s1))"
                                                                           "subs(delta)(get_common(A_t, A_s, equal?(G)))"
                                                                           "subs(delta)(get_common(A_s, A_t, equal?(G)))")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (prop)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "ac_perm_args2")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "G1"
                                                                                     "f"
                                                                                     "subs(delta)(s1)"
                                                                                     "subs(delta)(t1)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (postpone)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (postpone)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2 3)
                                                        (("2"
                                                          (expand
                                                           "t1"
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "remove_common"
                                                             1
                                                             2)
                                                            (("2"
                                                              (replace
                                                               -2)
                                                              (("2"
                                                                (replace
                                                                 -3)
                                                                (("2"
                                                                  (use
                                                                   "get_args_get_ac_from_args2")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "no_pair_ac?"
                                                                       1)
                                                                      (("2"
                                                                        (skolem
                                                                         1
                                                                         "u")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (use
                                                                             "remove_common_mem[nominal_AC_term]")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "A_t"
                                                                                 -1)
                                                                                (("2"
                                                                                  (use
                                                                                   "get_args_mem_not_pair")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (use
                                                                                       "get_args_mem_not_ac")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (postpone) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (remove_common_vars 0
  (remove_common_vars-1 nil 3849879508
   ("" (skeep)
    (("" (assert)
      (("" (expand "remove_common" 1)
        (("" (expand "subset?" 1)
          (("" (skeep)
            (("" (expand "member" 1)
              (("" (expand "vars" 1)
                (("" (expand "union" 1)
                  (("" (prop)
                    (("" (expand "vars" -1)
                      (("" (expand ("member" "union") -1)
                        (("" (prop)
                          (("1" (rewrite "vars_get_ac_from_args")
                            (("1" (rewrite "vars_args")
                              (("1"
                                (skolem -1 "t1")
                                (("1"
                                  (prop)
                                  (("1"
                                    (use "remove_common_mem[nominal_AC_term]")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -2)
                                        (("1"
                                          (use "vars_get_args")
                                          (("1"
                                            (replace -1 :dir rl)
                                            (("1"
                                              (rewrite "vars_args")
                                              (("1"
                                                (inst 1 "t1")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite "vars_get_ac_from_args")
                            (("2" (rewrite "vars_args")
                              (("2"
                                (skolem -1 "s1")
                                (("2"
                                  (prop)
                                  (("2"
                                    (use "remove_common_mem[nominal_AC_term]")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (use "vars_get_args")
                                        (("2"
                                          (replace -1 :dir rl)
                                          (("2"
                                            (rewrite "vars_args")
                                            (("2"
                                              (inst 2 "s1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (vars_get_args formula-decl nil nominal_AC_term_properties nil)
    (remove_common_mem formula-decl nil list_aux_equational_reasoning nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (string type-eq-decl nil strings nil)
    (remove_common def-decl "list[T]" list_aux_equational_reasoning nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (equivalence? const-decl "bool" relations nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (vars_get_ac_from_args formula-decl nil nominal_AC_term_properties nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (remove_common const-decl "[nominal_AC_term, nominal_AC_term]" nominal_AC_equality nil))
   shostak))
 (remove_common_alm_well_formed? 0
  (remove_common_alm_well_formed?-1 nil 3849903933
   ("" (skeep)
    (("" (skoletin)
      (("" (flatten)
        (("" (expand "alm_well_formed?" 2)
          (("" (prop)
            (("1" (expand "t1" 1)
              (("1" (expand "alm_well_formed?" 1)
                (("1" (prop)
                  (("1" (expand "remove_common" -1)
                    (("1" (expand "get_ac_from_args" -1 1)
                      (("1" (propax) nil nil)) nil))
                    nil)
                   ("2" (skolem 1 "t2")
                    (("2" (flatten)
                      (("2" (expand "remove_common" -1)
                        (("2" (use "subterm_get_ac_from_args")
                          (("2" (prop)
                            (("1" (expand "remove_common" 1)
                              (("1" (assert) nil nil)) nil)
                             ("2" (hide -2)
                              (("2"
                                (rewrite "subterm_args")
                                (("2"
                                  (skolem -1 "t2S")
                                  (("2"
                                    (prop)
                                    (("2"
                                      (use "remove_common_mem[nominal_AC_term]")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide -2)
                                          (("2"
                                            (expand "well_formed?" -7)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (use
                                                 "well_formed_get_args")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "well_formed?"
                                                     -1)
                                                    (("2"
                                                      (inst -1 "t2")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (rewrite
                                                           "subterm_args"
                                                           1)
                                                          (("2"
                                                            (inst
                                                             1
                                                             "t2S")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3"
                              (use "remove_common_not_null_unifies")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "s1" 1)
              (("2" (expand "alm_well_formed?" 1)
                (("2" (prop)
                  (("1" (expand "remove_common" -1)
                    (("1" (expand "get_ac_from_args" -1 1)
                      (("1" (propax) nil nil)) nil))
                    nil)
                   ("2" (skolem 1 "t2")
                    (("2" (flatten)
                      (("2" (expand "remove_common" -1)
                        (("2" (use "subterm_get_ac_from_args")
                          (("2" (prop)
                            (("1" (expand "remove_common" 1)
                              (("1" (assert) nil nil)) nil)
                             ("2" (hide -2)
                              (("2"
                                (rewrite "subterm_args")
                                (("2"
                                  (skolem -1 "t2S")
                                  (("2"
                                    (prop)
                                    (("2"
                                      (use "remove_common_mem[nominal_AC_term]")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide -2)
                                          (("2"
                                            (expand "well_formed?" -7)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (use
                                                 "well_formed_get_args")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "well_formed?"
                                                     -1)
                                                    (("2"
                                                      (inst -1 "t2")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (rewrite
                                                           "subterm_args"
                                                           1)
                                                          (("2"
                                                            (inst
                                                             1
                                                             "t2S")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3"
                              (use "remove_common_not_null_unifies")
                              (("3"
                                (assert)
                                (("3"
                                  (hide -1 -2)
                                  (("3"
                                    (prop)
                                    (("1"
                                      (expand "unifies?")
                                      (("1"
                                        (rewrite "equal?_sym")
                                        nil
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "equal?_sym" 3)
                                      nil
                                      nil)
                                     ("3"
                                      (expand "are_ac?")
                                      (("3"
                                        (flatten)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (remove_common const-decl "[nominal_AC_term, nominal_AC_term]" nominal_AC_equality nil)
    (nominal_AC_fresh_subs def-decl "bool" nominal_AC_fresh_subs nil)
    (are_ac? const-decl "bool" nominal_AC_term_properties nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil)
    (get_ac_from_args const-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (subterm_get_ac_from_args formula-decl nil nominal_AC_term_properties nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (remove_common def-decl "list[T]" list_aux_equational_reasoning nil)
    (remove_common_not_null_unifies formula-decl nil nominal_AC_unification nil)
    (remove_common_mem formula-decl nil list_aux_equational_reasoning nil)
    (well_formed_get_args formula-decl nil nominal_AC_term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subterm_args formula-decl nil nominal_AC_term_properties nil))
   shostak))
 (decompose_num_arg 0
  (decompose_num_arg-1 nil 3850752307
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "decompose" -2)
            (("" (split -2)
              (("1" (flatten)
                (("1" (expand "num_arg" 1)
                  (("1" (assert)
                    (("1" (inst-cp -5 "term1(t)")
                      (("1" (prop)
                        (("1" (inst -1 "term1(s)")
                          (("1" (assert)
                            (("1" (replace -1)
                              (("1"
                                (assert)
                                (("1"
                                  (inst -6 "term2(t)")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (inst -1 "term2(s)")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (decompose def-decl "[unif_prb, bool]" nominal_AC_unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (decompose_subterm 0
  (decompose_subterm-1 nil 3850483915
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "decompose" -2)
            (("" (split -2)
              (("1" (flatten)
                (("1" (inst -5 "term1(t)")
                  (("1" (prop)
                    (("1" (inst -1 "term1(s)")
                      (("1" (assert)
                        (("1" (reveal -2)
                          (("1" (inst -1 "term2(t)")
                            (("1" (prop)
                              (("1"
                                (inst -1 "term2(s)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma
                                     "subset_antisymmetric[nominal_AC_term]")
                                    (("1"
                                      (inst
                                       -1
                                       "subterms(decompose(t, s)`1)"
                                       "subterms(t, s)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "subset?" 1)
                                              (("1"
                                                (skolem 1 "x")
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (expand
                                                     "decompose"
                                                     -1)
                                                    (("1"
                                                      (rewrite
                                                       "subterms_append")
                                                      (("1"
                                                        (replace -2)
                                                        (("1"
                                                          (replace -3)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "subset?" 1)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (expand
                                                   "decompose"
                                                   1)
                                                  (("2"
                                                    (rewrite
                                                     "subterms_append")
                                                    (("2"
                                                      (replace -2)
                                                      (("2"
                                                        (replace -3)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split -1)
                  (("1" (propax) nil nil)
                   ("2" (expand "decompose" 3)
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (assert)
                          (("2" (hide 3 -1)
                            (("2" (expand "subterms" 3)
                              (("2"
                                (expand "subterms" 3 2)
                                (("2"
                                  (decompose-equality 3)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subset? const-decl "bool" sets nil)
    (subterms_append formula-decl nil nominal_AC_unification nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (decompose def-decl "[unif_prb, bool]" nominal_AC_unification nil)
    (subterms const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_unification nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (decompose_subterm2 0
  (decompose_subterm2-1 nil 3856115059
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "subset?" 1)
            (("" (skolem 1 "t1")
              (("" (prop)
                (("" (expand "decompose" -2)
                  (("" (lift-if)
                    (("" (split -2)
                      (("1" (flatten)
                        (("1" (use "nominal_AC_term_pair_eta")
                          (("1" (lemma "nominal_AC_term_pair_eta")
                            (("1" (inst -1 "s")
                              (("1"
                                (replace -2 1 :dir rl)
                                (("1"
                                  (replace -1 1 :dir rl)
                                  (("1"
                                    (expand "subterms" 1)
                                    (("1"
                                      (expand ("member" "union") 1)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (rewrite
                                           "subterms_mem_unif_prb")
                                          (("1"
                                            (skolem -5 "t1S")
                                            (("1"
                                              (prop)
                                              (("1"
                                                (rewrite
                                                 "member_unif_prb_append")
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (inst
                                                     -7
                                                     "term1(t)")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "term1(s)")
                                                        (("1"
                                                          (expand
                                                           "subset?"
                                                           -1)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "t1")
                                                            (("1"
                                                              (expand
                                                               "subterms"
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "subterms"
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   ("member"
                                                                    "union")
                                                                   2)
                                                                  (("1"
                                                                    (expand
                                                                     ("member"
                                                                      "union")
                                                                     1)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (rewrite
                                                                         "subterms_mem_unif_prb")
                                                                        (("2"
                                                                          (inst
                                                                           1
                                                                           "t1S")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "subterms"
                                                     1)
                                                    (("2"
                                                      (expand
                                                       "subterms"
                                                       2)
                                                      (("2"
                                                        (expand
                                                         ("member"
                                                          "union")
                                                         1)
                                                        (("2"
                                                          (expand
                                                           ("member"
                                                            "union")
                                                           2)
                                                          (("2"
                                                            (prop)
                                                            (("2"
                                                              (inst
                                                               -7
                                                               "term2(t)")
                                                              (("2"
                                                                (prop)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "term2(s)")
                                                                  (("1"
                                                                    (expand
                                                                     "subset?"
                                                                     -1)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "t1")
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (rewrite
                                                                           "subterms_mem_unif_prb")
                                                                          (("2"
                                                                            (inst
                                                                             1
                                                                             "t1S")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split -1)
                          (("1" (flatten) (("1" (grind) nil nil)) nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nominal_AC_term_pair_eta formula-decl nil nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (append def-decl "list[T]" list_props nil)
    (subterms_mem_unif_prb formula-decl nil nominal_AC_unification nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member_unif_prb_append formula-decl nil nominal_AC_unification nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (decompose def-decl "[unif_prb, bool]" nominal_AC_unification nil)
    (subterms const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_unification nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (decompose_correct 0
  (decompose_correct-1 nil 3850475002
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "decompose" -2 1)
            (("" (split -2)
              (("1" (flatten)
                (("1" (use "nominal_AC_term_pair_eta")
                  (("1" (lemma "nominal_AC_term_pair_eta")
                    (("1" (inst -1 "s")
                      (("1" (expand "unifies?" 1 1)
                        (("1" (replace -1 1 :dir rl)
                          (("1" (rewrite "subs_pair")
                            (("1" (replace -1)
                              (("1"
                                (replace -2 1 :dir rl)
                                (("1"
                                  (rewrite "subs_pair")
                                  (("1"
                                    (expand "equal?" 1)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (expand "decompose" 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (rewrite "unifies?_append")
                                            (("1"
                                              (iff)
                                              (("1"
                                                (split 1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (inst
                                                       -9
                                                       "term1(t)")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst
                                                       -9
                                                       "term2(t)")
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (inst
                                                       -9
                                                       "term1(t)")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst
                                                       -9
                                                       "term2(t)")
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split -1)
                  (("1" (propax) nil nil)
                   ("2" (expand "decompose" 3)
                    (("2" (assert)
                      (("2" (lift-if)
                        (("2" (flatten)
                          (("2" (assert)
                            (("2" (iff) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nominal_AC_term_pair_eta formula-decl nil nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (unifies?_append formula-decl nil nominal_AC_unification nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (decompose def-decl "[unif_prb, bool]" nominal_AC_unification nil)
    (unifies? def-decl "bool" nominal_AC_unification nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (decompose_correct_app 0
  (decompose_correct_app-1 nil 3850475986
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skolem 1 ("G" "f" "s" "sig"))
          (("" (prop)
            (("" (iff)
              (("" (prop)
                (("1" (expand "unifies?" -1)
                  (("1" (rewrite "subs_app")
                    (("1" (rewrite "subs_app")
                      (("1" (expand "equal?" -1)
                        (("1" (flatten)
                          (("1" (hide -3)
                            (("1" (use "decompose_correct")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "unifies?" -1 1)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "unifies?" 1)
                  (("2" (rewrite "subs_app")
                    (("2" (rewrite "subs_app")
                      (("2" (expand "equal?" 1)
                        (("2" (prop)
                          (("1" (use "well_formed_num_arg")
                            (("1" (assert)
                              (("1"
                                (replace -1)
                                (("1"
                                  (lemma "well_formed_num_arg")
                                  (("1"
                                    (inst -1 "sig" "s")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (lemma "decompose_num_arg")
                                          (("1"
                                            (inst -1 "s" "t")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (use "decompose_correct")
                            (("2" (assert)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "unifies?" -1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((decompose_num_arg formula-decl nil nominal_AC_unification nil)
    (well_formed_num_arg formula-decl nil nominal_AC_substitution nil)
    (decompose_correct formula-decl nil nominal_AC_unification nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (decompose def-decl "[unif_prb, bool]" nominal_AC_unification nil)
    (unifies? def-decl "bool" nominal_AC_unification nil)
    (app adt-constructor-decl "[[f_symbol, nominal_AC_term] -> (app?)]" nominal_AC_term_adt
     nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (string type-eq-decl nil strings nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (decompose_correct_abs1 0
  (decompose_correct_abs1-1 nil 3887187658
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skolem 1 ("G" "a" "s" "sig"))
          (("" (prop)
            (("" (iff)
              (("" (prop)
                (("1" (expand "unifies?" -1)
                  (("1" (rewrite "subs_abs")
                    (("1" (rewrite "subs_abs")
                      (("1" (expand "equal?" -1)
                        (("1" (hide -2)
                          (("1" (use "decompose_correct")
                            (("1" (assert)
                              (("1"
                                (expand "unifies?" -1 1)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "unifies?" 1)
                  (("2" (rewrite "subs_abs" 1)
                    (("2" (rewrite "subs_abs" 1)
                      (("2" (expand "equal?" 1)
                        (("2" (use "decompose_correct")
                          (("2" (assert)
                            (("2" (assert)
                              (("2"
                                (expand "unifies?" -1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((decompose_correct formula-decl nil nominal_AC_unification nil)
    (subs_abs formula-decl nil nominal_AC_substitution nil)
    (decompose def-decl "[unif_prb, bool]" nominal_AC_unification nil)
    (unifies? def-decl "bool" nominal_AC_unification nil)
    (abs adt-constructor-decl "[[atom, nominal_AC_term] -> (abs?)]" nominal_AC_term_adt nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (decompose_correct_abs2 0
  (decompose_correct_abs2-1 nil 3887189644
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skolem 1 ("G" "a" "b" "s" "sig"))
          (("" (flatten)
            (("" (iff)
              (("" (prop)
                (("1" (expand "unifies?" -1)
                  (("1" (rewrite "subs_abs")
                    (("1" (rewrite "subs_abs")
                      (("1" (expand "equal?" -1)
                        (("1" (hide -2)
                          (("1" (assert)
                            (("1"
                              (name-replace "pi"
                               "cons[[atom, atom]]((a, b), null)")
                              (("1"
                                (reveal -1)
                                (("1"
                                  (lemma "decompose_correct")
                                  (("1"
                                    (inst
                                     -1
                                     "G"
                                     "ext(pi)(s)"
                                     "sig"
                                     "t")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "unifies?" 1)
                                          (("1"
                                            (rewrite "subs_ext")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -2)
                  (("2" (expand "unifies?" 1)
                    (("2"
                      (name-replace "pi"
                       "cons[[atom, atom]]((a, b), null)")
                      (("2" (reveal -1)
                        (("2" (rewrite "subs_abs")
                          (("2" (rewrite "subs_abs")
                            (("2" (expand "equal?" 1)
                              (("2"
                                (assert)
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (lemma "decompose_correct")
                                    (("2"
                                      (inst
                                       -1
                                       "G"
                                       "ext(pi)(s)"
                                       "sig"
                                       "t")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "unifies?" -1)
                                          (("2"
                                            (rewrite "subs_ext")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((decompose_correct formula-decl nil nominal_AC_unification nil)
    (subs_ext formula-decl nil nominal_AC_substitution nil)
    (subs_abs formula-decl nil nominal_AC_substitution nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (decompose def-decl "[unif_prb, bool]" nominal_AC_unification nil)
    (unifies? def-decl "bool" nominal_AC_unification nil)
    (abs adt-constructor-decl "[[atom, nominal_AC_term] -> (abs?)]" nominal_AC_term_adt nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fresh def-decl "bool" nominal_AC_freshness nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (decompose_no_pair 0
  (decompose_no_pair-1 nil 3850482873
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "decompose" 1)
            (("" (split 1)
              (("1" (flatten)
                (("1" (rewrite "no_pair_append")
                  (("1" (prop)
                    (("1" (inst -3 "term1(t)") (("1" (grind) nil nil))
                      nil)
                     ("2" (inst -3 "term2(t)") (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split 2)
                  (("1" (grind) nil nil)
                   ("2" (flatten) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (no_pair_append formula-decl nil nominal_AC_unification nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (decompose def-decl "[unif_prb, bool]" nominal_AC_unification nil)
    (no_pair? const-decl "bool" nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (decompose_not_fail 0
  (decompose_not_fail-1 nil 3850752686
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skolem 1 ("G" "s" "sig"))
          (("" (prop)
            (("" (expand "decompose" 1)
              (("" (split 1)
                (("1" (flatten)
                  (("1" (expand "unifies?" -5)
                    (("1" (lemma "nominal_AC_term_pair_eta")
                      (("1" (inst -1 "t")
                        (("1" (replace -1 -6 :dir rl)
                          (("1" (rewrite "subs_pair")
                            (("1" (lemma "nominal_AC_term_pair_eta")
                              (("1"
                                (inst -1 "s")
                                (("1"
                                  (replace -1 -7 :dir rl)
                                  (("1"
                                    (rewrite "subs_pair")
                                    (("1"
                                      (expand "equal?" -7)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (inst -5 "term1(t)")
                                            (("1"
                                              (prop)
                                              (("1" (grind) nil nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst -5 "term2(t)")
                                            (("2"
                                              (prop)
                                              (("1"
                                                (inst
                                                 -1
                                                 "G"
                                                 "term2(s)"
                                                 "sig")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "unifies?"
                                                     1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (prop)
                      (("1" (expand "unifies?" -4)
                        (("1" (lemma "nominal_AC_term_pair_eta")
                          (("1" (inst -1 "t")
                            (("1" (replace -1 -5 :dir rl)
                              (("1"
                                (rewrite "subs_pair")
                                (("1"
                                  (expand "equal?" -5)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (use "subs_pair2")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (use "nominal_AC_term_times_eta")
                                          (("1"
                                            (expand "well_formed?" -6)
                                            (("1"
                                              (inst -6 "V(s)")
                                              (("1"
                                                (expand "subs" -6)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (hide-all-but
                                                     (-1 -7 2))
                                                    (("1"
                                                      (replace
                                                       -1
                                                       -2
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (rewrite
                                                         "subs_ext_pi"
                                                         -2)
                                                        (("1"
                                                          (lemma
                                                           "ext_preserves_type")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "unifies?" -4)
                        (("2" (lemma "equal?_sym")
                          (("2" (assert)
                            (("2"
                              (inst -1 "G" "subs(sig)(s)"
                               "subs(sig)(t)")
                              (("2"
                                (assert)
                                (("2"
                                  (lemma "nominal_AC_term_pair_eta")
                                  (("2"
                                    (inst -1 "s")
                                    (("2"
                                      (replace -1 :dir rl)
                                      (("2"
                                        (rewrite "subs_pair")
                                        (("2"
                                          (expand "equal?" -2)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (hide -3 -4)
                                              (("2"
                                                (use "subs_pair2")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "well_formed?"
                                                     -6)
                                                    (("2"
                                                      (inst -6 "V(t)")
                                                      (("2"
                                                        (expand
                                                         "subs"
                                                         -6)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (use
                                                               "nominal_AC_term_times_eta")
                                                              (("2"
                                                                (hide-all-but
                                                                 (-1
                                                                  -4
                                                                  2))
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   -2
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (rewrite
                                                                     "subs_ext_pi"
                                                                     -2)
                                                                    (("2"
                                                                      (lemma
                                                                       "ext_preserves_type")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_pair2 formula-decl nil nominal_AC_substitution nil)
    (nominal_AC_term_times_eta formula-decl nil nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (ext_preserves_type formula-decl nil nominal_AC_term_properties nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (ord const-decl "upto(6)" nominal_AC_term_adt nil)
    (subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil)
    (nominal_AC_term_pair_eta formula-decl nil nominal_AC_term_adt nil)
    (member const-decl "bool" sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (decompose def-decl "[unif_prb, bool]" nominal_AC_unification nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (decompose_not_fail2 0
  (decompose_not_fail2-1 nil 3851174544
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (expand "unifies?" -2)
          (("" (rewrite "subs_app")
            (("" (rewrite "subs_app")
              (("" (expand "equal?" -2)
                (("" (flatten)
                  (("" (lemma "decompose_not_fail")
                    (("" (inst -1 "G" "s" "sigma" "t")
                      (("" (assert)
                        (("" (assert)
                          (("" (expand "unifies?" 1)
                            (("" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unifies? const-decl "bool" nominal_AC_unification nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (decompose_not_fail formula-decl nil nominal_AC_unification nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (string type-eq-decl nil strings nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subs_app formula-decl nil nominal_AC_substitution nil))
   shostak))
 (decompose_app_well_formed 0
  (decompose_app_well_formed-1 nil 3850483735
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (expand "well_formed?" 1)
          (("" (skolem 1 "t1")
            (("" (split 1)
              (("1" (flatten)
                (("1" (use "decompose_subterm")
                  (("1" (assert)
                    (("1" (prop)
                      (("1" (replace -1)
                        (("1" (expand "well_formed?" -5)
                          (("1" (flatten)
                            (("1" (expand "subterms" -2)
                              (("1"
                                (expand ("member" "union") -2)
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "well_formed?" -5)
                                    (("1"
                                      (inst -5 "t1")
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "well_formed?" -6)
                                    (("2"
                                      (inst -6 "t1")
                                      (("2"
                                        (assert)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (prop)
                (("2" (use "decompose_no_pair")
                  (("2" (expand "no_pair?" -1)
                    (("2" (inst -1 "t1") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((decompose_subterm formula-decl nil nominal_AC_unification nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subterms const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_unification nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (decompose_no_pair formula-decl nil nominal_AC_unification nil)
    (no_pair? const-decl "bool" nominal_AC_unification nil))
   shostak))
 (decompose_well_formed 0
  (decompose_well_formed-1 nil 3885219334
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "decompose" 1 1)
            (("" (split 1)
              (("1" (flatten)
                (("1" (rewrite "well_formed_unif_prb_append")
                  (("1" (prop)
                    (("1" (inst -3 "term1(t)")
                      (("1" (prop)
                        (("1" (inst -1 "f" "term1(s)")
                          (("1" (prop)
                            (("1" (hide 2)
                              (("1"
                                (expand "well_formed?" 1)
                                (("1"
                                  (expand "well_formed?" -3)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "well_formed?" (-3 1))
                                      (("1"
                                        (skolem 1 "ti")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "subterms" -1)
                                            (("1"
                                              (expand
                                               ("member" "union")
                                               -1)
                                              (("1"
                                                (prop)
                                                (("1" (grind) nil nil)
                                                 ("2"
                                                  (inst -5 "ti")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -3 -1)
                                      (("2"
                                        (expand "well_formed?")
                                        (("2"
                                          (skolem 1 "ti")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (inst -3 "term2(t)")
                      (("2" (prop)
                        (("1" (inst -1 "f" "term2(s)")
                          (("1" (assert)
                            (("1" (hide 2)
                              (("1"
                                (expand "well_formed?")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (hide -4)
                                      (("1"
                                        (expand "well_formed?")
                                        (("1"
                                          (skolem 1 "ti")
                                          (("1"
                                            (inst?)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -1 -3)
                                      (("2"
                                        (expand "well_formed?")
                                        (("2"
                                          (skolem 1 "ti")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split 2)
                  (("1" (flatten)
                    (("1" (hide-all-but 1)
                      (("1" (rewrite "well_formed_unif_prb")
                        (("1" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (hide 4)
                      (("2" (hide -1)
                        (("2" (expand "well_formed?" -1)
                          (("2" (flatten)
                            (("2" (rewrite "well_formed_unif_prb")
                              (("2"
                                (skolem 3 "u")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (expand "member" -1)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (hide -3)
                                          (("1"
                                            (expand "well_formed?")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skolem 3 "ti")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst -4 "ti")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -1)
                                        (("2"
                                          (hide -1 -2)
                                          (("2"
                                            (expand "well_formed?")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (skolem 3 "ti")
                                                (("2"
                                                  (inst -1 "ti")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (well_formed_unif_prb_append formula-decl nil nominal_AC_unification nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (well_formed_unif_prb formula-decl nil nominal_AC_unification nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (decompose def-decl "[unif_prb, bool]" nominal_AC_unification nil)
    (app adt-constructor-decl "[[f_symbol, nominal_AC_term] -> (app?)]" nominal_AC_term_adt
     nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (string type-eq-decl nil strings nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (decompose_well_formed_abs 0
  (decompose_well_formed_abs-1 nil 3886348806
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "decompose" 1 1)
            (("" (split 1)
              (("1" (flatten)
                (("1" (rewrite "well_formed_unif_prb_append")
                  (("1" (prop)
                    (("1" (inst -3 "term1(t)")
                      (("1" (prop)
                        (("1" (inst -1 "a" "b" "term1(s)")
                          (("1" (prop)
                            (("1" (hide 2)
                              (("1"
                                (expand "well_formed?" 1)
                                (("1"
                                  (expand "well_formed?" -3)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "well_formed?" (-3 1))
                                      (("1"
                                        (skolem 1 "ti")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "subterms" -1)
                                            (("1"
                                              (expand
                                               ("member" "union")
                                               -1)
                                              (("1"
                                                (prop)
                                                (("1" (grind) nil nil)
                                                 ("2"
                                                  (inst -5 "ti")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -3 -1)
                                      (("2"
                                        (expand "well_formed?")
                                        (("2"
                                          (skolem 1 "ti")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (inst -3 "term2(t)")
                      (("2" (prop)
                        (("1" (inst -1 "a" "b" "term2(s)")
                          (("1" (assert)
                            (("1" (hide 2)
                              (("1"
                                (expand "well_formed?")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (hide -4)
                                      (("1"
                                        (expand "well_formed?")
                                        (("1"
                                          (skolem 1 "ti")
                                          (("1"
                                            (inst?)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -1 -3)
                                      (("2"
                                        (expand "well_formed?")
                                        (("2"
                                          (skolem 1 "ti")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split 2)
                  (("1" (flatten)
                    (("1" (hide-all-but 1)
                      (("1" (rewrite "well_formed_unif_prb")
                        (("1" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (hide 4)
                      (("2" (hide -1)
                        (("2" (expand "well_formed?" -1)
                          (("2" (flatten)
                            (("2" (rewrite "well_formed_unif_prb")
                              (("2"
                                (skolem 3 "u")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (expand "member" -1)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (hide -3)
                                          (("1"
                                            (expand "well_formed?")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skolem 3 "ti")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst -4 "ti")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -1)
                                        (("2"
                                          (hide -1 -2)
                                          (("2"
                                            (expand "well_formed?")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (skolem 3 "ti")
                                                (("2"
                                                  (inst -1 "ti")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (well_formed_unif_prb_append formula-decl nil nominal_AC_unification nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (well_formed_unif_prb formula-decl nil nominal_AC_unification nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (decompose def-decl "[unif_prb, bool]" nominal_AC_unification nil)
    (abs adt-constructor-decl "[[atom, nominal_AC_term] -> (abs?)]" nominal_AC_term_adt nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (decompose_size 0
  (decompose_size-1 nil 3851025772
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "decompose" 1)
            (("" (lift-if)
              (("" (split 1)
                (("1" (flatten)
                  (("1" (rewrite "size_app_unif_prb")
                    (("1" (expand "size" 1 3)
                      (("1" (expand "size" 1 3)
                        (("1" (assert)
                          (("1" (expand "size" 1 5)
                            (("1" (assert)
                              (("1"
                                (inst -3 "term1(t)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst -1 "term1(s)")
                                    (("1"
                                      (case
                                       "size(decompose(term2(t), term2(s))`1) <= size(term2(t), term2(s))")
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (hide 2 -1)
                                        (("2"
                                          (reveal -3)
                                          (("2"
                                            (inst -1 "term2(t)")
                                            (("2"
                                              (prop)
                                              (("1"
                                                (inst -1 "term2(s)")
                                                nil
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (grind) nil nil)
                     ("2" (flatten) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size_app_unif_prb formula-decl nil nominal_AC_unification nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (decompose def-decl "[unif_prb, bool]" nominal_AC_unification nil)
    (size const-decl "nat" nominal_AC_unification nil)
    (size def-decl "nat" nominal_AC_unification nil)
    (<= const-decl "bool" reals nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (decompose_ren 0
  (decompose_ren-1 nil 3855160814
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skolem 1 ("rho" "s"))
          (("" (prop)
            (("1" (expand "decompose" -1)
              (("1" (split -1)
                (("1" (flatten)
                  (("1" (expand "decompose" 1)
                    (("1" (split 1)
                      (("1" (flatten)
                        (("1" (prop)
                          (("1" (lemma "nominal_AC_term_pair_eta")
                            (("1" (inst -1 "t")
                              (("1"
                                (replace -1 1 :dir rl)
                                (("1"
                                  (rewrite "subs_pair")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma "nominal_AC_term_pair_eta")
                                      (("1"
                                        (inst -1 "s")
                                        (("1"
                                          (replace -1 1 :dir rl)
                                          (("1"
                                            (rewrite "subs_pair")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst -9 "term1(t)")
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "rho"
                                                     "term1(s)")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "size" 1 2)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst -7 "term2(t)")
                            (("2" (expand "size" -7 2)
                              (("2"
                                (assert)
                                (("2"
                                  (assert)
                                  (("2"
                                    (lemma "nominal_AC_term_pair_eta")
                                    (("2"
                                      (inst -1 "t")
                                      (("2"
                                        (replace -1 1 :dir rl)
                                        (("2"
                                          (rewrite "subs_pair")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lemma "nominal_AC_term_pair_eta")
                                              (("2"
                                                (inst -1 "s")
                                                (("2"
                                                  (replace
                                                   -1
                                                   1
                                                   :dir
                                                   rl)
                                                  (("2"
                                                    (rewrite
                                                     "subs_pair")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (inst
                                                         -9
                                                         "rho"
                                                         "term2(s)")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (hide 2)
                          (("2" (lemma "nominal_AC_term_pair_eta")
                            (("2" (inst -1 "t")
                              (("2"
                                (replace -1 1 :dir rl)
                                (("2"
                                  (rewrite "subs_pair" 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lemma "nominal_AC_term_pair_eta")
                                      (("2"
                                        (inst -1 "s")
                                        (("2"
                                          (replace -1 1 :dir rl)
                                          (("2"
                                            (rewrite "subs_pair")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (split -1)
                      (("1" (propax) nil nil)
                       ("2" (flatten)
                        (("2" (expand "decompose" 4 1)
                          (("2" (split 4)
                            (("1" (flatten)
                              (("1"
                                (lemma "renaming_ord2")
                                (("1"
                                  (inst -1 "rho" "t")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split 2)
                                (("1"
                                  (lemma "renaming_ord2")
                                  (("1"
                                    (split -2)
                                    (("1"
                                      (inst -2 "rho" "t")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (inst -2 "rho" "s")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "decompose" -1)
              (("2" (split -1)
                (("1" (flatten)
                  (("1" (expand "decompose" 1)
                    (("1" (split 1)
                      (("1" (flatten)
                        (("1" (lemma "nominal_AC_term_pair_eta")
                          (("1" (inst -1 "t")
                            (("1" (lemma "nominal_AC_term_pair_eta")
                              (("1"
                                (inst -1 "s")
                                (("1"
                                  (prop)
                                  (("1"
                                    (replace -2 -7 :dir rl)
                                    (("1"
                                      (rewrite "subs_pair")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1 -7 :dir rl)
                                          (("1"
                                            (rewrite "subs_pair")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst -9 "term1(t)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "size"
                                                     -9
                                                     2)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -9
                                                           "rho"
                                                           "term1(s)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replace -1 -8 :dir rl)
                                    (("2"
                                      (rewrite "subs_pair")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -2 -8 :dir rl)
                                          (("2"
                                            (rewrite "subs_pair" -8)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst -9 "term2(t)")
                                                (("2"
                                                  (expand "size" -9 2)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (inst
                                                         -9
                                                         "rho"
                                                         "term2(s)")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (hide 2)
                          (("2" (hide -5)
                            (("2" (lemma "renaming_ord2")
                              (("2"
                                (prop)
                                (("1"
                                  (inst -1 "rho" "t")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (inst -1 "rho" "s")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split -1)
                    (("1" (propax) nil nil)
                     ("2" (expand "decompose" 3)
                      (("2" (split 3)
                        (("1" (flatten)
                          (("1" (lemma "renaming_ord2")
                            (("1" (inst -1 "rho" "t")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split 2)
                            (("1" (lemma "renaming_ord2")
                              (("1"
                                (split -2)
                                (("1"
                                  (inst -2 "rho" "t")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (inst -2 "rho" "s")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((renaming_ord2 formula-decl nil nominal_AC_substitution nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nominal_AC_term_pair_eta formula-decl nil nominal_AC_term_adt nil)
    (decompose def-decl "[unif_prb, bool]" nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (decompose_ren1 0
  (decompose_ren1-1 nil 3855167403
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skolem 1 ("rho" "s"))
          (("" (expand "decompose" 1 1)
            (("" (lift-if)
              (("" (split 1)
                (("1" (flatten)
                  (("1" (lemma "renaming_ord2")
                    (("1" (inst-cp -1 "rho" "t")
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (hide 1 2 3 4 5 6)
                            (("1" (inst -1 "rho" "s")
                              (("1"
                                (assert)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (hide 1 2 3 4 5)
                                    (("1"
                                      (hide 1)
                                      (("1"
                                        (lemma "nominal_AC_term_pair_eta")
                                        (("1"
                                          (inst -1 "t")
                                          (("1"
                                            (replace -1 1 :dir rl)
                                            (("1"
                                              (rewrite "subs_pair")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "nominal_AC_term_pair_eta")
                                                  (("1"
                                                    (inst -1 "s")
                                                    (("1"
                                                      (replace
                                                       -1
                                                       1
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (rewrite
                                                         "subs_pair")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "decompose"
                                                             1
                                                             3)
                                                            (("1"
                                                              (rewrite
                                                               "apply_sub_append")
                                                              (("1"
                                                                (case
                                                                 "decompose(subs(rho)(term1(t)), subs(rho)(term1(s)))`1 = apply_sub(rho, decompose(term1(t), term1(s))`1)")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (case
                                                                     "decompose(subs(rho)(term2(t)), subs(rho)(term2(s)))`1 = apply_sub(rho, decompose(term2(t), term2(s))`1)")
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2
                                                                       -1)
                                                                      (("2"
                                                                        (inst
                                                                         -7
                                                                         "term2(t)")
                                                                        (("2"
                                                                          (expand
                                                                           "size"
                                                                           -7
                                                                           2)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst
                                                                                 -7
                                                                                 "rho"
                                                                                 "term2(s)")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (inst
                                                                       -7
                                                                       "term1(t)")
                                                                      (("2"
                                                                        (expand
                                                                         "size"
                                                                         -7
                                                                         2)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (inst
                                                                               -7
                                                                               "rho"
                                                                               "term1(s)")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (expand "decompose" 1 1)
                        (("1" (lift-if)
                          (("1" (split 1)
                            (("1" (flatten)
                              (("1"
                                (hide -3 -4 1)
                                (("1"
                                  (lemma "nominal_AC_term_pair_eta")
                                  (("1"
                                    (inst -1 "t")
                                    (("1"
                                      (replace -1 :dir rl)
                                      (("1"
                                        (rewrite "subs_pair")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma "renaming_ord2")
                                            (("1"
                                              (inst -1 "rho" "s")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "apply_sub" 1)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (hide -2)
                                    (("2"
                                      (lemma "renaming_ord2")
                                      (("2"
                                        (split -2)
                                        (("1"
                                          (inst -2 "rho" "t")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (inst -2 "rho" "s")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "decompose" 3)
                        (("2" (lift-if)
                          (("2" (split 3)
                            (("1" (flatten)
                              (("1"
                                (lemma "renaming_ord2")
                                (("1"
                                  (inst -1 "rho" "t")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (lemma "renaming_ord2")
                                    (("1"
                                      (split -2)
                                      (("1"
                                        (inst -2 "rho" "t")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (inst -2 "rho" "s")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "apply_sub" 3)
                                    (("2"
                                      (expand "apply_sub" 3 2)
                                      (("2"
                                        (decompose-equality 3)
                                        (("2"
                                          (expand "apply_sub" 1)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (apply_sub const-decl "unif_pair" nominal_AC_unification nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (apply_sub_append formula-decl nil nominal_AC_unification nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nominal_AC_term_pair_eta formula-decl nil nominal_AC_term_adt nil)
    (renaming_ord2 formula-decl nil nominal_AC_substitution nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (decompose def-decl "[unif_prb, bool]" nominal_AC_unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (decompose_ext 0
  (decompose_ext-1 nil 3886339627
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (iff)
            (("" (split)
              (("1" (flatten)
                (("1" (expand "decompose" -1)
                  (("1" (split -1)
                    (("1" (flatten)
                      (("1" (expand "decompose" 1)
                        (("1" (assert)
                          (("1" (split 1)
                            (("1" (flatten)
                              (("1"
                                (prop)
                                (("1"
                                  (inst -6 "term1(t)")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (inst -1 "pi" "term1(s)")
                                      (("1"
                                        (lemma "nominal_AC_term_pair_eta")
                                        (("1"
                                          (inst -1 "s")
                                          (("1"
                                            (replace -1 1 :dir rl)
                                            (("1"
                                              (expand "ext" 1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst -6 "term2(t)")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst -1 "pi" "term2(s)")
                                      (("1"
                                        (lemma "nominal_AC_term_pair_eta")
                                        (("1"
                                          (inst -1 "s")
                                          (("1"
                                            (replace -1 1 :dir rl)
                                            (("1"
                                              (expand "ext" 1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-2 1))
                              (("2"
                                (use "ext_preserves_type")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "decompose" 2)
                        (("2" (assert)
                          (("2" (split 2)
                            (("1" (flatten) (("1" (assert) nil nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split -1)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (hide 3 5)
                                      (("2"
                                        (split 3)
                                        (("1"
                                          (hide-all-but (-1 2))
                                          (("1"
                                            (use "ext_preserves_type")
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (case "pair?(s) = pair?(ext(pi)(s))")
                  (("1" (expand "decompose" -2)
                    (("1" (split -2)
                      (("1" (flatten)
                        (("1" (expand "decompose" 1)
                          (("1" (assert)
                            (("1" (prop)
                              (("1"
                                (inst -6 "term1(t)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst -1 "pi" "term1(s)")
                                    (("1"
                                      (lemma "nominal_AC_term_pair_eta")
                                      (("1"
                                        (inst -1 "s")
                                        (("1"
                                          (replace -1 -5 :dir rl)
                                          (("1"
                                            (expand "ext" -5)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "nominal_AC_term_pair_eta")
                                (("2"
                                  (inst -1 "s")
                                  (("2"
                                    (replace -1 -5 :dir rl)
                                    (("2"
                                      (expand "ext" -5)
                                      (("2"
                                        (inst -7 "term2(t)")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst -1 "pi" "term2(s)")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split -1)
                          (("1" (propax) nil nil)
                           ("2" (expand "decompose" 3)
                            (("2" (assert)
                              (("2"
                                (split 3)
                                (("1" (flatten) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split 2)
                                    (("1" (assert) nil nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 -2 2)
                    (("2" (use "ext_preserves_type")
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ord const-decl "upto(6)" nominal_AC_term_adt nil)
    (ext_preserves_type formula-decl nil nominal_AC_term_properties nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nominal_AC_term_pair_eta formula-decl nil nominal_AC_term_adt nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (decompose def-decl "[unif_prb, bool]" nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (decompose_not_fail3 0
  (decompose_not_fail3-1 nil 3888243955
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (expand "unifies?" -2)
          (("" (rewrite "subs_abs" -2)
            (("" (rewrite "subs_abs" -2)
              (("" (expand "equal?" -2)
                (("" (split -2)
                  (("1" (flatten)
                    (("1" (lemma "decompose_not_fail")
                      (("1" (inst -1 "G" "s" "sigma" "t")
                        (("1" (assert)
                          (("1" (assert)
                            (("1" (expand "unifies?" 1)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (rewrite "subs_ext" -2 :dir rl)
                      (("2"
                        (name-replace "s1"
                         "ext(cons((a, b), null))(s)")
                        (("2" (reveal -1)
                          (("2" (lemma "decompose_not_fail")
                            (("2" (inst -1 "G" "s1" "sigma" "t")
                              (("2"
                                (assert)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "unifies?" -1)
                                    (("2"
                                      (replace -2 -1 :dir rl)
                                      (("2"
                                        (use "decompose_ext")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unifies? const-decl "bool" nominal_AC_unification nil)
    (decompose_not_fail formula-decl nil nominal_AC_unification nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (subs_ext formula-decl nil nominal_AC_substitution nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (decompose_ext formula-decl nil nominal_AC_unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subs_abs formula-decl nil nominal_AC_substitution nil))
   shostak))
 (decompose_vars 0
  (decompose_vars-1 nil 3885220029
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "decompose" 1)
            (("" (lift-if)
              (("" (split 1)
                (("1" (flatten)
                  (("1" (expand "subset?" 1)
                    (("1" (skeep)
                      (("1" (rewrite "vars_unif_prb_append")
                        (("1" (prop)
                          (("1" (inst -4 "term1(t)")
                            (("1" (prop)
                              (("1"
                                (inst?)
                                (("1" (grind) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (inst -4 "term2(t)")
                            (("2" (prop)
                              (("1"
                                (inst?)
                                (("1" (grind) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (hide-all-but 1) (("1" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (hide-all-but 3) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vars_unif_prb_append formula-decl nil nominal_AC_unification nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (decompose def-decl "[unif_prb, bool]" nominal_AC_unification nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (decompose_vars_rhs 0
  (decompose_vars_rhs-1 nil 3885222749
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "decompose" 1)
            (("" (lift-if)
              (("" (split 1)
                (("1" (flatten)
                  (("1" (expand "subset?" 1)
                    (("1" (skeep)
                      (("1" (rewrite "vars_args")
                        (("1" (skolem -3 "ti")
                          (("1" (prop)
                            (("1" (use "member_rhs_append")
                              (("1"
                                (assert)
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst -6 "term1(t)")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (expand "subset?")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (prop)
                                              (("1" (grind) nil nil)
                                               ("2"
                                                (rewrite "vars_args")
                                                (("2"
                                                  (inst 1 "ti")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst -6 "term2(t)")
                                    (("2"
                                      (prop)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (expand "subset?" -1)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (prop)
                                                (("1" (grind) nil nil)
                                                 ("2"
                                                  (rewrite "vars_args")
                                                  (("2"
                                                    (inst 1 "ti")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (hide-all-but 1) (("1" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (hide-all-but 3) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2parameters nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member_rhs_append formula-decl nil nominal_AC_unification nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (append def-decl "list[T]" list_props nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (decompose def-decl "[unif_prb, bool]" nominal_AC_unification nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (match_prb_append 0
  (match_prb_append-1 nil 3883828994
   ("" (induct "P1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (iff)
            (("2" (split 1)
              (("1" (flatten)
                (("1" (expand "match_problem?" -1)
                  (("1" (prop)
                    (("1" (expand "match_problem?" 1)
                      (("1" (skeep)
                        (("1" (inst -2 "X")
                          (("1" (assert)
                            (("1" (rewrite "vars_args")
                              (("1"
                                (rewrite "vars_args")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst 2 "t")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (rewrite "member_rhs_append")
                                        (("1" (prop) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "match_problem?" 1)
                      (("2" (skeep)
                        (("2" (inst -2 "X")
                          (("2" (prop)
                            (("2" (rewrite "vars_args")
                              (("2"
                                (rewrite "vars_args")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (inst 1 "t")
                                    (("2"
                                      (prop)
                                      (("2"
                                        (rewrite "member_rhs_append")
                                        (("2" (prop) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (hide -3)
                  (("2" (expand "match_problem?" 1)
                    (("2" (skeep)
                      (("2" (rewrite "vars_args" -3)
                        (("2" (skeep)
                          (("2" (rewrite "member_rhs_append")
                            (("2" (prop)
                              (("1"
                                (expand "match_problem?" -2)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (rewrite "vars_args")
                                      (("1"
                                        (inst 1 "t")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "match_problem?" -3)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (rewrite "vars_args" 1)
                                      (("2"
                                        (inst 1 "t")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (member_rhs_append formula-decl nil nominal_AC_unification nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (member const-decl "bool" sets nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2parameters nil)
    (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (append def-decl "list[T]" list_props nil)
    (match_problem? const-decl "bool" nominal_AC_unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil))
   shostak))
 (match_prb_apply_sub 0
  (match_prb_apply_sub-1 nil 3883828079
   ("" (skeep)
    (("" (expand "match_problem?")
      (("" (skeep 1)
        (("" (rewrite "vars_args" -3)
          (("" (skolem -3 "t1")
            (("" (prop)
              (("" (rewrite "apply_sub_rhs" -3)
                (("" (skolem -3 "t2")
                  (("" (prop)
                    (("" (replace -4 -5)
                      (("" (use "vars_subs_t")
                        (("" (expand "subset?" -1)
                          (("" (inst?)
                            (("" (assert)
                              ((""
                                (expand ("member" "union") -1)
                                ((""
                                  (prop)
                                  (("1"
                                    (expand "subset?" -3)
                                    (("1"
                                      (inst -3 "X")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst -2 "X")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (rewrite "vars_args")
                                        (("2"
                                          (inst 1 "t2")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((match_problem? const-decl "bool" nominal_AC_unification nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (rhs const-decl "args" nominal_AC_unification nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (vars_subs_t formula-decl nil nominal_AC_substitution nil)
    (apply_sub_rhs formula-decl nil nominal_AC_unification nil))
   shostak))
 (match_prb_subset 0
  (match_prb_subset-1 nil 3886268696
   ("" (skeep)
    (("" (expand "match_problem?")
      (("" (skolem 1 "x")
        (("" (inst -2 "x")
          (("" (flatten)
            (("" (prop)
              (("" (expand "rhs")
                (("" (rewrite "vars_args" -2)
                  (("" (rewrite "vars_args")
                    (("" (skeep)
                      (("" (inst 1 "t")
                        (("" (assert)
                          (("" (rewrite "sec_proj_mem")
                            (("" (rewrite "sec_proj_mem")
                              ((""
                                (skolem -2 "up")
                                ((""
                                  (inst 1 "up")
                                  ((""
                                    (flatten)
                                    ((""
                                      (expand "subset?" -1)
                                      ((""
                                        (inst -1 "up")
                                        (("" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((match_problem? const-decl "bool" nominal_AC_unification nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2parameters nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (subset? const-decl "bool" nominal_AC_unification nil)
    (sec_proj_mem formula-decl nil list_aux_equational_reasoning2parameters nil)
    (rhs const-decl "args" nominal_AC_unification nil))
   shostak))
 (unifies_more_general_sub_no_effect 0
  (unifies_more_general_sub_no_effect-1 nil 3887297620
   ("" (skeep)
    (("" (rewrite "unifies?_equiv")
      (("" (rewrite "unifies?_equiv")
        (("" (skolem 1 "up")
          (("" (flatten)
            (("" (inst -1 "apply_sub(sigma1, up)")
              (("" (prop)
                (("1" (expand "unifies?" -1)
                  (("1" (expand "unifies?" 1)
                    (("1" (expand "apply_sub" -1)
                      (("1" (lemma "subs_unify_alg_aux")
                        (("1" (expand "more_general?" -3)
                          (("1" (skolem -3 "delta1")
                            (("1"
                              (inst -1 "Delta" "delta" "delta1" "up`2"
                               "sigma" "sigma1" "up`1")
                              (("1"
                                (assert)
                                (("1"
                                  (hide-all-but (-3 -6 1))
                                  (("1"
                                    (expand "disjoint?")
                                    (("1"
                                      (expand "empty?")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (expand
                                             ("member" "intersection")
                                             -1)
                                            (("1"
                                              (expand
                                               ("member"
                                                "intersection")
                                               1)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (rewrite
                                                   "vars_unif_prb")
                                                  (("1"
                                                    (expand
                                                     ("member" "union")
                                                     -2)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (inst 1 "up`1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (rewrite
                                                             "member_unif_prb_equiv"
                                                             1)
                                                            (("1"
                                                              (inst
                                                               1
                                                               "up")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst 1 "up`2")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (rewrite
                                                             "member_unif_prb_equiv"
                                                             1)
                                                            (("2"
                                                              (inst
                                                               1
                                                               "up")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "apply_sub_unif_pair" 1)
                  (("2" (inst 1 "up") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unifies?_equiv formula-decl nil nominal_AC_unification nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (apply_sub const-decl "unif_pair" nominal_AC_unification nil)
    (apply_sub_unif_pair formula-decl nil nominal_AC_unification nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (empty? const-decl "bool" sets nil)
    (vars_unif_prb formula-decl nil nominal_AC_unification nil)
    (member_unif_prb_equiv formula-decl nil nominal_AC_unification nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subs_unify_alg_aux formula-decl nil nominal_AC_substitution nil))
   shostak))
 (unifies_is_more_general_basic_sub 0
  (unifies_is_more_general_basic_sub-1 nil 3888147466
   ("" (skolem 1 ("G" "del" "s" "sig" "t"))
    (("" (flatten)
      (("" (assert)
        ((""
          (name-replace "sig1"
           "cons((V(t), ext(reverse(p(t)))(s)), null)")
          (("" (expand "unifies?" -2)
            (("" (reveal -1)
              (("" (expand "more_general?" -2)
                (("" (skolem -2 "del1")
                  (("" (lemma "equal_sub_change_eq_terms")
                    ((""
                      (inst -1 "G" "del" "s" "append(del1, sig)" "t")
                      (("" (assert)
                        (("" (rewrite "subs_append2")
                          (("" (rewrite "subs_append2")
                            ((""
                              (case "subs(sig)(t) = t AND subs(sig)(s) = s")
                              (("1"
                                (flatten)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (replace -2)
                                    (("1"
                                      (hide -1 -2)
                                      (("1"
                                        (lemma "subs_inst")
                                        (("1"
                                          (inst
                                           -1
                                           "G"
                                           "V(t)"
                                           "del1"
                                           "ext(reverse(p(t)))(s)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (expand
                                                   "more_general?"
                                                   2)
                                                  (("1"
                                                    (inst 2 "del1")
                                                    (("1"
                                                      (expand
                                                       "equal?"
                                                       2)
                                                      (("1"
                                                        (skolem 2 "X")
                                                        (("1"
                                                          (expand
                                                           "subs"
                                                           2)
                                                          (("1"
                                                            (rewrite
                                                             "subs_append2")
                                                            (("1"
                                                              (rewrite
                                                               "subs_append2")
                                                              (("1"
                                                                (expand
                                                                 "equal?"
                                                                 -4)
                                                                (("1"
                                                                  (inst
                                                                   -4
                                                                   "X")
                                                                  (("1"
                                                                    (expand
                                                                     "subs"
                                                                     -4)
                                                                    (("1"
                                                                      (rewrite
                                                                       "subs_append2")
                                                                      (("1"
                                                                        (lemma
                                                                         "equal?_trans")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "G"
                                                                           "subs(del)(null*X)"
                                                                           "subs(del1)(subs(sig)(null * X))"
                                                                           "subs(del1)(subs(sig1)(subs(sig)(null * X)))")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (hide
                                                                               3)
                                                                              (("1"
                                                                                (lemma
                                                                                 "equal_sub_equiv")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "G"
                                                                                   "del1"
                                                                                   "append(del1, sig1)"
                                                                                   "subs(sig)(null*X)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "subs_append2")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "subs_ext"
                                                   1)
                                                  (("2"
                                                    (rewrite
                                                     "equal?_ext_reverse"
                                                     1
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (expand
                                                       "subs"
                                                       1
                                                       1)
                                                      (("2"
                                                        (rewrite
                                                         "subs_ext"
                                                         1
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (expand
                                                           "ext"
                                                           1)
                                                          (("2"
                                                            (rewrite
                                                             "append_null")
                                                            (("2"
                                                              (use
                                                               "nominal_AC_term_times_eta")
                                                              (("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (-6 1))
                                (("2"
                                  (prop)
                                  (("1"
                                    (use "subs_no_effect_t")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "disjoint?")
                                        (("1"
                                          (expand "empty?")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst?)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use "subs_no_effect_t")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "disjoint?")
                                        (("2"
                                          (expand "empty?")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (inst?)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (reverse def-decl "list[T]" list_props nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (subs_ext formula-decl nil nominal_AC_substitution nil)
    (nominal_AC_term_times_eta formula-decl nil nominal_AC_term_adt nil)
    (append_null formula-decl nil list_props nil)
    (equal?_ext_reverse formula-decl nil nominal_AC_equality nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (equal_sub_equiv formula-decl nil nominal_AC_substitution nil)
    (equal?_trans formula-decl nil nominal_AC_equality nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (subs_inst formula-decl nil nominal_AC_substitution nil)
    (empty? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (intersection const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (equal_sub_change_eq_terms formula-decl nil nominal_AC_substitution nil)
    (unifies? const-decl "bool" nominal_AC_unification nil))
   shostak))
 (unifies_is_equal_sub 0
  (unifies_is_equal_sub-1 nil 3888324469
   ("" (skeep)
    (("" (assert)
      ((""
        (name-replace "sig"
         "cons((V(t), ext(reverse(p(t)))(s)), null)")
        (("" (reveal -1)
          (("" (expand "equal?" 2)
            (("" (skeep)
              (("" (case "X = V(t)")
                (("1" (lemma "subs_inst")
                  (("1"
                    (inst -1 "G" "V(t)" "delta"
                     "ext(reverse(p(t)))(s)")
                    (("1" (assert)
                      (("1" (expand "unifies?" -3)
                        (("1" (lemma "nominal_AC_term_times_eta")
                          (("1" (inst -1 "t")
                            (("1" (replace -1 -4 :dir rl)
                              (("1"
                                (rewrite "subs_ext_pi")
                                (("1"
                                  (use "equal?_ext_reverse")
                                  (("1"
                                    (replace -5)
                                    (("1"
                                      (rewrite "subs_ext")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "subs" 3)
                  (("2" (rewrite "subs_append2")
                    (("2" (expand "sig" 3)
                      (("2" (expand "subs" 3 3)
                        (("2" (expand "subs" 3 4)
                          (("2" (expand "subs" 3 3)
                            (("2" (assert)
                              (("2" (use "equal?_ref") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equal?_ref formula-decl nil nominal_AC_equality nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (subs_inst formula-decl nil nominal_AC_substitution nil)
    (nominal_AC_term_times_eta formula-decl nil nominal_AC_term_adt nil)
    (equal?_ext_reverse formula-decl nil nominal_AC_equality nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs_ext formula-decl nil nominal_AC_substitution nil)
    (subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (unifies_sub_no_effect 0
  (unifies_sub_no_effect-1 nil 3887441393
   ("" (skolem 1 ("Del" "del" "s" "sig" "sig1" "t"))
    (("" (prop)
      (("" (lemma "unifies_more_general_sub_no_effect")
        ((""
          (inst -1 "Del" "cons((t, s), null)"
           "append(del, append(sig1, sig))" "sig" "sig1")
          (("" (assert)
            (("" (prop)
              (("1" (expand "unifies?" -1) (("1" (propax) nil nil))
                nil)
               ("2" (expand "apply_sub" 1)
                (("2" (expand "unifies?" 1)
                  (("2" (expand "apply_sub" 1)
                    (("2" (expand "unifies?" 1)
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("3" (expand "more_general?" 1)
                (("3" (inst 1 "del")
                  (("3" (expand "equal?" 1)
                    (("3" (skeep)
                      (("3" (expand "subs" 1)
                        (("3" (rewrite "equal?_ref") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (hide-all-but (-4 1))
                (("4" (expand "disjoint?")
                  (("4" (expand "empty?")
                    (("4" (skeep) (("4" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (unif_pair type-eq-decl nil nominal_AC_unification nil)
    (unif_prb type-eq-decl nil nominal_AC_unification nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (append def-decl "list[T]" list_props nil)
    (unifies? def-decl "bool" nominal_AC_unification nil)
    (apply_sub def-decl "unif_prb" nominal_AC_unification nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (equal?_ref formula-decl nil nominal_AC_equality nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (vars const-decl "finite_set[variable]" nominal_AC_unification nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (unifies_more_general_sub_no_effect formula-decl nil nominal_AC_unification
     nil))
   shostak))
 (unifies_basic_sub 0
  (unifies_basic_sub-1 nil 3887445323
   ("" (skolem 1 ("Del" "X" "pi" "s" "sig" "sig1"))
    (("" (assert)
      (("" (name-replace "del" "cons((X, ext(reverse(pi))(s)), null)")
        (("" (reveal -1)
          (("" (flatten)
            (("" (expand "unifies?" 2)
              (("" (rewrite "subs_append2")
                (("" (rewrite "subs_append2")
                  (("" (rewrite "subs_append2")
                    (("" (rewrite "subs_append2")
                      (("" (lemma "subs_no_effect_t")
                        (("" (inst -1 "sig" "pi * X")
                          (("" (prop)
                            (("1" (replace -1)
                              (("1"
                                (lemma "subs_no_effect_t")
                                (("1"
                                  (inst -1 "sig" "s")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (replace -1 2)
                                      (("1"
                                        (lemma "subs_inst_correct")
                                        (("1"
                                          (inst
                                           -1
                                           "Del"
                                           "X"
                                           "pi"
                                           "s"
                                           "sig1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -4)
                                              (("1" (prop) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-3 1))
                                      (("2"
                                        (expand "disjoint?")
                                        (("2"
                                          (expand "empty?")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (inst?)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-2 1))
                              (("2"
                                (expand "disjoint?")
                                (("2"
                                  (expand "empty?")
                                  (("2"
                                    (skeep)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (empty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (subs_inst_correct formula-decl nil nominal_AC_substitution nil)
    (subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (append def-decl "list[T]" list_props nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (unifies_nominal_AC_fresh_subs 0
  (unifies_nominal_AC_fresh_subs-1 nil 3888163475
   ("" (skeep)
    (("" (rewrite "nominal_AC_fresh_subs_character" 1)
      (("" (skolem 1 "ax")
        (("" (prop)
          (("" (lemma "fc_member")
            (("" (inst -1 "V(t)" "ax`2" "ax`1" "DS(p(t), p(s))")
              (("" (assert)
                (("" (case "ax = (ax`1, ax`2)")
                  (("1" (replace -1 :dir rl)
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (name-replace "a" "ax`1")
                          (("1" (replace -3)
                            (("1" (expand "disjoint?" -8)
                              (("1"
                                (expand "empty?" -8)
                                (("1"
                                  (inst -8 "V(s)")
                                  (("1"
                                    (expand
                                     ("member" "intersection")
                                     1)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand ("member" "dom") 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "subs" -1)
                                            (("1"
                                              (replace -8)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (expand
                                                   "unifies?"
                                                   -5)
                                                  (("1"
                                                    (lemma
                                                     "nominal_AC_term_times_eta")
                                                    (("1"
                                                      (inst -1 "s")
                                                      (("1"
                                                        (replace
                                                         -1
                                                         -6
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (rewrite
                                                           "subs_ext_pi"
                                                           -6)
                                                          (("1"
                                                            (expand
                                                             "subs"
                                                             -6
                                                             2)
                                                            (("1"
                                                              (replace
                                                               -2)
                                                              (("1"
                                                                (expand
                                                                 "ext"
                                                                 -6)
                                                                (("1"
                                                                  (rewrite
                                                                   "append_null"
                                                                   -6)
                                                                  (("1"
                                                                    (lemma
                                                                     "nominal_AC_term_times_eta")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "t")
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         -7
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (rewrite
                                                                           "subs_ext_pi"
                                                                           -7)
                                                                          (("1"
                                                                            (replace
                                                                             -10)
                                                                            (("1"
                                                                              (expand
                                                                               "subs"
                                                                               -7)
                                                                              (("1"
                                                                                (replace
                                                                                 -3)
                                                                                (("1"
                                                                                  (expand
                                                                                   "ext"
                                                                                   -7)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "append_null"
                                                                                     -7)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "equal?"
                                                                                       -7)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "fresh"
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "reverse"
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "act"
                                                                                             1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -7
                                                                                               "a")
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "DS_member"
                                                                                                 -5
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "member"
                                                                                                   -5)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "vars" 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (decompose-equality 1) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nominal_AC_fresh_subs_character formula-decl nil nominal_AC_fresh_subs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (fc def-decl "fresh_context" nominal_AC_freshness nil)
    (perm type-eq-decl nil atoms nil)
    (DS const-decl "list[atom]" atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (disjoint? const-decl "bool" sets nil)
    (unifies? const-decl "bool" nominal_AC_unification nil)
    (subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (append_null formula-decl nil list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (ds const-decl "set[atom]" atoms nil)
    (set type-eq-decl nil sets nil)
    (DS_member formula-decl nil atoms nil)
    (act def-decl "atom" atoms nil)
    (fresh def-decl "bool" nominal_AC_freshness nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (nominal_AC_term_times_eta formula-decl nil nominal_AC_term_adt nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (fc_member formula-decl nil nominal_AC_freshness nil))
   shostak))
 (solves_elim_append 0
  (solves_elim_append-1 nil 3888737904
   ("" (skeep)
    (("" (expand "solves?")
      (("" (flatten)
        (("" (assert)
          (("" (expand "unifies?" 1)
            (("" (prop)
              (("1" (lemma "nominal_AC_fresh_subs_equal2")
                (("1" (inst?)
                  (("1" (inst -1 "Nabla") (("1" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "more_general?" -6)
                (("2" (skolem -6 "sig1")
                  (("2" (expand "more_general?" 1)
                    (("2" (inst 1 "sig1")
                      (("2" (lemma "equal_sub_subset")
                        (("2"
                          (inst -1 "Delta" "V2" "V1"
                           "append(gamma, delta)"
                           "append(sig1, sigma)")
                          (("2" (assert)
                            (("2" (lemma "equal_sub_res_trans")
                              (("2"
                                (inst
                                 -1
                                 "Delta"
                                 "delta"
                                 "append(gamma, delta)"
                                 "V1"
                                 "append(sig1, sigma)")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((solves? const-decl "bool" nominal_AC_unification nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (append def-decl "list[T]" list_props nil)
    (nominal_AC_fresh_subs_equal2 formula-decl nil nominal_AC_fresh_subs nil)
    (equal_sub_res_trans formula-decl nil nominal_AC_substitution nil)
    (equal_sub_subset formula-decl nil nominal_AC_substitution nil)
    (unifies? def-decl "bool" nominal_AC_unification nil))
   shostak))
 (is_instance_equal_syn 0
  (is_instance_equal_syn-1 nil 3897590791
   ("" (skeep)
    (("" (expand "is_instance?")
      (("" (expand "solves?")
        (("" (flatten)
          (("" (assert)
            (("" (expand "more_general?")
              (("" (skolem -3 "sig1")
                (("" (inst 1 "sig1")
                  (("" (lemma "equal_sub_res_trans")
                    ((""
                      (inst -1 "Delta" "delta" "append(sig1, sigma_)"
                       "V2" "append(sig1, sigma)")
                      (("" (assert)
                        (("" (split 1)
                          (("1" (hide-all-but (-3 -7 1))
                            (("1" (expand "equal?")
                              (("1"
                                (expand "subset?")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (inst?)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (use "equal_syn_equal")
                            (("2" (assert)
                              (("2"
                                (use "equal_syn_append")
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide-all-but (-6 1))
                                    (("2"
                                      (expand "equal_syn?")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((solves? const-decl "bool" nominal_AC_unification nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (equal_sub_res_trans formula-decl nil nominal_AC_substitution nil)
    (equal_syn_equal formula-decl nil nominal_AC_substitution nil)
    (equal_syn_append formula-decl nil nominal_AC_substitution nil)
    (equal_syn? const-decl "bool" nominal_AC_substitution nil)
    (subset? const-decl "bool" sets nil)
    (equal? const-decl "bool" nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (append def-decl "list[T]" list_props nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (more_general? const-decl "bool" nominal_AC_substitution nil)
    (is_instance? const-decl "bool" nominal_AC_unification nil))
   shostak)))

