(nominal_AC_freshness
 (fresh_TCC1 0
  (fresh_TCC1-1 nil 3624351302 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[nominal_AC_term])" nominal_AC_term_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (fresh termination
    "nominal_AC_freshness.fresh(nominal_AC_freshness.Delta)(nominal_AC_freshness.a, nominal_AC_freshness.t1)"
    "nil")))
 (fresh_TCC2 0
  (fresh_TCC2-1 nil 3624351302 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[nominal_AC_term])" nominal_AC_term_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (atom type-eq-decl nil atoms nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (fresh termination
    "nominal_AC_freshness.fresh(nominal_AC_freshness.Delta)(nominal_AC_freshness.a, nominal_AC_freshness.t2)"
    "nil")))
 (fresh_TCC3 0
  (fresh_TCC3-1 nil 3624351302 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[nominal_AC_term])" nominal_AC_term_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (atom type-eq-decl nil atoms nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (fresh termination
    "nominal_AC_freshness.fresh(nominal_AC_freshness.Delta)(nominal_AC_freshness.a, nominal_AC_freshness.bd)"
    "nil")))
 (fresh_TCC4 0
  (fresh_TCC4-1 nil 3624351302 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[nominal_AC_term])" nominal_AC_term_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (fresh termination
    "nominal_AC_freshness.fresh(nominal_AC_freshness.Delta)(nominal_AC_freshness.a, nominal_AC_freshness.ag)"
    "nil")))
 (fresh_TCC5 0
  (fresh_TCC5-1 nil 3747240534 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[nominal_AC_term])" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (fresh termination
    "nominal_AC_freshness.fresh(nominal_AC_freshness.Delta)(nominal_AC_freshness.a, nominal_AC_freshness.ag)"
    "nil")))
 (ext_preserves_fresh 0
  (ext_preserves_fresh-2 nil 3745911502
   ("" (induct "t")
    (("1" (grind)
      (("1"
        (case "act(reverse(pi!1))(act(pi!1)(a!1)) = act(reverse(pi!1))(act(pi!1)(at1_var!1))")
        (("1" (rewrite "act_reverse")
          (("1" (rewrite "act_reverse") nil nil)) nil)
         ("2" (assert) nil nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand* "ext" "fresh")
          (("2" (rewrite "reverse_append")
            (("2" (rewrite "act_append")
              (("2" (rewrite "act_reverse") nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil)
     ("6" (grind) nil nil)
     ("7" (grind)
      (("7" (hide -1 -2 -3 1 3)
        (("7" (lemma "act_invariance") (("7" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((act_invariance formula-decl nil atoms nil)
    (act_append formula-decl nil atoms nil)
    (reverse_append formula-decl nil list_props nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (act_reverse formula-decl nil atoms nil)
    (reverse def-decl "list[T]" list_props nil)
    (nominal_AC_term_induction formula-decl nil nominal_AC_term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (act def-decl "atom" atoms nil)
    (fresh def-decl "bool" nominal_AC_freshness nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil))
   nil)
  (ext_preserves_fresh-1 nil 3624351769
   ("" (induct t)
    (("1" (grind)
      (("1"
        (case "act(reverse(pi!1))(act(pi!1)(a!1)) = act(reverse(pi!1))(act(pi!1)(at1_var!1))")
        (("1" (rewrite act_reverse)
          (("1" (rewrite act_reverse) nil nil)) nil)
         ("2" (assert) nil nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand* ext fresh)
          (("2" (rewrite reverse_append)
            (("2" (rewrite act_append)
              (("2" (rewrite act_reverse) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (grind) nil nil) ("4" (grind) nil nil)
     ("5" (skeep)
      (("5" (skeep)
        (("5" (expand fresh 1)
          (("5" (case "ord(ext(pi)(abs(abs1_var, abs2_var)))= 4")
            (("1" (expand ord)
              (("1" (lift-if -1)
                (("1" (assert)
                  (("1" (prop)
                    (("1" (assert)
                      (("1" (lift-if)
                        (("1" (lift-if)
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1"
                                (expand ext -1)
                                (("1"
                                  (case
                                   "act(reverse(pi))(act(pi)(a)) = act(reverse(pi))(act(pi)(abs1_var))")
                                  (("1"
                                    (rewrite act_reverse)
                                    (("1"
                                      (rewrite act_reverse)
                                      nil
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (expand ext 2)
                                (("2" (assert) nil nil))
                                nil)
                               ("3"
                                (expand ext 2)
                                (("3" (inst -2 delta a pi) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite ext_preserves_type)
              (("2" (expand ord) (("2" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil))
    nil)
   nil SHOSTAK))
 (ds_fresh_invariance 0
  (ds_fresh_invariance-2 nil 3745911605
   ("" (skolem 1 ("delta_1" "a_1" "pi1" "pi2" "_"))
    (("" (induct "t")
      (("1" (grind) nil nil)
       ("2" (grind)
        (("1" (rewrite "reverse_append")
          (("1" (rewrite "reverse_append")
            (("1" (rewrite "act_append")
              (("1" (rewrite "act_append")
                (("1"
                  (lemma "act_reverse_invariance"
                   ("pi1" "pi1" "pi2" "pi2"))
                  (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (rewrite "reverse_append")
          (("2" (rewrite "reverse_append")
            (("2" (rewrite "act_append")
              (("2" (rewrite "act_append")
                (("2"
                  (lemma "act_reverse_invariance"
                   ("pi1" "pi1" "pi2" "pi2"))
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (grind) nil nil) ("4" (grind) nil nil)
       ("5" (grind) nil nil) ("6" (grind) nil nil)
       ("7" (grind) nil nil))
      nil))
    nil)
   ((nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (act def-decl "atom" atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (fresh def-decl "bool" nominal_AC_freshness nil)
    (nominal_AC_term_induction formula-decl nil nominal_AC_term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (reverse_append formula-decl nil list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (act_append formula-decl nil atoms nil)
    (act_reverse_invariance formula-decl nil atoms nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil))
   nil)
  (ds_fresh_invariance-1 nil 3639154570
   ("" (skolem 1 (delta a pi1 pi2 "_"))
    (("" (induct t)
      (("1" (grind) nil nil)
       ("2" (grind)
        (("1" (rewrite reverse_append)
          (("1" (rewrite reverse_append)
            (("1" (rewrite act_append)
              (("1" (rewrite act_append)
                (("1" (lemma act_reverse_invariance (pi1 pi1 pi2 pi2))
                  (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (rewrite reverse_append)
          (("2" (rewrite reverse_append)
            (("2" (rewrite act_append)
              (("2" (rewrite act_append)
                (("2" (lemma act_reverse_invariance (pi1 pi1 pi2 pi2))
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (grind) nil nil) ("4" (grind) nil nil)
       ("5" (grind) nil nil) ("6" (grind) nil nil))
      nil))
    nil)
   nil SHOSTAK))
 (ext_reverse_fresh 0
  (ext_reverse_fresh-2 nil 3745911694
   ("" (induct "t")
    (("1" (grind)
      (("1" (rewrite "act_reverse") nil nil)
       ("2" (replace -3 1 rl) (("2" (rewrite "act_reverse2") nil nil))
        nil))
      nil)
     ("2" (grind)
      (("1" (rewrite "reverse_append")
        (("1" (rewrite "act_append") nil nil)) nil)
       ("2" (rewrite "reverse_append")
        (("2" (rewrite "act_append") nil nil)) nil))
      nil)
     ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil)
     ("6" (grind) nil nil)
     ("7" (grind)
      (("1" (rewrite "act_reverse") nil nil)
       ("2" (replace -4 2 rl) (("2" (rewrite "act_reverse2") nil nil))
        nil))
      nil))
    nil)
   ((act_append formula-decl nil atoms nil)
    (reverse_append formula-decl nil list_props nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (act_reverse formula-decl nil atoms nil)
    (act_reverse2 formula-decl nil atoms nil)
    (nominal_AC_term_induction formula-decl nil nominal_AC_term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (reverse def-decl "list[T]" list_props nil)
    (act def-decl "atom" atoms nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (fresh def-decl "bool" nominal_AC_freshness nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil))
   nil)
  (ext_reverse_fresh-1 nil 3625394163
   ("" (induct t)
    (("1" (grind)
      (("1" (rewrite act_reverse) nil nil)
       ("2" (replace -3 1 rl) (("2" (rewrite act_reverse2) nil nil))
        nil))
      nil)
     ("2" (grind)
      (("1" (rewrite reverse_append)
        (("1" (rewrite act_append) nil nil)) nil)
       ("2" (rewrite reverse_append)
        (("2" (rewrite act_append) nil nil)) nil))
      nil)
     ("3" (grind) nil nil) ("4" (grind) nil nil)
     ("5" (grind)
      (("1" (rewrite act_reverse) nil nil)
       ("2" (replace -4 2 rl) (("2" (rewrite act_reverse2) nil nil))
        nil))
      nil)
     ("6" (grind) nil nil))
    nil)
   nil SHOSTAK))
 (fresh_weakening 0
  (fresh_weakening-2 nil 3745911803
   ("" (induct "t")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind)
      (("1" (hide -1 -2 -3)
        (("1" (reveal -4)
          (("1" (inst -1 "Delta!1" "Nabla!1" "a!1")
            (("1" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (hide -1 -2 -3)
        (("2" (reveal -6)
          (("2" (inst -1 "Delta!1" "Nabla!1" "a!1")
            (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("5" (grind) nil nil)
     ("6" (skeep)
      (("6" (expand "fresh" 1) (("6" (propax) nil nil)) nil)) nil)
     ("7" (grind)
      (("7" (grind)
        (("7" (hide -1 -2 -3)
          (("7" (reveal -5)
            (("7" (inst -1 "Delta!1" "Nabla!1" "a!1")
              (("7" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((reverse def-decl "list[T]" list_props nil)
    (act def-decl "atom" atoms nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nominal_AC_term_induction formula-decl nil nominal_AC_term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (fresh def-decl "bool" nominal_AC_freshness nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil))
   nil)
  (fresh_weakening-1 nil 3626438752
   ("" (induct t)
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind)
      (("1" (hide -1 -2 -3)
        (("1" (reveal -4)
          (("1" (inst -1 delta!1 nabla!1 a!1) (("1" (assert) nil nil))
            nil))
          nil))
        nil)
       ("2" (hide -1 -2 -3)
        (("2" (reveal -6)
          (("2" (inst -1 delta!1 nabla!1 a!1) (("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (grind)
      (("5" (hide -1 -2 -3)
        (("5" (reveal -5)
          (("5" (inst -1 delta!1 nabla!1 a!1) (("5" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil))
    nil)
   nil SHOSTAK))
 (fc_TCC1 0
  (fc_TCC1-1 nil 3626435094 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (atom type-eq-decl nil atoms nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (fc termination "nominal_AC_freshness.fc(nominal_AC_freshness.tail, nominal_AC_freshness.X)" "nil")))
 (fc_member 0
  (fc_member-2 nil 3745911831
   ("" (induct "l") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (fc def-decl "fresh_context" nominal_AC_freshness nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (member def-decl "bool" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   nil)
  (fc_member-1 nil 3626445021
   ("" (induct l) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   nil SHOSTAK))
 (fresh?_TCC1 0
  (fresh?_TCC1-1 nil 3626435094 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[nominal_AC_term])" nominal_AC_term_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (fresh? termination "nominal_AC_freshness.fresh?(nominal_AC_freshness.a, nominal_AC_freshness.t2)"
           "nil")))
 (fresh?_is_fresh 0
  (fresh?_is_fresh-2 nil 3745911980
   ("" (skolem 1 ("_" "a_1" "_"))
    (("" (induct "t")
      (("1" (grind) nil nil)
       ("2" (grind)
        (("2" (replace -2 1 rl) (("2" (assert) nil nil)) nil)) nil)
       ("3" (grind) nil nil)
       ("4" (skeep)
        (("4" (skeep)
          (("4" (expand "fresh?" -3)
            (("4" (expand "x")
              (("4" (lift-if)
                (("4" (assert)
                  (("4" (prop)
                    (("4" (expand "fresh" 1)
                      (("4" (inst -4 "fresh?(a_1, pair1_var)`1")
                        (("4" (inst -5 "fresh?(a_1, pair2_var)`1")
                          (("4" (lemma "fresh_weakening")
                            (("4"
                              (inst-cp -1 "fresh?(a_1, pair2_var)`1"
                               "Delta" "a_1" "pair2_var")
                              (("4"
                                (inst
                                 -1
                                 "fresh?(a_1, pair1_var)`1"
                                 "Delta"
                                 "a_1"
                                 "pair1_var")
                                (("4"
                                  (assert)
                                  (("4"
                                    (assert)
                                    (("4"
                                      (replace -5 -1 :dir rl)
                                      (("4"
                                        (replace -5 -2 :dir rl)
                                        (("4"
                                          (prop)
                                          (("1" (assert) nil nil)
                                           ("2" (assert) nil nil)
                                           ("3" (assert) nil nil)
                                           ("4"
                                            (skeep)
                                            (("4"
                                              (rewrite "member_append")
                                              (("4" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("5"
                                            (assert)
                                            (("5"
                                              (skeep)
                                              (("5"
                                                (rewrite
                                                 "member_append")
                                                (("5"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("6" (assert) nil nil)
                                           ("7"
                                            (assert)
                                            (("7"
                                              (skeep)
                                              (("7"
                                                (rewrite
                                                 "member_append")
                                                (("7"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("8"
                                            (skeep)
                                            (("8"
                                              (rewrite "member_append")
                                              (("8" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (grind) nil nil) ("6" (grind) nil nil)
       ("7" (grind) nil nil))
      nil))
    nil)
   ((nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fresh? def-decl "[fresh_context, bool]" nominal_AC_freshness nil)
    (fresh def-decl "bool" nominal_AC_freshness nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nominal_AC_term_induction formula-decl nil nominal_AC_term_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member def-decl "bool" list_props nil)
    (x const-decl "[fresh_context, bool]" nominal_AC_freshness nil)
    (member_append formula-decl nil list_aux_equational_reasoning nil)
    (fresh_weakening formula-decl nil nominal_AC_freshness nil))
   nil)
  (fresh?_is_fresh-1 nil 3626435098
   ("" (skolem 1 ("_" a "_"))
    (("" (induct t)
      (("1" (grind) nil nil)
       ("2" (grind)
        (("2" (replace -2 1 rl) (("2" (assert) nil nil)) nil)) nil)
       ("3" (grind) nil nil)
       ("4" (skeep*)
        (("4" (expand fresh? -3)
          (("4" (expand x)
            (("4" (lift-if)
              (("4" (assert)
                (("4" (prop)
                  (("4" (expand fresh 1)
                    (("4" (inst -4 "fresh?(a, pair1_var)`1")
                      (("4" (inst -5 "fresh?(a, pair2_var)`1")
                        (("4" (lemma fresh_weakening)
                          (("4"
                            (inst-cp -1 "fresh?(a, pair2_var)`1" delta
                             a pair2_var)
                            (("4"
                              (inst -1 "fresh?(a, pair1_var)`1" delta a
                               pair1_var)
                              (("4"
                                (assert)
                                (("4"
                                  (assert)
                                  (("4"
                                    (lemma
                                     append_member
                                     (l1
                                      "fresh?(a, pair1_var)`1"
                                      l2
                                      "fresh?(a, pair2_var)`1"))
                                    (("4"
                                      (split -2)
                                      (("1"
                                        (split -3)
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (inst -3 ax)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (inst -2 ax)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (grind) nil nil) ("6" (grind) nil nil))
      nil))
    nil)
   nil SHOSTAK))
 (ext_reverse_fresh? 0
  (ext_reverse_fresh?-3 nil 3747518866
   ("" (induct "t")
    (("1" (grind)
      (("1" (rewrite "act_reverse") nil nil)
       ("2" (replace -3 1 rl) (("2" (rewrite "act_reverse2") nil nil))
        nil))
      nil)
     ("2" (grind)
      (("2" (rewrite "reverse_append")
        (("2" (rewrite "act_append") nil nil)) nil))
      nil)
     ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil)
     ("6" (grind) nil nil)
     ("7" (grind)
      (("1" (rewrite "act_reverse") nil nil)
       ("2" (replace -5 1 rl) (("2" (rewrite "act_reverse2") nil nil))
        nil))
      nil))
    nil)
   ((x const-decl "[fresh_context, bool]" nominal_AC_freshness nil)
    (act_append formula-decl nil atoms nil)
    (reverse_append formula-decl nil list_props nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (act_reverse formula-decl nil atoms nil)
    (act_reverse2 formula-decl nil atoms nil)
    (nominal_AC_term_induction formula-decl nil nominal_AC_term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (reverse def-decl "list[T]" list_props nil)
    (act def-decl "atom" atoms nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (fresh? def-decl "[fresh_context, bool]" nominal_AC_freshness nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil))
   nil)
  (ext_reverse_fresh?-2 nil 3745912095
   ("" (induct "t")
    (("1" (grind)
      (("1" (rewrite "act_reverse") nil nil)
       ("2" (replace -3 1 rl) (("2" (rewrite "act_reverse2") nil nil))
        nil))
      nil)
     ("2" (grind)
      (("2" (rewrite "reverse_append")
        (("2" (rewrite "act_append") nil nil)) nil))
      nil)
     ("3" (grind) nil nil) ("4" (grind) nil nil)
     ("5" (grind)
      (("1" (rewrite "act_reverse") nil nil)
       ("2" (replace -5 1 rl) (("2" (rewrite "act_reverse2") nil nil))
        nil))
      nil)
     ("6" (grind) nil nil))
    nil)
   nil nil)
  (ext_reverse_fresh?-1 nil 3629461799
   ("" (induct t)
    (("1" (grind)
      (("1" (rewrite act_reverse) nil nil)
       ("2" (replace -3 1 rl) (("2" (rewrite act_reverse2) nil nil))
        nil))
      nil)
     ("2" (grind)
      (("2" (rewrite reverse_append)
        (("2" (rewrite act_append) nil nil)) nil))
      nil)
     ("3" (grind) nil nil) ("4" (grind) nil nil)
     ("5" (grind)
      (("1" (rewrite act_reverse) nil nil)
       ("2" (replace -5 1 rl) (("2" (rewrite act_reverse2) nil nil))
        nil))
      nil)
     ("6" (grind) nil nil))
    nil)
   nil SHOSTAK))
 (not_fresh_is_null 0
  (not_fresh_is_null-3 nil 3747519178
   ("" (induct "t")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil)
     ("7" (grind) nil nil))
    nil)
   ((pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x const-decl "[fresh_context, bool]" nominal_AC_freshness nil)
    (/= const-decl "boolean" notequal nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nominal_AC_term_induction formula-decl nil nominal_AC_term_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fresh? def-decl "[fresh_context, bool]" nominal_AC_freshness nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil))
   nil)
  (not_fresh_is_null-2 nil 3745912125
   ("" (induct "t")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil))
    nil)
   nil nil)
  (not_fresh_is_null-1 nil 3629463037
   ("" (induct t)
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil))
    nil)
   nil SHOSTAK))
 (fresh?_complete 0
  (fresh?_complete-2 nil 3745912209
   ("" (induct "t")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil)
     ("5" (skeep)
      (("5" (skeep)
        (("5" (expand "fresh?" 1)
          (("5" (expand "fresh" -3)
            (("5" (flatten)
              (("5" (expand "x")
                (("5" (lift-if)
                  (("5" (inst -1 "Delta" "a")
                    (("5" (inst -2 "Delta" "a")
                      (("5" (assert)
                        (("5" (flatten)
                          (("5" (assert)
                            (("5" (skeep)
                              (("5"
                                (rewrite "member_append")
                                (("5"
                                  (inst -2 "b" "X")
                                  (("5"
                                    (inst -4 "b" "X")
                                    (("5" (prop) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member_append formula-decl nil list_aux_equational_reasoning nil)
    (x const-decl "[fresh_context, bool]" nominal_AC_freshness nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nominal_AC_term_induction formula-decl nil nominal_AC_term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (fresh? def-decl "[fresh_context, bool]" nominal_AC_freshness nil)
    (member def-decl "bool" list_props nil)
    (fresh def-decl "bool" nominal_AC_freshness nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil))
   nil)
  (fresh?_complete-1 nil 3630757865
   ("" (induct t)
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil)
     ("5" (skeep*)
      (("5" (expand fresh? 1)
        (("5" (expand fresh -3)
          (("5" (flatten)
            (("5" (expand x)
              (("5" (lift-if)
                (("5" (inst -1 delta a)
                  (("5" (inst -2 delta a)
                    (("5" (assert)
                      (("5" (flatten)
                        (("5" (assert)
                          (("5" (skeep)
                            (("5" (rewrite append_member)
                              (("5"
                                (inst -2 b x)
                                (("5"
                                  (inst -4 b x)
                                  (("5" (prop) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil) ("7" (grind) nil nil))
    nil)
   nil SHOSTAK))
 (fresh_select_num_arg1 0
  (fresh_select_num_arg1-1 nil 3880874970
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 ("t"))
      (("" (prop)
        (("" (skolem 1 ("G" "a" "f" "i"))
          (("" (prop)
            (("" (expand "select" -3)
              (("" (lift-if)
                (("" (split -3)
                  (("1" (flatten)
                    (("1" (expand "num_arg" -4)
                      (("1" (assert)
                        (("1" (hide -2 -3)
                          (("1" (lemma "num_arg_ge1")
                            (("1" (inst-cp -1 "f" "term1(t)")
                              (("1"
                                (inst -1 "f" "term2(t)")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split -1)
                      (("1" (flatten)
                        (("1" (expand "fresh" 2)
                          (("1" (assert)
                            (("1" (inst -4 "ac_arg(t)")
                              (("1"
                                (prop)
                                (("1"
                                  (expand "num_arg" -5)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (num_arg_ge1 formula-decl nil nominal_AC_term_properties nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (fresh def-decl "bool" nominal_AC_freshness nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (fresh_delete_select 0
  (fresh_delete_select-1 nil 3880836616
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skolem 1 ("G" "a" "f" "i"))
          (("" (split 1)
            (("1" (flatten)
              (("1" (expand "select" -1)
                (("1" (lift-if)
                  (("1" (split -1)
                    (("1" (flatten)
                      (("1" (split -2)
                        (("1" (flatten)
                          (("1" (expand "delete" -4)
                            (("1" (assert)
                              (("1"
                                (lift-if)
                                (("1"
                                  (expand "fresh" 1)
                                  (("1"
                                    (split -4)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (use "fresh_select_num_arg1")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (expand "fresh" -1)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst -6 "term1(t)")
                                              (("2"
                                                (split -6)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "delete" -3)
                            (("2" (assert)
                              (("2"
                                (lift-if)
                                (("2"
                                  (expand "fresh" 2)
                                  (("2"
                                    (split -3)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (use "fresh_select_num_arg1")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (expand "fresh" -1)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst -5 "term2(t)")
                                              (("2"
                                                (split -5)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (prop)
                          (("2" (expand "delete" -4)
                            (("2" (assert)
                              (("2"
                                (lift-if)
                                (("2"
                                  (expand "fresh" 2)
                                  (("2"
                                    (split -4)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (use "fresh_select_num_arg1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "num_arg" -1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (inst -5 "ac_arg(t)")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "fresh" -1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand "select" 1)
                (("2" (lift-if)
                  (("2" (split 1)
                    (("1" (flatten)
                      (("1" (split 1)
                        (("1" (flatten)
                          (("1" (expand "delete" 1)
                            (("1" (assert)
                              (("1"
                                (expand "fresh" -3)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (split 1)
                                    (("1"
                                      (inst -5 "term1(t)")
                                      (("1"
                                        (prop)
                                        (("1" (grind) nil nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lift-if)
                                      (("2"
                                        (split 1)
                                        (("1" (flatten) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (expand "fresh" 2)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst -5 "term1(t)")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "fresh" -2)
                            (("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (expand "delete" 2)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst -4 "term2(t)")
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (lift-if)
                                      (("2"
                                        (prop)
                                        (("2"
                                          (expand "fresh" 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst -4 "term2(t)")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split 2)
                        (("1" (flatten)
                          (("1" (expand "delete" 1)
                            (("1" (assert)
                              (("1"
                                (prop)
                                (("1"
                                  (inst -4 "ac_arg(t)")
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (lift-if)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2" (expand "delete" 2)
                              (("2"
                                (assert)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (split 2)
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fresh_select_num_arg1 formula-decl nil nominal_AC_freshness nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (fresh def-decl "bool" nominal_AC_freshness nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (vars_TCC1 0
  (vars_TCC1-1 nil 3882713618 ("" (subtype-tcc) nil nil) nil nil
   (vars subtype "nominal_AC_freshness.Delta"
    "(list_adt[[atom, variable]].cons?)")))
 (vars_TCC2 0
  (vars_TCC2-1 nil 3882713618 ("" (termination-tcc) nil nil) nil nil
   (vars termination
    "nominal_AC_freshness.vars(list_adt[[atom, variable]].cdr(nominal_AC_freshness.Delta))"
    "nil")))
 (vars_TCC3 0
  (vars_TCC3-1 nil 3882713618 ("" (subtype-tcc) nil nil) nil nil
   (vars subtype "nominal_AC_freshness.Delta"
    "(list_adt[[atom, variable]].cons?)")))
 (vars_append_context 0
  (vars_append_context-1 nil 3882714646
   ("" (induct "Delta")
    (("1" (skeep)
      (("1" (expand "vars" 1 2)
        (("1" (expand "append" 1)
          (("1" (decompose-equality 1) (("1" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (inst -1 "Nabla")
            (("2" (rewrite "subset_antisymmetric" 1)
              (("1" (hide 2)
                (("1" (expand "subset?")
                  (("1" (skolem 1 "y")
                    (("1" (expand "append" 1)
                      (("1" (expand "vars" 1 1)
                        (("1" (replace -1) (("1" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "subset?")
                  (("2" (skolem 1 "y")
                    (("2" (prop)
                      (("2" (expand "append" 1) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_antisymmetric formula-decl nil sets_lemmas nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (union const-decl "set" sets nil)
    (append def-decl "list[T]" list_props nil)
    (vars def-decl "finite_set[variable]" nominal_AC_freshness nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil))
   shostak))
 (vars_mem_context 0
  (vars_mem_context-1 nil 3882717580
   ("" (induct "Delta")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (expand "vars" -1)
              (("1" (expand "member" -1)
                (("1" (expand "add" -1)
                  (("1" (prop)
                    (("1" (inst 1 "hd`1" "hd`2")
                      (("1" (grind) nil nil)) nil)
                     ("2" (inst -2 "X")
                      (("2" (assert)
                        (("2" (skeep) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (replace -2)
                (("2" (expand "member" -1)
                  (("2" (prop)
                    (("1" (grind) nil nil)
                     ("2" (inst -3 "Y") (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_freshness nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (emptyset const-decl "set" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil))
   nil))
 (vars_fresh? 0
  (vars_fresh?-1 nil 3882714447
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "subset?" 1)
            (("" (skolem 1 "y")
              (("" (prop)
                (("" (expand "fresh?" -2)
                  (("" (lift-if)
                    (("" (prop)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil)
                       ("4" (expand "x" -2)
                        (("4" (lift-if)
                          (("4" (prop)
                            (("1" (rewrite "vars_append_context")
                              (("1"
                                (expand ("member" "union") -3)
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst -5 "term1(t)")
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (inst -5 "term2(t)")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil)
                             ("3" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("5" (grind) nil nil)
                       ("6" (inst -3 "body(t)") (("6" (grind) nil nil))
                        nil)
                       ("7" (inst -3 "arg(t)") (("7" (grind) nil nil))
                        nil)
                       ("8" (inst -2 "ac_arg(t)")
                        (("8" (prop)
                          (("1" (inst?)
                            (("1" (lemma "vars_ac2")
                              (("1"
                                (inst -1 "y" "ac_sym(t)" "ac_arg(t)")
                                (("1"
                                  (use "nominal_AC_term_ac_app_eta")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "subset?")
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_freshness nil)
    (fresh? def-decl "[fresh_context, bool]" nominal_AC_freshness nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (string type-eq-decl nil strings nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (Union const-decl "set" sets nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nominal_AC_term_ac_app_eta formula-decl nil nominal_AC_term_adt nil)
    (vars_ac2 formula-decl nil nominal_AC_term_properties nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (x const-decl "[fresh_context, bool]" nominal_AC_freshness nil)
    (union const-decl "set" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (vars_append_context formula-decl nil nominal_AC_freshness nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (/= const-decl "boolean" notequal nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   shostak))
 (vars_fc 0
  (vars_fc-1 nil 3885209658
   ("" (induct "l")
    (("1" (expand "fc" 1) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "fc" 1 1)
            (("2" (expand "vars" 1)
              (("2" (inst -1 "X")
                (("2" (expand "subset?")
                  (("2" (skolem 1 "y")
                    (("2" (inst?) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_freshness nil)
    (fc def-decl "fresh_context" nominal_AC_freshness nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (add const-decl "(nonempty?)" sets nil))
   shostak)))

