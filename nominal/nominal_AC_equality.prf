(nominal_AC_equality
 (equal?_TCC1 0
  (equal?_TCC1-1 nil 3805199365 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (size def-decl "nat" nominal_AC_term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (equal? termination
    "nominal_AC_equality.equal?(nominal_AC_equality.Delta)(nominal_AC_equality.t1, nominal_AC_term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].term1(nominal_AC_equality.s))"
    "nil")))
 (equal?_TCC2 0
  (equal?_TCC2-1 nil 3805199365 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (size def-decl "nat" nominal_AC_term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (equal? termination
    "nominal_AC_equality.equal?(nominal_AC_equality.Delta)(nominal_AC_equality.t2, nominal_AC_term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].term2(nominal_AC_equality.s))"
    "nil")))
 (equal?_TCC3 0
  (equal?_TCC3-1 nil 3805199365 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" nominal_AC_term_properties nil))
   nil
   (equal? termination
    "nominal_AC_equality.equal?(nominal_AC_equality.Delta)(nominal_AC_equality.arg, nominal_AC_term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].arg(nominal_AC_equality.s))"
    "nil")))
 (equal?_TCC4 0
  (equal?_TCC4-1 nil 3805199365
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (lemma "ac_select_size")
          (("" (inst -1 "sym" "i" "t")
            (("" (assert)
              (("" (hide 2)
                (("" (expand "is_ac_sym?" 1)
                  (("" (lemma "nominal_AC_term_ac_app_eta")
                    (("" (inst? -1)
                      (("" (assert) (("" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term_ac_app_eta formula-decl nil nominal_AC_term_adt nil)
    (num_arg def-decl "nat" nominal_AC_term_properties nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ac_select_size formula-decl nil nominal_AC_term_properties nil))
   SHOSTAK
   (equal? termination
    "nominal_AC_equality.equal?(nominal_AC_equality.Delta)(nominal_AC_term_properties.select(nominal_AC_equality.sym, nominal_AC_equality.t)(nominal_AC_equality.i), nominal_AC_term_properties.select(nominal_AC_equality.sym, nominal_AC_equality.s)(nominal_AC_equality.j))"
    "nil")))
 (equal?_TCC5 0
  (equal?_TCC5-1 nil 3805199365
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (hide -5)
          (("" (lemma "ac_delete_size")
            (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_delete_size formula-decl nil nominal_AC_term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   SHOSTAK
   (equal? termination
    "nominal_AC_equality.equal?(nominal_AC_equality.Delta)(nominal_AC_term_properties.delete(nominal_AC_equality.sym, nominal_AC_equality.t)(nominal_AC_equality.i), nominal_AC_term_properties.delete(nominal_AC_equality.sym, nominal_AC_equality.s)(nominal_AC_equality.j))"
    "nil")))
 (equal?_TCC6 0
  (equal?_TCC8-1 nil 3805638096 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" nominal_AC_term_properties nil))
   nil
   (equal? termination
    "nominal_AC_equality.equal?(nominal_AC_equality.Delta)(nominal_AC_equality.bd, nominal_AC_term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].body(nominal_AC_equality.s))"
    "nil")))
 (equal?_TCC7 0
  (equal?_TCC7-1 nil 3880824746 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" nominal_AC_term_properties nil))
   nil
   (equal? termination
    "nominal_AC_equality.equal?(nominal_AC_equality.Delta)(nominal_AC_equality.bd, nominal_AC_term_properties.ext(list_adt[[atom, atom]].cons((nominal_AC_equality.a, nominal_AC_term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].abstr(nominal_AC_equality.s)), list_adt[[atom, atom]].null))(nominal_AC_term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].body(nominal_AC_equality.s)))"
    "nil")))
 (equal?_TCC8 0
  (equal?_TCC6-1 nil 3805638096 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil))
   nil
   (equal? subtype "nominal_AC_equality.args2"
    "(list_adt[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]].cons?)")))
 (equal?_TCC9 0
  (equal?_TCC9-1 nil 3805638096 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil))
   nil
   (equal? subtype "nominal_AC_equality.args1"
    "(list_adt[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]].cons?)")))
 (equal?_TCC10 0
  (equal?_TCC10-1 nil 3880824746 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil))
   nil
   (equal? termination
    "nominal_AC_equality.equal?(nominal_AC_equality.Delta)(list_adt[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]].cdr(nominal_AC_equality.args1), list_adt[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]].cdr(nominal_AC_equality.args2))"
    "nil")))
 (equal?_TCC11 0
  (equal?_TCC7-1 nil 3805638096 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil))
   nil
   (equal? subtype "nominal_AC_equality.args1"
    "(list_adt[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]].cons?)")))
 (perm?_TCC1 0
  (perm?_TCC1-1 nil 3805821573
   ("" (skeep)
    (("" (skeep)
      (("" (rewrite "remove_len") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (length def-decl "nat" list_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (< const-decl "bool" reals nil)
    (remove_len formula-decl nil list_aux_equational_reasoning nil))
   SHOSTAK
   (perm? termination
    "nominal_AC_equality.perm?(nominal_AC_equality.Delta)(list_aux_equational_reasoning[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]].remove(nominal_AC_equality.args1, nominal_AC_equality.i), list_aux_equational_reasoning[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]].remove(nominal_AC_equality.args2, nominal_AC_equality.j))"
    "nil")))
 (reorder?_TCC1 0
  (reorder?_TCC1-1 nil 3842280109
   ("" (skeep)
    (("" (skeep)
      (("" (rewrite "remove_len") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (length def-decl "nat" list_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (< const-decl "bool" reals nil)
    (remove_len formula-decl nil list_aux_equational_reasoning nil))
   nil
   (reorder? termination
    "nominal_AC_equality.reorder?(list_aux_equational_reasoning[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]].remove(nominal_AC_equality.args1, nominal_AC_equality.i), list_aux_equational_reasoning[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]].remove(nominal_AC_equality.args2, nominal_AC_equality.j))"
    "nil")))
 (equal?_len 0
  (equal?_len-1 nil 3805638764
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "equal?" -1)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (reveal -1)
                  (("2" (inst -1 "cdr(args1)") (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (equal?_num_arg 0
  (equal?_num_arg-1 nil 3806353656
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "equal?" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil)
                 ("4" (inst-cp -5 "term1(t)")
                  (("4" (prop)
                    (("1" (hide 1 2 3)
                      (("1" (inst -1 "G" "f" "term1(s)")
                        (("1" (assert)
                          (("1" (inst -6 "term2(t)")
                            (("1" (prop)
                              (("1"
                                (inst -1 "G" "f" "term2(s)")
                                (("1"
                                  (assert)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("5" (hide 1 2 3 4)
                  (("5" (assert) (("5" (grind) nil nil)) nil)) nil)
                 ("6" (hide 1 2 3 4 5)
                  (("6" (assert)
                    (("6" (case "ac_sym(t) = f")
                      (("1" (case "num_arg(f, t) = 1")
                        (("1" (prop)
                          (("1" (skeep)
                            (("1" (rewrite "num_arg1_delete")
                              (("1"
                                (expand "equal?" -11)
                                (("1"
                                  (lemma "delete_num_arg")
                                  (("1"
                                    (inst -1 "f" "j" "s")
                                    (("1"
                                      (assert)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "num_arg(f, t) > 1")
                          (("1" (hide 1)
                            (("1" (prop)
                              (("1"
                                (skeep)
                                (("1"
                                  (lemma "num_arg_delete_ge1")
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -3)
                                        (("1"
                                          (inst -13 "delete(f, t)(i)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (inst
                                               -1
                                               "G"
                                               "f"
                                               "delete(f, s)(j)")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (lemma
                                                   "num_arg_delete_ge1")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "f"
                                                     "j"
                                                     "s")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "num_arg(f, s) = 1")
                                                        (("1"
                                                          (lemma
                                                           "delete_ac_num_arg_gt1")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "f"
                                                             "i"
                                                             "t")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (expand
                                                                   "is_ac_sym?"
                                                                   -1)
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (lemma
                                                                       "num_arg1_delete")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "f"
                                                                         "j"
                                                                         "s")
                                                                        (("1"
                                                                          (prop)
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "equal?"
                                                                               -17)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "num_arg_ge1")
                                                          (("2"
                                                            (inst? -1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite
                                               "ac_delete_size")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "num_arg_ge1")
                            (("2" (inst? -1) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -3) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("7" (expand "num_arg" 7) (("7" (assert) nil nil))
                  nil)
                 ("8" (expand "num_arg" 8) (("8" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (> const-decl "bool" reals nil)
    (num_arg_delete_ge1 formula-decl nil nominal_AC_term_properties nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (ac_delete_size formula-decl nil nominal_AC_term_properties nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (num_arg_ge1 formula-decl nil nominal_AC_term_properties nil)
    (delete_ac_num_arg_gt1 formula-decl nil nominal_AC_term_properties nil)
    (num_arg1_delete formula-decl nil nominal_AC_term_properties nil)
    (delete_num_arg formula-decl nil nominal_AC_term_properties nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (num_arg def-decl "nat" nominal_AC_term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "nat" nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (equal?_num_arg2 0
  (equal?_num_arg2-1 nil 3850481986
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "equal?" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil)
                 ("4" (expand "num_arg" 4)
                  (("4" (inst-cp -5 "term1(t)")
                    (("4" (prop)
                      (("1" (assert)
                        (("1" (inst -6 "term2(t)")
                          (("1" (prop)
                            (("1" (inst -1 "G" "term2(s)")
                              (("1"
                                (inst -2 "G" "term1(s)")
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("5" (grind) nil nil) ("6" (grind) nil nil)
                 ("7" (grind) nil nil) ("8" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (num_arg def-decl "nat" nominal_AC_term_properties nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (num_arg def-decl "nat" nominal_AC_term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "nat" nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (equal?_append 0
  (equal?_append-1 nil 3805640100
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "equal?" -2)
            (("" (prop)
              (("1" (hide -3) (("1" (grind) nil nil)) nil)
               ("2" (lemma "list_cons_eta[nominal_AC_term]")
                (("2" (inst? -1)
                  (("2" (replace -1 3 rl)
                    (("2" (expand "append" 3 1)
                      (("2" (hide -1)
                        (("2" (lemma "list_cons_eta[nominal_AC_term]")
                          (("2" (inst -1 "args2")
                            (("2" (replace -1 3 rl)
                              (("2"
                                (expand "append" 3 2)
                                (("2"
                                  (expand "equal?" 3)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst -4 "cdr(args1)")
                                      (("2"
                                        (prop)
                                        (("1" (grind) nil nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_cons_eta formula-decl nil list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (equal?_append2 0
  (equal?_append2-1 nil 3886591435
   ("" (induct "args1")
    (("1" (skeep)
      (("1" (expand "append" -1 1)
        (("1" (expand "length" -2)
          (("1" (assert)
            (("1" (lift-if)
              (("1" (assert)
                (("1" (split -2)
                  (("1" (expand "append" -2)
                    (("1" (assert)
                      (("1" (expand "equal?" 1)
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (flatten) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "length" -3)
            (("2" (lift-if)
              (("2" (assert)
                (("2" (split -3)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (expand "append" -3)
                      (("2" (assert)
                        (("2" (expand "equal?" -3)
                          (("2" (flatten)
                            (("2"
                              (inst -2 "G" "cdr(args2)" "args3"
                               "args4")
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "equal?" 2)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (append def-decl "list[T]" list_props nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (every adt-def-decl "boolean" list_adt nil))
   shostak))
 (equal?_get_repeat_lst 0
  (equal?_get_repeat_lst-1 nil 3805640704
   ("" (measure-induct "n" "n")
    (("" (skolem 1 "n")
      (("" (prop)
        (("" (skeep)
          (("" (expand "get_repeat_lst" 1 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "get_repeat_lst" 2 2)
                  (("2" (lift-if)
                    (("2" (assert)
                      (("2" (expand "equal?" 2)
                        (("2" (inst -1 "n-1") (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_repeat_lst def-decl "list[T]" list_aux_equational_reasoning nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (every adt-def-decl "boolean" list_adt nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (equal?_get_lst_mult 0
  (equal?_get_lst_mult-1 nil 3805638096
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "equal?" -1)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "get_lst_mult" 3 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (grind) nil nil)
                       ("2" (expand "get_lst_mult" 3 2)
                        (("2" (lift-if)
                          (("2" (assert)
                            (("2" (lemma "equal?_append")
                              (("2"
                                (inst? -1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide 4)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (lemma "equal?_get_repeat_lst")
                                        (("1"
                                          (inst? -1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (reveal -2)
                                        (("2"
                                          (inst -1 "cdr(args1)")
                                          (("2"
                                            (prop)
                                            (("1"
                                              (inst
                                               -1
                                               "G"
                                               "cdr(args2)"
                                               "cdr(coef)")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equal?_append formula-decl nil nominal_AC_equality nil)
    (equal?_get_repeat_lst formula-decl nil nominal_AC_equality nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (get_repeat_lst def-decl "list[T]" list_aux_equational_reasoning nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (get_lst_mult def-decl "list[T]" list_aux_equational_reasoning nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (equal?_ref 0
  (equal?_ref-1 nil 3806941516
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "equal?" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (use "nominal_AC_term_at_eta") (("1" (assert) nil nil)) nil)
                 ("2" (use "nominal_AC_term_times_eta")
                  (("2" (skeep)
                    (("2" (typepred "a")
                      (("2" (expand "ds" -1) (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (grind) nil nil)
                 ("4" (inst -2 "term1(t)") (("4" (grind) nil nil)) nil)
                 ("5" (inst -2 "term2(t)") (("5" (grind) nil nil)) nil)
                 ("6" (inst -2 "arg(t)") (("6" (grind) nil nil)) nil)
                 ("7" (assert)
                  (("7" (inst 1 "1" "1")
                    (("7" (assert)
                      (("7" (prop)
                        (("1" (lemma "num_arg_ge1")
                          (("1" (inst? -1) (("1" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (lemma "num_arg_ge1")
                          (("2" (inst? -1) (("2" (assert) nil nil))
                            nil))
                          nil)
                         ("3" (inst -2 "select(ac_sym(t), t)(1)")
                          (("3" (assert)
                            (("3" (lemma "ac_select_size")
                              (("3"
                                (inst? -1)
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (lemma "ac_delete_size")
                          (("4" (inst? -1)
                            (("4" (inst -3 "delete(ac_sym(t), t)(1)")
                              (("4" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("8" (grind) nil nil) ("9" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ac_delete_size formula-decl nil nominal_AC_term_properties nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (num_arg def-decl "nat" nominal_AC_term_properties nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (ac_select_size formula-decl nil nominal_AC_term_properties nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (num_arg_ge1 formula-decl nil nominal_AC_term_properties nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (string type-eq-decl nil strings nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nominal_AC_term_times_eta formula-decl nil nominal_AC_term_adt nil)
    (t skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]" nominal_AC_equality nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (ds const-decl "set[atom]" atoms nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (nominal_AC_term_at_eta formula-decl nil nominal_AC_term_adt nil)
    (atom? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "nat" nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (equal?_fresh 0
  (equal?_fresh-1 nil 3880830004
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "equal?" -2)
            (("" (assert)
              (("" (lift-if)
                (("" (assert)
                  (("" (prop)
                    (("1" (grind) nil nil)
                     ("2" (hide -5)
                      (("2" (expand "fresh" 2)
                        (("2" (assert)
                          (("2" (replace -3)
                            (("2" (name-replace "X" " V(s)")
                              (("2"
                                (iff)
                                (("2"
                                  (prop)
                                  (("1"
                                    (inst -5 "act(reverse(p(s)))(a)")
                                    (("1"
                                      (expand "ds" 1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (rewrite "act_reverse2")
                                          (("1"
                                            (name-replace
                                             "b"
                                             "act(reverse[[atom, atom]](p[atom, perm, variable, f_symbol, ac_symbol](s)))(a)")
                                            (("1"
                                              (lemma "act_reverse_pi")
                                              (("1"
                                                (inst
                                                 -1
                                                 "b"
                                                 "a"
                                                 "p(t)")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst -5 "act(reverse(p(t)))(a)")
                                    (("2"
                                      (expand "ds" 1)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (rewrite "act_reverse2")
                                          (("2"
                                            (name-replace
                                             "b"
                                             "act(reverse[[atom, atom]](p[atom, perm, variable, f_symbol, ac_symbol](t)))(a)")
                                            (("2"
                                              (lemma "act_reverse_pi")
                                              (("2"
                                                (inst
                                                 -1
                                                 "b"
                                                 "a"
                                                 "p(s)")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand "fresh" 4)
                      (("3" (assert)
                        (("3" (inst-cp -5 "term1(t)")
                          (("3" (prop)
                            (("1" (inst -1 "G" "a" "term1(s)")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (inst -6 "term2(t)")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (inst -1 "G" "a" "term2(s)")
                                        (("1"
                                          (assert)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide 1 2 3 4)
                      (("4" (expand "fresh" 1)
                        (("4" (assert)
                          (("4" (inst -6 "arg(t)")
                            (("4" (prop)
                              (("1"
                                (inst -1 "G" "a" "arg(s)")
                                (("1" (grind) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("5" (skeep)
                      (("5" (name-replace "f" "ac_sym(t)")
                        (("5" (reveal -1)
                          (("5" (inst-cp -11 "select(f, t)(i)")
                            (("5" (inst -11 "delete(f, t)(i)")
                              (("5"
                                (split -11)
                                (("1"
                                  (split -12)
                                  (("1"
                                    (inst -2 "G" "a" "delete(f, s)(j)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst
                                         -1
                                         "G"
                                         "a"
                                         "select(f, s)(j)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "fresh_delete_select")
                                            (("1"
                                              (inst-cp
                                               -1
                                               "G"
                                               "a"
                                               "f"
                                               "i"
                                               "t")
                                              (("1"
                                                (inst
                                                 -1
                                                 "G"
                                                 "a"
                                                 "f"
                                                 "j"
                                                 "s")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use "ac_select_size")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "ac_delete_size")
                                  (("2"
                                    (hide -12)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("6" (expand "fresh" 7 1)
                      (("6" (lift-if)
                        (("6" (assert)
                          (("6" (split 7)
                            (("1" (expand "fresh" 1)
                              (("1"
                                (flatten)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "fresh" 2 2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst -4 "body(t)")
                                      (("2"
                                        (prop)
                                        (("1"
                                          (inst -1 "G" "a" "body(s)")
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("7" (expand "fresh" 8)
                      (("7" (assert)
                        (("7" (hide 2 3 4 5 6 7)
                          (("7" (lift-if)
                            (("7" (split 2)
                              (("1"
                                (flatten)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (inst -4 "body(t)")
                                        (("2"
                                          (split -4)
                                          (("1"
                                            (inst
                                             -1
                                             "G"
                                             "a"
                                             "ext(cons((abstr(t), abstr(s)), null))(body(s))")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (replace -1 :dir rl)
                                                  (("1"
                                                    (replace -2 1)
                                                    (("1"
                                                      (rewrite
                                                       "ext_reverse_fresh")
                                                      (("1"
                                                        (expand
                                                         "reverse"
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "reverse"
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "append"
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "act"
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "act"
                                                                 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -1 2)
                                                  (("2"
                                                    (rewrite
                                                     "ext_reverse_fresh")
                                                    (("2"
                                                      (expand
                                                       "reverse"
                                                       2)
                                                      (("2"
                                                        (expand
                                                         "reverse"
                                                         2)
                                                        (("2"
                                                          (expand
                                                           "append"
                                                           2)
                                                          (("2"
                                                            (expand
                                                             "act"
                                                             2)
                                                            (("2"
                                                              (expand
                                                               "act"
                                                               2)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ext_reverse_fresh formula-decl nil nominal_AC_freshness nil)
    (append def-decl "list[T]" list_props nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (ac_delete_size formula-decl nil nominal_AC_term_properties nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fresh_delete_select formula-decl nil nominal_AC_freshness nil)
    (num_arg def-decl "nat" nominal_AC_term_properties nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (ac_select_size formula-decl nil nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (act_reverse2 formula-decl nil atoms nil)
    (act_reverse_pi formula-decl nil atoms nil)
    (a skolem-const-decl "atom" nominal_AC_equality nil)
    (s skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]" nominal_AC_equality nil)
    (t skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]" nominal_AC_equality nil)
    (set type-eq-decl nil sets nil)
    (ds const-decl "set[atom]" atoms nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (act def-decl "atom" atoms nil)
    (reverse def-decl "list[T]" list_props nil)
    (/= const-decl "boolean" notequal nil)
    (fresh def-decl "bool" nominal_AC_freshness nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "nat" nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (equal?_ext_invariance_right_aux 0
  (equal?_ext_invariance_right_aux-1 nil 3880908296
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "equal?" -3)
            (("" (lift-if)
              (("" (prop)
                (("1" (expand "equal?" 1)
                  (("1" (assert)
                    (("1" (expand "ext" -2)
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (prop)
                            (("1" (expand "ext" 1)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -5)
                  (("2" (expand "equal?" 2)
                    (("2" (assert)
                      (("2" (case "var?(s) AND V(s) = V(t)")
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (prop)
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil)
                               ("3"
                                (skeep)
                                (("3"
                                  (typepred "a")
                                  (("3"
                                    (inst -7 "a")
                                    (("3"
                                      (expand "ext" -1)
                                      (("3"
                                        (expand "ext" 1)
                                        (("3"
                                          (hide 2)
                                          (("3"
                                            (expand "ds")
                                            (("3"
                                              (flatten)
                                              (("3"
                                                (rewrite "act_append")
                                                (("3"
                                                  (rewrite
                                                   "act_append")
                                                  (("3"
                                                    (decompose-equality
                                                     -7)
                                                    (("3"
                                                      (inst
                                                       -1
                                                       "act(p(s))(a)")
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 3)
                          (("2" (expand "ext" -2)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "ext" -2)
                  (("3" (assert)
                    (("3" (hide -3)
                      (("3" (lift-if)
                        (("3" (assert)
                          (("3" (prop) (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (expand "equal?" 4)
                  (("4" (assert)
                    (("4" (case "pair?(s)")
                      (("1" (prop)
                        (("1" (grind) nil nil)
                         ("2" (expand "ext" 1)
                          (("2" (assert)
                            (("2" (inst -6 "term1(t)")
                              (("2"
                                (prop)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (inst -1 "pi1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "ext" -4)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "ext" 1)
                          (("3" (assert)
                            (("3" (expand "ext" -5)
                              (("3"
                                (inst -6 "term2(t)")
                                (("3"
                                  (prop)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (inst -1 "pi1")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 5)
                        (("2" (expand "ext" -2)
                          (("2" (lift-if) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (hide 1 2 3 4)
                  (("5" (case "app?(s)")
                    (("1" (expand "ext" -5)
                      (("1" (assert)
                        (("1" (rewrite "ext_num_arg2")
                          (("1" (assert)
                            (("1" (expand "equal?" 1)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "ext" 1)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (hide -7 -6)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (expand "ext" 1)
                                  (("3"
                                    (rewrite "ext_num_arg2")
                                    nil
                                    nil))
                                  nil)
                                 ("4"
                                  (expand "ext" -6)
                                  (("4"
                                    (expand "ext" 1)
                                    (("4"
                                      (inst -7 "arg(t)")
                                      (("4"
                                        (prop)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (inst -1 "pi1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -6 2 -5)
                      (("2" (grind)
                        (("2" (expand "ext" -2) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (assert)
                  (("6" (flatten)
                    (("6" (hide 1 2 3 4 5)
                      (("6" (case "ac_app?(s)")
                        (("1" (skeep)
                          (("1" (expand "equal?" 1)
                            (("1" (name-replace "f" "ac_sym(t)")
                              (("1"
                                (prop)
                                (("1"
                                  (expand "ext" 1)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (expand "ext" (-4 1))
                                  (("2" (assert) nil nil))
                                  nil)
                                 ("3"
                                  (inst 1 "i" "j")
                                  (("3"
                                    (assert)
                                    (("3"
                                      (prop)
                                      (("1"
                                        (reveal -1)
                                        (("1"
                                          (inst -12 "select(f, t)(i)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (inst
                                               -1
                                               "G"
                                               "pi1"
                                               "pi2"
                                               "select(f, s)(j)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite
                                                   "ext_select")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite
                                                       "ext_select")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (use "ac_select_size")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst -11 "delete(f, t)(i)")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst
                                             -1
                                             "G"
                                             "pi1"
                                             "pi2"
                                             "delete(f, s)(j)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite "ext_delete")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite
                                                     "ext_delete")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (use "ac_delete_size")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "ext" -2)
                          (("2" (assert)
                            (("2" (lift-if) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (case "abs?(t)")
                  (("1" (hide (1 2 3 4 5 6))
                    (("1" (expand "equal?" 1)
                      (("1" (assert)
                        (("1" (case "abs?(s)")
                          (("1" (split 1)
                            (("1" (expand "ext" 1)
                              (("1" (assert) nil nil)) nil)
                             ("2" (flatten)
                              (("2"
                                (inst -7 "body(t)")
                                (("2"
                                  (prop)
                                  (("1"
                                    (inst -1 "G" "pi1" "pi2" "body(s)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "ext" (-6 1))
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (flatten)
                              (("3"
                                (hide 2 -6)
                                (("3"
                                  (expand "ext" (-3 1))
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "ext" -4)
                              (("2"
                                (assert)
                                (("2"
                                  (hide -5)
                                  (("2"
                                    (lift-if)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil)
                 ("8" (case "abs?(t) AND abs?(s)")
                  (("1" (flatten)
                    (("1" (hide 2 3 4 5 6 7)
                      (("1" (expand "ext" -4 2)
                        (("1" (assert)
                          (("1" (expand "ext" -4 2)
                            (("1" (expand "equal?" 2)
                              (("1"
                                (split 2)
                                (("1"
                                  (expand "ext" 1)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (hide -5 -7)
                                    (("2"
                                      (expand "ext" (-1 2))
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (flatten)
                                  (("3"
                                    (prop)
                                    (("1"
                                      (hide -4 -6)
                                      (("1"
                                        (lemma "ds_fresh_invariance")
                                        (("1"
                                          (inst
                                           -1
                                           "G"
                                           "abstr(t)"
                                           "pi1"
                                           "pi2"
                                           "body(s)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "ext" (-4 1))
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "ext" 1 2)
                                      (("2"
                                        (expand "ext" 1 2)
                                        (("2"
                                          (case
                                           "act(pi1)(abstr(s)) = act(pi2)(abstr(s))")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (rewrite
                                               "ext_append"
                                               -5
                                               :dir
                                               rl)
                                              (("1"
                                                (rewrite
                                                 "ext_append"
                                                 1
                                                 :dir
                                                 rl)
                                                (("1"
                                                  (name-replace
                                                   "pi3"
                                                   "append(cons((abstr(t), act(pi2)(abstr(s))), null), pi1)")
                                                  (("1"
                                                    (name-replace
                                                     "pi4"
                                                     "append(cons((abstr(t), act(pi2)(abstr(s))), null), pi2)")
                                                    (("1"
                                                      (inst
                                                       -7
                                                       "body(t)")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "G"
                                                           "pi3"
                                                           "pi4"
                                                           "body(s)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide
                                                               -5
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "pi3")
                                                                (("1"
                                                                  (expand
                                                                   "pi4")
                                                                  (("1"
                                                                    (decompose-equality
                                                                     1)
                                                                    (("1"
                                                                      (rewrite
                                                                       "act_append")
                                                                      (("1"
                                                                        (rewrite
                                                                         "act_append")
                                                                        (("1"
                                                                          (decompose-equality
                                                                           -6)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "x!1")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (decompose-equality -7)
                                            (("2"
                                              (inst -1 "abstr(s)")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -2 -4)
                    (("2" (hide -1)
                      (("2" (prop)
                        (("1" (grind) nil nil)
                         ("2" (expand "ext" -1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ext_append formula-decl nil nominal_AC_term_properties nil)
    (append def-decl "list[T]" list_props nil)
    (pi4 skolem-const-decl "list[[atom, atom]]" nominal_AC_equality nil)
    (pi3 skolem-const-decl "list[[atom, atom]]" nominal_AC_equality nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (ds_fresh_invariance formula-decl nil nominal_AC_freshness nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil)
    (ac_select_size formula-decl nil nominal_AC_term_properties nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (ext_select formula-decl nil nominal_AC_term_properties nil)
    (ext_delete formula-decl nil nominal_AC_term_properties nil)
    (ac_delete_size formula-decl nil nominal_AC_term_properties nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ext_num_arg2 formula-decl nil nominal_AC_term_properties nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (ds const-decl "set[atom]" atoms nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (act_append formula-decl nil atoms nil)
    (a skolem-const-decl "(ds(p(t), p(ext(pi2)(s))))" nominal_AC_equality nil)
    (pi2 skolem-const-decl "perm" nominal_AC_equality nil)
    (s skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]" nominal_AC_equality nil)
    (pi1 skolem-const-decl "perm" nominal_AC_equality nil)
    (t skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]" nominal_AC_equality nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (act def-decl "atom" atoms nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "nat" nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (equal?_ext_invariance_right 0
  (equal?_ext_invariance_right-1 nil 3880908022
   ("" (skeep)
    (("" (iff)
      (("" (prop)
        (("1" (lemma "equal?_ext_invariance_right_aux")
          (("1" (inst -1 "G" "pi1" "pi2" "s" "t")
            (("1" (assert) nil nil)) nil))
          nil)
         ("2" (lemma "equal?_ext_invariance_right_aux")
          (("2" (inst -1 "G" "pi2" "pi1" "s" "t")
            (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((equal?_ext_invariance_right_aux formula-decl nil nominal_AC_equality nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (equal?_ext_reverse 0
  (equal?_ext_reverse-1 nil 3880880518
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "ext" 1 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (iff)
                  (("1" (prop)
                    (("1" (expand "equal?" -1)
                      (("1" (expand "equal?" 1)
                        (("1" (assert)
                          (("1" (expand "ext" 1)
                            (("1" (replace -1 1)
                              (("1"
                                (assert)
                                (("1" (rewrite "act_reverse") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "equal?" -1)
                      (("2" (assert)
                        (("2" (expand "ext" -1)
                          (("2" (lift-if)
                            (("2" (assert)
                              (("2"
                                (prop)
                                (("2"
                                  (expand "equal?" 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (use "nominal_AC_term_at_eta")
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (replace -3 1 :dir rl)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (rewrite "act_reverse2")
                                              (("2"
                                                (lemma "nominal_AC_term_at_eta")
                                                (("2"
                                                  (inst -1 "s")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "equal?" 1)
                  (("2" (assert)
                    (("2" (iff)
                      (("2" (split 1)
                        (("1" (flatten)
                          (("1" (hide -5)
                            (("1" (prop)
                              (("1"
                                (expand "ext" 1)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (expand "ext" 1)
                                (("2" (assert) nil nil))
                                nil)
                               ("3"
                                (skeep)
                                (("3"
                                  (typepred "a")
                                  (("3"
                                    (inst -4 "a")
                                    (("3"
                                      (expand "ds")
                                      (("3"
                                        (flatten)
                                        (("3"
                                          (expand "ext" 1)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (rewrite "act_append")
                                              (("3"
                                                (rewrite "act_append")
                                                (("3"
                                                  (lemma
                                                   "act_reverse_pi")
                                                  (("3"
                                                    (inst
                                                     -1
                                                     "act(p(t))(a)"
                                                     "act(p(s))(a)"
                                                     "pi")
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (case "var?(s) AND V(t) = V(s)")
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (hide -7)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst -5 "a")
                                      (("1"
                                        (typepred "a")
                                        (("1"
                                          (expand "ds")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "ext" -1)
                                              (("1"
                                                (rewrite "act_append")
                                                (("1"
                                                  (rewrite
                                                   "act_append")
                                                  (("1"
                                                    (lemma
                                                     "act_reverse_pi")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "act(p(s))(a)"
                                                       "act(p(t))(a)"
                                                       "reverse(pi)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (rewrite
                                                           "reverse_reverse")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (hide -5)
                                (("2"
                                  (expand "ext" -1)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (prop)
                                        (("2"
                                          (expand "ext" -2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 2 3)
                  (("3" (hide -2)
                    (("3" (iff)
                      (("3" (prop)
                        (("1" (grind) nil nil)
                         ("2" (grind)
                          (("2" (expand "ext" -1)
                            (("2" (lift-if) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (hide 2 3 4)
                  (("4" (iff)
                    (("4" (prop)
                      (("1" (expand "equal?" -1)
                        (("1" (flatten)
                          (("1" (expand "equal?" 1)
                            (("1" (assert)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "ext" 1)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (inst -5 "term1(t)")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst -1 "G" "pi" "term1(s)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "ext" 1)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (expand "ext" 1)
                                  (("3"
                                    (inst -5 "term2(t)")
                                    (("3"
                                      (prop)
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "equal?" -1)
                        (("2" (assert)
                          (("2" (flatten)
                            (("2" (expand "ext" -1)
                              (("2"
                                (lift-if)
                                (("2"
                                  (assert)
                                  (("2"
                                    (prop)
                                    (("2"
                                      (hide 1 2 3)
                                      (("2"
                                        (expand "equal?" 1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (prop)
                                            (("1"
                                              (inst -5 "term1(t)")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "ext" -3)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst -5 "term2(t)")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (expand "ext" -4)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (hide 2 3 4 5)
                  (("5" (inst -2 "arg(t)")
                    (("5" (prop)
                      (("1" (iff)
                        (("1" (prop)
                          (("1" (expand "equal?" -1)
                            (("1" (flatten)
                              (("1"
                                (inst? -5)
                                (("1"
                                  (expand "ext" 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "equal?" 1)
                                      (("1"
                                        (rewrite "ext_num_arg2")
                                        (("1"
                                          (rewrite "ext_num_arg2")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "equal?" -1)
                            (("2" (assert)
                              (("2"
                                (prop)
                                (("2"
                                  (expand "equal?" 1)
                                  (("2"
                                    (expand "ext" -1)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (expand "ext" -2)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (rewrite "ext_num_arg2")
                                            (("2"
                                              (expand "ext" -3)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (rewrite
                                                   "ext_num_arg2")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide 2 3 4 5)
                                            (("3"
                                              (expand "ext" -4)
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (inst
                                                   -5
                                                   "G"
                                                   "pi"
                                                   "arg(s)")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("6" (hide 2 3 4 5 6)
                  (("6" (iff)
                    (("6" (prop)
                      (("1" (expand "equal?" 1)
                        (("1" (assert)
                          (("1" (expand "equal?" -1)
                            (("1" (flatten)
                              (("1"
                                (prop)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (expand "ext" 1)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "ext" 1 1)
                                  (("2" (assert) nil nil))
                                  nil)
                                 ("3"
                                  (skeep)
                                  (("3"
                                    (inst 1 "i" "j")
                                    (("3"
                                      (name-replace "f" "ac_sym(t)")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (prop)
                                          (("1"
                                            (expand "num_arg" 1)
                                            (("1"
                                              (expand "f")
                                              (("1"
                                                (expand "num_arg" -4)
                                                (("1"
                                                  (rewrite
                                                   "ext_num_arg")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "num_arg" 1)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (expand "f")
                                                (("2"
                                                  (expand "num_arg" -6)
                                                  (("2"
                                                    (rewrite
                                                     "ext_num_arg")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide -8)
                                            (("3"
                                              (expand "select" -7)
                                              (("3"
                                                (reveal -2)
                                                (("3"
                                                  (expand "select" 1 1)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (rewrite
                                                       "ext_select"
                                                       -8
                                                       :dir
                                                       rl)
                                                      (("3"
                                                        (inst
                                                         -10
                                                         "select(f, ac_arg(t))(i)")
                                                        (("3"
                                                          (prop)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -9)
                                                                (("1"
                                                                  (rewrite
                                                                   "ext_select"
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (expand
                                                                     "select"
                                                                     1
                                                                     2)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "select_size")
                                                            (("2"
                                                              (hide-all-but
                                                               (-1 1))
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (hide -7)
                                            (("4"
                                              (inst
                                               -9
                                               "delete(f, t)(i)")
                                              (("4"
                                                (prop)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "G"
                                                   "pi"
                                                   "delete(f, s)(j)")
                                                  (("1"
                                                    (rewrite
                                                     "ext_delete"
                                                     -1)
                                                    (("1"
                                                      (rewrite
                                                       "ext_delete"
                                                       -1)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (expand
                                                           "ext"
                                                           1)
                                                          (("1"
                                                            (reveal -4)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use
                                                   "ac_delete_size")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "equal?" -1)
                        (("2" (assert)
                          (("2" (flatten)
                            (("2"
                              (case "ac_app?(s) AND ac_sym(s) = ac_sym(t)")
                              (("1"
                                (flatten)
                                (("1"
                                  (name-replace "f" "ac_sym(t)")
                                  (("1"
                                    (reveal -1)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (expand "equal?" 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst 1 "i" "j")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (expand
                                                   "num_arg"
                                                   (-7 1))
                                                  (("1"
                                                    (rewrite
                                                     "ext_num_arg")
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "num_arg"
                                                     (-9 1))
                                                    (("2"
                                                      (rewrite
                                                       "ext_num_arg")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (assert)
                                                  (("3"
                                                    (hide -11)
                                                    (("3"
                                                      (inst
                                                       -12
                                                       "select(f, t)(i)")
                                                      (("3"
                                                        (prop)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "G"
                                                           "pi"
                                                           "select(f, s)(j)")
                                                          (("1"
                                                            (rewrite
                                                             "ext_select"
                                                             -1)
                                                            (("1"
                                                              (rewrite
                                                               "ext_select"
                                                               -1)
                                                              (("1"
                                                                (replace
                                                                 -11)
                                                                (("1"
                                                                  (expand
                                                                   "select"
                                                                   -1
                                                                   2)
                                                                  (("1"
                                                                    (expand
                                                                     "select"
                                                                     1
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "ext"
                                                                       -1
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "select"
                                                                         -1
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "select"
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (use
                                                           "ac_select_size")
                                                          (("2"
                                                            (expand
                                                             "f")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (hide -10)
                                                  (("4"
                                                    (inst
                                                     -12
                                                     "delete(f, t)(i)")
                                                    (("4"
                                                      (prop)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "G"
                                                         "pi"
                                                         "delete(f, s)(j)")
                                                        (("1"
                                                          (rewrite
                                                           "ext_delete")
                                                          (("1"
                                                            (rewrite
                                                             "ext_delete")
                                                            (("1"
                                                              (replace
                                                               -11)
                                                              (("1"
                                                                (expand
                                                                 "ext"
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (use
                                                         "ac_delete_size")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -3 -5)
                                (("2"
                                  (expand "ext" -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (assert)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (case "abs?(t)")
                  (("1" (hide 1 3 4 5 6 7)
                    (("1" (iff)
                      (("1" (prop)
                        (("1" (expand "equal?" -1)
                          (("1" (flatten)
                            (("1" (split -2)
                              (("1"
                                (flatten)
                                (("1"
                                  (inst -5 "body(t)")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (replace -3)
                                        (("1"
                                          (expand "equal?" 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "ext" 1 1)
                                              (("1"
                                                (split 1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand "ext" 1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide 2)
                                                    (("2"
                                                      (expand
                                                       "ext"
                                                       1
                                                       1)
                                                      (("2"
                                                        (use
                                                         "act_reverse_pi")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "equal?" 2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (expand "ext" 1)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (hide-all-but (2 -1))
                                          (("2"
                                            (expand "ext" -1)
                                            (("2"
                                              (lemma "act_reverse_pi")
                                              (("2"
                                                (inst
                                                 -1
                                                 "abstr(s)"
                                                 "abstr(t)"
                                                 "reverse(pi)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (rewrite
                                                     "reverse_reverse")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (flatten)
                                        (("3"
                                          (hide 1)
                                          (("3"
                                            (prop)
                                            (("1"
                                              (expand "ext" 1 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite
                                                   "ext_reverse_fresh"
                                                   1)
                                                  (("1"
                                                    (rewrite
                                                     "reverse_reverse")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "ext" 1 3)
                                              (("2"
                                                (inst -5 "body(t)")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "G"
                                                     "pi"
                                                     "ext(cons((act(pi)(abstr(t)), abstr(s)), null))(body(s))")
                                                    (("1"
                                                      (replace -3)
                                                      (("1"
                                                        (lemma
                                                         "equal?_ext_invariance_right")
                                                        (("1"
                                                          (rewrite
                                                           "ext_append"
                                                           -2
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (rewrite
                                                             "ext_append"
                                                             1
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (name-replace
                                                               "pi1"
                                                               "append(reverse(pi), cons((act(pi)(abstr(t)), abstr(s)), null))")
                                                              (("1"
                                                                (name-replace
                                                                 "pi2"
                                                                 "append(cons((abstr(t), abstr(ext(reverse(pi))(s))), null),
                        reverse(pi))")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "G"
                                                                   "pi1"
                                                                   "pi2"
                                                                   "body(s)"
                                                                   "body(t)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -3
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "pi1")
                                                                        (("1"
                                                                          (expand
                                                                           "pi2"
                                                                           1)
                                                                          (("1"
                                                                            (decompose-equality
                                                                             1)
                                                                            (("1"
                                                                              (rewrite
                                                                               "act_append")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "act_append")
                                                                                (("1"
                                                                                  (name-replace
                                                                                   "a"
                                                                                   "x!1")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "act"
                                                                                     1
                                                                                     2)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "act"
                                                                                       1
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "act"
                                                                                         1
                                                                                         3)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "act"
                                                                                           1
                                                                                           6)
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "act_reverse_pi")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "abstr(t)"
                                                                                                   "a"
                                                                                                   "pi")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "ext"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "act"
                                                                                                           1
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "act"
                                                                                                             1
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "ext"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "act_append"
                                                                                                     1
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "act"
                                                                                                       1
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "act"
                                                                                                         1
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "act"
                                                                                                           1
                                                                                                           4)
                                                                                                          (("2"
                                                                                                            (lift-if)
                                                                                                            (("2"
                                                                                                              (prop)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "act_reverse_pi")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "a"
                                                                                                                   "abstr(t)"
                                                                                                                   "reverse(pi)")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "reverse_reverse")
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (lemma
                                                                                                                 "act_reverse_aux1")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "reverse(pi)")
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     "reverse_reverse")
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "act"
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (expand
                                                                                                 "act"
                                                                                                 2
                                                                                                 2)
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "act"
                                                                                                   2
                                                                                                   2)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "act"
                                                                                                     2
                                                                                                     3)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "act"
                                                                                                       2
                                                                                                       4)
                                                                                                      (("3"
                                                                                                        (lift-if)
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          (("3"
                                                                                                            (prop)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "act_reverse_pi")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "a"
                                                                                                                 "abstr(t)"
                                                                                                                 "reverse(pi)")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     "reverse_reverse")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (expand
                                                                                                               "ext"
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (use
                                                                                                                 "act_invariance")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "abs?(s)")
                          (("1" (expand "equal?" -2)
                            (("1" (lift-if)
                              (("1"
                                (assert)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (split -2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "equal?" 1)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (inst -6 "body(t)")
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "G"
                                                     "pi"
                                                     "body(s)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "ext"
                                                         -4)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (expand "ext" -1)
                                                  (("2"
                                                    (lemma
                                                     "act_reverse_pi")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "abstr(s)"
                                                       "abstr(t)"
                                                       "reverse(pi)")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (rewrite
                                                           "reverse_reverse")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (expand "equal?" 2)
                                          (("2"
                                            (split)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma
                                                 "act_reverse_pi")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "abstr(t)"
                                                   "abstr(s)"
                                                   "pi")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "ext" 2)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (hide -5)
                                                  (("1"
                                                    (expand "ext" -1)
                                                    (("1"
                                                      (rewrite
                                                       "ext_reverse_fresh")
                                                      (("1"
                                                        (rewrite
                                                         "reverse_reverse")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst -5 "body(t)")
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "G"
                                                       "pi"
                                                       "ext(cons((act(pi)(abstr(t)), abstr(s)), null))(body(s))")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "equal?(G) (body(t), ext(reverse(pi)) (ext(cons((act(pi)(abstr(t)), abstr(s)), null))(body(s))))")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide -1)
                                                            (("2"
                                                              (hide 2)
                                                              (("2"
                                                                (expand
                                                                 "ext"
                                                                 -2
                                                                 3)
                                                                (("2"
                                                                  (expand
                                                                   "ext"
                                                                   -2
                                                                   2)
                                                                  (("2"
                                                                    (lemma
                                                                     "equal?_ext_invariance_right")
                                                                    (("2"
                                                                      (rewrite
                                                                       "ext_append"
                                                                       1
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (rewrite
                                                                         "ext_append"
                                                                         -3
                                                                         :dir
                                                                         rl)
                                                                        (("2"
                                                                          (name-replace
                                                                           "pi1"
                                                                           "append(cons((abstr(t), act(reverse(pi))(abstr(s))), null),
                        reverse(pi))")
                                                                          (("2"
                                                                            (name-replace
                                                                             "pi2"
                                                                             "append(reverse(pi), cons((act(pi)(abstr(t)), abstr(s)), null))")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "G"
                                                                               "pi1"
                                                                               "pi2"
                                                                               "body(s)"
                                                                               "body(t)")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (hide
                                                                                   2
                                                                                   -3
                                                                                   -2
                                                                                   -4)
                                                                                  (("2"
                                                                                    (decompose-equality
                                                                                     1)
                                                                                    (("2"
                                                                                      (name-replace
                                                                                       "a"
                                                                                       "x!1")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "pi1")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "pi2")
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "act_append")
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "act_append")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "act"
                                                                                                 1
                                                                                                 5)
                                                                                                (("2"
                                                                                                  (lift-if)
                                                                                                  (("2"
                                                                                                    (prop)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "act"
                                                                                                       -1
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "act"
                                                                                                         1
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "act"
                                                                                                           1
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "act"
                                                                                                             1
                                                                                                             3)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "act"
                                                                                                               1
                                                                                                               5)
                                                                                                              (("1"
                                                                                                                (lift-if)
                                                                                                                (("1"
                                                                                                                  (prop)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "act_reverse_pi")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "abstr(t)"
                                                                                                                       "a"
                                                                                                                       "pi")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (lemma
                                                                                                                     "act_reverse_pi")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "abstr(t)"
                                                                                                                       "a"
                                                                                                                       "pi")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "act"
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "act"
                                                                                                           2
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "act"
                                                                                                             1
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (lift-if)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "act"
                                                                                                                 1
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "act"
                                                                                                                   1
                                                                                                                   5)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "act_reverse_pi")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "a"
                                                                                                                           "abstr(t)"
                                                                                                                           "reverse(pi)")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (rewrite
                                                                                                                               "reverse_reverse")
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "act_append"
                                                                                                                         2
                                                                                                                         :dir
                                                                                                                         rl)
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "act_reverse_aux1")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "reverse(pi)")
                                                                                                                            (("2"
                                                                                                                              (rewrite
                                                                                                                               "reverse_reverse")
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -1
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "act"
                                                                                                                                   2)
                                                                                                                                  (("2"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (expand
                                                                                                       "act"
                                                                                                       1)
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "act"
                                                                                                         3
                                                                                                         1)
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "act"
                                                                                                           2
                                                                                                           5)
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             "act"
                                                                                                             2
                                                                                                             1)
                                                                                                            (("3"
                                                                                                              (lift-if)
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "act"
                                                                                                                 2
                                                                                                                 1)
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "act"
                                                                                                                   2
                                                                                                                   4)
                                                                                                                  (("3"
                                                                                                                    (expand
                                                                                                                     "act"
                                                                                                                     2
                                                                                                                     6)
                                                                                                                    (("3"
                                                                                                                      (prop)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "act_reverse_pi")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "a"
                                                                                                                           "abstr(t)"
                                                                                                                           "reverse(pi)")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (rewrite
                                                                                                                               "reverse_reverse")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (lemma
                                                                                                                         "act_invariance")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "a"
                                                                                                                           "abstr(s)"
                                                                                                                           "reverse(pi)")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "equal?" -1)
                            (("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (hide -2 -4)
                                  (("2"
                                    (expand "ext" -1)
                                    (("2"
                                      (lift-if)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (pi2 skolem-const-decl "list[[atom, atom]]" nominal_AC_equality nil)
    (pi1 skolem-const-decl "list[[atom, atom]]" nominal_AC_equality nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (ext_append formula-decl nil nominal_AC_term_properties nil)
    (pi2 skolem-const-decl "list[[atom, atom]]" nominal_AC_equality nil)
    (act_reverse_aux1 formula-decl nil atoms nil)
    (act_invariance formula-decl nil atoms nil)
    (pi1 skolem-const-decl "list[[atom, atom]]" nominal_AC_equality nil)
    (equal?_ext_invariance_right formula-decl nil nominal_AC_equality nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (ext_reverse_fresh formula-decl nil nominal_AC_freshness nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (f skolem-const-decl "ac_symbol" nominal_AC_equality nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (string type-eq-decl nil strings nil)
    (ext_num_arg formula-decl nil nominal_AC_term_properties nil)
    (num_arg def-decl "nat" nominal_AC_term_properties nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (ext_select formula-decl nil nominal_AC_term_properties nil)
    (select_size formula-decl nil nominal_AC_term_properties nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (ac_delete_size formula-decl nil nominal_AC_term_properties nil)
    (ext_delete formula-decl nil nominal_AC_term_properties nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ac_select_size formula-decl nil nominal_AC_term_properties nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (f skolem-const-decl "ac_symbol" nominal_AC_equality nil)
    (ext_num_arg2 formula-decl nil nominal_AC_term_properties nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (a skolem-const-decl "(ds(append(pi, p(t)), p(s)))" nominal_AC_equality nil)
    (reverse_reverse formula-decl nil list_props nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (ds const-decl "set[atom]" atoms nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (act_append formula-decl nil atoms nil)
    (act_reverse_pi formula-decl nil atoms nil)
    (act def-decl "atom" atoms nil)
    (a skolem-const-decl "(ds(p(t), p(ext(reverse(pi))(s))))" nominal_AC_equality
     nil)
    (s skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]" nominal_AC_equality nil)
    (t skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]" nominal_AC_equality nil)
    (pi skolem-const-decl "perm" nominal_AC_equality nil)
    (append def-decl "list[T]" list_props nil)
    (nominal_AC_term_at_eta formula-decl nil nominal_AC_term_adt nil)
    (act_reverse2 formula-decl nil atoms nil)
    (a adt-accessor-decl "[(atom?) -> atom]" nominal_AC_term_adt nil)
    (atom? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (act_reverse formula-decl nil atoms nil)
    (reverse def-decl "list[T]" list_props nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "nat" nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (equal?_sym 0
  (equal?_sym-1 nil 3806002216
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "equal?" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (hide -3)
                  (("1" (expand "equal?" 1)
                    (("1" (lift-if)
                      (("1" (assert)
                        (("1" (use "nominal_AC_term_at_eta")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "equal?" 2)
                  (("2" (lift-if)
                    (("2" (assert)
                      (("2" (skeep)
                        (("2" (inst -4 "a")
                          (("1" (assert) nil nil)
                           ("2" (typepred "a")
                            (("2" (expand "ds" -1)
                              (("2"
                                (expand "ds" 1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide -3) (("3" (grind) nil nil)) nil)
                 ("4" (hide 1 2 3)
                  (("4" (expand "equal?" 1)
                    (("4" (assert)
                      (("4" (prop)
                        (("1" (inst -5 "term1(t)")
                          (("1" (prop)
                            (("1" (inst? -1) (("1" (assert) nil nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (inst -5 "term2(t)")
                          (("2" (prop)
                            (("1" (inst? -1) (("1" (assert) nil nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (expand "equal?" 5)
                  (("5" (assert) (("5" (grind) nil nil)) nil)) nil)
                 ("6" (hide 1 2 3 4 5)
                  (("6" (assert)
                    (("6" (lemma "equal?_num_arg")
                      (("6" (inst -1 "G" "ac_sym(t)" "s" "t")
                        (("6" (split -1)
                          (("1" (flatten)
                            (("1" (expand "equal?" 1)
                              (("1"
                                (assert)
                                (("1"
                                  (name-replace "f" "ac_sym(t)")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst 1 "j" "i")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -4 :dir rl)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (inst
                                               -11
                                               "select(f, t)(i)")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "ac_select_size")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst
                                               -11
                                               "delete(f, t)(i)")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "ac_delete_size")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "equal?" 1)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (grind) nil nil)
                 ("8" (expand "equal?" 8)
                  (("8" (assert)
                    (("8" (hide 2 3 4 5 6 7)
                      (("8" (name-replace "a" "abstr(t)")
                        (("8" (name-replace "b" "abstr(s)")
                          (("8"
                            (name-replace "pi1"
                             "cons[[atoms.atom, atoms.atom]]((b, a), null)")
                            (("8"
                              (name-replace "pi2"
                               "cons[[atoms.atom, atoms.atom]]((a, b), null)")
                              (("8"
                                (prop)
                                (("1"
                                  (inst -4 "body(t)")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (inst -1 "G" "ext(pi2)(body(s))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "ext_preserves_fresh")
                                          (("1"
                                            (inst
                                             -1
                                             "G"
                                             "a"
                                             "pi2 "
                                             "body(s)")
                                            (("1"
                                              (expand "pi2" -1 1)
                                              (("1"
                                                (expand "act" -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "act" -1)
                                                    (("1"
                                                      (lemma
                                                       "equal?_fresh")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "G"
                                                         "b"
                                                         "body(t)"
                                                         "ext(pi2)(body(s))")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst -4 "body(t)")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst -1 "G" "ext(pi2)(body(s))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "equal?_ext_reverse")
                                          (("1"
                                            (inst
                                             -1
                                             "G"
                                             "pi2"
                                             "body(t)"
                                             "body(s)")
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (lemma
                                                 "equal?_ext_invariance_right")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "G"
                                                   "pi1"
                                                   "reverse(pi2)"
                                                   "body(t)"
                                                   "body(s)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (expand "pi1")
                                                        (("1"
                                                          (expand
                                                           "pi2")
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "reverse"
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "append")
                                                                (("1"
                                                                  (decompose-equality
                                                                   1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equal?_ext_reverse formula-decl nil nominal_AC_equality nil)
    (reverse def-decl "list[T]" list_props nil)
    (append def-decl "list[T]" list_props nil)
    (pi1 skolem-const-decl "(cons?)" nominal_AC_equality nil)
    (equal?_ext_invariance_right formula-decl nil nominal_AC_equality nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (ext_preserves_fresh formula-decl nil nominal_AC_freshness nil)
    (pi2 skolem-const-decl "(cons?)" nominal_AC_equality nil)
    (equal?_fresh formula-decl nil nominal_AC_equality nil)
    (act def-decl "atom" atoms nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (equal?_num_arg formula-decl nil nominal_AC_equality nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (ac_delete_size formula-decl nil nominal_AC_term_properties nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (ac_select_size formula-decl nil nominal_AC_term_properties nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (string type-eq-decl nil strings nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (set type-eq-decl nil sets nil)
    (ds const-decl "set[atom]" atoms nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (t skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]" nominal_AC_equality nil)
    (s skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]" nominal_AC_equality nil)
    (a skolem-const-decl "(ds(p(s), p(t)))" nominal_AC_equality nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nominal_AC_term_at_eta formula-decl nil nominal_AC_term_adt nil)
    (atom? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "nat" nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (equal?_ac 0
  (equal?_ac-1 nil 3806332082
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (hide -1)
            (("" (skeep)
              (("" (expand "are_ac?" -1)
                (("" (flatten)
                  (("" (lemma "equal?_num_arg")
                    (("" (inst? -1)
                      (("" (inst -1 "f")
                        (("" (assert)
                          (("" (hide -1)
                            (("" (case "num_arg(f, t) > 1")
                              (("1"
                                (expand "equal?" -6)
                                (("1"
                                  (replace -4 -6 rl)
                                  (("1"
                                    (hide -1 -2 -3 -4 -5)
                                    (("1"
                                      (skolem -1 ("n" "j"))
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide -1 -2 -3 -4)
                                          (("1"
                                            (reveal -13)
                                            (("1"
                                              (inst
                                               -1
                                               "delete(f, t)(n)")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "G"
                                                   "f"
                                                   "delete(f, s)(j)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (case "n > i")
                                                        (("1"
                                                          (inst -2 "i")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (skolem
                                                               -1
                                                               "k")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (case
                                                                   "j > k")
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "k")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (lemma
                                                                           "num_arg_delete")
                                                                          (("1"
                                                                            (inst?
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -5
                                                                           -7
                                                                           -8)
                                                                          (("2"
                                                                            (lemma
                                                                             "gt_select_delete")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "f"
                                                                               "n"
                                                                               "i"
                                                                               "t")
                                                                              (("2"
                                                                                (prop)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "gt_select_delete")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "f"
                                                                                     "j"
                                                                                     "k"
                                                                                     "s")
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2
                                                                                         -5)
                                                                                        (("2"
                                                                                          (reveal
                                                                                           -12
                                                                                           -17)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "num_arg_delete")
                                                                                            (("2"
                                                                                              (inst?
                                                                                               -1)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -4)
                                                                                                (("2"
                                                                                                  (reveal
                                                                                                   -12
                                                                                                   -13)
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -1
                                                                                   -2
                                                                                   -3
                                                                                   -4
                                                                                   2)
                                                                                  (("2"
                                                                                    (reveal
                                                                                     -11
                                                                                     -12)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (lemma
                                                                           "delete_ac_num_arg_gt1")
                                                                          (("3"
                                                                            (inst
                                                                             -1
                                                                             "f"
                                                                             "i"
                                                                             "t")
                                                                            (("3"
                                                                              (prop)
                                                                              (("1"
                                                                                (expand
                                                                                 "is_ac_sym?"
                                                                                 -1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "equal?"
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (reveal
                                                                                           -8
                                                                                           -10
                                                                                           -13)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -9
                                                                                             -10
                                                                                             -11
                                                                                             -12
                                                                                             -13
                                                                                             -14
                                                                                             -15)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "delete_ac_num_arg_gt1")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "f"
                                                                                                 "k"
                                                                                                 "s")
                                                                                                (("1"
                                                                                                  (reveal
                                                                                                   -17
                                                                                                   -19)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replace
                                                                                           -2
                                                                                           1
                                                                                           rl)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -6
                                                                                             -7
                                                                                             -8
                                                                                             -9
                                                                                             -10
                                                                                             -11
                                                                                             -12)
                                                                                            (("2"
                                                                                              (reveal
                                                                                               -17
                                                                                               -19
                                                                                               -15
                                                                                               -20)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "delete_ac_num_arg_gt1")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "f"
                                                                                                   "k"
                                                                                                   "s")
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (replace
                                                                                           -2
                                                                                           1
                                                                                           rl)
                                                                                          (("3"
                                                                                            (inst
                                                                                             1
                                                                                             "n-1"
                                                                                             "j-1")
                                                                                            (("3"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (reveal
                                                                                                 -5
                                                                                                 -8)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -8
                                                                                                   -9
                                                                                                   -11
                                                                                                   -12)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -5
                                                                                                     -6
                                                                                                     -7)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "num_arg_delete_ge1")
                                                                                                      (("2"
                                                                                                        (inst?
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("4"
                                                                                                (hide
                                                                                                 -6
                                                                                                 -7
                                                                                                 -8
                                                                                                 -9
                                                                                                 -10
                                                                                                 -11
                                                                                                 -12)
                                                                                                (("4"
                                                                                                  (lemma
                                                                                                   "num_arg_delete_ge1")
                                                                                                  (("4"
                                                                                                    (reveal
                                                                                                     -14
                                                                                                     -15)
                                                                                                    (("4"
                                                                                                      (inst?
                                                                                                       -3)
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("5"
                                                                                                (lemma
                                                                                                 "gt_select_delete2")
                                                                                                (("5"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "f"
                                                                                                   "n"
                                                                                                   "i"
                                                                                                   "t")
                                                                                                  (("5"
                                                                                                    (assert)
                                                                                                    (("5"
                                                                                                      (prop)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "gt_select_delete2")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "f"
                                                                                                               "j"
                                                                                                               "k"
                                                                                                               "s")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -6
                                                                                                                   -7
                                                                                                                   -9
                                                                                                                   -10
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -1
                                                                                                                     -2
                                                                                                                     -6
                                                                                                                     -7
                                                                                                                     -8)
                                                                                                                    (("1"
                                                                                                                      (reveal
                                                                                                                       -17
                                                                                                                       -18
                                                                                                                       -19
                                                                                                                       -24)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "num_arg_delete")
                                                                                                                        (("1"
                                                                                                                          (inst?
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         -6
                                                                                                         -7
                                                                                                         -9
                                                                                                         -10
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -1
                                                                                                           -2
                                                                                                           -3
                                                                                                           -4
                                                                                                           -5)
                                                                                                          (("2"
                                                                                                            (reveal
                                                                                                             -14
                                                                                                             -15)
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("6"
                                                                                                (lemma
                                                                                                 "gt_delete_delete")
                                                                                                (("6"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "f"
                                                                                                   "n"
                                                                                                   "i"
                                                                                                   "t")
                                                                                                  (("6"
                                                                                                    (assert)
                                                                                                    (("6"
                                                                                                      (prop)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "gt_delete_delete")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "f"
                                                                                                               "j"
                                                                                                               "k"
                                                                                                               "s")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -6
                                                                                                                   -7
                                                                                                                   -9
                                                                                                                   -10
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (reveal
                                                                                                                     -12
                                                                                                                     -13
                                                                                                                     -14
                                                                                                                     -19)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "num_arg_delete")
                                                                                                                      (("1"
                                                                                                                        (inst?
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         -3
                                                                                                         -4
                                                                                                         -5
                                                                                                         -6
                                                                                                         -7
                                                                                                         -9
                                                                                                         -10
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (reveal
                                                                                                           -12
                                                                                                           -13
                                                                                                           -16)
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "is_ac_sym?"
                                                                                 1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (reveal
                                                                                 -8)
                                                                                (("3"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (inst
                                                                     2
                                                                     "k+1")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (prop)
                                                                        (("1"
                                                                          (reveal
                                                                           -7)
                                                                          (("1"
                                                                            (rewrite
                                                                             "num_arg_delete_ge1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "gt_select_delete")
                                                                          (("2"
                                                                            (inst?
                                                                             -1)
                                                                            (("2"
                                                                              (prop)
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 -4)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "le_select_delete")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "f"
                                                                                     "j"
                                                                                     "k"
                                                                                     "s")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -4
                                                                                         -5
                                                                                         -7
                                                                                         -8
                                                                                         2)
                                                                                        (("1"
                                                                                          (reveal
                                                                                           -11
                                                                                           -12
                                                                                           -13
                                                                                           -18)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "num_arg_delete_ge1")
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -3
                                                                                 -4
                                                                                 -6
                                                                                 -7
                                                                                 2)
                                                                                (("2"
                                                                                  (reveal
                                                                                   -8
                                                                                   -9
                                                                                   -12)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -4
                                                                                     -5
                                                                                     2)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (lemma
                                                                           "delete_ac_num_arg_gt1")
                                                                          (("3"
                                                                            (inst
                                                                             -1
                                                                             "f"
                                                                             "i"
                                                                             "t")
                                                                            (("3"
                                                                              (prop)
                                                                              (("1"
                                                                                (expand
                                                                                 "is_ac_sym?"
                                                                                 -1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "equal?"
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -5
                                                                                           -6
                                                                                           -8
                                                                                           -9)
                                                                                          (("1"
                                                                                            (reveal
                                                                                             -12
                                                                                             -17)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "delete_ac_num_arg_gt1")
                                                                                              (("1"
                                                                                                (inst?
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (prop)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "is_ac_sym?"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (reveal
                                                                                                     -14
                                                                                                     -16)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "is_ac_sym?"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replace
                                                                                           -2
                                                                                           1
                                                                                           rl)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -5
                                                                                             -6
                                                                                             -8
                                                                                             -9)
                                                                                            (("2"
                                                                                              (reveal
                                                                                               -12
                                                                                               -17)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "delete_ac_num_arg_gt1")
                                                                                                (("2"
                                                                                                  (inst?
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (prop)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "is_ac_sym?"
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (reveal
                                                                                                         -14
                                                                                                         -16)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "is_ac_sym?"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (replace
                                                                                           -2
                                                                                           1
                                                                                           rl)
                                                                                          (("3"
                                                                                            (inst
                                                                                             1
                                                                                             "n-1"
                                                                                             "j")
                                                                                            (("3"
                                                                                              (assert)
                                                                                              (("3"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "num_arg_delete_ge1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -5
                                                                                                       -6
                                                                                                       -8
                                                                                                       -9)
                                                                                                      (("1"
                                                                                                        (reveal
                                                                                                         -9)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (reveal
                                                                                                     -8)
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (reveal
                                                                                                   -6)
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (reveal
                                                                                                   -8)
                                                                                                  (("3"
                                                                                                    (rewrite
                                                                                                     "num_arg_delete_ge1")
                                                                                                    (("3"
                                                                                                      (rewrite
                                                                                                       "num_arg_delete_ge1")
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("4"
                                                                                                  (lemma
                                                                                                   "gt_select_delete2")
                                                                                                  (("4"
                                                                                                    (inst?
                                                                                                     -1)
                                                                                                    (("4"
                                                                                                      (assert)
                                                                                                      (("4"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "gt_select_delete")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "f"
                                                                                                                 "1+k"
                                                                                                                 "j"
                                                                                                                 "s")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -5
                                                                                                                       -6
                                                                                                                       -8
                                                                                                                       -9)
                                                                                                                      (("1"
                                                                                                                        (reveal
                                                                                                                         -15
                                                                                                                         -20)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -2
                                                                                                                           1
                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (rewrite
                                                                                                                               "num_arg_delete_ge1")
                                                                                                                              (("1"
                                                                                                                                (reveal
                                                                                                                                 -13
                                                                                                                                 -14)
                                                                                                                                (("1"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (reveal
                                                                                                           -5
                                                                                                           -6)
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             -7
                                                                                                             -8
                                                                                                             -10
                                                                                                             -11
                                                                                                             2
                                                                                                             3)
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("5"
                                                                                                  (lemma
                                                                                                   "gt_delete_delete")
                                                                                                  (("5"
                                                                                                    (inst?
                                                                                                     -1)
                                                                                                    (("5"
                                                                                                      (assert)
                                                                                                      (("5"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "gt_delete_delete")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "f"
                                                                                                                 "1+k"
                                                                                                                 "j"
                                                                                                                 "s")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -5
                                                                                                                       -6
                                                                                                                       -8
                                                                                                                       -9
                                                                                                                       -10
                                                                                                                       -11)
                                                                                                                      (("1"
                                                                                                                        (reveal
                                                                                                                         -14
                                                                                                                         -15
                                                                                                                         -16
                                                                                                                         -21)
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "num_arg_delete_ge1")
                                                                                                                          (("1"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide
                                                                                                           -3
                                                                                                           -4
                                                                                                           -5
                                                                                                           -6
                                                                                                           -8
                                                                                                           -9
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (reveal
                                                                                                             -11
                                                                                                             -12)
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "is_ac_sym?")
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (reveal
                                                                                 -8)
                                                                                (("3"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (reveal
                                                               -4)
                                                              (("2"
                                                                (lemma
                                                                 "num_arg_delete")
                                                                (("2"
                                                                  (inst?
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide
                                                                       -4
                                                                       -5
                                                                       2)
                                                                      (("2"
                                                                        (reveal
                                                                         -10)
                                                                        (("2"
                                                                          (hide
                                                                           -2)
                                                                          (("2"
                                                                            (rewrite
                                                                             "num_arg_delete_ge1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "n = i")
                                                          (("1"
                                                            (inst
                                                             2
                                                             "j")
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (reveal
                                                                 -5
                                                                 -6)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "n < i")
                                                            (("1"
                                                              (inst
                                                               -2
                                                               "i-1")
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (skolem
                                                                   -1
                                                                   "k")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (lemma
                                                                       "gt_select_delete2")
                                                                      (("1"
                                                                        (inst?
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             1
                                                                             2)
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 -4)
                                                                                (("1"
                                                                                  (case
                                                                                   "j > k")
                                                                                  (("1"
                                                                                    (inst
                                                                                     1
                                                                                     "k")
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "num_arg_delete")
                                                                                        (("1"
                                                                                          (inst?
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "gt_select_delete")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "f"
                                                                                           "j"
                                                                                           "k"
                                                                                           "s")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -5
                                                                                               -6
                                                                                               -8
                                                                                               -9
                                                                                               2)
                                                                                              (("2"
                                                                                                (reveal
                                                                                                 -11
                                                                                                 -12
                                                                                                 -13
                                                                                                 -18)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -6)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "num_arg_delete_ge1")
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (lemma
                                                                                         "delete_ac_num_arg_gt1")
                                                                                        (("3"
                                                                                          (inst?
                                                                                           -1)
                                                                                          (("3"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "is_ac_sym?"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "equal?"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (prop)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -7
                                                                                                         -8
                                                                                                         -9
                                                                                                         -10
                                                                                                         -11
                                                                                                         -12
                                                                                                         -13)
                                                                                                        (("1"
                                                                                                          (reveal
                                                                                                           -16
                                                                                                           -21)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "delete_ac_num_arg_gt1")
                                                                                                            (("1"
                                                                                                              (inst?
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (prop)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "is_ac_sym?"
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (reveal
                                                                                                                     -18
                                                                                                                     -20)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "is_ac_sym?"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (replace
                                                                                                         -2
                                                                                                         1
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -4
                                                                                                           -7
                                                                                                           -8
                                                                                                           -9
                                                                                                           -10
                                                                                                           -11
                                                                                                           -12
                                                                                                           -13)
                                                                                                          (("2"
                                                                                                            (reveal
                                                                                                             -17
                                                                                                             -22)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "delete_ac_num_arg_gt1")
                                                                                                              (("2"
                                                                                                                (inst?
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (prop)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "is_ac_sym?"
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (reveal
                                                                                                                       -19
                                                                                                                       -21)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "is_ac_sym?"
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (replace
                                                                                                         -2
                                                                                                         1
                                                                                                         rl)
                                                                                                        (("3"
                                                                                                          (hide
                                                                                                           -1
                                                                                                           -2
                                                                                                           -4)
                                                                                                          (("3"
                                                                                                            (inst
                                                                                                             1
                                                                                                             "n"
                                                                                                             "j-1")
                                                                                                            (("3"
                                                                                                              (prop)
                                                                                                              (("1"
                                                                                                                (reveal
                                                                                                                 -8)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 -3
                                                                                                                 -4
                                                                                                                 -5
                                                                                                                 -7
                                                                                                                 -8)
                                                                                                                (("2"
                                                                                                                  (reveal
                                                                                                                   -17)
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     "num_arg_delete_ge1")
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("4"
                                                                                                                (reveal
                                                                                                                 -12)
                                                                                                                (("4"
                                                                                                                  (rewrite
                                                                                                                   "num_arg_delete_ge1")
                                                                                                                  (("4"
                                                                                                                    (reveal
                                                                                                                     -11)
                                                                                                                    (("4"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("5"
                                                                                                                (lemma
                                                                                                                 "gt_select_delete")
                                                                                                                (("5"
                                                                                                                  (inst?
                                                                                                                   -1)
                                                                                                                  (("5"
                                                                                                                    (assert)
                                                                                                                    (("5"
                                                                                                                      (prop)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -1
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "le_select_delete")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "f"
                                                                                                                               "k"
                                                                                                                               "j-1"
                                                                                                                               "s")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (hide
                                                                                                                                   -4
                                                                                                                                   -5
                                                                                                                                   -7
                                                                                                                                   -8
                                                                                                                                   2)
                                                                                                                                  (("1"
                                                                                                                                    (hide
                                                                                                                                     -4
                                                                                                                                     -5
                                                                                                                                     -6)
                                                                                                                                    (("1"
                                                                                                                                      (reveal
                                                                                                                                       -20
                                                                                                                                       -21
                                                                                                                                       -22
                                                                                                                                       -27)
                                                                                                                                      (("1"
                                                                                                                                        (rewrite
                                                                                                                                         "num_arg_delete_ge1")
                                                                                                                                        (("1"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (hide
                                                                                                                         -1
                                                                                                                         -2
                                                                                                                         -3
                                                                                                                         -4
                                                                                                                         -5
                                                                                                                         -7
                                                                                                                         -8
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (reveal
                                                                                                                           -16
                                                                                                                           -17)
                                                                                                                          (("2"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("6"
                                                                                                                (lemma
                                                                                                                 "gt_delete_delete")
                                                                                                                (("6"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "f"
                                                                                                                   "i"
                                                                                                                   "n"
                                                                                                                   "t")
                                                                                                                  (("6"
                                                                                                                    (assert)
                                                                                                                    (("6"
                                                                                                                      (prop)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -1
                                                                                                                         -6)
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "gt_delete_delete")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "f"
                                                                                                                               "j"
                                                                                                                               "k"
                                                                                                                               "s")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (hide
                                                                                                                                   -4
                                                                                                                                   -5
                                                                                                                                   -7
                                                                                                                                   -8
                                                                                                                                   2)
                                                                                                                                  (("1"
                                                                                                                                    (reveal
                                                                                                                                     -16
                                                                                                                                     -17
                                                                                                                                     -18
                                                                                                                                     -23)
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       "num_arg_delete_ge1")
                                                                                                                                      (("1"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (hide
                                                                                                                         -4
                                                                                                                         -5
                                                                                                                         -7
                                                                                                                         -8
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (hide
                                                                                                                           -1
                                                                                                                           -2
                                                                                                                           -3)
                                                                                                                          (("2"
                                                                                                                            (reveal
                                                                                                                             -16
                                                                                                                             -17)
                                                                                                                            (("2"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "is_ac_sym?")
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (reveal
                                                                                               -9)
                                                                                              (("3"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "j <= k")
                                                                                    (("1"
                                                                                      (hide
                                                                                       1)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "k+1")
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             -2
                                                                                             -5
                                                                                             -6
                                                                                             -8
                                                                                             -9)
                                                                                            (("2"
                                                                                              (reveal
                                                                                               -13)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "num_arg_delete_ge1")
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (lemma
                                                                                             "le_select_delete")
                                                                                            (("3"
                                                                                              (inst
                                                                                               -1
                                                                                               "f"
                                                                                               "j"
                                                                                               "k"
                                                                                               "s")
                                                                                              (("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (hide
                                                                                                   -5
                                                                                                   -6
                                                                                                   -8
                                                                                                   -9
                                                                                                   2)
                                                                                                  (("3"
                                                                                                    (reveal
                                                                                                     -13
                                                                                                     -18)
                                                                                                    (("3"
                                                                                                      (rewrite
                                                                                                       "num_arg_delete_ge1")
                                                                                                      (("3"
                                                                                                        (reveal
                                                                                                         -11)
                                                                                                        (("3"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (lemma
                                                                                             "delete_ac_num_arg_gt1")
                                                                                            (("4"
                                                                                              (inst?
                                                                                               -1)
                                                                                              (("4"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "is_ac_sym?"
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -4
                                                                                                     -3
                                                                                                     -11
                                                                                                     -12)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "equal?"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -2
                                                                                                             1
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (prop)
                                                                                                              (("1"
                                                                                                                (reveal
                                                                                                                 -13
                                                                                                                 -15
                                                                                                                 -18)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "delete_ac_num_arg_gt1")
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -9
                                                                                                                     -10
                                                                                                                     -12
                                                                                                                     -13)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "f"
                                                                                                                       "1+k"
                                                                                                                       "s")
                                                                                                                      (("1"
                                                                                                                        (reveal
                                                                                                                         -21)
                                                                                                                        (("1"
                                                                                                                          (prop)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "is_ac_sym?"
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (expand
                                                                                                                             "is_ac_sym?"
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("3"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (lemma
                                                                                                                 "delete_ac_num_arg_gt1")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "f"
                                                                                                                   "1+k"
                                                                                                                   "s")
                                                                                                                  (("2"
                                                                                                                    (prop)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "is_ac_sym?"
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       -5
                                                                                                                       -6
                                                                                                                       -8
                                                                                                                       -9)
                                                                                                                      (("2"
                                                                                                                        (reveal
                                                                                                                         -19
                                                                                                                         -21)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "is_ac_sym?"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (reveal
                                                                                                                       -13
                                                                                                                       -18)
                                                                                                                      (("3"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (inst
                                                                                                                 1
                                                                                                                 "n"
                                                                                                                 "j")
                                                                                                                (("3"
                                                                                                                  (prop)
                                                                                                                  (("1"
                                                                                                                    (reveal
                                                                                                                     -9)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide
                                                                                                                     -5
                                                                                                                     -6
                                                                                                                     -8
                                                                                                                     -9)
                                                                                                                    (("2"
                                                                                                                      (reveal
                                                                                                                       -8
                                                                                                                       -17)
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "num_arg_delete_ge1")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (reveal
                                                                                                                     -11)
                                                                                                                    (("3"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("4"
                                                                                                                    (hide
                                                                                                                     -5
                                                                                                                     -6
                                                                                                                     -8
                                                                                                                     -9)
                                                                                                                    (("4"
                                                                                                                      (reveal
                                                                                                                       -17)
                                                                                                                      (("4"
                                                                                                                        (rewrite
                                                                                                                         "num_arg_delete_ge1")
                                                                                                                        (("4"
                                                                                                                          (rewrite
                                                                                                                           "num_arg_delete_ge1")
                                                                                                                          (("4"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("5"
                                                                                                                    (lemma
                                                                                                                     "gt_select_delete")
                                                                                                                    (("5"
                                                                                                                      (inst?
                                                                                                                       -1)
                                                                                                                      (("5"
                                                                                                                        (assert)
                                                                                                                        (("5"
                                                                                                                          (prop)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               -1
                                                                                                                               -2
                                                                                                                               -3)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "gt_select_delete")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "f"
                                                                                                                                   "1+k"
                                                                                                                                   "j"
                                                                                                                                   "s")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       -3
                                                                                                                                       -4
                                                                                                                                       -6
                                                                                                                                       -7
                                                                                                                                       2)
                                                                                                                                      (("1"
                                                                                                                                        (reveal
                                                                                                                                         -10
                                                                                                                                         -19
                                                                                                                                         -20
                                                                                                                                         -21
                                                                                                                                         -26)
                                                                                                                                        (("1"
                                                                                                                                          (rewrite
                                                                                                                                           "num_arg_delete_ge1")
                                                                                                                                          (("1"
                                                                                                                                            (grind)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide
                                                                                                                             -1
                                                                                                                             -2
                                                                                                                             -3
                                                                                                                             -4
                                                                                                                             -5
                                                                                                                             -6
                                                                                                                             -8
                                                                                                                             -9
                                                                                                                             2)
                                                                                                                            (("2"
                                                                                                                              (reveal
                                                                                                                               -12
                                                                                                                               -13
                                                                                                                               -18
                                                                                                                               -19)
                                                                                                                              (("2"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("6"
                                                                                                                    (lemma
                                                                                                                     "gt_delete_delete")
                                                                                                                    (("6"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "f"
                                                                                                                       "i"
                                                                                                                       "n"
                                                                                                                       "t")
                                                                                                                      (("6"
                                                                                                                        (assert)
                                                                                                                        (("6"
                                                                                                                          (prop)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1
                                                                                                                             -7)
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "gt_delete_delete")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "f"
                                                                                                                                   "1+k"
                                                                                                                                   "j"
                                                                                                                                   "s")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       -5
                                                                                                                                       -6
                                                                                                                                       -7
                                                                                                                                       -8
                                                                                                                                       -9
                                                                                                                                       2)
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         -1
                                                                                                                                         -2)
                                                                                                                                        (("1"
                                                                                                                                          (reveal
                                                                                                                                           -20
                                                                                                                                           -21
                                                                                                                                           -22
                                                                                                                                           -27)
                                                                                                                                          (("1"
                                                                                                                                            (rewrite
                                                                                                                                             "num_arg_delete_ge1")
                                                                                                                                            (("1"
                                                                                                                                              (grind)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide
                                                                                                                             -1
                                                                                                                             -2
                                                                                                                             -3
                                                                                                                             -4
                                                                                                                             -5
                                                                                                                             -6
                                                                                                                             -8
                                                                                                                             -9
                                                                                                                             2)
                                                                                                                            (("2"
                                                                                                                              (reveal
                                                                                                                               -12
                                                                                                                               -13
                                                                                                                               -18
                                                                                                                               -19)
                                                                                                                              (("2"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "is_ac_sym?"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (reveal
                                                                                                   -9)
                                                                                                  (("3"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -3
                                                                                 -4
                                                                                 -6
                                                                                 -7
                                                                                 2)
                                                                                (("2"
                                                                                  (hide
                                                                                   -1
                                                                                   -2)
                                                                                  (("2"
                                                                                    (reveal
                                                                                     -10)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -2
                                                                   -3
                                                                   4)
                                                                  (("2"
                                                                    (grind)
                                                                    (("2"
                                                                      (reveal
                                                                       -5)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (hide
                                                                   -2
                                                                   -3
                                                                   4)
                                                                  (("3"
                                                                    (reveal
                                                                     -9)
                                                                    (("3"
                                                                      (rewrite
                                                                       "num_arg_delete_ge1")
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -1 -2 2)
                                                        (("2"
                                                          (reveal
                                                           -8
                                                           -9
                                                           -10
                                                           -11
                                                           -12)
                                                          (("2"
                                                            (expand
                                                             "are_ac?"
                                                             1)
                                                            (("2"
                                                              (lemma
                                                               "delete_ac_num_arg_gt1")
                                                              (("2"
                                                                (inst?
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "is_ac_sym?"
                                                                     -1)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (hide
                                                                           -1
                                                                           -8
                                                                           -9)
                                                                          (("2"
                                                                            (lemma
                                                                             "delete_ac_num_arg_gt1")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "f"
                                                                               "j"
                                                                               "s")
                                                                              (("2"
                                                                                (reveal
                                                                                 -17)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "is_ac_sym?"
                                                                                     -2)
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (reveal -6)
                                                    (("2"
                                                      (hide -2 -3)
                                                      (("2"
                                                        (lemma
                                                         "ac_delete_size")
                                                        (("2"
                                                          (inst? -1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case "num_arg(f, t) = 1")
                                (("1"
                                  (expand "equal?" -6)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst 2 "j")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "num_arg_ge1")
                                  (("2"
                                    (inst? -1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ac_delete_size formula-decl nil nominal_AC_term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (delete_ac_num_arg_gt1 formula-decl nil nominal_AC_term_properties nil)
    (num_arg_delete_ge1 formula-decl nil nominal_AC_term_properties nil)
    (gt_select_delete2 formula-decl nil nominal_AC_term_properties nil)
    (gt_delete_delete formula-decl nil nominal_AC_term_properties nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (nice_ind? def-decl "bool" nominal_AC_term_properties nil)
    (nice_ind? const-decl "bool" nominal_AC_term_properties nil)
    (gt_select_delete formula-decl nil nominal_AC_term_properties nil)
    (num_arg_delete formula-decl nil nominal_AC_term_properties nil)
    (le_select_delete formula-decl nil nominal_AC_term_properties nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (num_arg_ge1 formula-decl nil nominal_AC_term_properties nil)
    (equal?_num_arg formula-decl nil nominal_AC_equality nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (num_arg def-decl "nat" nominal_AC_term_properties nil)
    (<= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (are_ac? const-decl "bool" nominal_AC_term_properties nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "nat" nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (equal?_ext_preservation 0
  (equal?_ext_preservation-1 nil 3881002936
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 ("t"))
      (("" (prop)
        (("" (skeep)
          (("" (lemma "nominal_AC_term_opt")
            (("" (inst -1 "t")
              (("" (prop)
                (("1" (expand "equal?" 1 2)
                  (("1" (assert)
                    (("1" (expand "ext" 1 1)
                      (("1" (expand "equal?" 1)
                        (("1" (iff)
                          (("1" (prop)
                            (("1" (expand "ext" -1)
                              (("1"
                                (lift-if)
                                (("1"
                                  (assert)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (decompose-equality -2)
                                      (("1"
                                        (lemma "act_invariance")
                                        (("1"
                                          (inst -1 "a(s)" "a(t)" "pi")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (decompose-equality 1)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "equal?" 1 2)
                  (("2" (assert)
                    (("2" (expand "ext" 1 1)
                      (("2" (iff)
                        (("2" (prop)
                          (("1" (expand "ext" -1)
                            (("1" (grind) nil nil)) nil)
                           ("2" (expand "ext" -1)
                            (("2" (hide -4) (("2" (grind) nil nil))
                              nil))
                            nil)
                           ("3" (hide -4)
                            (("3" (expand "equal?" -1)
                              (("3"
                                (prop)
                                (("3"
                                  (skeep)
                                  (("3"
                                    (inst -3 "a")
                                    (("3"
                                      (typepred "a")
                                      (("3"
                                        (expand "ds" 1)
                                        (("3"
                                          (expand "ds" -1)
                                          (("3"
                                            (flatten)
                                            (("3"
                                              (rewrite "act_append")
                                              (("3"
                                                (case "var?(s)")
                                                (("1"
                                                  (expand "ext" -2)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite
                                                       "act_append")
                                                      (("1"
                                                        (lemma
                                                         "act_invariance")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "_"
                                                           "_"
                                                           "pi")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "ext" -2)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (expand "equal?" 1)
                            (("4" (hide -6)
                              (("4"
                                (prop)
                                (("1" (grind) nil nil)
                                 ("2" (grind) nil nil)
                                 ("3"
                                  (skeep)
                                  (("3"
                                    (typepred "a")
                                    (("3"
                                      (inst -4 "a")
                                      (("3"
                                        (expand "ds")
                                        (("3"
                                          (flatten)
                                          (("3"
                                            (expand "ext" 1)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (rewrite "act_append")
                                                (("3"
                                                  (rewrite
                                                   "act_append")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (replace -1)
                  (("3" (expand "ext" 1 1)
                    (("3" (hide -2)
                      (("3" (expand "ext" 1 1) (("3" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (inst-cp -3 "term1(t)")
                  (("4" (prop)
                    (("1" (iff)
                      (("1" (prop)
                        (("1" (expand "equal?" 1)
                          (("1" (assert)
                            (("1" (case "pair?(s)")
                              (("1"
                                (assert)
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "ext" -2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "equal?" -2)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (inst
                                             -4
                                             "G"
                                             "pi"
                                             "term1(s)")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst -6 "term2(t)")
                                    (("2"
                                      (prop)
                                      (("1"
                                        (inst -1 "G" "pi" "term2(s)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -4)
                                            (("1"
                                              (expand "ext" -3)
                                              (("1"
                                                (expand "equal?" -3)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand "ext" -1 1)
                                  (("2"
                                    (expand "equal?" -1)
                                    (("2"
                                      (prop)
                                      (("2"
                                        (expand "ext" -1)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (hide -4 -7)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "equal?" -1)
                          (("2" (assert)
                            (("2" (prop)
                              (("2"
                                (expand "ext" 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "equal?" 1)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (inst -4 "G" "pi" " term1(s)")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (inst -7 "term2(t)")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst
                                             -1
                                             "G"
                                             "pi"
                                             "term2(s)")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -3) (("2" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("5" (iff)
                  (("5" (prop)
                    (("1" (expand "ext" -1 1)
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (expand "equal?" 1)
                            (("1" (case "app?(s)")
                              (("1"
                                (prop)
                                (("1"
                                  (expand "equal?" -2)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (hide -8 -4 -5)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "equal?" -2)
                                  (("2"
                                    (prop)
                                    (("2"
                                      (rewrite "ext_num_arg2")
                                      (("2"
                                        (expand "ext" -4)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (rewrite "ext_num_arg2")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (expand "ext" -2 2)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (expand "equal?" -2)
                                      (("3"
                                        (prop)
                                        (("3"
                                          (inst -7 "arg(t)")
                                          (("3"
                                            (prop)
                                            (("1"
                                              (inst
                                               -1
                                               "G"
                                               "pi"
                                               "arg(s)")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand "equal?" -1)
                                  (("2"
                                    (prop)
                                    (("2"
                                      (expand "ext" -1)
                                      (("2"
                                        (hide -7)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "equal?" -1)
                      (("2" (assert)
                        (("2" (prop)
                          (("2" (expand "ext" 1 1)
                            (("2" (expand "equal?" 1)
                              (("2"
                                (prop)
                                (("1"
                                  (hide -7)
                                  (("1"
                                    (expand "ext" 1)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "ext" 1)
                                  (("2" (grind) nil nil))
                                  nil)
                                 ("3"
                                  (expand "ext" 1 2)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (rewrite "ext_num_arg2")
                                      (("3"
                                        (rewrite "ext_num_arg2")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (expand "ext" 1 2)
                                  (("4"
                                    (assert)
                                    (("4"
                                      (inst -7 "arg(t)")
                                      (("4"
                                        (prop)
                                        (("1"
                                          (inst -1 "G" "pi" "arg(s)")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (iff)
                  (("6" (prop)
                    (("1" (expand "ext" -1 1)
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (expand "equal?" -1)
                            (("1" (prop)
                              (("1"
                                (name-replace "f" "ac_sym(t)")
                                (("1"
                                  (case "ac_app?(s)")
                                  (("1"
                                    (expand "equal?" 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (reveal -1)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (case "f = ac_sym(s)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst 1 "i" "j")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (expand
                                                       "num_arg"
                                                       1)
                                                      (("1"
                                                        (expand
                                                         "num_arg"
                                                         -7)
                                                        (("1"
                                                          (rewrite
                                                           "ext_num_arg")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "num_arg"
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "num_arg"
                                                         -9)
                                                        (("2"
                                                          (rewrite
                                                           "ext_num_arg")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide -11)
                                                      (("3"
                                                        (inst
                                                         -13
                                                         "select(f, t)(i)")
                                                        (("3"
                                                          (prop)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "G"
                                                             "pi"
                                                             "select(f, s)(j)")
                                                            (("1"
                                                              (rewrite
                                                               "ext_select")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (expand
                                                                   "select"
                                                                   -11
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "ext"
                                                                     1
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "select"
                                                                       1
                                                                       1)
                                                                      (("1"
                                                                        (rewrite
                                                                         "ext_select")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "ac_select_size")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (hide
                                                       -10
                                                       -6
                                                       -7
                                                       -8
                                                       -9)
                                                      (("4"
                                                        (inst
                                                         -9
                                                         "delete(f, t)(i)")
                                                        (("4"
                                                          (prop)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "G"
                                                             "pi"
                                                             "delete(f, s)(j)")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (rewrite
                                                                 "ext_delete"
                                                                 1)
                                                                (("1"
                                                                  (rewrite
                                                                   "ext_delete"
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "ext"
                                                                     1
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "f")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "ac_delete_size")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (hide -5)
                                                (("2"
                                                  (hide -7)
                                                  (("2"
                                                    (expand "ext" -4)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -3 -6)
                                    (("2"
                                      (expand "ext" -1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "equal?" -1 1)
                      (("2" (assert)
                        (("2" (prop)
                          (("2" (skeep)
                            (("2" (expand "ext" 1 1)
                              (("2"
                                (expand "equal?" 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (expand "ext" 1)
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (expand "ext" 1)
                                      (("2" (propax) nil nil))
                                      nil)
                                     ("3"
                                      (inst 1 "i" "j")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (name-replace
                                           "f"
                                           "ac_sym(t)")
                                          (("3"
                                            (prop)
                                            (("1"
                                              (expand "num_arg" -4)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "num_arg" 1)
                                                  (("1"
                                                    (rewrite
                                                     "ext_num_arg")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "num_arg" -6)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "num_arg" 1)
                                                  (("2"
                                                    (rewrite
                                                     "ext_num_arg")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (inst
                                               -11
                                               "select(f, t)(i)")
                                              (("3"
                                                (prop)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "G"
                                                   "pi"
                                                   "select(f, s)(j)")
                                                  (("1"
                                                    (replace -8)
                                                    (("1"
                                                      (rewrite
                                                       "ext_select")
                                                      (("1"
                                                        (rewrite
                                                         "ext_select")
                                                        (("1"
                                                          (expand
                                                           "ext"
                                                           -1
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "f")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use
                                                   "ac_select_size")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (inst
                                               -11
                                               "delete(f, t)(i)")
                                              (("4"
                                                (prop)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "G"
                                                   "pi"
                                                   "delete(f, s)(j)")
                                                  (("1"
                                                    (rewrite
                                                     "ext_delete"
                                                     -1)
                                                    (("1"
                                                      (rewrite
                                                       "ext_delete"
                                                       -1)
                                                      (("1"
                                                        (replace -9)
                                                        (("1"
                                                          (expand
                                                           "ext"
                                                           -1
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "f")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use
                                                   "ac_delete_size")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (iff)
                  (("7" (prop)
                    (("1" (expand "ext" -1 1)
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (expand "equal?" -1)
                            (("1" (flatten)
                              (("1"
                                (case "abs?(s)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "ext" -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "ext" -2 2)
                                        (("1"
                                          (expand "equal?" 1)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (inst -8 "body(t)")
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "G"
                                                     "pi"
                                                     "body(s)")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (lemma
                                                   "act_invariance")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "abstr(t)"
                                                     "abstr(s)"
                                                     "pi")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "ext" -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "ext" -2 3)
                                        (("2"
                                          (expand "ext" -2 3)
                                          (("2"
                                            (expand "ext" 1)
                                            (("2"
                                              (expand "equal?" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (use
                                                     "ext_preserves_fresh")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst -7 "body(t)")
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "G"
                                                         "pi"
                                                         "ext(cons((abstr(t), abstr(s)), null))(body(s))")
                                                        (("1"
                                                          (name-replace
                                                           "pi1"
                                                           "cons((abstr(t), abstr(s)), null)")
                                                          (("1"
                                                            (name-replace
                                                             "pi2"
                                                             "cons((act(pi)(abstr(t)), act(pi)(abstr(s))), null)")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (rewrite
                                                                   "ext_append"
                                                                   -2
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (rewrite
                                                                     "ext_append"
                                                                     1
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (lemma
                                                                       "equal?_ext_invariance_right")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "G"
                                                                         "append(pi, pi1)"
                                                                         "append(pi2, pi)"
                                                                         "body(s)"
                                                                         "ext(pi)(body(t))")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (decompose-equality
                                                                             1)
                                                                            (("1"
                                                                              (hide
                                                                               -1
                                                                               -2
                                                                               2)
                                                                              (("1"
                                                                                (name-replace
                                                                                 "a"
                                                                                 "x!1")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "act_append")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "act_append")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "pi1"
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "pi2"
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "act"
                                                                                           1
                                                                                           2)
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "act"
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "act"
                                                                                                   1
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "act"
                                                                                                       1
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "act"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "act"
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "act"
                                                                                                       1
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (lift-if)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "act"
                                                                                                           1
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (prop)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "act"
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (expand
                                                                                                 "act"
                                                                                                 1)
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "act"
                                                                                                   3
                                                                                                   1)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "act"
                                                                                                     2
                                                                                                     2)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "act"
                                                                                                       2
                                                                                                       2)
                                                                                                      (("3"
                                                                                                        (lift-if)
                                                                                                        (("3"
                                                                                                          (prop)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "act"
                                                                                                             -1
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "act_invariance")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "a"
                                                                                                                 "abstr(t)"
                                                                                                                 "pi")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "act"
                                                                                                             -1
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "act_invariance")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "a"
                                                                                                                 "abstr(s)"
                                                                                                                 "pi")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (expand
                                                                                                             "act"
                                                                                                             2
                                                                                                             2)
                                                                                                            (("3"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -2 -5)
                                  (("2"
                                    (grind)
                                    (("2"
                                      (expand "ext" -1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "equal?" -1)
                      (("2" (assert)
                        (("2" (prop)
                          (("1" (expand "ext" 1 1)
                            (("1" (expand "ext" 1 2)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "equal?" 1)
                                  (("1"
                                    (inst -6 "body(t)")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (inst -1 "G" "pi" "body(s)")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "ext" 2)
                            (("2" (assert)
                              (("2"
                                (expand "equal?" 2)
                                (("2"
                                  (prop)
                                  (("1"
                                    (lemma "act_invariance")
                                    (("1"
                                      (inst
                                       -1
                                       "abstr(t)"
                                       "abstr(s)"
                                       "pi")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "ext_preserves_fresh")
                                    (("2"
                                      (inst
                                       -1
                                       "G"
                                       "abstr(t)"
                                       "pi"
                                       "body(s)")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (name-replace
                                     "pi2"
                                     "cons((act(pi)(abstr(t)), act(pi)(abstr(s))), null)")
                                    (("3"
                                      (name-replace
                                       "pi1"
                                       "cons((abstr(t), abstr(s)), null)")
                                      (("3"
                                        (inst -6 "body(t)")
                                        (("3"
                                          (prop)
                                          (("1"
                                            (inst
                                             -1
                                             "G"
                                             "pi"
                                             "ext(pi1)(body(s))")
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (rewrite
                                                 "ext_append"
                                                 -1
                                                 :dir
                                                 rl)
                                                (("1"
                                                  (rewrite
                                                   "ext_append"
                                                   1
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (lemma
                                                     "equal?_ext_invariance_right")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "append(pi2, pi)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide
                                                             -1
                                                             -2
                                                             -3
                                                             2)
                                                            (("1"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (name-replace
                                                                 "a"
                                                                 "x!1")
                                                                (("1"
                                                                  (rewrite
                                                                   "act_append")
                                                                  (("1"
                                                                    (rewrite
                                                                     "act_append")
                                                                    (("1"
                                                                      (expand
                                                                       "pi1"
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "pi2"
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "act"
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "act"
                                                                             1
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "act"
                                                                               1
                                                                               2)
                                                                              (("1"
                                                                                (expand
                                                                                 "act"
                                                                                 1
                                                                                 4)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       :dir
                                                                                       rl)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "act"
                                                                                         1
                                                                                         2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "act"
                                                                                           1
                                                                                           2)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (replace
                                                                                       -1
                                                                                       :dir
                                                                                       rl)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "act"
                                                                                         1
                                                                                         2)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "act"
                                                                                           1
                                                                                           2)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "act"
                                                                                             1
                                                                                             5)
                                                                                            (("2"
                                                                                              (lift-if)
                                                                                              (("2"
                                                                                                (prop)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "act_invariance")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "a"
                                                                                                     "abstr(t)"
                                                                                                     "pi")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (expand
                                                                                       "act"
                                                                                       2
                                                                                       2)
                                                                                      (("3"
                                                                                        (lift-if)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "act"
                                                                                           2
                                                                                           1)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "act"
                                                                                             2
                                                                                             3)
                                                                                            (("3"
                                                                                              (expand
                                                                                               "act"
                                                                                               2
                                                                                               6)
                                                                                              (("3"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "act_invariance")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "a"
                                                                                                     "abstr(t)"
                                                                                                     "pi")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (lemma
                                                                                                   "act_invariance")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "a"
                                                                                                     "abstr(s)"
                                                                                                     "pi")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi1 skolem-const-decl "(cons?)" nominal_AC_equality nil)
    (pi2 skolem-const-decl "(cons?)" nominal_AC_equality nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ext_preserves_fresh formula-decl nil nominal_AC_freshness nil)
    (ext_append formula-decl nil nominal_AC_term_properties nil)
    (equal?_ext_invariance_right formula-decl nil nominal_AC_equality nil)
    (pi1 skolem-const-decl "(cons?)" nominal_AC_equality nil)
    (pi2 skolem-const-decl "(cons?)" nominal_AC_equality nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (f skolem-const-decl "ac_symbol" nominal_AC_equality nil)
    (f skolem-const-decl "ac_symbol" nominal_AC_equality nil)
    (ext_delete formula-decl nil nominal_AC_term_properties nil)
    (ac_delete_size formula-decl nil nominal_AC_term_properties nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (ext_select formula-decl nil nominal_AC_term_properties nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (ac_select_size formula-decl nil nominal_AC_term_properties nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (num_arg def-decl "nat" nominal_AC_term_properties nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (string type-eq-decl nil strings nil)
    (ext_num_arg formula-decl nil nominal_AC_term_properties nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ext_num_arg2 formula-decl nil nominal_AC_term_properties nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (/= const-decl "boolean" notequal nil)
    (ds const-decl "set[atom]" atoms nil)
    (abs adt-constructor-decl "[[atom, nominal_AC_term] -> (abs?)]" nominal_AC_term_adt nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_app adt-constructor-decl "[[ac_symbol, nominal_AC_term] -> (ac_app?)]"
     nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (app adt-constructor-decl "[[f_symbol, nominal_AC_term] -> (app?)]" nominal_AC_term_adt
     nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (pair adt-constructor-decl "[[nominal_AC_term, nominal_AC_term] -> (pair?)]" nominal_AC_term_adt
     nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (unit adt-constructor-decl "(unit?)" nominal_AC_term_adt nil)
    (unit? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (s skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]" nominal_AC_equality nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (t skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]" nominal_AC_equality nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (pi skolem-const-decl "perm" nominal_AC_equality nil)
    (append def-decl "list[T]" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (act_append formula-decl nil atoms nil)
    (a skolem-const-decl "(ds(p(t), p(s)))" nominal_AC_equality nil)
    (a skolem-const-decl "(ds(append(pi, p(t)), p(ext(pi)(s))))"
     nominal_AC_equality nil)
    (act def-decl "atom" atoms nil)
    (at adt-constructor-decl "[atom -> (atom?)]" nominal_AC_term_adt nil)
    (a adt-accessor-decl "[(atom?) -> atom]" nominal_AC_term_adt nil)
    (atom? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (nominal_AC_term_at_extensionality formula-decl nil nominal_AC_term_adt nil)
    (act_invariance formula-decl nil atoms nil)
    (nominal_AC_term_opt formula-decl nil nominal_AC_term_properties nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "nat" nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (equal?_fresh_invariance 0
  (equal?_fresh_invariance-1 nil 3881054946
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (lemma "nominal_AC_term_opt")
            (("" (inst?)
              (("" (prop)
                (("1" (expand "ext" 1)
                  (("1" (lift-if)
                    (("1" (assert)
                      (("1" (expand "equal?" 1)
                        (("1" (decompose-equality 1)
                          (("1" (inst -4 "a(t)")
                            (("1" (expand "fresh" -4)
                              (("1" (propax) nil nil)) nil)
                             ("2" (expand "ds" 1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "ext" 1)
                  (("2" (assert)
                    (("2" (expand "equal?" 1)
                      (("2" (skeep)
                        (("2" (typepred "a")
                          (("2" (expand "fresh" -5)
                            (("2" (inst -5 "act(p(t))(a)")
                              (("1"
                                (rewrite "act_append" :dir rl)
                                (("1"
                                  (lemma "act_reverse_aux1")
                                  (("1"
                                    (inst -1 "reverse(p(t))")
                                    (("1"
                                      (rewrite "reverse_reverse")
                                      (("1"
                                        (replace -1 :dir rl)
                                        (("1"
                                          (expand "act" -6)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "ds")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (rewrite "act_append")
                                    (("2"
                                      (rewrite "act_append")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (replace -1) (("3" (grind) nil nil)) nil)
                 ("4" (replace -2 1)
                  (("4" (expand "ext" 1)
                    (("4" (expand "equal?" 1)
                      (("4" (prop)
                        (("1" (inst -3 "term1(t)")
                          (("1" (prop)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (typepred "a")
                                    (("1"
                                      (inst -4 "a")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (inst -3 "term2(t)")
                          (("2" (prop)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (typepred "a")
                                    (("1"
                                      (inst -4 "a")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (replace -2 1)
                  (("5" (expand "ext" 1)
                    (("5" (expand "equal?" 1)
                      (("5" (prop)
                        (("1" (rewrite "ext_num_arg2")
                          (("1" (rewrite "ext_num_arg2") nil nil)) nil)
                         ("2" (inst -3 "arg(t)")
                          (("2" (prop)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (typepred "a")
                                    (("1"
                                      (inst -4 "a")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (replace -2 1)
                  (("6" (expand "ext" 1)
                    (("6" (expand "equal?" 1)
                      (("6" (inst 1 "1" "1")
                        (("6" (assert)
                          (("6" (name-replace "f" "ac_sym(t)")
                            (("6" (prop)
                              (("1"
                                (use "num_arg_ge1")
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (use "num_arg_ge1")
                                (("2" (assert) nil nil))
                                nil)
                               ("3"
                                (inst -3 "select(f, t)(1)")
                                (("3"
                                  (prop)
                                  (("1"
                                    (inst -1 "G" "pi1" "pi2")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (replace -3 -1)
                                        (("1"
                                          (rewrite "ext_select")
                                          (("1"
                                            (rewrite "ext_select")
                                            (("1"
                                              (expand "ext" -1)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (inst -3 "a")
                                          (("2"
                                            (lemma
                                             "fresh_delete_select")
                                            (("2"
                                              (inst?)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use "ac_select_size")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "f")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (inst -3 "delete(f, t)(1)")
                                (("4"
                                  (prop)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (inst -1 "pi2")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (rewrite "ext_delete")
                                            (("1"
                                              (rewrite "ext_delete")
                                              (("1"
                                                (replace -3 -1)
                                                (("1"
                                                  (expand "ext" -1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (typepred "a")
                                              (("2"
                                                (inst -4 "a")
                                                (("2"
                                                  (lemma
                                                   "fresh_delete_select")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use "ac_delete_size")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (replace -2)
                  (("7" (expand "ext" 1)
                    (("7" (expand "equal?" 1)
                      (("7" (prop)
                        (("1" (inst -4 "body(t)")
                          (("1" (expand "size" -4 2)
                            (("1" (assert)
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (typepred "a")
                                      (("1"
                                        (inst -5 "a")
                                        (("1"
                                          (expand "fresh" -5)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (expand "ds" -2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "ext_reverse_fresh" 1)
                          (("2" (rewrite "act_append" 1 :dir rl)
                            (("2"
                              (inst -4
                               "act(append(reverse(pi2), pi1))(abstr(t))")
                              (("1"
                                (expand "fresh" -4)
                                (("1"
                                  (prop)
                                  (("1"
                                    (lemma "act_reverse_pi")
                                    (("1"
                                      (rewrite "act_append" -2)
                                      (("1"
                                        (inst
                                         -1
                                         "act(pi1)(abstr(t))"
                                         "abstr(t)"
                                         "reverse(pi2)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (rewrite "reverse_reverse")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (name-replace "a" "abstr(t)")
                                (("2"
                                  (expand "ds" 1)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (rewrite "act_append" -1)
                                      (("2"
                                        (name-replace
                                         "b"
                                         "act(pi1)(a)")
                                        (("2"
                                          (rewrite
                                           "act_append"
                                           -1
                                           :dir
                                           rl)
                                          (("2"
                                            (rewrite
                                             "act_append"
                                             -1
                                             :dir
                                             rl)
                                            (("2"
                                              (use "act_reverse_aux1")
                                              (("2"
                                                (replace -1 :dir rl)
                                                (("2"
                                                  (expand "act" -2 2)
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (rewrite
                                                       "act_append"
                                                       -1)
                                                      (("2"
                                                        (lemma
                                                         "act_reverse_pi")
                                                        (("2"
                                                          (reveal -3)
                                                          (("2"
                                                            (inst
                                                             -2
                                                             "act(reverse(pi2))(b)"
                                                             "b"
                                                             "pi1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (hide
                                                                 -3)
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (rewrite
                                                                     "act_append"
                                                                     -2
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (lemma
                                                                       "act_reverse_aux1")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "reverse(pi1)")
                                                                        (("2"
                                                                          (rewrite
                                                                           "reverse_reverse"
                                                                           -1)
                                                                          (("2"
                                                                            (replace
                                                                             -1
                                                                             -3
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (expand
                                                                               "act"
                                                                               -3
                                                                               1)
                                                                              (("2"
                                                                                (lemma
                                                                                 "act_reverse_pi")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "act(pi1)(a)"
                                                                                   "a"
                                                                                   "reverse(pi2)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "reverse_reverse")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (name-replace "a" "abstr(t)")
                          (("3" (reveal -1)
                            (("3" (inst -4 "body(t)")
                              (("3"
                                (prop)
                                (("1"
                                  (rewrite "ext_append" 1 :dir rl)
                                  (("1"
                                    (inst
                                     -1
                                     "G"
                                     "pi1"
                                     "append(cons((act(pi1)(a), act(pi2)(a)), null), pi2)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (skolem 1 "b")
                                          (("1"
                                            (typepred "b")
                                            (("1"
                                              (inst -5 "b")
                                              (("1"
                                                (expand "fresh" -5)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (expand "ds" -2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (rewrite
                                                           "act_append")
                                                          (("1"
                                                            (expand
                                                             "act"
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "act"
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "act"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "ds")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (rewrite
                                                     "act_append")
                                                    (("2"
                                                      (expand
                                                       "act"
                                                       1
                                                       2)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (expand
                                                           "act"
                                                           1
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "act"
                                                             1
                                                             5)
                                                            (("2"
                                                              (expand
                                                               "act"
                                                               1
                                                               10)
                                                              (("2"
                                                                (typepred
                                                                 "b")
                                                                (("2"
                                                                  (expand
                                                                   "ds"
                                                                   -1)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (rewrite
                                                                       "act_append"
                                                                       1)
                                                                      (("2"
                                                                        (lemma
                                                                         "act_reverse_pi")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "b"
                                                                           "act(pi2)(b)"
                                                                           "pi1")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (prop)
                                                                              (("1"
                                                                                (lemma
                                                                                 "act_reverse_pi")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "b"
                                                                                   "act(pi1)(b)"
                                                                                   "pi2")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       -2
                                                                                       :dir
                                                                                       rl)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "act_append"
                                                                                         -2
                                                                                         :dir
                                                                                         rl)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "act_append"
                                                                                           -2
                                                                                           :dir
                                                                                           rl)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "append_assoc"
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "act_append"
                                                                                               -2)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "act_reverse_aux1")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "pi2")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "act"
                                                                                                       -3
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "act_invariance")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "a"
                                                                                                           "b"
                                                                                                           "pi1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 "act_invariance")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "a"
                                                                                   "b"
                                                                                   "pi2")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ext_append formula-decl nil nominal_AC_term_properties nil)
    (a skolem-const-decl "atom" nominal_AC_equality nil)
    (b skolem-const-decl
     "(ds(pi1, append(cons((act(pi1)(a), act(pi2)(a)), null), pi2)))"
     nominal_AC_equality nil)
    (act_invariance formula-decl nil atoms nil)
    (append_assoc formula-decl nil list_props nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (ext_reverse_fresh formula-decl nil nominal_AC_freshness nil)
    (act_reverse_pi formula-decl nil atoms nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ac_app adt-constructor-decl "[[ac_symbol, nominal_AC_term] -> (ac_app?)]"
     nominal_AC_term_adt nil)
    (string type-eq-decl nil strings nil)
    (num_arg_ge1 formula-decl nil nominal_AC_term_properties nil)
    (ext_select formula-decl nil nominal_AC_term_properties nil)
    (fresh_delete_select formula-decl nil nominal_AC_freshness nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (f skolem-const-decl "ac_symbol" nominal_AC_equality nil)
    (ac_select_size formula-decl nil nominal_AC_term_properties nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (ext_delete formula-decl nil nominal_AC_term_properties nil)
    (ac_delete_size formula-decl nil nominal_AC_term_properties nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ext_num_arg2 formula-decl nil nominal_AC_term_properties nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (append def-decl "list[T]" list_props nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (a skolem-const-decl "(ds(append(pi1, p(t)), append(pi2, p(t))))"
     nominal_AC_equality nil)
    (act_reverse_aux1 formula-decl nil atoms nil)
    (reverse_reverse formula-decl nil list_props nil)
    (act_append formula-decl nil atoms nil)
    (reverse def-decl "list[T]" list_props nil)
    (a adt-accessor-decl "[(atom?) -> atom]" nominal_AC_term_adt nil)
    (act def-decl "atom" atoms nil)
    (at adt-constructor-decl "[atom -> (atom?)]" nominal_AC_term_adt nil)
    (nominal_AC_term_at_extensionality formula-decl nil nominal_AC_term_adt nil)
    (atom? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (t skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]" nominal_AC_equality nil)
    (pi2 skolem-const-decl "perm" nominal_AC_equality nil)
    (pi1 skolem-const-decl "perm" nominal_AC_equality nil)
    (nominal_AC_term_opt formula-decl nil nominal_AC_term_properties nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (fresh def-decl "bool" nominal_AC_freshness nil)
    (ds const-decl "set[atom]" atoms nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "nat" nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (equal?_trans 0
  (equal?_trans-1 nil 3806326702
   ("" (measure-induct "size(t1)" "t1")
    (("" (skolem 1 "t1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "equal?" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (hide -2) (("1" (grind) nil nil)) nil)
                 ("2" (hide -2) (("2" (grind) nil nil)) nil)
                 ("3" (hide -2) (("3" (grind) nil nil)) nil)
                 ("4" (hide -2)
                  (("4" (expand "equal?" -2)
                    (("4" (assert)
                      (("4" (flatten)
                        (("4" (expand "equal?" -5)
                          (("4" (assert)
                            (("4" (flatten)
                              (("4"
                                (replace -3 :dir rl)
                                (("4"
                                  (skeep)
                                  (("4"
                                    (typepred "a")
                                    (("4"
                                      (expand "ds" -1)
                                      (("4"
                                        (flatten)
                                        (("4"
                                          (inst -4 "a")
                                          (("4"
                                            (expand "ds" 1)
                                            (("4"
                                              (flatten)
                                              (("4"
                                                (inst -7 "a")
                                                (("4"
                                                  (expand "ds" 1)
                                                  (("4"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (grind) nil nil)
                 ("6" (expand "equal?" -3)
                  (("6" (assert)
                    (("6" (flatten)
                      (("6" (inst -2 "term1(t1)")
                        (("6" (prop)
                          (("1" (expand "equal?" -6)
                            (("1" (lift-if) (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (expand "equal?" -3)
                  (("7" (assert)
                    (("7" (prop)
                      (("7" (expand "equal?" -6)
                        (("7" (assert)
                          (("7" (flatten)
                            (("7" (hide -5 -8 2 3 4)
                              (("7"
                                (inst -2 "term1(t1)")
                                (("7"
                                  (prop)
                                  (("1"
                                    (inst
                                     -1
                                     "G"
                                     "term1(t2)"
                                     "term1(t3)")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("8" (hide 2 3 4)
                  (("8" (expand "equal?" -3)
                    (("8" (assert)
                      (("8" (prop)
                        (("8" (expand "equal?" -6)
                          (("8" (assert)
                            (("8" (prop)
                              (("8"
                                (inst -2 "term2(t1)")
                                (("8"
                                  (prop)
                                  (("1"
                                    (inst
                                     -1
                                     "G"
                                     "term2(t2)"
                                     "term2(t3)")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("9" (hide 2 3 4 5)
                  (("9" (expand "equal?" -3)
                    (("9" (assert)
                      (("9" (flatten)
                        (("9" (hide -5)
                          (("9" (expand "equal?" -6)
                            (("9" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("10" (expand "equal?" -3)
                  (("10" (assert)
                    (("10" (prop)
                      (("10" (expand "equal?" -7)
                        (("10" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("11" (hide 2 3 4 5)
                  (("11" (expand "equal?" -3)
                    (("11" (assert)
                      (("11" (prop)
                        (("11" (expand "equal?" -7)
                          (("11" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("12" (expand "equal?" -3)
                  (("12" (assert)
                    (("12" (prop)
                      (("12" (expand "equal?" -7)
                        (("12" (assert)
                          (("12" (prop)
                            (("12" (inst -2 "arg(t1)")
                              (("12"
                                (prop)
                                (("1"
                                  (inst -1 "G" " arg(t2)" "arg(t3)")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("13" (assert)
                  (("13" (hide 2 3 4 5 6)
                    (("13" (prop)
                      (("1" (expand "equal?" -3)
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (expand "equal?" -6)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "equal?" -3)
                        (("2" (assert)
                          (("2" (prop)
                            (("2" (expand "equal?" -6)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide -2)
                        (("3" (expand "equal?" -2)
                          (("3" (flatten)
                            (("3" (skeep)
                              (("3"
                                (inst 1 "i" "_")
                                (("3"
                                  (lemma "equal?_ac")
                                  (("3"
                                    (inst
                                     -1
                                     "G"
                                     "ac_sym(t1)"
                                     "t3"
                                     "t2")
                                    (("3"
                                      (assert)
                                      (("3"
                                        (prop)
                                        (("1"
                                          (inst -1 "j")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (skolem -1 "n")
                                              (("1"
                                                (inst 1 "n")
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (hide -3 -4)
                                                    (("1"
                                                      (case
                                                       "equal?(G)(t1, t2)")
                                                      (("1"
                                                        (lemma
                                                         "equal?_num_arg")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "G"
                                                           "ac_sym(t1)"
                                                           "t2"
                                                           "t1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "equal?"
                                                         1)
                                                        (("2"
                                                          (inst
                                                           1
                                                           "i"
                                                           "j")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (reveal -3)
                                                    (("2"
                                                      (hide -14 -5 -15)
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "select(ac_sym(t1), t1)(i)")
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "G"
                                                             "select(ac_sym(t1), t2)(j)"
                                                             "select(ac_sym(t1), t3)(n)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "ac_select_size")
                                                            (("2"
                                                              (inst?
                                                               -1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "is_ac_sym?")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide -3 -12)
                                                    (("3"
                                                      (reveal -5)
                                                      (("3"
                                                        (inst
                                                         -1
                                                         "delete(ac_sym(t1), t1)(i)")
                                                        (("3"
                                                          (prop)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "G"
                                                             "delete(ac_sym(t1), t2)(j)"
                                                             "delete(ac_sym(t1), t3)(n)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "ac_delete_size")
                                                            (("2"
                                                              (inst?
                                                               -1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "equal?(G)(t1, t2)")
                                              (("1"
                                                (lemma
                                                 "equal?_num_arg")
                                                (("1"
                                                  (hide -10 -11 2)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "G"
                                                     "ac_sym(t1)"
                                                     "t2"
                                                     "t1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2 3)
                                                (("2"
                                                  (expand "equal?" 1)
                                                  (("2"
                                                    (inst 1 "i" "j")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (expand "are_ac?")
                                            (("2"
                                              (expand "equal?" -10)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("14" (expand "equal?" -2)
                  (("14" (assert)
                    (("14" (flatten)
                      (("14" (expand "equal?" -4)
                        (("14" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("15" (expand "equal?" -3)
                  (("15" (assert)
                    (("15" (flatten)
                      (("15" (prop)
                        (("1" (expand "equal?" -6)
                          (("1" (assert)
                            (("1" (prop)
                              (("1"
                                (inst -4 "body(t1)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst -1 "G" "body(t2)" "body(t3)")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "equal?" -6)
                          (("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (inst -4 "body(t1)")
                                (("2"
                                  (prop)
                                  (("1"
                                    (replace -4 :dir rl)
                                    (("1"
                                      (inst
                                       -1
                                       "G"
                                       "ext(cons((abstr(t1), abstr(t2)), null))(body(t2))"
                                       "body(t3)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (name-replace
                                           "pi1"
                                           "cons((abstr(t2), abstr(t1)), null)")
                                          (("1"
                                            (name-replace
                                             "pi2"
                                             "cons((abstr(t1), abstr(t2)), null)")
                                            (("1"
                                              (rewrite
                                               "equal?_ext_reverse"
                                               1)
                                              (("1"
                                                (lemma
                                                 "equal?_ext_invariance_right")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "G"
                                                   "pi1"
                                                   "reverse(pi2)"
                                                   "body(t3)"
                                                   "body(t2)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide-all-but 1)
                                                      (("1"
                                                        (expand "pi1")
                                                        (("1"
                                                          (expand
                                                           "pi2")
                                                          (("1"
                                                            (decompose-equality)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("16" (expand "equal?" -2)
                  (("16" (assert)
                    (("16" (flatten)
                      (("16" (prop)
                        (("1" (expand "equal?" -5)
                          (("1" (assert) nil nil)) nil)
                         ("2" (expand "equal?" -5)
                          (("2" (assert)
                            (("2" (prop)
                              (("1"
                                (lemma "equal?_fresh")
                                (("1"
                                  (inst
                                   -1
                                   "G"
                                   "abstr(t1)"
                                   "body(t3)"
                                   "body(t2)")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -5 5 6 7 8 9 10)
                                (("2"
                                  (name-replace
                                   "pi"
                                   "cons((abstr(t2), abstr(t3)), null)")
                                  (("2"
                                    (lemma "equal?_fresh")
                                    (("2"
                                      (inst
                                       -1
                                       "G"
                                       "abstr(t1)"
                                       "ext(pi)(body(t3))"
                                       "body(t2)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lemma "ext_reverse_fresh")
                                          (("2"
                                            (inst
                                             -1
                                             "G"
                                             "abstr(t1)"
                                             "pi"
                                             "body(t3)")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "pi" -1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("17" (expand "equal?" -2)
                  (("17" (assert)
                    (("17" (prop)
                      (("1" (expand "equal?" -5)
                        (("1" (assert)
                          (("1" (prop)
                            (("1" (replace -1 :dir rl)
                              (("1"
                                (name-replace
                                 "pi"
                                 "cons((abstr(t1), abstr(t3)), null)")
                                (("1"
                                  (inst -3 "body(t1)")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (inst
                                       -1
                                       "G"
                                       "body(t2)"
                                       "ext(pi)(body(t3))")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "equal?" -5)
                        (("2" (assert)
                          (("2" (prop)
                            (("1" (replace -1)
                              (("1"
                                (name-replace
                                 "pi"
                                 "cons((abstr(t1), abstr(t3)), null)")
                                (("1"
                                  (inst -5 "body(t1)")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (inst
                                       -1
                                       "G"
                                       "ext(pi)(body(t2))"
                                       "ext(pi)(body(t3))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (rewrite
                                           "equal?_ext_preservation")
                                          nil
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (name-replace "a" "abstr(t1)")
                              (("2"
                                (name-replace "b" "abstr(t2)")
                                (("2"
                                  (name-replace "c" "abstr(t3)")
                                  (("2"
                                    (hide -6 -7 5 6 7 8 9 10)
                                    (("2"
                                      (reveal -3 -4 -5)
                                      (("2"
                                        (name-replace
                                         "pi1"
                                         "cons[[atom, atom]]((a, b), null)")
                                        (("2"
                                          (name-replace
                                           "pi2"
                                           "cons[[atom, atom]]((b, c), null)")
                                          (("2"
                                            (name-replace
                                             "pi3"
                                             "cons[[atom, atom]]((a, c), null)")
                                            (("2"
                                              (inst -8 "body(t1)")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (lemma
                                                   "equal?_ext_preservation")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "G"
                                                     "pi1"
                                                     "ext(pi2)(body(t3))"
                                                     "body(t2)")
                                                    (("1"
                                                      (replace -7)
                                                      (("1"
                                                        (rewrite
                                                         "ext_append"
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (inst? -2)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (reveal
                                                                 -4)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "body(t1)")
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "G"
                                                                       "ext(append(pi1, pi2))(body(t3))"
                                                                       "ext(pi3)(body(t3))")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "equal?_fresh_invariance")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "G"
                                                                             "append(pi1, pi2)"
                                                                             "pi3"
                                                                             "body(t3)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (skolem
                                                                                 1
                                                                                 "d")
                                                                                (("1"
                                                                                  (typepred
                                                                                   "d")
                                                                                  (("1"
                                                                                    (hide
                                                                                     -2
                                                                                     -7
                                                                                     -9
                                                                                     2
                                                                                     5)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "pi1"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "pi2"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "pi3"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "ds"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "act_append"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "act"
                                                                                                   1
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "act"
                                                                                                     1
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "act"
                                                                                                       1
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "act"
                                                                                                         1
                                                                                                         4)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "act"
                                                                                                           1
                                                                                                           3)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "act"
                                                                                                             1
                                                                                                             4)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "act"
                                                                                                               1
                                                                                                               4)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "act"
                                                                                                                 1
                                                                                                                 3)
                                                                                                                (("1"
                                                                                                                  (lift-if)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (prop)
                                                                                                                      (("1"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (replace
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (reveal
                                                                                                                           -2
                                                                                                                           -10)
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "equal?_fresh")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "G"
                                                                                                                               "a"
                                                                                                                               "ext(pi2)(body(t3))"
                                                                                                                               "body(t2)")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   "ext_preserves_fresh")
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "G"
                                                                                                                                     "a"
                                                                                                                                     "pi2"
                                                                                                                                     "body(t3)")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "pi2"
                                                                                                                                         1
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "act"
                                                                                                                                           1
                                                                                                                                           1)
                                                                                                                                          (("2"
                                                                                                                                            (grind)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equal?_fresh_invariance formula-decl nil nominal_AC_equality nil)
    (pi1 skolem-const-decl "(cons?)" nominal_AC_equality nil)
    (pi3 skolem-const-decl "(cons?)" nominal_AC_equality nil)
    (ext_preserves_fresh formula-decl nil nominal_AC_freshness nil)
    (act_append formula-decl nil atoms nil)
    (pi2 skolem-const-decl "(cons?)" nominal_AC_equality nil)
    (ext_append formula-decl nil nominal_AC_term_properties nil)
    (equal?_ext_preservation formula-decl nil nominal_AC_equality nil)
    (equal?_fresh formula-decl nil nominal_AC_equality nil)
    (ext_reverse_fresh formula-decl nil nominal_AC_freshness nil)
    (pi skolem-const-decl "(cons?)" nominal_AC_equality nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (equal?_ext_reverse formula-decl nil nominal_AC_equality nil)
    (reverse def-decl "list[T]" list_props nil)
    (pi2 skolem-const-decl "(cons?)" nominal_AC_equality nil)
    (append def-decl "list[T]" list_props nil)
    (pi1 skolem-const-decl "(cons?)" nominal_AC_equality nil)
    (equal?_ext_invariance_right formula-decl nil nominal_AC_equality nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (equal?_ac formula-decl nil nominal_AC_equality nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (are_ac? const-decl "bool" nominal_AC_term_properties nil)
    (equal?_num_arg formula-decl nil nominal_AC_equality nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (ac_select_size formula-decl nil nominal_AC_term_properties nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (ac_delete_size formula-decl nil nominal_AC_term_properties nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (t3 skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]" nominal_AC_equality nil)
    (a skolem-const-decl "(ds(p(t1), p(t3)))" nominal_AC_equality nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (act def-decl "atom" atoms nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (t1 skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]" nominal_AC_equality nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (t2 skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]" nominal_AC_equality nil)
    (set type-eq-decl nil sets nil)
    (ds const-decl "set[atom]" atoms nil)
    (/= const-decl "boolean" notequal nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "nat" nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (equal?_equiv 0
  (equal?_equiv-1 nil 3808681287
   ("" (expand "equivalence?" 1)
    (("" (skeep)
      (("" (prop)
        (("1" (expand "reflexive?" 1)
          (("1" (skeep) (("1" (rewrite "equal?_ref") nil nil)) nil))
          nil)
         ("2" (expand "symmetric?" 1)
          (("2" (skeep)
            (("2" (lemma "equal?_sym")
              (("2" (inst -1 "G" "y" "x") (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (expand "transitive?" 1)
          (("3" (skeep)
            (("3" (lemma "equal?_trans")
              (("3" (inst -1 "G" "x" "y" "z") (("3" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((transitive? const-decl "bool" relations nil)
    (equal?_trans formula-decl nil nominal_AC_equality nil)
    (symmetric? const-decl "bool" relations nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil)
    (reflexive? const-decl "bool" relations nil)
    (equal?_ref formula-decl nil nominal_AC_equality nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (equivalence? const-decl "bool" relations nil))
   SHOSTAK))
 (equal?_select_delete 0
  (equal?_select_delete-1 nil 3807566014
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "equal?" -1)
              (("" (lift-if)
                (("" (prop)
                  (("1" (inst 1 "0" "0")
                    (("1" (lemma "nominal_AC_term_at_eta")
                      (("1" (inst -1 "t") (("1" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (lemma "nominal_AC_term_times_eta")
                    (("2" (inst? -1)
                      (("2" (inst 2 "0" "0") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("3" (inst 3 "0" "0") (("3" (grind) nil nil)) nil)
                   ("4" (hide 1 2 3)
                    (("4" (reveal -1)
                      (("4" (inst -1 "term1(t)")
                        (("4" (prop)
                          (("1" (inst -1 "G" "f" "term1(s)")
                            (("1" (prop)
                              (("1"
                                (skeep)
                                (("1"
                                  (inst 1 "i" "j")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (lemma "nominal_AC_term_pair_eta")
                                      (("1"
                                        (inst? -1)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -3)
                                      (("2"
                                        (lemma "equal?_num_arg")
                                        (("2"
                                          (inst
                                           -1
                                           "G"
                                           "f"
                                           "term1(s)"
                                           "term1(t)")
                                          (("2"
                                            (assert)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (lemma "equal?_num_arg")
                                      (("3"
                                        (inst
                                         -1
                                         "G"
                                         "f"
                                         "term1(s)"
                                         "term1(t)")
                                        (("3" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide 1 2 3 4)
                    (("5" (inst 1 "0" "0")
                      (("5" (lemma "nominal_AC_term_app_eta")
                        (("5" (inst -1 "t") (("5" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (assert)
                    (("6" (hide 1 2 3 4 5)
                      (("6" (flatten)
                        (("6" (skeep)
                          (("6" (case "f = ac_sym(t)")
                            (("1" (replace -1)
                              (("1"
                                (inst 1 "i-1" "j-1")
                                (("1" (grind) nil nil)
                                 ("2" (assert) nil nil)
                                 ("3" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (inst 2 "0" "0")
                              (("2"
                                (hide -8 -9)
                                (("2"
                                  (reveal -1 -2)
                                  (("2"
                                    (case "equal?(G)(t, s)")
                                    (("1"
                                      (hide -2 -3)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (expand "equal?" 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst 1 "i" "j")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("7" (inst 7 "0" "0") (("7" (grind) nil nil)) nil)
                   ("8" (inst 8 "0" "0") (("8" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nominal_AC_term_at_eta formula-decl nil nominal_AC_term_adt nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nice_ind? const-decl "bool" nominal_AC_term_properties nil)
    (atom? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (nominal_AC_term_times_eta formula-decl nil nominal_AC_term_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (equal?_num_arg formula-decl nil nominal_AC_equality nil)
    (nominal_AC_term_pair_eta formula-decl nil nominal_AC_term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (nominal_AC_term_app_eta formula-decl nil nominal_AC_term_adt nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (j skolem-const-decl "nat" nominal_AC_equality nil)
    (i skolem-const-decl "nat" nominal_AC_equality nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (num_arg def-decl "nat" nominal_AC_term_properties nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nice_ind? def-decl "bool" nominal_AC_term_properties nil)
    (every adt-def-decl "boolean" list_adt nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "nat" nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (equal?_vars 0
  (equal?_vars-1 nil 3848933258
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "equal?" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil)
                 ("4" (inst-cp -5 "term1(t)")
                  (("4" (prop)
                    (("1" (inst -1 "G" "term1(s)")
                      (("1" (assert)
                        (("1" (inst -6 "term2(t)")
                          (("1" (prop)
                            (("1" (inst -1 "G" "term2(s)")
                              (("1" (grind) nil nil)) nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("5" (assert) (("5" (grind) nil nil)) nil)
                 ("6" (assert)
                  (("6" (case "equal?(G)(t, s)")
                    (("1" (flatten)
                      (("1" (name-replace "f" "ac_sym(t)")
                        (("1" (use "subset_antisymmetric[variable]")
                          (("1" (assert)
                            (("1" (hide 2 3 4 5 6 7)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "subset?" 1)
                                  (("1"
                                    (skolem 1 "x")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (hide -5)
                                        (("1"
                                          (use "equal?_ac")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (expand "vars" -2)
                                                (("1"
                                                  (rewrite
                                                   "mem_union_map")
                                                  (("1"
                                                    (skolem -2 "ti")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (expand
                                                         "get_args"
                                                         -2)
                                                        (("1"
                                                          (rewrite
                                                           "map_member4")
                                                          (("1"
                                                            (skolem
                                                             -2
                                                             "i")
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "i")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (skolem
                                                                     -1
                                                                     "j")
                                                                    (("1"
                                                                      (expand
                                                                       "vars"
                                                                       1)
                                                                      (("1"
                                                                        (rewrite
                                                                         "mem_union_map")
                                                                        (("1"
                                                                          (inst
                                                                           1
                                                                           "select(f, s)(j)")
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (expand
                                                                               "get_args"
                                                                               1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "map_member4")
                                                                                (("1"
                                                                                  (inst
                                                                                   1
                                                                                   "j")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (use
                                                                                       "from_min2max_mem[nat]")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -3
                                                                                             -4)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "equal?_num_arg")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "G"
                                                                                                 "f"
                                                                                                 "s"
                                                                                                 "t")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (use
                                                                                             "num_arg_ge1")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (reveal
                                                                               -6)
                                                                              (("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (inst
                                                                                   -13
                                                                                   "ti")
                                                                                  (("2"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "G"
                                                                                       "select(f, s)(j)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (replace
                                                                                       -7)
                                                                                      (("2"
                                                                                        (use
                                                                                         "ac_select_size")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "is_ac_sym?"
                                                                                             1)
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (use
                                                                     "from_min2max_mem2[nat]")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (reveal
                                                                     -6)
                                                                    (("3"
                                                                      (replace
                                                                       -1)
                                                                      (("3"
                                                                        (use
                                                                         "num_arg_ge1")
                                                                        (("3"
                                                                          (use
                                                                           "from_min2max_mem[nat]")
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "are_ac?" 1)
                                                (("2"
                                                  (expand "f" 1)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -4)
                                  (("2"
                                    (lemma "equal?_sym")
                                    (("2"
                                      (inst -1 "G" "s" "t")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "subset?" 1)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (expand "vars" -2)
                                              (("2"
                                                (rewrite
                                                 "mem_union_map")
                                                (("2"
                                                  (skolem -2 "si")
                                                  (("2"
                                                    (prop)
                                                    (("2"
                                                      (reveal -2)
                                                      (("2"
                                                        (replace
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (expand
                                                             "get_args"
                                                             -2)
                                                            (("2"
                                                              (rewrite
                                                               "map_member4")
                                                              (("2"
                                                                (skolem
                                                                 -2
                                                                 "i")
                                                                (("2"
                                                                  (prop)
                                                                  (("2"
                                                                    (lemma
                                                                     "equal?_ac")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "G"
                                                                       "f"
                                                                       "t"
                                                                       "s")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (prop)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "i")
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (skolem
                                                                                 -1
                                                                                 "j")
                                                                                (("1"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -4)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "vars"
                                                                                       1)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "mem_union_map")
                                                                                        (("1"
                                                                                          (inst
                                                                                           1
                                                                                           "select(f, t)(j)")
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (reveal
                                                                                               -7)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "get_args"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "map_member4")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "j")
                                                                                                      (("1"
                                                                                                        (use
                                                                                                         "from_min2max_mem[nat]")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (prop)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "equal?_num_arg")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "G"
                                                                                                                 "f"
                                                                                                                 "s"
                                                                                                                 "t")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (use
                                                                                                               "num_arg_ge1")
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (inst
                                                                                               -12
                                                                                               "select(f, t)(j)")
                                                                                              (("2"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "G"
                                                                                                   "select(f, s)(i)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (use
                                                                                                       "equal?_sym")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (use
                                                                                                   "ac_select_size")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (use
                                                                                 "from_min2max_mem2[nat]")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (use
                                                                                 "from_min2max_mem[nat]")
                                                                                (("3"
                                                                                  (assert)
                                                                                  (("3"
                                                                                    (use
                                                                                     "num_arg_ge1")
                                                                                    (("3"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("7" (inst -4 "body(t)")
                  (("7" (prop)
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (expand "vars" 7)
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("8" (inst -4 "body(t)")
                  (("8" (prop)
                    (("1" (inst? -1)
                      (("1" (assert)
                        (("1" (rewrite "ext_vars")
                          (("1" (expand "vars" 8)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (ext_vars formula-decl nil nominal_AC_term_properties nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (Union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil)
    (subset? const-decl "bool" sets nil)
    (equal?_ac formula-decl nil nominal_AC_equality nil)
    (string type-eq-decl nil strings nil)
    (get_args const-decl "args" nominal_AC_term_properties nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (every adt-def-decl "boolean" list_adt nil)
    (mem_union_map formula-decl nil list_aux_equational_reasoning2parameters nil)
    (num_arg def-decl "nat" nominal_AC_term_properties nil)
    (from_min2max def-decl "list[nat]" list_aux_equational_reasoning nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (map_member4 formula-decl nil list_aux_equational_reasoning2parameters nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (ac_select_size formula-decl nil nominal_AC_term_properties nil)
    (from_min2max_mem formula-decl nil list_aux_equational_reasoning nil)
    (equal?_num_arg formula-decl nil nominal_AC_equality nil)
    (num_arg_ge1 formula-decl nil nominal_AC_term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (from_min2max_mem2 formula-decl nil list_aux_equational_reasoning nil)
    (f skolem-const-decl "ac_symbol" nominal_AC_equality nil)
    (are_ac? const-decl "bool" nominal_AC_term_properties nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "nat" nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (equal?_is_ac_sym 0
  (equal?_is_ac_sym-1 nil 3887806946
   ("" (skeep) (("" (expand "equal?" -1) (("" (grind) nil nil)) nil))
    nil)
   ((equal? def-decl "bool" nominal_AC_equality nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (num_arg def-decl "nat" nominal_AC_term_properties nil))
   shostak))
 (perm?_len 0
  (perm?_len-1 nil 3807091024
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "perm?" -2)
            (("" (prop)
              (("1" (grind) nil nil)
               ("2" (skeep)
                (("2" (inst -3 "remove(args1, i)")
                  (("2" (prop)
                    (("1" (hide -2)
                      (("1" (inst -1 "G" "remove(args2, j)")
                        (("1" (assert)
                          (("1" (hide -1)
                            (("1" (reveal -1)
                              (("1"
                                (hide -2)
                                (("1"
                                  (rewrite "remove_len")
                                  (("1"
                                    (rewrite "remove_len")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (rewrite "remove_len")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((remove def-decl "list[T]" list_aux_equational_reasoning nil)
    (remove_len formula-decl nil list_aux_equational_reasoning nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (perm?_append 0
  (perm?_append-1 nil 3807474968
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "perm?" -1)
              (("" (prop)
                (("1" (expand "append" 1) (("1" (assert) nil nil)) nil)
                 ("2" (skeep)
                  (("2" (expand "perm?" 2)
                    (("2" (prop)
                      (("1" (hide -2 -3 -4 1)
                        (("1" (rewrite "null_append")
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (inst 2 "i" "j")
                        (("1" (prop)
                          (("1" (lemma "nth_append[nominal_AC_term]")
                            (("1" (inst -1 "args1" "args3" "i")
                              (("1"
                                (prop)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (typepred "i")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (replace -1 1)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lemma
                                               "nth_append[nominal_AC_term]")
                                              (("1"
                                                (inst
                                                 -1
                                                 "args2"
                                                 "args4"
                                                 "j")
                                                (("1"
                                                  (typepred "j")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "i")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "remove_append[nominal_AC_term]")
                            (("2" (inst -1 "i" "args1" "args3")
                              (("2"
                                (typepred "i")
                                (("2"
                                  (assert)
                                  (("2"
                                    (replace -2 1)
                                    (("2"
                                      (hide -1 -2)
                                      (("2"
                                        (lemma "remove_append[nominal_AC_term]")
                                        (("2"
                                          (inst -1 "j" "args2" "args4")
                                          (("2"
                                            (typepred "j")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replace -2 1)
                                                (("2"
                                                  (hide -1 -2)
                                                  (("2"
                                                    (reveal -6)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "remove(args1, i)")
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (inst? -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "remove_len[nominal_AC_term]")
                                                          (("2"
                                                            (inst? -1)
                                                            (("2"
                                                              (typepred
                                                               "i")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "j")
                          (("2" (rewrite "length_append")
                            (("2" (assert) nil nil)) nil))
                          nil)
                         ("3" (typepred "i")
                          (("3" (rewrite "length_append")
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null_append formula-decl nil list2set_props structures)
    (length_append formula-decl nil list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth_append formula-decl nil more_list_props structures)
    (remove def-decl "list[T]" list_aux_equational_reasoning nil)
    (remove_len formula-decl nil list_aux_equational_reasoning nil)
    (remove_append formula-decl nil list_aux_equational_reasoning nil)
    (args4 skolem-const-decl "args" nominal_AC_equality nil)
    (j skolem-const-decl "below[length(args2)]" nominal_AC_equality nil)
    (args2 skolem-const-decl "args" nominal_AC_equality nil)
    (args3 skolem-const-decl "args" nominal_AC_equality nil)
    (i skolem-const-decl "below[length(args1)]" nominal_AC_equality nil)
    (args1 skolem-const-decl "args" nominal_AC_equality nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (append def-decl "list[T]" list_props nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (perm?_append2 0
  (perm?_append2-1 nil 3807710074
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 ("args1"))
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "perm?" -1)
              (("" (prop)
                (("1" (case "args1 = null AND args2 = null")
                  (("1" (flatten)
                    (("1" (replace -1 1)
                      (("1" (replace -2 1)
                        (("1" (rewrite "append_null")
                          (("1" (expand "append" 1)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil)
                 ("2" (skeep)
                  (("2"
                    (case "length(args3) = length(args4) AND length(args1) = length(args2)")
                    (("1" (flatten)
                      (("1" (expand "perm?" 2)
                        (("1" (prop)
                          (("1" (assert)
                            (("1" (expand "append" -1)
                              (("1" (propax) nil nil)) nil))
                            nil)
                           ("2" (hide 1 3)
                            (("2" (inst 1 "i" "length(args4) + j")
                              (("1"
                                (prop)
                                (("1"
                                  (lemma "nth_append[nominal_AC_term]")
                                  (("1"
                                    (inst -1 "args1" "args3" "i")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (lemma "nth_append[nominal_AC_term]")
                                            (("1"
                                              (inst
                                               -1
                                               "args4"
                                               "args2"
                                               "length(args4) + j")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "remove_append[nominal_AC_term]")
                                  (("2"
                                    (inst -1 "i" "args1" "args3")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -1 1 nil t)
                                        (("2"
                                          (lemma "remove_append[nominal_AC_term]")
                                          (("2"
                                            (inst
                                             -1
                                             "length(args4) + j"
                                             "args4"
                                             "args2")
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replace -1 1 nil t)
                                                  (("2"
                                                    (reveal -4)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "remove(args1, i)")
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (inst? -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           "remove_len")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "length_append")
                                (("2" (assert) nil nil))
                                nil)
                               ("3"
                                (rewrite "length_append")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "perm?_len")
                      (("2" (inst -1 "G" "args3" "args4")
                        (("2" (assert)
                          (("2" (lemma "perm?_len")
                            (("2" (inst -1 "G" "args1" "args2")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "perm?" 1)
                                  (("2"
                                    (inst 1 "i" "j")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (append def-decl "list[T]" list_props nil)
    (append_null formula-decl nil list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length_append formula-decl nil list_props nil)
    (nth_append formula-decl nil more_list_props structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (remove_len formula-decl nil list_aux_equational_reasoning nil)
    (remove def-decl "list[T]" list_aux_equational_reasoning nil)
    (remove_append formula-decl nil list_aux_equational_reasoning nil)
    (j skolem-const-decl "below[length(args2)]" nominal_AC_equality nil)
    (args2 skolem-const-decl "args" nominal_AC_equality nil)
    (args4 skolem-const-decl "args" nominal_AC_equality nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (args3 skolem-const-decl "args" nominal_AC_equality nil)
    (i skolem-const-decl "below[length(args1)]" nominal_AC_equality nil)
    (args1 skolem-const-decl "args" nominal_AC_equality nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (perm?_len formula-decl nil nominal_AC_equality nil))
   SHOSTAK))
 (perm?_ref 0
  (perm?_ref-1 nil 3807700346
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "perm?" 1)
            (("" (assert)
              (("" (prop)
                (("" (inst 2 "0" "0")
                  (("1" (rewrite "equal?_ref")
                    (("1" (inst -1 "remove(args1, 0)")
                      (("1" (assert)
                        (("1" (rewrite "remove_len")
                          (("1" (assert) (("1" (inst -1 "G") nil nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (args1 skolem-const-decl "args" nominal_AC_equality nil)
    (remove def-decl "list[T]" list_aux_equational_reasoning nil)
    (remove_len formula-decl nil list_aux_equational_reasoning nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (equal?_ref formula-decl nil nominal_AC_equality nil)
    (nth def-decl "T" list_props nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (perm?_sym 0
  (perm?_sym-1 nil 3805994948
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "perm?" 1)
            (("" (prop)
              (("1" (lemma "perm?_len")
                (("1" (inst? -1)
                  (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil))
                nil)
               ("2" (hide -1)
                (("2" (expand "perm?" -1)
                  (("2" (assert)
                    (("2" (prop)
                      (("2" (skeep)
                        (("2" (inst 3 "j" "i")
                          (("2" (prop)
                            (("1" (rewrite "equal?_sym") nil nil)
                             ("2" (hide -1)
                              (("2"
                                (reveal -2)
                                (("2"
                                  (inst -1 "remove(args1, i)")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst
                                         -1
                                         "G"
                                         "remove(args2, j)")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (rewrite "remove_len")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((remove def-decl "list[T]" list_aux_equational_reasoning nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (perm?_len formula-decl nil nominal_AC_equality nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (remove_len formula-decl nil list_aux_equational_reasoning nil)
    (nth def-decl "T" list_props nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (perm?_sym2 0
  (perm?_sym2-1 nil 3844870204
   ("" (skeep)
    (("" (iff)
      (("" (lemma "perm?_sym")
        (("" (prop)
          (("1" (inst -2 "G" "args1" "args2") (("1" (assert) nil nil))
            nil)
           ("2" (inst -2 "G" "args2" "args1") (("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (perm?_sym formula-decl nil nominal_AC_equality nil))
   shostak))
 (perm?_trans_aux 0
  (perm?_trans_aux-1 nil 3807094913
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (skolem 1 "n")
              (("" (prop)
                (("" (expand "perm?" -1)
                  (("" (prop)
                    (("1" (hide 1) (("1" (grind) nil nil)) nil)
                     ("2" (skeep)
                      (("2" (case "n = i")
                        (("1" (inst 2 "j") (("1" (assert) nil nil))
                          nil)
                         ("2" (reveal -1)
                          (("2" (inst -1 "remove(args1, i)")
                            (("2" (prop)
                              (("1"
                                (inst -1 "G" "remove(args2, j)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (case "i > n")
                                    (("1"
                                      (inst -2 "n")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (skolem -1 "k")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (case "j > k")
                                              (("1"
                                                (inst 3 "k")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (hide -4 -6 -7)
                                                      (("1"
                                                        (rewrite
                                                         "gt_nth_remove")
                                                        (("1"
                                                          (rewrite
                                                           "gt_nth_remove")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "perm?"
                                                       1)
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (lemma
                                                           "perm?_len")
                                                          (("1"
                                                            (hide
                                                             -5
                                                             -6
                                                             -8)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (rewrite
                                                                     "remove_len")
                                                                    (("1"
                                                                      (rewrite
                                                                       "remove_len")
                                                                      (("1"
                                                                        (expand
                                                                         "remove"
                                                                         -2)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (expand
                                                                                 "length"
                                                                                 -3
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "length"
                                                                                   -3
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 1 4)
                                                          (("2"
                                                            (hide
                                                             -2
                                                             -8
                                                             2)
                                                            (("2"
                                                              (inst
                                                               1
                                                               "i-1"
                                                               "j-1")
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (rewrite
                                                                   "gt_nth_remove2")
                                                                  (("1"
                                                                    (rewrite
                                                                     "gt_nth_remove2")
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (rewrite
                                                                   "gt_remove_remove")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lemma
                                                                       "gt_remove_remove[nominal_AC_term]")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "j"
                                                                         "args2"
                                                                         "k")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -2
                                                                 -3
                                                                 -5
                                                                 -6)
                                                                (("2"
                                                                  (typepred
                                                                   "j")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (rewrite
                                                                       "remove_len")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide
                                                                 -2
                                                                 -3
                                                                 -5
                                                                 -6)
                                                                (("3"
                                                                  (assert)
                                                                  (("3"
                                                                    (rewrite
                                                                     "remove_len")
                                                                    (("3"
                                                                      (typepred
                                                                       "i")
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "j <= k")
                                                (("1"
                                                  (hide 1)
                                                  (("1"
                                                    (inst 3 "k+1")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (hide
                                                         -4
                                                         -5
                                                         -7
                                                         -8)
                                                        (("1"
                                                          (typepred
                                                           "j")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (rewrite
                                                               "remove_len")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "gt_nth_remove")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "gt_nth_remove2[nominal_AC_term]")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "k+1"
                                                               "args2"
                                                               "j")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (rewrite
                                                                   "remove_len")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (expand
                                                         "perm?"
                                                         1)
                                                        (("3"
                                                          (prop)
                                                          (("1"
                                                            (lemma
                                                             "perm?_len")
                                                            (("1"
                                                              (hide
                                                               -5
                                                               -6)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (rewrite
                                                                     "remove_len")
                                                                    (("1"
                                                                      (rewrite
                                                                       "remove_len")
                                                                      (("1"
                                                                        (expand
                                                                         "remove"
                                                                         -2)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (expand
                                                                                 "length"
                                                                                 -3
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "length"
                                                                                   -3
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 3)
                                                            (("2"
                                                              (inst
                                                               2
                                                               "i-1"
                                                               "j")
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     -3
                                                                     -4
                                                                     -6
                                                                     -7
                                                                     2
                                                                     3
                                                                     4)
                                                                    (("1"
                                                                      (typepred
                                                                       "j")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (reveal
                                                                           -3)
                                                                          (("1"
                                                                            (rewrite
                                                                             "gt_nth_remove2")
                                                                            (("1"
                                                                              (rewrite
                                                                               "gt_nth_remove")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "remove_len")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (rewrite
                                                                   "gt_remove_remove")
                                                                  (("2"
                                                                    (hide
                                                                     -4
                                                                     2
                                                                     3
                                                                     -7
                                                                     -8)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         -3
                                                                         2)
                                                                        (("2"
                                                                          (typepred
                                                                           "j")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (reveal
                                                                               -2)
                                                                              (("2"
                                                                                (lemma
                                                                                 "gt_remove_remove[nominal_AC_term]")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "1+k"
                                                                                   "args2"
                                                                                   "j")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "remove_len")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2
                                                                 3
                                                                 -3
                                                                 -4
                                                                 -6
                                                                 -7)
                                                                (("2"
                                                                  (typepred
                                                                   "j")
                                                                  (("2"
                                                                    (hide
                                                                     -2)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (reveal
                                                                         -1)
                                                                        (("2"
                                                                          (rewrite
                                                                           "remove_len")
                                                                          (("1"
                                                                            (rewrite
                                                                             "remove_len")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (lemma
                                                                             "remove_len[nominal_AC_term]")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "j"
                                                                               "args2")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (assert)
                                                                (("3"
                                                                  (hide
                                                                   -3
                                                                   -4
                                                                   -6
                                                                   -7)
                                                                  (("3"
                                                                    (typepred
                                                                     "i")
                                                                    (("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (rewrite
                                                                         "remove_len")
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "i")
                                          (("2"
                                            (hide -3 -4 -5 2 3 4)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (rewrite "remove_len")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (case "i < n")
                                      (("1"
                                        (hide 1 2)
                                        (("1"
                                          (inst -2 "n-1")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (skolem -1 "k")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (rewrite
                                                   "gt_nth_remove2")
                                                  (("1"
                                                    (case "j > k")
                                                    (("1"
                                                      (inst 2 "k")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (hide
                                                           -3
                                                           -4
                                                           -6
                                                           -7)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           "gt_nth_remove")
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (expand
                                                           "perm?"
                                                           1)
                                                          (("3"
                                                            (prop)
                                                            (("1"
                                                              (hide
                                                               -2
                                                               -4
                                                               -5
                                                               -7)
                                                              (("1"
                                                                (lemma
                                                                 "perm?_len")
                                                                (("1"
                                                                  (inst?
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       -5)
                                                                      (("1"
                                                                        (hide
                                                                         -5
                                                                         -6
                                                                         -7
                                                                         2)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (inst
                                                                   1
                                                                   "i"
                                                                   "j-1")
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (rewrite
                                                                       "gt_nth_remove")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (rewrite
                                                                           "gt_nth_remove2")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (rewrite
                                                                         "gt_remove_remove"
                                                                         -4)
                                                                        (("2"
                                                                          (lemma
                                                                           "gt_remove_remove[nominal_AC_term]")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "j"
                                                                             "args2"
                                                                             "k")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (rewrite
                                                                       "remove_len"
                                                                       1)
                                                                      (("2"
                                                                        (typepred
                                                                         "j")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (rewrite
                                                                       "remove_len"
                                                                       1)
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst 3 "k+1")
                                                      (("2"
                                                        (case "j <= k")
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (hide 2)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (rewrite
                                                                 "remove_len"
                                                                 -2)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "gt_nth_remove2")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "remove_len"
                                                               -2)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide 2)
                                                            (("3"
                                                              (rewrite
                                                               "gt_remove_remove")
                                                              (("3"
                                                                (expand
                                                                 "perm?"
                                                                 1)
                                                                (("3"
                                                                  (prop)
                                                                  (("1"
                                                                    (hide
                                                                     -2
                                                                     -4
                                                                     -5
                                                                     -7
                                                                     2)
                                                                    (("1"
                                                                      (lemma
                                                                       "perm?_len")
                                                                      (("1"
                                                                        (inst?
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             -5)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (inst
                                                                     2
                                                                     "i"
                                                                     "j")
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (rewrite
                                                                         "gt_nth_remove")
                                                                        (("1"
                                                                          (rewrite
                                                                           "gt_nth_remove")
                                                                          (("1"
                                                                            (lemma
                                                                             "remove_len[nominal_AC_term]")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "j"
                                                                               "args2")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (lemma
                                                                           "gt_remove_remove[nominal_AC_term]")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "1+k"
                                                                             "args2"
                                                                             "j")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (lemma
                                                                                 "remove_len[nominal_AC_term]")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "j"
                                                                                   "args2")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -3
                                                                       -4
                                                                       -6
                                                                       -7)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (rewrite
                                                                           "remove_len"
                                                                           1)
                                                                          (("1"
                                                                            (rewrite
                                                                             "remove_len"
                                                                             -2)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (rewrite
                                                                             "remove_len"
                                                                             -2)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (rewrite
                                                                         "remove_len"
                                                                         1)
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (rewrite
                                                 "remove_len"
                                                 1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (rewrite "remove_len" 1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((k skolem-const-decl "nat" nominal_AC_equality nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (args1 skolem-const-decl "args" nominal_AC_equality nil)
    (i skolem-const-decl "below[length(args1)]" nominal_AC_equality nil)
    (n skolem-const-decl "nat" nominal_AC_equality nil)
    (args2 skolem-const-decl "args" nominal_AC_equality nil)
    (j skolem-const-decl "below[length(args2)]" nominal_AC_equality nil)
    (k skolem-const-decl "nat" nominal_AC_equality nil)
    (gt_remove_remove formula-decl nil list_aux_equational_reasoning nil)
    (gt_nth_remove2 formula-decl nil list_aux_equational_reasoning nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (perm?_len formula-decl nil nominal_AC_equality nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (remove_len formula-decl nil list_aux_equational_reasoning nil)
    (gt_nth_remove formula-decl nil list_aux_equational_reasoning nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (<= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (remove def-decl "list[T]" list_aux_equational_reasoning nil)
    (nth def-decl "T" list_props nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (perm?_trans 0
  (perm?_trans-1 nil 3805821573
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            ((""
              (case "length(args1) = length(args2) AND length(args2) = length(args3)")
              (("1" (expand "perm?" 1)
                (("1" (prop)
                  (("1" (expand "perm?" -4)
                    (("1" (assert)
                      (("1" (expand "perm?" -5)
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (expand "perm?" -3)
                    (("2" (assert)
                      (("2" (skeep)
                        (("2" (lemma "perm?_trans_aux")
                          (("2" (inst -1 "G" "args2" "args3")
                            (("2" (assert)
                              (("2"
                                (inst -1 "j")
                                (("2"
                                  (prop)
                                  (("1"
                                    (skolem -1 "n")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (inst 2 "i" "n")
                                        (("1"
                                          (lemma "equal?_trans")
                                          (("1"
                                            (inst
                                             -1
                                             "G"
                                             "nth(args1, i)"
                                             "nth(args2, j)"
                                             "nth(args3, n)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide -1 -3 -4 -7)
                                                (("1"
                                                  (reveal -8)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "remove(args1, i)")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "G"
                                                         "remove(args2, j)"
                                                         "remove(args3, n)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (rewrite
                                                           "remove_len")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "j")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (prop)
                  (("1" (use "perm?_len") (("1" (assert) nil nil)) nil)
                   ("2" (lemma "perm?_len")
                    (("2" (inst -1 "G" "args2" "args3")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (perm?_trans_aux formula-decl nil nominal_AC_equality nil)
    (equal?_trans formula-decl nil nominal_AC_equality nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (remove_len formula-decl nil list_aux_equational_reasoning nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (remove def-decl "list[T]" list_aux_equational_reasoning nil)
    (nth def-decl "T" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (perm?_len formula-decl nil nominal_AC_equality nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (perm?_append3 0
  (perm?_append3-1 nil 3807714035
   ("" (induct "args1")
    (("1" (skeep)
      (("1" (expand "append" 1 1)
        (("1" (expand "append" 1 2) (("1" (propax) nil nil)) nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (hide -1)
          (("2" (skeep)
            (("2" (expand "append" 1 1)
              (("2" (expand "append" 1 3)
                (("2" (expand "perm?" 1)
                  (("2" (inst 1 "0" "length(args2)")
                    (("1" (prop)
                      (("1" (expand "nth" 1 1)
                        (("1" (lemma "nth_append[nominal_AC_term]")
                          (("1" (inst? -1)
                            (("1" (assert)
                              (("1"
                                (expand "length" -1 2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (replace -1 1)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (expand "nth" 1)
                                          (("1"
                                            (rewrite "equal?_ref")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "remove" 1 1)
                        (("2" (lemma "remove_append[nominal_AC_term]")
                          (("2" (inst? -1)
                            (("2" (assert)
                              (("2"
                                (replace -1 1)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (expand "remove" 1)
                                    (("2"
                                      (reveal -3)
                                      (("2"
                                        (inst? -1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "length_append")
                      (("2" (expand "length" 1 2)
                        (("2" (grind) nil nil)) nil))
                      nil)
                     ("3" (expand "length" 1) (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length_append formula-decl nil list_props nil)
    (nth_append formula-decl nil more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (equal?_ref formula-decl nil nominal_AC_equality nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (remove_append formula-decl nil list_aux_equational_reasoning nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (remove def-decl "list[T]" list_aux_equational_reasoning nil)
    (args2 skolem-const-decl "args" nominal_AC_equality nil)
    (args3 skolem-const-decl "args" nominal_AC_equality nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (hd skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]" nominal_AC_equality nil)
    (tail skolem-const-decl
     "list[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]" nominal_AC_equality
     nil)
    (args4 skolem-const-decl "args" nominal_AC_equality nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (append def-decl "list[T]" list_props nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (every adt-def-decl "boolean" list_adt nil))
   SHOSTAK))
 (equal?_perm 0
  (equal?_perm-1 nil 3807112921
   ("" (induct "args1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd1" "tail1"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "equal?" -2)
            (("2" (assert)
              (("2" (prop)
                (("2" (expand "perm?" 2)
                  (("2" (inst 2 "0" "0")
                    (("1" (prop)
                      (("1" (hide -3) (("1" (grind) nil nil)) nil)
                       ("2" (expand "remove" 1 1)
                        (("2" (expand "remove" 1 1)
                          (("2" (assert)
                            (("2" (inst? -3) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (remove def-decl "list[T]" list_aux_equational_reasoning nil)
    (args2 skolem-const-decl "args" nominal_AC_equality nil)
    (tail1 skolem-const-decl
     "list[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]" nominal_AC_equality
     nil)
    (hd1 skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]" nominal_AC_equality nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (every adt-def-decl "boolean" list_adt nil))
   SHOSTAK))
 (perm?_equiv_same_count?_TCC1 0
  (perm?_equiv_same_count?_TCC1-1 nil 3848599723
   ("" (use "equal?_equiv") nil nil)
   ((equal?_equiv formula-decl nil nominal_AC_equality nil)) nil
   (perm?_equiv_same_count? subtype "nominal_AC_equality.equal?(nominal_AC_equality.G)"
    "equiv[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]")))
 (perm?_equiv_same_count? 0
  (perm?_equiv_same_count?-1 nil 3808594560
   ("" (measure-induct "length(args1)" "args1")
    (("1" (skolem 1 ("args1"))
      (("1" (prop)
        (("1" (skeep)
          (("1" (prop)
            (("1" (expand "perm?" -1)
              (("1" (prop)
                (("1" (expand "same_count?" 1)
                  (("1" (skeep) (("1" (grind) nil nil)) nil)) nil)
                 ("2" (skolem -1 ("i" "j"))
                  (("2" (prop)
                    (("2" (expand "same_count?" 2)
                      (("2" (skeep)
                        (("2" (lemma "count_remove[nominal_AC_term]")
                          (("2" (inst -1 "equal?(G)" "i" "args1" "x")
                            (("2" (assert)
                              (("2"
                                (prop)
                                (("1"
                                  (replace -2 2)
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (lemma "count_remove[nominal_AC_term]")
                                      (("1"
                                        (inst
                                         -1
                                         "equal?(G)"
                                         "j"
                                         "args2"
                                         "x")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (replace -2 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst
                                                   -6
                                                   "remove(args1, i)")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "G"
                                                       "remove(args2, j)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "same_count?"
                                                           -1)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "x")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (rewrite
                                                       "remove_len")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -1)
                                              (("2"
                                                (lemma "equal?_trans")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "G"
                                                   "x"
                                                   "nth(args1, i)"
                                                   "nth(args2, j)")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -1 3)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (lemma "count_remove[nominal_AC_term]")
                                      (("2"
                                        (inst
                                         -1
                                         "equal?(G)"
                                         "j"
                                         "args2"
                                         "x")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (prop)
                                            (("1"
                                              (hide -2 -4 -5 2 3)
                                              (("1"
                                                (lemma "equal?_sym")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "G"
                                                   "nth(args2, j)"
                                                   "nth(args1, i)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide -3)
                                                      (("1"
                                                        (lemma
                                                         "equal?_trans")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "G"
                                                           "x"
                                                           "nth(args2, j)"
                                                           "nth(args1, i)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -1 4)
                                              (("2"
                                                (inst
                                                 -4
                                                 "remove(args1, i)")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "G"
                                                     "remove(args2, j)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "same_count?"
                                                         -1)
                                                        (("1"
                                                          (inst -1 "x")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "remove_len")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "perm?" 1)
              (("2" (prop)
                (("1" (expand "same_count?" -2)
                  (("1" (inst -2 "car(args2)")
                    (("1" (expand "count" -2 1)
                      (("1" (assert)
                        (("1" (expand "count" -2 1)
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1" (grind) nil nil)
                               ("2"
                                (hide -1)
                                (("2" (rewrite "equal?_ref") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (expand "same_count?" -1)
                  (("2" (inst -1 "car(args1)")
                    (("1" (expand "count" -1 1)
                      (("1" (assert)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (lemma "count_gt0[nominal_AC_term]")
                              (("1"
                                (inst
                                 -1
                                 "equal?(G)"
                                 "args2"
                                 "car(args1)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (skolem -1 "j")
                                    (("1"
                                      (inst 2 "0" "j")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (expand "nth" 1 1)
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (inst -4 "remove(args1, 0)")
                                          (("2"
                                            (prop)
                                            (("1"
                                              (inst
                                               -1
                                               "G"
                                               "remove(args2, j)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (expand
                                                     "remove"
                                                     1
                                                     1)
                                                    (("1"
                                                      (expand
                                                       "same_count?"
                                                       1)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (hide -2 -3)
                                                          (("1"
                                                            (reveal -6)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "x")
                                                              (("1"
                                                                (lemma
                                                                 "count_remove[nominal_AC_term]")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "equal?(G)"
                                                                   "0"
                                                                   "args1"
                                                                   "x")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         -1)
                                                                        (("1"
                                                                          (lemma
                                                                           "count_remove[nominal_AC_term]")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "equal?(G)"
                                                                             "j"
                                                                             "args2"
                                                                             "x")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "remove"
                                                                                     -4
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -3
                                                                                   -4
                                                                                   2)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "equal?_trans")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "G"
                                                                                         "x"
                                                                                         "car(args1)"
                                                                                         "nth(args2, j)")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "count_remove[nominal_AC_term]")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "equal?(G)"
                                                                           "j"
                                                                           "args2"
                                                                           "x")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (prop)
                                                                              (("1"
                                                                                (hide
                                                                                 -2
                                                                                 -3
                                                                                 -4
                                                                                 2)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "equal?_sym")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "G"
                                                                                     "nth(args2, j)"
                                                                                     "car(args1)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -3)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "nth"
                                                                                           1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "equal?_trans")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "G"
                                                                                               "x"
                                                                                               "nth(args2, j)"
                                                                                               "car(args1)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "remove"
                                                                                 -2)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite "remove_len")
                                              (("1" (assert) nil nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "equal?_ref") nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (hide 2) (("2" (rewrite "equal?_equiv") nil nil)) nil))
      nil))
    nil)
   ((equal?_equiv formula-decl nil nominal_AC_equality nil)
    (count_gt0 formula-decl nil list_aux_equational_reasoning nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (args1 skolem-const-decl "args" nominal_AC_equality nil)
    (equal?_ref formula-decl nil nominal_AC_equality nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (args2 skolem-const-decl "args" nominal_AC_equality nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (count_remove formula-decl nil list_aux_equational_reasoning nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (equal?_trans formula-decl nil nominal_AC_equality nil)
    (remove def-decl "list[T]" list_aux_equational_reasoning nil)
    (remove_len formula-decl nil list_aux_equational_reasoning nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (count def-decl "nat" list_aux_equational_reasoning nil)
    (same_count? const-decl "bool" list_aux_equational_reasoning nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (equivalence? const-decl "bool" relations nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (perm?_get_common_TCC1 0
  (perm?_get_common_TCC1-1 nil 3808408678
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "pos?_len[nominal_AC_term]")
        (("" (replace -3 1)
          (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (every adt-def-decl "boolean" list_adt nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (equivalence? const-decl "bool" relations nil)
    (pos?_len formula-decl nil list_aux_equational_reasoning nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil))
   nil
   (perm?_get_common subtype "nominal_AC_equality.ind1"
    "below[length[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]](args1)]")))
 (perm?_get_common 0
  (perm?_get_common-1 nil 3808475749
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "bool1" "pos?(t, args1, equal?(G))`1")
        (("" (name-replace "bool2" "pos?(t, args2, equal?(G))`1")
          (("" (flatten)
            (("" (name-replace "ind2" "pos?(t, args2, equal?(G))`2")
              (("" (name-replace "ind1" "pos?(t, args1, equal?(G))`2")
                (("" (expand "perm?" 1)
                  (("" (prop)
                    (("1" (expand "bool1")
                      (("1" (expand "bool2")
                        (("1" (lemma "get_common_bool[nominal_AC_term]")
                          (("1" (inst? -1)
                            (("1" (inst -1 "t")
                              (("1"
                                (assert)
                                (("1"
                                  (assert)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (inst 2
                       "pos?(t, get_common(args1, args2, equal?(G)), equal?(G))`2"
                       "0")
                      (("1" (prop)
                        (("1" (expand "nth" 1 2)
                          (("1" (expand "ind1")
                            (("1" (lemma "pos?_cor[nominal_AC_term]")
                              (("1"
                                (inst -1 "equal?(G)" "args1" "t")
                                (("1"
                                  (expand "bool1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide 2)
                                      (("1"
                                        (lemma "pos?_cor[nominal_AC_term]")
                                        (("1"
                                          (inst
                                           -1
                                           "equal?(G)"
                                           "get_common(args1, args2, equal?(G))"
                                           "t")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (lemma "equal?_sym")
                                              (("1"
                                                (inst
                                                 -1
                                                 "G"
                                                 "nth(get_common(args1, args2, equal?(G)), pos?(t, get_common(args1, args2, equal?(G)), equal?(G))`2)"
                                                 "t")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -2)
                                                    (("1"
                                                      (lemma
                                                       "equal?_trans")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "G"
                                                         "nth(get_common(args1, args2, equal?(G)), pos?(t, get_common(args1, args2, equal?(G)), equal?(G))`2)"
                                                         "t"
                                                         "nth(args1, pos?(t, args1, equal?(G))`2)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "bool2" -3)
                                              (("2"
                                                (lemma
                                                 "get_common_bool[nominal_AC_term]")
                                                (("2"
                                                  (inst? -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "remove" 1 2)
                          (("2" (lemma "get_common_remove[nominal_AC_term]")
                            (("2" (inst? -1)
                              (("2"
                                (assert)
                                (("2"
                                  (prop)
                                  (("1"
                                    (replace -1 1)
                                    (("1"
                                      (expand "ind1")
                                      (("1"
                                        (expand "ind2")
                                        (("1"
                                          (rewrite "perm?_ref")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "bool1")
                                    (("2"
                                      (expand "bool2")
                                      (("2"
                                        (lemma "get_common_bool[nominal_AC_term]")
                                        (("2"
                                          (inst? -1)
                                          (("2"
                                            (assert)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "length" 1)
                        (("2" (assert) nil nil)) nil)
                       ("3" (rewrite "pos?_len")
                        (("3" (expand "bool1")
                          (("3" (expand "bool2")
                            (("3" (lemma "get_common_bool[nominal_AC_term]")
                              (("3"
                                (inst? -1)
                                (("3"
                                  (assert)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((perm? def-decl "bool" nominal_AC_equality nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (G skolem-const-decl "fresh_context" nominal_AC_equality nil)
    (args2 skolem-const-decl "args" nominal_AC_equality nil)
    (args1 skolem-const-decl "args" nominal_AC_equality nil)
    (get_common def-decl "list[T]" list_aux_equational_reasoning nil)
    (t skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]" nominal_AC_equality nil)
    (< const-decl "bool" reals nil)
    (ind2 skolem-const-decl "nat" nominal_AC_equality nil)
    (remove def-decl "list[T]" list_aux_equational_reasoning nil)
    (ind1 skolem-const-decl "nat" nominal_AC_equality nil)
    (nth def-decl "T" list_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (perm?_ref formula-decl nil nominal_AC_equality nil)
    (get_common_remove formula-decl nil list_aux_equational_reasoning nil)
    (pos?_cor formula-decl nil list_aux_equational_reasoning nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil)
    (equal?_trans formula-decl nil nominal_AC_equality nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pos?_len formula-decl nil list_aux_equational_reasoning nil)
    (bool1 skolem-const-decl "bool" nominal_AC_equality nil)
    (get_common_bool formula-decl nil list_aux_equational_reasoning nil)
    (bool2 skolem-const-decl "bool" nominal_AC_equality nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (pos? def-decl "[bool, nat]" list_aux_equational_reasoning nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (equivalence? const-decl "bool" relations nil)
    (every adt-def-decl "boolean" list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   SHOSTAK))
 (perm?_get_common_sym 0
  (perm?_get_common_sym-2 nil 3881079431
   ("" (measure-induct "length(args1)" "args1")
    (("1" (skolem 1 ("args1"))
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "get_common" 1 1)
            (("1" (lift-if)
              (("1" (prop)
                (("1" (lemma "get_common_null[nominal_AC_term]")
                  (("1" (hide -3)
                    (("1" (inst? -1)
                      (("1" (assert) (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -2 2)
                  (("2" (lemma "perm?_get_common")
                    (("2" (inst -1 "G" "args2" "args1" "car(args1)")
                      (("2" (assert)
                        (("2"
                          (name-replace "bool2"
                           " pos?(car(args1), args2, equal?(G))`1")
                          (("2"
                            (name-replace "bool1"
                             " pos?(car(args1), args1, equal?(G))`1")
                            (("2"
                              (name-replace "ind1"
                               " pos?(car(args1), args1, equal?(G))`2")
                              (("2"
                                (name-replace
                                 "ind2"
                                 " pos?(car(args1), args2, equal?(G))`2")
                                (("2"
                                  (prop)
                                  (("1"
                                    (rewrite "perm?_sym" 1)
                                    (("1"
                                      (hide 2)
                                      (("1"
                                        (lemma "perm?_trans")
                                        (("1"
                                          (inst
                                           -1
                                           "G"
                                           "get_common(args2, args1, equal?(G))"
                                           "cons(nth(args2, ind2),
                                 get_common(remove(args2, ind2), remove(args1, ind1),
                                            equal?(G)))"
                                           "cons(car(args1),
                                 get_common(cdr(args1), remove(args2, ind2), equal?(G)))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (expand "perm?" 1)
                                                  (("1"
                                                    (inst 1 "0" "0")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         1
                                                         3)
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           1
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "bool2")
                                                            (("1"
                                                              (expand
                                                               "ind2")
                                                              (("1"
                                                                (lemma
                                                                 "pos?_cor[nominal_AC_term]")
                                                                (("1"
                                                                  (inst?
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "equal?_sym")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "G"
                                                                         "nth(args2, pos?(car(args1), args2, equal?(G))`2)"
                                                                         "car(args1)")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "remove"
                                                         1
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "remove"
                                                           1
                                                           3)
                                                          (("2"
                                                            (expand
                                                             "ind1")
                                                            (("2"
                                                              (expand
                                                               "pos?"
                                                               1)
                                                              (("2"
                                                                (reveal
                                                                 4)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (rewrite
                                                                     "equal?_ref")
                                                                    (("2"
                                                                      (expand
                                                                       "remove"
                                                                       2
                                                                       2)
                                                                      (("2"
                                                                        (reveal
                                                                         -8)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "cdr(args1)")
                                                                          (("2"
                                                                            (prop)
                                                                            (("1"
                                                                              (inst?
                                                                               -1)
                                                                              (("1"
                                                                                (lemma
                                                                                 "perm?_sym")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "G"
                                                                                   "get_common(cdr(args1), remove(args2, ind2), equal?(G))"
                                                                                   "get_common(remove(args2, ind2), cdr(args1), equal?(G))")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "bool1")
                                    (("2"
                                      (expand "pos?" 1)
                                      (("2"
                                        (reveal 1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (rewrite "equal?_ref")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (inst -1 "cdr(args1)")
                  (("3" (prop)
                    (("1" (inst -1 "G" "args2")
                      (("1"
                        (case "get_common(args2, cdr(args1), equal?(G)) = get_common(args2, args1, equal?(G))")
                        (("1" (assert) nil nil)
                         ("2" (hide -1 4)
                          (("2" (lemma "get_common_remove_nth[nominal_AC_term]")
                            (("2"
                              (inst -1 "equal?(G)" "args1" "args2" "0")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "remove" -1)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (reveal 1)
                                          (("1" (prop) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (reveal 1)
                                      (("2" (grind) nil nil))
                                      nil)
                                     ("3"
                                      (expand "nth" -1)
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep) (("2" (rewrite "equal?_equiv") nil nil)) nil))
      nil))
    nil)
   ((equal?_equiv formula-decl nil nominal_AC_equality nil)
    (get_common_remove_nth formula-decl nil list_aux_equational_reasoning nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pos? def-decl "[bool, nat]" list_aux_equational_reasoning nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil)
    (pos?_cor formula-decl nil list_aux_equational_reasoning nil)
    (bool2 skolem-const-decl "bool" nominal_AC_equality nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (equal?_ref formula-decl nil nominal_AC_equality nil)
    (G skolem-const-decl "fresh_context" nominal_AC_equality nil)
    (ind1 skolem-const-decl "nat" nominal_AC_equality nil)
    (args1 skolem-const-decl "args" nominal_AC_equality nil)
    (ind2 skolem-const-decl "nat" nominal_AC_equality nil)
    (args2 skolem-const-decl "args" nominal_AC_equality nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (perm?_trans formula-decl nil nominal_AC_equality nil)
    (perm?_sym formula-decl nil nominal_AC_equality nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (remove def-decl "list[T]" list_aux_equational_reasoning nil)
    (bool1 skolem-const-decl "bool" nominal_AC_equality nil)
    (perm?_get_common formula-decl nil nominal_AC_equality nil)
    (get_common_null formula-decl nil list_aux_equational_reasoning nil)
    (get_common def-decl "list[T]" list_aux_equational_reasoning nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (equivalence? const-decl "bool" relations nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (perm?_get_common_sym-1 nil 3808408691
   ("" (measure-induct "length(args1)" "args1")
    (("1" (skolem 1 ("args1"))
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "get_common" 1 1)
            (("1" (lift-if)
              (("1" (prop)
                (("1" (lemma "get_common_null[nominal_AC_term]")
                  (("1" (hide -3)
                    (("1" (inst? -1)
                      (("1" (assert) (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -2 2)
                  (("2" (lemma "perm?_get_common")
                    (("2" (inst -1 "args2" "args1" "car(args1)")
                      (("2" (assert)
                        (("2"
                          (name-replace "bool2"
                           " pos?(car(args1), args2, equal?)`1")
                          (("2"
                            (name-replace "bool1"
                             " pos?(car(args1), args1, equal?)`1")
                            (("2"
                              (name-replace "ind1"
                               " pos?(car(args1), args1, equal?)`2")
                              (("2"
                                (name-replace
                                 "ind2"
                                 " pos?(car(args1), args2, equal?)`2")
                                (("2"
                                  (prop)
                                  (("1"
                                    (rewrite "perm?_sym" 1)
                                    (("1"
                                      (hide 2)
                                      (("1"
                                        (lemma "perm?_trans")
                                        (("1"
                                          (inst
                                           -1
                                           "get_common(args2, args1, equal?)"
                                           "cons(nth(args2, ind2),
                 get_common(remove(args2, ind2), remove(args1, ind1),
                            equal?))"
                                           "cons(car(args1),
                 get_common(cdr(args1), remove(args2, ind2), equal?))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (expand "perm?" 1)
                                                  (("1"
                                                    (inst 1 "0" "0")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         1
                                                         3)
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           1
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "bool2")
                                                            (("1"
                                                              (expand
                                                               "ind2")
                                                              (("1"
                                                                (lemma
                                                                 "pos?_cor[nominal_AC_term]")
                                                                (("1"
                                                                  (inst?
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "equal?_sym")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "nth(args2, pos?(car(args1), args2, equal?)`2)"
                                                                         "car(args1)")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "remove"
                                                         1
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "remove"
                                                           1
                                                           3)
                                                          (("2"
                                                            (expand
                                                             "ind1")
                                                            (("2"
                                                              (expand
                                                               "pos?"
                                                               1)
                                                              (("2"
                                                                (reveal
                                                                 4)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (rewrite
                                                                     "equal?_ref")
                                                                    (("2"
                                                                      (expand
                                                                       "remove"
                                                                       2
                                                                       2)
                                                                      (("2"
                                                                        (reveal
                                                                         -8)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "cdr(args1)")
                                                                          (("2"
                                                                            (prop)
                                                                            (("1"
                                                                              (inst?
                                                                               -1)
                                                                              (("1"
                                                                                (lemma
                                                                                 "perm?_sym")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "get_common(cdr(args1), remove(args2, ind2), equal?)"
                                                                                   "
get_common(remove(args2, ind2), cdr(args1), equal?)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "bool1")
                                    (("2"
                                      (expand "pos?" 1)
                                      (("2"
                                        (reveal 1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (rewrite "equal?_ref")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (inst -1 "cdr(args1)")
                  (("3" (prop)
                    (("1" (inst -1 "args2")
                      (("1"
                        (case "get_common(args2, cdr(args1), equal?) = get_common(args2, args1, equal?)")
                        (("1" (assert) nil nil)
                         ("2" (hide -1 4)
                          (("2" (lemma "get_common_remove_nth[nominal_AC_term]")
                            (("2"
                              (inst -1 "equal?" "args1" "args2" "0")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "remove" -1)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (reveal 1)
                                          (("1" (prop) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (reveal 1)
                                      (("2" (grind) nil nil))
                                      nil)
                                     ("3"
                                      (expand "nth" -1)
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (expand "equivalence?" 1)
      (("2" (hide 2)
        (("2" (prop)
          (("1" (expand "reflexive?" 1)
            (("1" (skeep) (("1" (rewrite "equal?_ref") nil nil)) nil))
            nil)
           ("2" (expand "symmetric?" 1)
            (("2" (skeep)
              (("2" (lemma "equal?_sym")
                (("2" (inst -1 "y" "x") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (expand "transitive?" 1)
            (("3" (skeep)
              (("3" (lemma "equal?_trans")
                (("3" (inst -1 "x" "y" "z") (("3" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (equal?_trans formula-decl nil nominal_AC_equality nil)
    (transitive? const-decl "bool" relations nil)
    (get_common_remove_nth formula-decl nil list_aux_equational_reasoning nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pos? def-decl "[bool, nat]" list_aux_equational_reasoning nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil)
    (pos?_cor formula-decl nil list_aux_equational_reasoning nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (equal?_ref formula-decl nil nominal_AC_equality nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (perm?_trans formula-decl nil nominal_AC_equality nil)
    (perm?_sym formula-decl nil nominal_AC_equality nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (perm?_get_common formula-decl nil nominal_AC_equality nil)
    (get_common_null formula-decl nil list_aux_equational_reasoning nil)
    (get_common def-decl "list[T]" list_aux_equational_reasoning nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (equivalence? const-decl "bool" relations nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (constant type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (perm?_remove_common_get_common 0
  (perm?_remove_common_get_common-2 nil 3881080044
   ("" (measure-induct "length(args1)" "args1")
    (("1" (skolem 1 ("args1"))
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "perm?" 1)
            (("1" (prop)
              (("1" (rewrite "null_append") (("1" (grind) nil nil))
                nil)
               ("2" (inst 2 "0" "_")
                (("1" (expand "nth" 2 1)
                  (("1" (expand "remove" 2 1)
                    (("1" (assert)
                      (("1" (hide -1)
                        (("1"
                          (case "pos?(car(args1), args2, equal?(G))`1")
                          (("1"
                            (inst 2
                             "length(remove_common(args1, args2, equal?(G)))")
                            (("1" (prop)
                              (("1"
                                (lemma "nth_append[nominal_AC_term]")
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (expand "nth" 1)
                                            (("1"
                                              (expand "get_common" 1)
                                              (("1"
                                                (rewrite "equal?_ref")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "get_common" 1)
                                        (("2"
                                          (expand "length" 1 2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "remove_append[nominal_AC_term]")
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -1 1)
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (expand
                                             "remove_common"
                                             1
                                             1)
                                            (("2"
                                              (expand "get_common" 1)
                                              (("2"
                                                (expand "remove" 1 2)
                                                (("2"
                                                  (reveal -3)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "cdr(args1)")
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (inst? -1)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "length_append")
                              (("2"
                                (expand "get_common" 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "length" 1 2)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst 3 "0")
                            (("1" (prop)
                              (("1"
                                (expand "nth" 1)
                                (("1"
                                  (expand "remove_common" 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "append" 1)
                                      (("1"
                                        (rewrite "equal?_ref")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "remove_common" 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "remove" 1 1)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (prop)
                                        (("1"
                                          (rewrite "null_append")
                                          nil
                                          nil)
                                         ("2"
                                          (hide 1)
                                          (("2"
                                            (expand "append" 1)
                                            (("2"
                                              (expand "get_common" 1)
                                              (("2"
                                                (reveal -1)
                                                (("2"
                                                  (inst
                                                   -1
                                                   "cdr(args1)")
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (inst? -1)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "length_append")
                              (("2" (grind) nil nil)) nil))
                            nil)
                           ("3" (hide 2 3)
                            (("3" (lemma "equal?_equiv")
                              (("3" (rewrite "equal?_equiv") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (lemma "equal?_equiv") (("2" (propax) nil nil)) nil)) nil))
    nil)
   ((null_append formula-decl nil list2set_props structures)
    (nth def-decl "T" list_props nil)
    (pos? def-decl "[bool, nat]" list_aux_equational_reasoning nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (length_append formula-decl nil list_props nil)
    (equal?_ref formula-decl nil nominal_AC_equality nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nth_append formula-decl nil more_list_props structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (remove_append formula-decl nil list_aux_equational_reasoning nil)
    (G skolem-const-decl "fresh_context" nominal_AC_equality nil)
    (args2 skolem-const-decl "args" nominal_AC_equality nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (equal?_equiv formula-decl nil nominal_AC_equality nil)
    (remove def-decl "list[T]" list_aux_equational_reasoning nil)
    (args1 skolem-const-decl "args" nominal_AC_equality nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_common def-decl "list[T]" list_aux_equational_reasoning nil)
    (remove_common def-decl "list[T]" list_aux_equational_reasoning nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (append def-decl "list[T]" list_props nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (equivalence? const-decl "bool" relations nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (perm?_remove_common_get_common-1 nil 3808341722
   ("" (measure-induct "length(args1)" "args1")
    (("1" (skolem 1 ("args1"))
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "perm?" 1)
            (("1" (prop)
              (("1" (rewrite "null_append") (("1" (grind) nil nil))
                nil)
               ("2" (inst 2 "0" "_")
                (("1" (expand "nth" 2 1)
                  (("1" (expand "remove" 2 1)
                    (("1" (assert)
                      (("1" (hide -1)
                        (("1"
                          (case "pos?(car(args1), args2, equal?)`1")
                          (("1"
                            (inst 2
                             "length(remove_common(args1, args2, equal?))")
                            (("1" (prop)
                              (("1"
                                (lemma "nth_append[nominal_AC_term]")
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (expand "nth" 1)
                                            (("1"
                                              (expand "get_common" 1)
                                              (("1"
                                                (rewrite "equal?_ref")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "get_common" 1)
                                        (("2"
                                          (expand "length" 1 2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "remove_append[nominal_AC_term]")
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -1 1)
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (expand
                                             "remove_common"
                                             1
                                             1)
                                            (("2"
                                              (expand "get_common" 1)
                                              (("2"
                                                (expand "remove" 1 2)
                                                (("2"
                                                  (reveal -3)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "cdr(args1)")
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (inst? -1)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "length_append")
                              (("2"
                                (expand "get_common" 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "length" 1 2)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst 3 "0")
                            (("1" (prop)
                              (("1"
                                (expand "nth" 1)
                                (("1"
                                  (expand "remove_common" 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "append" 1)
                                      (("1"
                                        (rewrite "equal?_ref")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "remove_common" 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "remove" 1 1)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (prop)
                                        (("1"
                                          (rewrite "null_append")
                                          nil
                                          nil)
                                         ("2"
                                          (hide 1)
                                          (("2"
                                            (expand "append" 1)
                                            (("2"
                                              (expand "get_common" 1)
                                              (("2"
                                                (reveal -1)
                                                (("2"
                                                  (inst
                                                   -1
                                                   "cdr(args1)")
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (inst? -1)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "length_append")
                              (("2" (grind) nil nil)) nil))
                            nil)
                           ("3" (hide 2 3)
                            (("3" (lemma "equal?_equiv")
                              (("3" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (lemma "equal?_equiv") (("2" (propax) nil nil)) nil)) nil))
    nil)
   (nil (nth def-decl "T" list_props nil)
    (pos? def-decl "[bool, nat]" list_aux_equational_reasoning nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (length_append formula-decl nil list_props nil)
    (equal?_ref formula-decl nil nominal_AC_equality nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    nil (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (remove_append formula-decl nil list_aux_equational_reasoning nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (equal?_equiv formula-decl nil nominal_AC_equality nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_common def-decl "list[T]" list_aux_equational_reasoning nil)
    (remove_common def-decl "list[T]" list_aux_equational_reasoning nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (append def-decl "list[T]" list_props nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (equivalence? const-decl "bool" relations nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (constant type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (perm?_get_lst_mult_count_elem 0
  (perm?_get_lst_mult_count_elem-1 nil 3808518221
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (lemma "perm?_equiv_same_count?")
          (("" (inst? -1)
            (("" (assert)
              (("" (hide 2)
                (("" (lemma "same_count?_get_lst_mul[nominal_AC_term]")
                  (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((perm?_equiv_same_count? formula-decl nil nominal_AC_equality nil)
    (same_count?_get_lst_mul formula-decl nil list_aux_equational_reasoning nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (count_elem def-decl "[list[T], list[nat]]" list_aux_equational_reasoning nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (equivalence? const-decl "bool" relations nil)
    (get_lst_mult def-decl "list[T]" list_aux_equational_reasoning nil)
    (append def-decl "list[T]" list_props nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   SHOSTAK))
 (perm?_get_lst_mult_count_elem_cor 0
  (perm?_get_lst_mult_count_elem_cor-1 nil 3844868096
   ("" (skeep)
    (("" (assert)
      (("" (lemma "perm?_get_lst_mult_count_elem")
        (("" (inst -1 "G" "null" "args1" "null")
          (("" (assert)
            (("" (prop)
              (("1" (expand "get_lst_mult" -1 1)
                (("1" (rewrite "append_null") nil nil)) nil)
               ("2" (expand "length" 1) (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (get_lst_mult def-decl "list[T]" list_aux_equational_reasoning nil)
    (append_null formula-decl nil list_props nil)
    (length_null formula-decl nil more_list_props structures)
    (perm?_get_lst_mult_count_elem formula-decl nil nominal_AC_equality nil))
   shostak))
 (ac_perm_args 0
  (ac_perm_args-2 nil 3881080204
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (hide -1)
          (("" (skolem 1 ("G" "s" "f"))
            (("" (prop)
              (("" (expand "are_ac?" -1)
                (("" (flatten)
                  (("" (lemma "equal?_num_arg")
                    (("" (inst? -1)
                      (("" (inst -1 "f")
                        (("" (assert)
                          (("" (expand "equal?" -6)
                            (("" (skeep)
                              ((""
                                (replace -4 (-7 -9 -10 -11) rl)
                                ((""
                                  (hide -1 -2 -3 -4 -5 -6 -7 -8 -9)
                                  ((""
                                    (expand "perm?" 1)
                                    ((""
                                      (prop)
                                      (("1"
                                        (rewrite "get_args_null")
                                        nil
                                        nil)
                                       ("2"
                                        (hide 1)
                                        (("2"
                                          (inst 1 "i-1" "j-1")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (rewrite "get_args_nth")
                                              (("1"
                                                (rewrite
                                                 "get_args_nth")
                                                (("1"
                                                  (hide -1 -2 2)
                                                  (("1"
                                                    (reveal -3 -10 -11)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -1 -2 2)
                                                (("2"
                                                  (reveal -8 -9)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -1)
                                              (("2"
                                                (case
                                                 "num_arg(f, t) > 1")
                                                (("1"
                                                  (reveal -13)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "delete(f, t)(i)")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "G"
                                                         "delete(f, s)(j)"
                                                         "f")
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (rewrite
                                                             "get_args_remove")
                                                            (("1"
                                                              (rewrite
                                                               "get_args_remove")
                                                              (("1"
                                                                (hide
                                                                 -1
                                                                 -3
                                                                 2)
                                                                (("1"
                                                                  (reveal
                                                                   -5
                                                                   -12
                                                                   -13)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               -1
                                                               -3
                                                               2)
                                                              (("2"
                                                                (reveal
                                                                 -10
                                                                 -11)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand
                                                               "are_ac?"
                                                               1)
                                                              (("2"
                                                                (lemma
                                                                 "delete_ac_num_arg_gt1")
                                                                (("2"
                                                                  (inst?
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "is_ac_sym?"
                                                                       -1)
                                                                      (("2"
                                                                        (reveal
                                                                         -5
                                                                         -7)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "equal?"
                                                                               -6)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "num_arg_delete_size")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case
                                                   "num_arg(f, t) = 1")
                                                  (("1"
                                                    (hide 1)
                                                    (("1"
                                                      (expand
                                                       "perm?"
                                                       1)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (reveal -3)
                                                          (("1"
                                                            (case
                                                             "equal?(G)(t, s)")
                                                            (("1"
                                                              (reveal
                                                               -2)
                                                              (("1"
                                                                (lemma
                                                                 "remove_len[nominal_AC_term]")
                                                                (("1"
                                                                  (inst?
                                                                   -1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "get_args_len")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (lemma
                                                                           "remove_len[nominal_AC_term]")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "j-1"
                                                                             "get_args(f)(s)")
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "get_args_len")
                                                                                (("1"
                                                                                  (hide
                                                                                   -4
                                                                                   -5
                                                                                   -8)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (reveal
                                                                                 -11)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "get_args_len")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (reveal
                                                                                 -10)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (reveal
                                                                           -9)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (reveal
                                                                     -8)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "equal?"
                                                               1)
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 "i"
                                                                 "j")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (reveal
                                                                     -7
                                                                     -8
                                                                     -9
                                                                     -10)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (reveal
                                                                         -1
                                                                         -5)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (grind)
                                                            (("2"
                                                              (reveal
                                                               -7
                                                               -8)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "num_arg_ge1")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (reveal -1 -8 -9)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (rewrite
                                                 "get_args_len")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (reveal -6 -7)
                                            (("3"
                                              (rewrite "get_args_len")
                                              (("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_args_null formula-decl nil nominal_AC_term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i skolem-const-decl "nat" nominal_AC_equality nil)
    (length def-decl "nat" list_props nil)
    (f skolem-const-decl "string" nominal_AC_equality nil)
    (t skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]" nominal_AC_equality nil)
    (j skolem-const-decl "nat" nominal_AC_equality nil)
    (s skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]" nominal_AC_equality nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (remove def-decl "list[T]" list_aux_equational_reasoning nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (from_min2max def-decl "list[nat]" list_aux_equational_reasoning nil)
    (get_args_len formula-decl nil nominal_AC_term_properties nil)
    (remove_len formula-decl nil list_aux_equational_reasoning nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (num_arg_ge1 formula-decl nil nominal_AC_term_properties nil)
    (get_args_remove formula-decl nil nominal_AC_term_properties nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (delete_ac_num_arg_gt1 formula-decl nil nominal_AC_term_properties nil)
    (num_arg_delete_size formula-decl nil nominal_AC_term_properties nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (> const-decl "bool" reals nil)
    (get_args_nth formula-decl nil nominal_AC_term_properties nil)
    (num_arg def-decl "nat" nominal_AC_term_properties nil)
    (nice_ind? const-decl "bool" nominal_AC_term_properties nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (equal?_num_arg formula-decl nil nominal_AC_equality nil)
    (get_args const-decl "args" nominal_AC_term_properties nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (every adt-def-decl "boolean" list_adt nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (are_ac? const-decl "bool" nominal_AC_term_properties nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "nat" nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (ac_perm_args-1 nil 3807113299
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (hide -1)
          (("" (skolem 1 ("s" "f"))
            (("" (prop)
              (("" (expand "are_ac?" -1)
                (("" (flatten)
                  (("" (lemma "equal?_num_arg")
                    (("" (inst? -1)
                      (("" (inst -1 "f")
                        (("" (assert)
                          (("" (expand "equal?" -6)
                            (("" (skeep)
                              ((""
                                (replace -4 (-7 -9 -10 -11) rl)
                                ((""
                                  (hide -1 -2 -3 -4 -5 -6 -7 -8 -9)
                                  ((""
                                    (expand "perm?" 1)
                                    ((""
                                      (prop)
                                      (("1"
                                        (rewrite "get_args_null")
                                        nil
                                        nil)
                                       ("2"
                                        (hide 1)
                                        (("2"
                                          (inst 1 "i-1" "j-1")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (rewrite "get_args_nth")
                                              (("1"
                                                (rewrite
                                                 "get_args_nth")
                                                (("1"
                                                  (hide -1 -2 2)
                                                  (("1"
                                                    (reveal -3 -10 -11)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -1 -2 2)
                                                (("2"
                                                  (reveal -8 -9)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -1)
                                              (("2"
                                                (case
                                                 "num_arg(f, t) > 1")
                                                (("1"
                                                  (reveal -13)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "delete(f, t)(i)")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "delete(f, s)(j)"
                                                         "f")
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (rewrite
                                                             "get_args_remove")
                                                            (("1"
                                                              (rewrite
                                                               "get_args_remove")
                                                              (("1"
                                                                (hide
                                                                 -1
                                                                 -3
                                                                 2)
                                                                (("1"
                                                                  (reveal
                                                                   -5
                                                                   -12
                                                                   -13)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               -1
                                                               -3
                                                               2)
                                                              (("2"
                                                                (reveal
                                                                 -10
                                                                 -11)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand
                                                               "are_ac?"
                                                               1)
                                                              (("2"
                                                                (lemma
                                                                 "delete_ac_num_arg_gt1")
                                                                (("2"
                                                                  (inst?
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "is_ac_sym?"
                                                                       -1)
                                                                      (("2"
                                                                        (reveal
                                                                         -5
                                                                         -7)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "equal?"
                                                                               -6)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "num_arg_delete_size")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case
                                                   "num_arg(f, t) = 1")
                                                  (("1"
                                                    (hide 1)
                                                    (("1"
                                                      (expand
                                                       "perm?"
                                                       1)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (reveal -3)
                                                          (("1"
                                                            (case
                                                             "equal?(t, s)")
                                                            (("1"
                                                              (reveal
                                                               -2)
                                                              (("1"
                                                                (lemma
                                                                 "remove_len[nominal_AC_term]")
                                                                (("1"
                                                                  (inst?
                                                                   -1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "get_args_len")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (lemma
                                                                           "remove_len[nominal_AC_term]")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "j-1"
                                                                             "get_args(f)(s)")
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "get_args_len")
                                                                                (("1"
                                                                                  (hide
                                                                                   -4
                                                                                   -5
                                                                                   -8)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (reveal
                                                                                 -11)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "get_args_len")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (reveal
                                                                                 -10)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (reveal
                                                                           -9)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (reveal
                                                                     -8)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "equal?"
                                                               1)
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 "i"
                                                                 "j")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (reveal
                                                                     -7
                                                                     -8
                                                                     -9
                                                                     -10)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (reveal
                                                                         -1
                                                                         -5)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (grind)
                                                            (("2"
                                                              (reveal
                                                               -7
                                                               -8)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "num_arg_ge1")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (reveal -1 -8 -9)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (rewrite
                                                 "get_args_len")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (reveal -6 -7)
                                            (("3"
                                              (rewrite "get_args_len")
                                              (("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil nominal_AC_term_properties nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (are_ac? const-decl "bool" nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (equal?_num_arg formula-decl nil nominal_AC_equality nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nice_ind? const-decl "bool" nominal_AC_term_properties nil)
    (get_args_nth formula-decl nil nominal_AC_term_properties nil)
    (> const-decl "bool" reals nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (num_arg_delete_size formula-decl nil nominal_AC_term_properties nil)
    (delete_ac_num_arg_gt1 formula-decl nil nominal_AC_term_properties nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (get_args_remove formula-decl nil nominal_AC_term_properties nil)
    (num_arg_ge1 formula-decl nil nominal_AC_term_properties nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (remove_len formula-decl nil list_aux_equational_reasoning nil)
    (get_args_len formula-decl nil nominal_AC_term_properties nil)
    (from_min2max def-decl "list[nat]" list_aux_equational_reasoning nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_args_null formula-decl nil nominal_AC_term_properties nil))
   SHOSTAK))
 (ac_perm_args2 0
  (ac_perm_args2-1 nil 3807472958
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "equal?" -1)
              (("" (lift-if)
                (("" (prop)
                  (("1" (rewrite "get_args_not_pair_ac")
                    (("1" (rewrite "get_args_not_pair_ac")
                      (("1" (lemma "equal?_perm")
                        (("1" (hide -1)
                          (("1" (expand "perm?" 1)
                            (("1" (inst 1 "0" "0")
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil)
                               ("3" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("2" (hide 1)
                    (("2" (rewrite "get_args_not_pair_ac")
                      (("1" (rewrite "get_args_not_pair_ac")
                        (("1" (expand "perm?" 1)
                          (("1" (inst 1 "0" "0")
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil)
                             ("3" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil)
                   ("3" (rewrite "get_args_not_pair_ac")
                    (("1" (rewrite "get_args_not_pair_ac")
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("4" (hide 1 2 3)
                    (("4" (lemma "nominal_AC_term_pair_eta")
                      (("4" (inst -1 "t")
                        (("4" (replace -1 1 rl)
                          (("4" (hide -1)
                            (("4" (lemma "nominal_AC_term_pair_eta")
                              (("4"
                                (inst -1 "s")
                                (("4"
                                  (replace -1 1 rl)
                                  (("4"
                                    (rewrite "get_args_pair")
                                    (("4"
                                      (rewrite "get_args_pair")
                                      (("4"
                                        (lemma "perm?_append")
                                        (("4"
                                          (inst? -1)
                                          (("4"
                                            (assert)
                                            (("4"
                                              (hide 2)
                                              (("4"
                                                (prop)
                                                (("1"
                                                  (hide -1 -2 -3 -5)
                                                  (("1"
                                                    (reveal -8)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "term1(t)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (inst? -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 -2 -3 -4)
                                                  (("2"
                                                    (reveal -8)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "term2(t)")
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (inst? -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide 1 2 3 4)
                    (("5" (hide -4)
                      (("5" (rewrite "get_args_not_pair_ac")
                        (("1" (rewrite "get_args_not_pair_ac")
                          (("1" (reveal -1)
                            (("1" (expand "perm?" 1)
                              (("1"
                                (inst 1 "0" "0")
                                (("1"
                                  (prop)
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil))
                                  nil)
                                 ("2" (grind) nil nil)
                                 ("3" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("6" (assert)
                    (("6" (hide 1 2 3 4 5)
                      (("6" (flatten)
                        (("6" (case "ac_sym(t) = f")
                          (("1" (lemma "ac_perm_args")
                            (("1" (inst? -1)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "are_ac?" 1)
                                  (("1"
                                    (expand "equal?" 1)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite "get_args_not_pair_ac")
                            (("1" (rewrite "get_args_not_pair_ac")
                              (("1"
                                (expand "perm?" 2)
                                (("1"
                                  (inst 2 "0" "0")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "nth" 1)
                                      (("1"
                                        (expand "equal?" 1)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (expand "length" 1)
                                    (("2" (grind) nil nil))
                                    nil)
                                   ("3"
                                    (expand "length" 1)
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("7" (rewrite "get_args_not_pair_ac")
                    (("1" (rewrite "get_args_not_pair_ac")
                      (("1" (expand "perm?" 7)
                        (("1" (inst 7 "0" "0")
                          (("1" (grind) nil nil) ("2" (grind) nil nil)
                           ("3" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("8" (rewrite "get_args_not_pair_ac")
                    (("1" (rewrite "get_args_not_pair_ac")
                      (("1" (expand "perm?" 8)
                        (("1" (inst 8 "0" "0")
                          (("1" (grind) nil nil) ("2" (grind) nil nil)
                           ("3" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (length_singleton formula-decl nil more_list_props structures)
    (nth def-decl "T" list_props nil)
    (remove def-decl "list[T]" list_aux_equational_reasoning nil)
    (equal?_perm formula-decl nil nominal_AC_equality nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (get_args_not_pair_ac formula-decl nil nominal_AC_term_properties nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nominal_AC_term_pair_eta formula-decl nil nominal_AC_term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (perm?_append formula-decl nil nominal_AC_equality nil)
    (get_args_pair formula-decl nil nominal_AC_term_properties nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (are_ac? const-decl "bool" nominal_AC_term_properties nil)
    (ac_perm_args formula-decl nil nominal_AC_equality nil)
    (get_args const-decl "args" nominal_AC_term_properties nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (every adt-def-decl "boolean" list_adt nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "nat" nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (perm_args_ac 0
  (perm_args_ac-1 nil 3807127956
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (hide -1)
          (("" (skolem 1 ("G" "s" "f"))
            (("" (prop)
              (("" (expand "are_ac?" -2)
                (("" (flatten)
                  (("" (lemma "perm?_len")
                    (("" (inst? -1)
                      (("" (assert)
                        (("" (rewrite "get_args_len")
                          (("" (rewrite "get_args_len")
                            (("" (hide -1)
                              ((""
                                (expand "perm?" -1)
                                ((""
                                  (prop)
                                  (("1"
                                    (rewrite "get_args_null")
                                    nil
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (expand "equal?" 2)
                                      (("2"
                                        (inst 2 "i+1" "j+1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -5 2 rl)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (typepred "i")
                                                (("1"
                                                  (rewrite
                                                   "get_args_len")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "j")
                                                (("2"
                                                  (rewrite
                                                   "get_args_len")
                                                  (("2"
                                                    (reveal -1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (rewrite
                                                 "get_args_nth")
                                                (("1"
                                                  (rewrite
                                                   "get_args_nth")
                                                  (("1"
                                                    (hide -1 -2 2)
                                                    (("1"
                                                      (reveal -3)
                                                      (("1"
                                                        (typepred "j")
                                                        (("1"
                                                          (rewrite
                                                           "get_args_len")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 -2 2)
                                                  (("2"
                                                    (typepred "i")
                                                    (("2"
                                                      (rewrite
                                                       "get_args_len")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (case
                                                 "num_arg(f, t) > 1")
                                                (("1"
                                                  (reveal -3)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "delete(f, t)(1+i)")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "G"
                                                         "delete(f, s)(1+j)"
                                                         "f")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide 2)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (rewrite
                                                                 "get_args_remove")
                                                                (("1"
                                                                  (rewrite
                                                                   "get_args_remove")
                                                                  (("1"
                                                                    (hide
                                                                     -2
                                                                     -3
                                                                     2)
                                                                    (("1"
                                                                      (reveal
                                                                       -4)
                                                                      (("1"
                                                                        (typepred
                                                                         "j")
                                                                        (("1"
                                                                          (rewrite
                                                                           "get_args_len")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (reveal
                                                                     -2)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -2
                                                                   -3
                                                                   2
                                                                   3)
                                                                  (("2"
                                                                    (typepred
                                                                     "i")
                                                                    (("2"
                                                                      (rewrite
                                                                       "get_args_len")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "are_ac?"
                                                                 1)
                                                                (("2"
                                                                  (hide
                                                                   -2
                                                                   -3
                                                                   2)
                                                                  (("2"
                                                                    (lemma
                                                                     "delete_ac_num_arg_gt1")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "f"
                                                                       "1+i"
                                                                       "t")
                                                                      (("2"
                                                                        (expand
                                                                         "is_ac_sym?"
                                                                         -1)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (hide
                                                                               -1
                                                                               -2)
                                                                              (("2"
                                                                                (reveal
                                                                                 -7)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "delete_ac_num_arg_gt1")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "f"
                                                                                     "1+j"
                                                                                     "s")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "is_ac_sym?"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "ac_delete_size")
                                                        (("2"
                                                          (inst? -1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case
                                                   "num_arg(f, t) = 1")
                                                  (("1"
                                                    (rewrite
                                                     "num_arg1_delete")
                                                    (("1"
                                                      (reveal -1)
                                                      (("1"
                                                        (replace -2 -1)
                                                        (("1"
                                                          (rewrite
                                                           "num_arg1_delete")
                                                          (("1"
                                                            (expand
                                                             "equal?"
                                                             2)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "num_arg_ge1")
                                                    (("2"
                                                      (inst? -1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_args_len formula-decl nil nominal_AC_term_properties nil)
    (get_args_null formula-decl nil nominal_AC_term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nice_ind? const-decl "bool" nominal_AC_term_properties nil)
    (num_arg def-decl "nat" nominal_AC_term_properties nil)
    (get_args_nth formula-decl nil nominal_AC_term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (num_arg1_delete formula-decl nil nominal_AC_term_properties nil)
    (num_arg_ge1 formula-decl nil nominal_AC_term_properties nil)
    (get_args_remove formula-decl nil nominal_AC_term_properties nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (delete_ac_num_arg_gt1 formula-decl nil nominal_AC_term_properties nil)
    (ac_delete_size formula-decl nil nominal_AC_term_properties nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (perm?_len formula-decl nil nominal_AC_equality nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (are_ac? const-decl "bool" nominal_AC_term_properties nil)
    (get_args const-decl "args" nominal_AC_term_properties nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (every adt-def-decl "boolean" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "nat" nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (perm_args_ac_well_formed 0
  (perm_args_ac_well_formed-2 nil 3899124877
   ("" (stop-rewrite "length_null" "length_singleton")
    (("" (skeep)
      (("" (case "is_ac_sym?(t, f)")
        (("1" (case "is_ac_sym?(s, f)")
          (("1" (lemma "perm_args_ac")
            (("1" (inst -1 "G" "s" "f" "t")
              (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
            nil)
           ("2" (expand "well_formed?" -3)
            (("2" (prop)
              (("2" (inst -3 "t")
                (("2" (expand "is_ac_sym?" -1)
                  (("2" (flatten)
                    (("2" (assert)
                      (("2" (replace -2 :dir rl)
                        (("2" (prop)
                          (("1" (lemma "get_args_not_pair_ac")
                            (("1" (inst -1 "f" "s")
                              (("1"
                                (expand "well_formed?" -6)
                                (("1"
                                  (prop)
                                  (("1"
                                    (lemma "perm?_len")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (rewrite "get_args_len")
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite "subterm_reflexive") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "well_formed?" -2)
          (("2" (prop)
            (("2" (lemma "get_args_not_pair_ac")
              (("2" (inst -1 "f" "t")
                (("2" (assert)
                  (("2" (replace -1)
                    (("2" (use "perm?_len")
                      (("2" (assert)
                        (("2" (expand "length" -1 1)
                          (("2" (expand "length" -1 1)
                            (("2" (hide -4)
                              (("2"
                                (expand "well_formed?" -4)
                                (("2"
                                  (prop)
                                  (("2"
                                    (case "is_ac_sym?(s, f)")
                                    (("1"
                                      (inst -5 "s")
                                      (("1"
                                        (expand "is_ac_sym?" -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (rewrite "get_args_len")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite
                                                     "subterm_reflexive")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "get_args_not_pair_ac")
                                      (("2"
                                        (inst -1 "f" "s")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subterm_reflexive formula-decl nil nominal_AC_term_properties nil)
    (get_args_not_pair_ac formula-decl nil nominal_AC_term_properties nil)
    (perm?_len formula-decl nil nominal_AC_equality nil)
    (get_args_len formula-decl nil nominal_AC_term_properties nil)
    (num_arg def-decl "nat" nominal_AC_term_properties nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (every adt-def-decl "boolean" list_adt nil)
    (perm_args_ac formula-decl nil nominal_AC_equality nil)
    (well_formed? const-decl "bool" nominal_AC_term_properties nil)
    (member const-decl "bool" sets nil)
    (get_args const-decl "args" nominal_AC_term_properties nil)
    (are_ac? const-decl "bool" nominal_AC_term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (remove def-decl "list[T]" list_aux_equational_reasoning nil)
    (nth def-decl "T" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil))
   nil)
  (perm_args_ac_well_formed-1 nil 3848944292
   ("" (skeep)
    (("" (case "is_ac_sym?(t, f)")
      (("1" (case "is_ac_sym?(s, f)")
        (("1" (lemma "perm_args_ac")
          (("1" (inst -1 "G" "s" "f" "t")
            (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
          nil)
         ("2" (expand "well_formed?" -3)
          (("2" (prop)
            (("2" (inst -3 "t")
              (("2" (expand "is_ac_sym?" -1)
                (("2" (flatten)
                  (("2" (assert)
                    (("2" (replace -2 :dir rl)
                      (("2" (prop)
                        (("1" (lemma "get_args_not_pair_ac")
                          (("1" (inst -1 "f" "s")
                            (("1" (expand "well_formed?" -6)
                              (("1"
                                (prop)
                                (("1"
                                  (lemma "perm?_len")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -2)
                                        (("1"
                                          (rewrite "get_args_len")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "subterm_reflexive") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "well_formed?" -2)
        (("2" (prop)
          (("2" (lemma "get_args_not_pair_ac")
            (("2" (inst -1 "f" "t")
              (("2" (assert)
                (("2" (replace -1)
                  (("2" (use "perm?_len")
                    (("2" (assert)
                      (("2" (expand "length" -1 1)
                        (("2" (expand "length" -1 1)
                          (("2" (hide -4)
                            (("2" (expand "well_formed?" -4)
                              (("2"
                                (prop)
                                (("2"
                                  (case "is_ac_sym?(s, f)")
                                  (("1"
                                    (inst -5 "s")
                                    (("1"
                                      (expand "is_ac_sym?" -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (rewrite "get_args_len")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite
                                                   "subterm_reflexive")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "get_args_not_pair_ac")
                                    (("2"
                                      (inst -1 "f" "s")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subterm_reflexive formula-decl nil nominal_AC_term_properties nil)
    (get_args_not_pair_ac formula-decl nil nominal_AC_term_properties nil)
    (perm?_len formula-decl nil nominal_AC_equality nil)
    (get_args_len formula-decl nil nominal_AC_term_properties nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (perm_args_ac formula-decl nil nominal_AC_equality nil)
    (member const-decl "bool" sets nil)
    (are_ac? const-decl "bool" nominal_AC_term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (nth def-decl "T" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil))
   shostak))
 (perm_args_ac2 0
  (perm_args_ac2-1 nil 3807634804
   ("" (skeep) (("" (lemma "ac_perm_args") (("" (grind) nil nil)) nil))
    nil)
   ((ac_perm_args formula-decl nil nominal_AC_equality nil)
    (string type-eq-decl nil strings nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (are_ac? const-decl "bool" nominal_AC_term_properties nil)
    (get_args const-decl "args" nominal_AC_term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   SHOSTAK))
 (perm?_map_get_args 0
  (perm?_map_get_args-1 nil 3807463550
   ("" (measure-induct "size(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (skeep)
          (("" (hide -1)
            (("" (expand "perm?" 1)
              (("" (expand "perm?" 1)
                (("" (prop)
                  (("1" (expand "map" -1)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (grind) nil nil)
                         ("2" (expand "flatten" -1)
                          (("2" (rewrite "null_append")
                            (("2" (flatten)
                              (("2" (rewrite "get_args_null") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "perm?" -1)
                    (("2" (prop)
                      (("1" (hide 2) (("1" (grind) nil nil)) nil)
                       ("2" (skeep)
                        (("2" (name-replace "ti" "nth(args1, i)")
                          (("2" (name-replace "tj" "nth(args2, j)")
                            (("2" (lemma "equal?_select_delete")
                              (("2"
                                (inst -1 "G" "f" "tj" "ti")
                                (("2"
                                  (assert)
                                  (("2"
                                    (skolem -1 ("k" "n"))
                                    (("2"
                                      (hide 1 2)
                                      (("2"
                                        (lemma "equal?_num_arg")
                                        (("2"
                                          (inst -1 "G" "f" "tj" "ti")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst
                                               1
                                               "ind_flatten(map(get_args(f))(args1), i, k)"
                                               "_")
                                              (("1"
                                                (lemma
                                                 "nth_flatten[nominal_AC_term]")
                                                (("1"
                                                  (inst? -1)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (replace
                                                       -1
                                                       1
                                                       rl
                                                       t)
                                                      (("1"
                                                        (rewrite
                                                         "map_nth_rw")
                                                        (("1"
                                                          (reveal -7)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (lemma
                                                               "get_args_nth")
                                                              (("1"
                                                                (inst?
                                                                 -1)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (inst
                                                                         1
                                                                         "ind_flatten(map(get_args(f))(args2), j, n)")
                                                                        (("1"
                                                                          (prop)
                                                                          (("1"
                                                                            (lemma
                                                                             "nth_flatten[nominal_AC_term]")
                                                                            (("1"
                                                                              (inst?
                                                                               -1)
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   1
                                                                                   rl
                                                                                   t)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "get_args_nth")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "map_nth_rw")
                                                                                      (("1"
                                                                                        (inst?
                                                                                         -1)
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "tj"
                                                                                                 -3)
                                                                                                (("1"
                                                                                                  (reveal
                                                                                                   -9
                                                                                                   -10)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             -3
                                                                                             -4
                                                                                             -5
                                                                                             -6
                                                                                             2)
                                                                                            (("2"
                                                                                              (reveal
                                                                                               -12)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (typepred
                                                                                   "j")
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "map_length")
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (hide
                                                                                   -3
                                                                                   -4
                                                                                   -5
                                                                                   2
                                                                                   -6)
                                                                                  (("3"
                                                                                    (rewrite
                                                                                     "map_nth_rw")
                                                                                    (("3"
                                                                                      (rewrite
                                                                                       "get_args_len")
                                                                                      (("3"
                                                                                        (reveal
                                                                                         -11)
                                                                                        (("3"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (lemma
                                                                             "flatten_remove[nominal_AC_term]")
                                                                            (("2"
                                                                              (inst?
                                                                               -1)
                                                                              (("2"
                                                                                (prop)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "flatten_remove[nominal_AC_term]")
                                                                                      (("1"
                                                                                        (inst?
                                                                                         -1)
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "get_args_remove_del")
                                                                                                (("1"
                                                                                                  (inst?
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (prop)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "get_args_remove_del")
                                                                                                          (("1"
                                                                                                            (inst?
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (prop)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (reveal
                                                                                                                     -15)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "delete(args1, f, i, k)")
                                                                                                                      (("1"
                                                                                                                        (prop)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "G"
                                                                                                                           "delete(args2, f, j, n)"
                                                                                                                           "f")
                                                                                                                          (("1"
                                                                                                                            (prop)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "perm?"
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (case
                                                                                                                                 "num_arg(f, ti) = 1")
                                                                                                                                (("1"
                                                                                                                                  (lemma
                                                                                                                                   "delete_remove1")
                                                                                                                                  (("1"
                                                                                                                                    (inst?
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (prop)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (hide
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "delete_remove1")
                                                                                                                                            (("1"
                                                                                                                                              (inst?
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (prop)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (typepred
                                                                                                                                                   "j")
                                                                                                                                                  (("2"
                                                                                                                                                    (propax)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("3"
                                                                                                                                                  (hide
                                                                                                                                                   -4
                                                                                                                                                   -5
                                                                                                                                                   -6
                                                                                                                                                   -7
                                                                                                                                                   2)
                                                                                                                                                  (("3"
                                                                                                                                                    (expand
                                                                                                                                                     "tj"
                                                                                                                                                     -2)
                                                                                                                                                    (("3"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("4"
                                                                                                                                                  (expand
                                                                                                                                                   "tj"
                                                                                                                                                   -2)
                                                                                                                                                  (("4"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (typepred
                                                                                                                                         "i")
                                                                                                                                        (("2"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("3"
                                                                                                                                        (hide
                                                                                                                                         -4
                                                                                                                                         -5
                                                                                                                                         -6
                                                                                                                                         -7
                                                                                                                                         2)
                                                                                                                                        (("3"
                                                                                                                                          (expand
                                                                                                                                           "ti")
                                                                                                                                          (("3"
                                                                                                                                            (grind)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("4"
                                                                                                                                        (expand
                                                                                                                                         "ti"
                                                                                                                                         -1)
                                                                                                                                        (("4"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (case
                                                                                                                                   "num_arg(f, ti) > 1")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "perm?"
                                                                                                                                     2)
                                                                                                                                    (("1"
                                                                                                                                      (prop)
                                                                                                                                      (("1"
                                                                                                                                        (rewrite
                                                                                                                                         "delete_not_null")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "ti"
                                                                                                                                           -2)
                                                                                                                                          (("1"
                                                                                                                                            (propax)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (inst
                                                                                                                                         2
                                                                                                                                         "i"
                                                                                                                                         "j")
                                                                                                                                        (("1"
                                                                                                                                          (prop)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "delete_nth")
                                                                                                                                            (("1"
                                                                                                                                              (inst?
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (prop)
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -1
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (hide
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (reveal
                                                                                                                                                       -17)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -1
                                                                                                                                                         1
                                                                                                                                                         nil
                                                                                                                                                         t)
                                                                                                                                                        (("1"
                                                                                                                                                          (lemma
                                                                                                                                                           "delete_nth")
                                                                                                                                                          (("1"
                                                                                                                                                            (inst?
                                                                                                                                                             -1)
                                                                                                                                                            (("1"
                                                                                                                                                              (prop)
                                                                                                                                                              (("1"
                                                                                                                                                                (replace
                                                                                                                                                                 -1
                                                                                                                                                                 1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "tj"
                                                                                                                                                                   -6)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (typepred
                                                                                                                                                                 "j")
                                                                                                                                                                (("2"
                                                                                                                                                                  (propax)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("3"
                                                                                                                                                                (hide
                                                                                                                                                                 -4
                                                                                                                                                                 -5
                                                                                                                                                                 -6
                                                                                                                                                                 -7
                                                                                                                                                                 2
                                                                                                                                                                 3
                                                                                                                                                                 4)
                                                                                                                                                                (("3"
                                                                                                                                                                  (expand
                                                                                                                                                                   "tj"
                                                                                                                                                                   -2)
                                                                                                                                                                  (("3"
                                                                                                                                                                    (grind)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("4"
                                                                                                                                                                (expand
                                                                                                                                                                 "tj"
                                                                                                                                                                 -2)
                                                                                                                                                                (("4"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (typepred
                                                                                                                                                   "i")
                                                                                                                                                  (("2"
                                                                                                                                                    (propax)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("3"
                                                                                                                                                  (hide
                                                                                                                                                   -4
                                                                                                                                                   -5
                                                                                                                                                   -6
                                                                                                                                                   -7
                                                                                                                                                   2
                                                                                                                                                   34)
                                                                                                                                                  (("3"
                                                                                                                                                    (expand
                                                                                                                                                     "ti")
                                                                                                                                                    (("3"
                                                                                                                                                      (hide
                                                                                                                                                       2
                                                                                                                                                       3)
                                                                                                                                                      (("3"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("4"
                                                                                                                                                  (expand
                                                                                                                                                   "ti"
                                                                                                                                                   -1)
                                                                                                                                                  (("4"
                                                                                                                                                    (propax)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (lemma
                                                                                                                                             "delete_remove_gt1")
                                                                                                                                            (("2"
                                                                                                                                              (inst?
                                                                                                                                               -1)
                                                                                                                                              (("2"
                                                                                                                                                (prop)
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -1
                                                                                                                                                   1
                                                                                                                                                   nil
                                                                                                                                                   t)
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     "delete_remove_gt1")
                                                                                                                                                    (("1"
                                                                                                                                                      (inst?
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (prop)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (typepred
                                                                                                                                                           "j")
                                                                                                                                                          (("2"
                                                                                                                                                            (propax)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("3"
                                                                                                                                                          (hide
                                                                                                                                                           -4
                                                                                                                                                           -5
                                                                                                                                                           -6
                                                                                                                                                           -7
                                                                                                                                                           2
                                                                                                                                                           3
                                                                                                                                                           4)
                                                                                                                                                          (("3"
                                                                                                                                                            (expand
                                                                                                                                                             "tj")
                                                                                                                                                            (("3"
                                                                                                                                                              (grind)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("4"
                                                                                                                                                          (expand
                                                                                                                                                           "tj"
                                                                                                                                                           -2)
                                                                                                                                                          (("4"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (typepred
                                                                                                                                                   "i")
                                                                                                                                                  (("2"
                                                                                                                                                    (propax)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("3"
                                                                                                                                                  (hide
                                                                                                                                                   -4
                                                                                                                                                   -5
                                                                                                                                                   -6
                                                                                                                                                   -7
                                                                                                                                                   2
                                                                                                                                                   3
                                                                                                                                                   4)
                                                                                                                                                  (("3"
                                                                                                                                                    (expand
                                                                                                                                                     "ti")
                                                                                                                                                    (("3"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("4"
                                                                                                                                                  (expand
                                                                                                                                                   "ti"
                                                                                                                                                   -1)
                                                                                                                                                  (("4"
                                                                                                                                                    (propax)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (typepred
                                                                                                                                           "j")
                                                                                                                                          (("2"
                                                                                                                                            (rewrite
                                                                                                                                             "delete_nth_len")
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "tj"
                                                                                                                                               -3)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("3"
                                                                                                                                          (rewrite
                                                                                                                                           "delete_nth_len")
                                                                                                                                          (("1"
                                                                                                                                            (typepred
                                                                                                                                             "i")
                                                                                                                                            (("1"
                                                                                                                                              (propax)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (expand
                                                                                                                                             "ti"
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (propax)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (lemma
                                                                                                                                     "num_arg_ge1")
                                                                                                                                    (("2"
                                                                                                                                      (inst?
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (lemma
                                                                                                                           "delete_size2")
                                                                                                                          (("2"
                                                                                                                            (inst?
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (typepred
                                                                                                                 "j")
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (hide
                                                                                                                 -3
                                                                                                                 -4
                                                                                                                 -5
                                                                                                                 -6
                                                                                                                 2)
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "tj")
                                                                                                                  (("3"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (typepred
                                                                                                       "i")
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (hide
                                                                                                       -3
                                                                                                       -4
                                                                                                       -6
                                                                                                       2)
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "ti")
                                                                                                        (("3"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (rewrite
                                                                                             "map_length")
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "j")
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (rewrite
                                                                                             "map_nth_rw")
                                                                                            (("3"
                                                                                              (rewrite
                                                                                               "get_args_len")
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "tj")
                                                                                                (("3"
                                                                                                  (hide
                                                                                                   -3
                                                                                                   -4
                                                                                                   -5
                                                                                                   -6
                                                                                                   2)
                                                                                                  (("3"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -3
                                                                                   -4
                                                                                   -5
                                                                                   -6
                                                                                   2)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "map_length")
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "i")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (rewrite
                                                                                   "map_nth_rw")
                                                                                  (("3"
                                                                                    (rewrite
                                                                                     "get_args_len")
                                                                                    (("3"
                                                                                      (hide
                                                                                       -3
                                                                                       -4
                                                                                       -5
                                                                                       -6
                                                                                       2)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "ti")
                                                                                        (("3"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "ind_flatten_len[nominal_AC_term]")
                                                                          (("2"
                                                                            (inst?
                                                                             -1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "map_nth_rw")
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "map_length")
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "get_args_len")
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "j")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -4
                                                                                             -5
                                                                                             -6
                                                                                             -7)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "tj")
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2
                                                                     -3
                                                                     -4
                                                                     -5
                                                                     -6)
                                                                    (("2"
                                                                      (expand
                                                                       "ti"
                                                                       -2)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (rewrite
                                                         "map_length")
                                                        (("2"
                                                          (typepred
                                                           "i")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (rewrite
                                                       "map_nth_rw")
                                                      (("3"
                                                        (hide 2)
                                                        (("3"
                                                          (rewrite
                                                           "get_args_len")
                                                          (("3"
                                                            (hide
                                                             -3
                                                             -4
                                                             -5
                                                             -6)
                                                            (("3"
                                                              (expand
                                                               "ti")
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "ind_flatten_len[nominal_AC_term]")
                                                (("2"
                                                  (inst? -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (hide 2)
                                                      (("2"
                                                        (rewrite
                                                         "map_nth_rw")
                                                        (("2"
                                                          (rewrite
                                                           "map_length")
                                                          (("2"
                                                            (rewrite
                                                             "get_args_len")
                                                            (("2"
                                                              (typepred
                                                               "i")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide
                                                                     -4
                                                                     -5
                                                                     -6)
                                                                    (("2"
                                                                      (expand
                                                                       "ti")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_args_null formula-decl nil nominal_AC_term_properties nil)
    (null_append formula-decl nil list2set_props structures)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (flatten def-decl "list[T]" list_aux_equational_reasoning nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (equal?_select_delete formula-decl nil nominal_AC_equality nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ind_flatten def-decl "nat" list_aux_equational_reasoning nil)
    (f skolem-const-decl "string" nominal_AC_equality nil)
    (args1 skolem-const-decl "args" nominal_AC_equality nil)
    (i skolem-const-decl "below[length(args1)]" nominal_AC_equality nil)
    (k skolem-const-decl "nat" nominal_AC_equality nil)
    (get_args_nth formula-decl nil nominal_AC_term_properties nil)
    (ind_flatten_len formula-decl nil list_aux_equational_reasoning nil)
    (get_args_len formula-decl nil nominal_AC_term_properties nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (map_length formula-decl nil more_map_props nil)
    (tj skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]" nominal_AC_equality nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nice_ind? def-decl "bool" nominal_AC_term_properties nil)
    (nice_ind? const-decl "bool" nominal_AC_term_properties nil)
    (delete def-decl "args" nominal_AC_term_properties nil)
    (delete_size2 formula-decl nil nominal_AC_term_properties nil)
    (> const-decl "bool" reals nil)
    (delete_not_null formula-decl nil nominal_AC_term_properties nil)
    (delete_nth_len formula-decl nil nominal_AC_term_properties nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (delete_nth formula-decl nil nominal_AC_term_properties nil)
    (delete_remove_gt1 formula-decl nil nominal_AC_term_properties nil)
    (num_arg_ge1 formula-decl nil nominal_AC_term_properties nil)
    (delete_remove1 formula-decl nil nominal_AC_term_properties nil)
    (ti skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]" nominal_AC_equality nil)
    (num_arg def-decl "nat" nominal_AC_term_properties nil)
    (get_args_remove_del formula-decl nil nominal_AC_term_properties nil)
    (flatten_remove formula-decl nil list_aux_equational_reasoning nil)
    (n skolem-const-decl "nat" nominal_AC_equality nil)
    (j skolem-const-decl "below[length(args2)]" nominal_AC_equality nil)
    (args2 skolem-const-decl "args" nominal_AC_equality nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth_flatten formula-decl nil list_aux_equational_reasoning nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (equal?_num_arg formula-decl nil nominal_AC_equality nil)
    (get_args const-decl "args" nominal_AC_term_properties nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (perm? const-decl "bool" nominal_AC_equality nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "nat" nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (perm?_get_args_flatten 0
  (perm?_get_args_flatten-1 nil 3807284588
   ("" (skeep)
    (("" (lemma "perm?_map_get_args")
      (("" (inst? -1)
        (("" (inst -1 "f")
          (("" (prop)
            (("" (expand "perm?" -1) (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((perm?_map_get_args formula-decl nil nominal_AC_equality nil)
    (string type-eq-decl nil strings nil)
    (perm? const-decl "bool" nominal_AC_equality nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   SHOSTAK))
 (perm?_get_ac_from_args_equal? 0
  (perm?_get_ac_from_args_equal?-1 nil 3807185297
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "get_ac_from_args")
              (("" (lemma "perm_args_ac")
                (("" (inst? -1)
                  (("" (inst -1 "f")
                    (("" (assert)
                      (("" (hide 2)
                        (("" (prop)
                          (("1" (rewrite "get_args_ac")
                            (("1" (rewrite "get_args_ac")
                              (("1"
                                (lemma "get_args_get_term_from_args")
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (lemma
                                             "get_args_get_term_from_args")
                                            (("1"
                                              (inst -1 "args2" "f")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (lemma
                                                       "perm?_get_args_flatten")
                                                      (("1"
                                                        (inst? -1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 1)
                                                  (("2"
                                                    (reveal 2)
                                                    (("2"
                                                      (case
                                                       "null?(args1)")
                                                      (("1"
                                                        (hide -3)
                                                        (("1"
                                                          (expand
                                                           "get_term_from_args"
                                                           1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "equal?"
                                                               1)
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 "1"
                                                                 "1")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "perm?_len")
                                                        (("2"
                                                          (inst? -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide 2)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 1)
                                        (("2"
                                          (reveal 2)
                                          (("2"
                                            (case "null?(args2)")
                                            (("1"
                                              (hide -3)
                                              (("1"
                                                (expand
                                                 "get_term_from_args"
                                                 1)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "equal?"
                                                       1)
                                                      (("1"
                                                        (inst
                                                         1
                                                         "1"
                                                         "1")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_term_from_args def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (ac_app adt-constructor-decl "[[ac_symbol, nominal_AC_term] -> (ac_app?)]"
     nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (num_arg def-decl "nat" nominal_AC_term_properties nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (perm?_len formula-decl nil nominal_AC_equality nil)
    (perm?_get_args_flatten formula-decl nil nominal_AC_equality nil)
    (get_args_get_term_from_args formula-decl nil nominal_AC_term_properties nil)
    (get_args_ac formula-decl nil nominal_AC_term_properties nil)
    (are_ac? const-decl "bool" nominal_AC_term_properties nil)
    (perm_args_ac formula-decl nil nominal_AC_equality nil)
    (get_ac_from_args const-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (perm_get_ac_from_args 0
  (perm_get_ac_from_args-1 nil 3807130475
   ("" (skeep)
    (("" (lemma "perm?_get_ac_from_args_equal?")
      (("" (inst -1 "G" "args1" "args2" "f")
        (("" (assert)
          (("" (lemma "ac_perm_args")
            (("" (inst? -1)
              (("" (assert)
                (("" (hide -1 -2 2) (("" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((perm?_get_ac_from_args_equal? formula-decl nil nominal_AC_equality nil)
    (get_ac_from_args const-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (are_ac? const-decl "bool" nominal_AC_term_properties nil)
    (ac_perm_args formula-decl nil nominal_AC_equality nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   SHOSTAK))
 (equal_map_count_get_args 0
  (equal_map_count_get_args-1 nil 3839013349
   ("" (measure-induct "length(args1)" "args1")
    (("1" (skolem 1 "args1")
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "equal?" -2)
            (("1" (prop)
              (("1" (grind) nil nil)
               ("2" (expand "map" 3 2)
                (("2" (assert)
                  (("2" (expand "map" 3 4)
                    (("2" (expand "map" 3 1)
                      (("2" (expand "map" 3 3)
                        (("2" (lemma "ac_perm_args2")
                          (("2"
                            (inst -1 "G" "f" "car(args2)" "car(args1)")
                            (("2" (assert)
                              (("2"
                                (lemma "perm?_equiv_same_count?")
                                (("2"
                                  (expand "same_count?" -1)
                                  (("2"
                                    (expand "count" 3 1)
                                    (("2"
                                      (expand "count" 3 3)
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst -1 "t")
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (decompose-equality 3)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (inst
                                                     -4
                                                     "cdr(args1)")
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (lemma "equal?_equiv") (("2" (inst -1 "G") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((equal?_equiv formula-decl nil nominal_AC_equality nil)
    (ac_perm_args2 formula-decl nil nominal_AC_equality nil)
    (same_count? const-decl "bool" list_aux_equational_reasoning nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (count def-decl "nat" list_aux_equational_reasoning nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (perm?_equiv_same_count? formula-decl nil nominal_AC_equality nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (get_args const-decl "args" nominal_AC_term_properties nil)
    (count const-decl "nat" list_aux_equational_reasoning nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (string type-eq-decl nil strings nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (equivalence? const-decl "bool" relations nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_get_args_remove_aux 0
  (count_get_args_remove_aux-1 nil 3839192840
   ("" (measure-induct "length(args1)" "args1")
    (("1" (skolem 1 ("args1"))
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "nth" 1)
            (("1" (lift-if)
              (("1" (split 1)
                (("1" (flatten)
                  (("1" (expand "remove" 1)
                    (("1" (lift-if)
                      (("1" (assert)
                        (("1" (split 1)
                          (("1" (flatten)
                            (("1" (expand "length" -4)
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "map" 2 2)
                              (("2"
                                (lift-if)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "flatten" 2 2)
                                    (("2"
                                      (rewrite "count_append" 2)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "remove" 2 1)
                    (("2" (lift-if)
                      (("2" (split)
                        (("1" (flatten)
                          (("1" (expand "length" -3)
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (flatten)
                          (("2" (prop)
                            (("2" (hide 1)
                              (("2"
                                (expand "map" 1 1)
                                (("2"
                                  (expand "flatten" 1 1)
                                  (("2"
                                    (rewrite "count_append")
                                    (("2"
                                      (expand "map" 1 2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "flatten" 1 2)
                                          (("2"
                                            (rewrite "count_append")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst -1 "cdr(args1)")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         -1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       1
                                                       2)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep) (("2" (rewrite "equal?_equiv") nil nil)) nil))
      nil))
    nil)
   ((equal?_equiv formula-decl nil nominal_AC_equality nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (count_append formula-decl nil list_aux_equational_reasoning nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (remove def-decl "list[T]" list_aux_equational_reasoning nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (flatten def-decl "list[T]" list_aux_equational_reasoning nil)
    (nth def-decl "T" list_props nil)
    (get_args const-decl "args" nominal_AC_term_properties nil)
    (count def-decl "nat" list_aux_equational_reasoning nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (string type-eq-decl nil strings nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equivalence? const-decl "bool" relations nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_get_args_remove 0
  (count_get_args_remove-1 nil 3839191309
   ("" (measure-induct "length(lst_args1)" "lst_args1")
    (("1" (skolem 1 "lst_args1")
      (("1" (prop)
        (("1" (skeep)
          (("1" (hide -1)
            (("1" (expand "flatten" 1 2)
              (("1" (lift-if)
                (("1" (split 1)
                  (("1" (flatten)
                    (("1" (expand "flatten" -2)
                      (("1" (assert)
                        (("1" (expand "length" -2)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (lemma "remove_append[nominal_AC_term]")
                      (("2" (inst?)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("1" (replace -2)
                              (("1"
                                (lemma "map_append[nominal_AC_term, args]")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (rewrite "flatten_append")
                                        (("1"
                                          (rewrite "count_append")
                                          (("1"
                                            (expand "flatten" 2 6)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "map_append[nominal_AC_term, args]")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (rewrite
                                                         "flatten_append")
                                                        (("1"
                                                          (rewrite
                                                           "count_append"
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide
                                                               -1
                                                               -3)
                                                              (("1"
                                                                (expand
                                                                 "flatten"
                                                                 2
                                                                 1)
                                                                (("1"
                                                                  (rewrite
                                                                   "nth_append")
                                                                  (("1"
                                                                    (lemma
                                                                     "count_get_args_remove_aux")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -1)
                              (("2"
                                (hide -1)
                                (("2"
                                  (lemma "map_append[nominal_AC_term, args]")
                                  (("2"
                                    (inst?)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (rewrite "flatten_append")
                                          (("1"
                                            (rewrite "count_append")
                                            (("1"
                                              (expand "flatten" 3 6)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "map_append[nominal_AC_term, args]")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (rewrite
                                                           "flatten_append")
                                                          (("1"
                                                            (rewrite
                                                             "count_append")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (reveal
                                                                   -6)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "cdr(lst_args1)")
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (prop)
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "flatten"
                                                                                   3
                                                                                   1)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "nth_append")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "flatten"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "length_append")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "flatten"
                                                                             -1)
                                                                            (("2"
                                                                              (rewrite
                                                                               "length_append")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "length"
                                                                         1
                                                                         2)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep) (("2" (rewrite "equal?_equiv") nil nil)) nil))
      nil))
    nil)
   ((equal?_equiv formula-decl nil nominal_AC_equality nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_null formula-decl nil more_list_props structures)
    (remove_append formula-decl nil list_aux_equational_reasoning nil)
    (length_append formula-decl nil list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (lst_args1 skolem-const-decl "list[args]" nominal_AC_equality nil)
    (n skolem-const-decl "nat" nominal_AC_equality nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (count_append formula-decl nil list_aux_equational_reasoning nil)
    (nth_append formula-decl nil more_list_props structures)
    (count_get_args_remove_aux formula-decl nil nominal_AC_equality nil)
    (flatten_append formula-decl nil list_aux_equational_reasoning nil)
    (map_append formula-decl nil more_map_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (remove def-decl "list[T]" list_aux_equational_reasoning nil)
    (get_args const-decl "args" nominal_AC_term_properties nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (count def-decl "nat" list_aux_equational_reasoning nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (string type-eq-decl nil strings nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (flatten def-decl "list[T]" list_aux_equational_reasoning nil)
    (equivalence? const-decl "bool" relations nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (reorder_ref 0
  (reorder_ref-1 nil 3842282504
   ("" (induct "args1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (expand "reorder?" 1)
          (("2" (inst 1 "0" "0")
            (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (remove def-decl "list[T]" list_aux_equational_reasoning nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (hd skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]" nominal_AC_equality nil)
    (tail skolem-const-decl
     "list[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]" nominal_AC_equality
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (reorder? def-decl "bool" nominal_AC_equality nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (every adt-def-decl "boolean" list_adt nil))
   shostak))
 (reorder_get_args_gt0 0
  (reorder_get_args_gt0-1 nil 3842281838
   ("" (skeep)
    (("" (expand "reorder?" 1)
      (("" (split 1)
        (("1" (expand "get_args" -1)
          (("1" (expand "from_min2max" -1)
            (("1" (assert)
              (("1" (expand "map" -1) (("1" (propax) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (inst 2 "i-1" "0")
            (("1" (prop)
              (("1" (expand "nth" 1 2)
                (("1" (lemma "get_args_nth")
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                nil)
               ("2" (expand "remove" 1 2)
                (("2" (lemma "get_args_remove")
                  (("2" (inst?)
                    (("2" (assert)
                      (("2" (replace -1)
                        (("2" (rewrite "reorder_ref") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil)
             ("3" (rewrite "get_args_len") (("3" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((reorder? def-decl "bool" nominal_AC_equality nil)
    (get_args_len formula-decl nil nominal_AC_term_properties nil)
    (nice_ind? const-decl "bool" nominal_AC_term_properties nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (get_args_nth formula-decl nil nominal_AC_term_properties nil)
    (nth def-decl "T" list_props nil)
    (get_args_remove formula-decl nil nominal_AC_term_properties nil)
    (reorder_ref formula-decl nil nominal_AC_equality nil)
    (remove def-decl "list[T]" list_aux_equational_reasoning nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl "nat" nominal_AC_equality nil)
    (< const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (length def-decl "nat" list_props nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (f skolem-const-decl "string" nominal_AC_equality nil)
    (t skolem-const-decl
     "nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]" nominal_AC_equality nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (get_args const-decl "args" nominal_AC_term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (from_min2max def-decl "list[nat]" list_aux_equational_reasoning nil))
   shostak))
 (size2_cons_remove 0
  (size2_cons_remove-1 nil 3842280113
   ("" (induct "args1") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((i!1 skolem-const-decl "nat" nominal_AC_equality nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (remove def-decl "list[T]" list_aux_equational_reasoning nil)
    (nth def-decl "T" list_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (size2 def-decl "nat" nominal_AC_term_properties nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (sum def-decl "nat" list_aux_equational_reasoning_nat nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (every adt-def-decl "boolean" list_adt nil))
   shostak))
 (size2_reorder 0
  (size2_reorder-1 nil 3842279698
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "reorder?" -2)
            (("" (split -2)
              (("1" (grind) nil nil)
               ("2" (flatten)
                (("2" (skolem -1 ("i" "j"))
                  (("2" (prop)
                    (("2" (lemma "size2_cons_remove")
                      (("2" (inst -1 "args1" "i")
                        (("2" (typepred "i")
                          (("2" (assert)
                            (("2" (hide -1)
                              (("2"
                                (replace -1)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (expand "map" 2 1)
                                    (("2"
                                      (expand "sum" 2 1)
                                      (("2"
                                        (lemma "size2_cons_remove")
                                        (("2"
                                          (inst -1 "args2" "j")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (expand "map" 2 2)
                                                (("2"
                                                  (expand "sum" 2 2)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replace -2)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst
                                                           -4
                                                           "remove(args1, i)")
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "remove(args2, j)")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "remove_len")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((size2_cons_remove formula-decl nil nominal_AC_equality nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (remove def-decl "list[T]" list_aux_equational_reasoning nil)
    (remove_len formula-decl nil list_aux_equational_reasoning nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (size2 def-decl "nat" nominal_AC_term_properties nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (sum def-decl "nat" list_aux_equational_reasoning_nat nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (reorder? def-decl "bool" nominal_AC_equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (equal_size2 0
  (equal_size2-1 nil 3842273011
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "equal?" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil)
                 ("4" (hide 1 2 3)
                  (("4" (expand "size2" 1)
                    (("4" (assert)
                      (("4" (inst-cp -5 "term1(t)")
                        (("4" (prop)
                          (("1" (inst -1 "G" "term1(s)")
                            (("1" (assert)
                              (("1"
                                (replace -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst -6 "term2(t)")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (inst -1 "G" "term2(s)")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (hide 1 2 3 4)
                  (("5" (expand "size2" 1)
                    (("5" (assert)
                      (("5" (inst -6 "arg(t)") (("5" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (case "equal?(G)(t, s)")
                  (("1" (hide -2)
                    (("1" (assert)
                      (("1" (hide 1 2 3 4 5)
                        (("1" (lemma "nominal_AC_term_ac_app_eta")
                          (("1" (inst -1 "t")
                            (("1" (name-replace "f" "ac_sym(t)")
                              (("1"
                                (case "is_ac_sym?(s, f)")
                                (("1"
                                  (expand "size2" 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "is_ac_sym?" -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (reveal -1)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (replace -3 :dir rl)
                                                (("1"
                                                  (lemma
                                                   "equal?_select_delete")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "G"
                                                     "f"
                                                     "s"
                                                     "t")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (skolem
                                                         -1
                                                         ("i" "j"))
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (case
                                                             "num_arg(f, t) = 1")
                                                            (("1"
                                                              (expand
                                                               "get_args"
                                                               1
                                                               1)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "from_min2max"
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "map"
                                                                     1
                                                                     2)
                                                                    (("1"
                                                                      (expand
                                                                       "map"
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "map"
                                                                         1
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "map"
                                                                           1
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "sum"
                                                                             1
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "sum"
                                                                               1
                                                                               1)
                                                                              (("1"
                                                                                (case
                                                                                 "num_arg(f, s) = 1")
                                                                                (("1"
                                                                                  (expand
                                                                                   "get_args"
                                                                                   1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "from_min2max"
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "map"
                                                                                         1
                                                                                         2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "map"
                                                                                           1
                                                                                           2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "map"
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "map"
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "sum"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "sum"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "nice_ind?"
                                                                                                     -3)
                                                                                                    (("1"
                                                                                                      (prop)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "nice_ind?"
                                                                                                         -3)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "i = 0")
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "j = 0")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -16
                                                                                                                     "select(f, t)(1)")
                                                                                                                    (("1"
                                                                                                                      (prop)
                                                                                                                      (("1"
                                                                                                                        (inst?)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (lemma
                                                                                                                         "ac_select_size")
                                                                                                                        (("2"
                                                                                                                          (inst?)
                                                                                                                          (("2"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (expand
                                                                                                               "nice_ind?"
                                                                                                               -5)
                                                                                                              (("2"
                                                                                                                (prop)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "nice_ind?"
                                                                                                                   -5)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   "equal?_num_arg")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "G"
                                                                                       "f"
                                                                                       "s"
                                                                                       "t")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "num_arg(f, t) > 1")
                                                              (("1"
                                                                (hide
                                                                 1)
                                                                (("1"
                                                                  (lemma
                                                                   "reorder_get_args_gt0")
                                                                  (("1"
                                                                    (expand
                                                                     "nice_ind?"
                                                                     -3)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (expand
                                                                         "nice_ind?"
                                                                         -4)
                                                                        (("1"
                                                                          (prop)
                                                                          (("1"
                                                                            (hide
                                                                             -5)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "f"
                                                                               "i+1"
                                                                               "t")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "size2_reorder")
                                                                                  (("1"
                                                                                    (hide
                                                                                     -14)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "get_args(f)(t)"
                                                                                       "cons(select(f, t)(1 + i), get_args(f)(delete(f, t)(1 + i)))")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "reorder_get_args_gt0")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "f"
                                                                                                   "j+1"
                                                                                                   "s")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "num_arg(f, s) = num_arg(f, t)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "size2_reorder")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "get_args(f)(s)"
                                                                                                               "cons(select(f, s)(1 + j), get_args(f)(delete(f, s)(1 + j)))")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "map"
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "sum"
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -13
                                                                                                                           "select(f, t)(1+i)")
                                                                                                                          (("1"
                                                                                                                            (prop)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "G"
                                                                                                                               "select(f, s)(1 + j)")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (reveal
                                                                                                                                         -3)
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "delete(f, t)(1+i)")
                                                                                                                                          (("1"
                                                                                                                                            (prop)
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               "G"
                                                                                                                                               "delete(f, s)(1+j)")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "delete_ac_num_arg_gt1")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -1
                                                                                                                                                     "f"
                                                                                                                                                     "1+i"
                                                                                                                                                     "t")
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "is_ac_sym?"
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "size2"
                                                                                                                                                           -3
                                                                                                                                                           1)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -2
                                                                                                                                                               :dir
                                                                                                                                                               rl)
                                                                                                                                                              (("1"
                                                                                                                                                                (lemma
                                                                                                                                                                 "delete_ac_num_arg_gt1")
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst
                                                                                                                                                                   -1
                                                                                                                                                                   "f"
                                                                                                                                                                   "1+j"
                                                                                                                                                                   "s")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "is_ac_sym?"
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (prop)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "size2"
                                                                                                                                                                           -5
                                                                                                                                                                           2)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (lemma
                                                                                                                                               "ac_delete_size")
                                                                                                                                              (("2"
                                                                                                                                                (inst?)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (lemma
                                                                                                                               "ac_select_size")
                                                                                                                              (("2"
                                                                                                                                (inst?)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "is_ac_sym?"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         -1
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "equal?_num_arg")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "G"
                                                                                                             "f"
                                                                                                             "s"
                                                                                                             "t")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "num_arg_ge1")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "is_ac_sym?" 1)
                                  (("2"
                                    (expand "f" 1)
                                    (("2"
                                      (expand "equal?" -3)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "f")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "equal?" 1) (("2" (assert) nil nil))
                    nil))
                  nil)
                 ("7" (expand "size2" 7)
                  (("7" (assert)
                    (("7" (inst -4 "body(t)")
                      (("7" (prop)
                        (("1" (inst -1 "G" "body(s)")
                          (("1" (assert) nil nil)) nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("8" (expand "size2" 8)
                  (("8" (assert)
                    (("8" (inst -4 "body(t)")
                      (("8" (prop)
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (rewrite "ext_size2") nil nil)) nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (ext_size2 formula-decl nil nominal_AC_term_properties nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (nominal_AC_term_ac_app_eta formula-decl nil nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (f skolem-const-decl "ac_symbol" nominal_AC_equality nil)
    (equal?_select_delete formula-decl nil nominal_AC_equality nil)
    (> const-decl "bool" reals nil)
    (reorder_get_args_gt0 formula-decl nil nominal_AC_equality nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (size2_reorder formula-decl nil nominal_AC_equality nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (every adt-def-decl "boolean" list_adt nil)
    (ac_delete_size formula-decl nil nominal_AC_term_properties nil)
    (delete_ac_num_arg_gt1 formula-decl nil nominal_AC_term_properties nil)
    (num_arg_ge1 formula-decl nil nominal_AC_term_properties nil)
    (get_args const-decl "args" nominal_AC_term_properties nil)
    (from_min2max def-decl "list[nat]" list_aux_equational_reasoning nil)
    (equal?_num_arg formula-decl nil nominal_AC_equality nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ac_select_size formula-decl nil nominal_AC_term_properties nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (nice_ind? const-decl "bool" nominal_AC_term_properties nil)
    (nice_ind? def-decl "bool" nominal_AC_term_properties nil)
    (sum def-decl "nat" list_aux_equational_reasoning_nat nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (num_arg def-decl "nat" nominal_AC_term_properties nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (size2 def-decl "nat" nominal_AC_term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "nat" nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (perm?_size2 0
  (perm?_size2-1 nil 3844607068
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "perm?" -2)
            (("" (split -2)
              (("1" (grind) nil nil)
               ("2" (flatten)
                (("2" (skolem -1 ("i" "j"))
                  (("2" (prop)
                    (("2" (lemma "size2_cons_remove")
                      (("2" (inst -1 "args1" "i")
                        (("2" (typepred "i")
                          (("2" (assert)
                            (("2" (replace -2)
                              (("2"
                                (lemma "size2_cons_remove")
                                (("2"
                                  (inst -1 "args2" "j")
                                  (("2"
                                    (typepred "j")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -2)
                                        (("2"
                                          (hide -1 -2)
                                          (("2"
                                            (expand "map" 2)
                                            (("2"
                                              (expand "sum" 2)
                                              (("2"
                                                (lemma "equal_size2")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst
                                                           -6
                                                           "remove(args1, i)")
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "G"
                                                                 "remove(args2, j)")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "remove_len[nominal_AC_term]")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((size2_cons_remove formula-decl nil nominal_AC_equality nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (remove def-decl "list[T]" list_aux_equational_reasoning nil)
    (remove_len formula-decl nil list_aux_equational_reasoning nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (equal_size2 formula-decl nil nominal_AC_equality nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (size2 def-decl "nat" nominal_AC_term_properties nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (sum def-decl "nat" list_aux_equational_reasoning_nat nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_vec_TCC1 0
  (count_vec_TCC1-1 nil 3845834487 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil))
   nil
   (count_vec subtype "nominal_AC_equality.args1"
    "(list_adt[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]].cons?)")))
 (count_vec_TCC2 0
  (count_vec_TCC2-1 nil 3845834487 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil))
   nil
   (count_vec termination
    "nominal_AC_equality.count_vec(list_adt[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]].cdr(nominal_AC_equality.args1), nominal_AC_equality.f, nominal_AC_equality.Delta)"
    "nil")))
 (count_vec_TCC3 0
  (count_vec_TCC3-1 nil 3845834487 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil))
   nil
   (count_vec subtype "nominal_AC_equality.args1"
    "(list_adt[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]].cons?)")))
 (count_size2_ge 0
  (count_size2_ge-2 nil 3881090396
   ("" (measure-induct "length(args2)" "args2")
    (("1" (skolem 1 "args2")
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "map" 1 2)
            (("1" (lift-if)
              (("1" (split)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (expand "sum" 2 2)
                    (("2" (inst -2 "car(args2)")
                      (("2" (lemma "count_gt0[nominal_AC_term]")
                        (("2"
                          (inst -1 "equal?(G)" "args1" "car(args2)")
                          (("2" (assert)
                            (("2" (prop)
                              (("1"
                                (skolem -1 "i")
                                (("1"
                                  (lemma "size2_cons_remove")
                                  (("1"
                                    (inst -1 "args1" "i")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (expand "map" 2 1)
                                          (("1"
                                            (expand "sum" 2 1)
                                            (("1"
                                              (lemma "equal_size2")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (inst
                                                       -4
                                                       "cdr(args2)")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "G"
                                                           "remove(args1, i)")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (hide
                                                               -2
                                                               -3
                                                               -4
                                                               -5)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (reveal
                                                               -6)
                                                              (("2"
                                                                (hide
                                                                 3)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "t1")
                                                                    (("2"
                                                                      (expand
                                                                       "count "
                                                                       -1
                                                                       2)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (split)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (lemma
                                                                               "count_remove[nominal_AC_term]")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "equal?(G)"
                                                                                 "i"
                                                                                 "args1"
                                                                                 "t1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (lemma
                                                                               "count_remove[nominal_AC_term]")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "equal?(G)"
                                                                                 "i"
                                                                                 "args1"
                                                                                 "t1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          -6
                                                                                          1))
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "equal?_sym")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "G"
                                                                                             "nth(args1, i)"
                                                                                             "car(args2)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "equal?_trans")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "G"
                                                                                                   "t1"
                                                                                                   "nth(args1, i)"
                                                                                                   "car(args2)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case
                                 "count(car(args2), args2, equal?(G)) > 0")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (expand "count" 1)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (rewrite "equal?_ref")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep) (("2" (rewrite "equal?_equiv") nil nil)) nil))
      nil))
    nil)
   ((equal?_equiv formula-decl nil nominal_AC_equality nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (size2_cons_remove formula-decl nil nominal_AC_equality nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (equal_size2 formula-decl nil nominal_AC_equality nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (remove def-decl "list[T]" list_aux_equational_reasoning nil)
    (count_remove formula-decl nil list_aux_equational_reasoning nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil)
    (equal?_trans formula-decl nil nominal_AC_equality nil)
    (nth def-decl "T" list_props nil)
    (equal?_ref formula-decl nil nominal_AC_equality nil)
    (> const-decl "bool" reals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count_gt0 formula-decl nil list_aux_equational_reasoning nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (size2 def-decl "nat" nominal_AC_term_properties nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (sum def-decl "nat" list_aux_equational_reasoning_nat nil)
    (count def-decl "nat" list_aux_equational_reasoning nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (equivalence? const-decl "bool" relations nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (count_size2_ge-1 nil 3844609763
   ("" (measure-induct "length(args2)" "args2")
    (("1" (skolem 1 "args2")
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "map" 1 2)
            (("1" (lift-if)
              (("1" (split)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (expand "sum" 2 2)
                    (("2" (inst -2 "car(args2)")
                      (("2" (lemma "count_gt0[nominal_AC_term]")
                        (("2" (inst -1 "equal?" "args1" "car(args2)")
                          (("2" (assert)
                            (("2" (prop)
                              (("1"
                                (skolem -1 "i")
                                (("1"
                                  (lemma "size2_cons_remove")
                                  (("1"
                                    (inst -1 "args1" "i")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (expand "map" 2 1)
                                          (("1"
                                            (expand "sum" 2 1)
                                            (("1"
                                              (lemma "equal_size2")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (inst
                                                       -4
                                                       "cdr(args2)")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "remove(args1, i)")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (hide
                                                               -2
                                                               -3
                                                               -4
                                                               -5)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (reveal
                                                               -6)
                                                              (("2"
                                                                (hide
                                                                 3)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "t1")
                                                                    (("2"
                                                                      (expand
                                                                       "count "
                                                                       -1
                                                                       2)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (split)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (lemma
                                                                               "count_remove[nominal_AC_term]")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "equal?"
                                                                                 "i"
                                                                                 "args1"
                                                                                 "t1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (lemma
                                                                               "count_remove[nominal_AC_term]")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "equal?"
                                                                                 "i"
                                                                                 "args1"
                                                                                 "t1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          -6
                                                                                          1))
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "equal?_sym")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "nth(args1, i)"
                                                                                             "car(args2)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "equal?_trans")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "t1"
                                                                                                   "nth(args1, i)"
                                                                                                   "car(args2)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case
                                 "count(car(args2), args2, equal?) > 0")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (expand "count" 1)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (rewrite "equal?_ref")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (rewrite "equal?_equiv") nil nil))
    nil)
   ((equal?_equiv formula-decl nil nominal_AC_equality nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (size2_cons_remove formula-decl nil nominal_AC_equality nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (equal_size2 formula-decl nil nominal_AC_equality nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (count_remove formula-decl nil list_aux_equational_reasoning nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil)
    (equal?_trans formula-decl nil nominal_AC_equality nil)
    (nth def-decl "T" list_props nil)
    (equal?_ref formula-decl nil nominal_AC_equality nil)
    (> const-decl "bool" reals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count_gt0 formula-decl nil list_aux_equational_reasoning nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (size2 def-decl "nat" nominal_AC_term_properties nil)
    (sum def-decl "nat" list_aux_equational_reasoning_nat nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equivalence? const-decl "bool" relations nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (constant type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_eq2 0
  (count_eq2-1 nil 3848174578
   ("" (skeep)
    (("" (expand "count" 1)
      (("" (lemma "ac_perm_args2")
        (("" (inst -1 "G" "f" "t1" "t")
          (("" (assert)
            (("" (use "perm?_equiv_same_count?")
              (("" (assert)
                (("" (expand "same_count?" -1)
                  (("" (inst -1 "s") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((count const-decl "nat" nominal_AC_equality nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (perm type-eq-decl nil atoms nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (perm?_equiv_same_count? formula-decl nil nominal_AC_equality nil)
    (get_args const-decl "args" nominal_AC_term_properties nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (every adt-def-decl "boolean" list_adt nil)
    (same_count? const-decl "bool" list_aux_equational_reasoning nil)
    (ac_perm_args2 formula-decl nil nominal_AC_equality nil))
   shostak))
 (count_eq3 0
  (count_eq3-1 nil 3849015097
   ("" (skeep)
    (("" (expand "count" 1)
      (("" (lemma "count_eq[nominal_AC_term]")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((count const-decl "nat" nominal_AC_equality nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (every adt-def-decl "boolean" list_adt nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (get_args const-decl "args" nominal_AC_term_properties nil)
    (count_eq formula-decl nil list_aux_equational_reasoning nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil))
   shostak))
 (count_vec_len 0
  (count_vec_len-1 nil 3845834490
   ("" (induct "args1")
    (("1" (skeep)
      (("1" (expand "count_vec" 1)
        (("1" (assert)
          (("1" (expand "length" 1) (("1" (propax) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "length" 1 2)
            (("2" (expand "count_vec" 1)
              (("2" (expand "length" 1 1) (("2" (inst?) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length_null formula-decl nil more_list_props structures)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (count_vec def-decl "list[nat]" nominal_AC_equality nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (string type-eq-decl nil strings nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (every adt-def-decl "boolean" list_adt nil))
   shostak))
 (count_vec_append 0
  (count_vec_append-1 nil 3845835273
   ("" (induct "args1") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((get_args const-decl "args" nominal_AC_term_properties nil)
    (count const-decl "nat" nominal_AC_equality nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (append def-decl "list[T]" list_props nil)
    (count_vec def-decl "list[nat]" nominal_AC_equality nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (string type-eq-decl nil strings nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (every adt-def-decl "boolean" list_adt nil))
   shostak))
 (count_vec_equiv 0
  (count_vec_equiv-1 nil 3845842455
   ("" (measure-induct "length(args1)" "args1")
    (("1" (skolem 1 "args1")
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "map" 1 2)
            (("1" (lift-if)
              (("1" (prop)
                (("1" (expand "count_vec" 1)
                  (("1" (lift-if)
                    (("1" (assert)
                      (("1" (expand "map" 1) (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "map" 2 1)
                  (("2" (expand "count_vec" 2)
                    (("2" (lift-if)
                      (("2" (prop)
                        (("2" (expand "count" 2 3)
                          (("2" (expand "count" 2 1)
                            (("2" (inst -1 "cdr(args1)")
                              (("2"
                                (prop)
                                (("1"
                                  (inst?)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (expand "length" 1 2)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep) (("2" (rewrite "equal?_equiv") nil nil)) nil))
      nil))
    nil)
   ((equal?_equiv formula-decl nil nominal_AC_equality nil)
    (count const-decl "nat" nominal_AC_equality nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count_vec def-decl "list[nat]" nominal_AC_equality nil)
    (get_args const-decl "args" nominal_AC_term_properties nil)
    (count const-decl "nat" list_aux_equational_reasoning nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (string type-eq-decl nil strings nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (equivalence? const-decl "bool" relations nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_vec_nth_TCC1 0
  (count_vec_nth_TCC1-1 nil 3846530363
   ("" (skeep) (("" (rewrite "count_vec_len") nil nil)) nil)
   ((count_vec_len formula-decl nil nominal_AC_equality nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil))
   nil
   (count_vec_nth subtype "nominal_AC_equality.i"
    "below[length[nat](count_vec(args1, f, G)(t))]")))
 (count_vec_nth 0
  (count_vec_nth-1 nil 3846530363
   ("" (induct "args1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "count_vec" 1)
            (("2" (expand "nth" 1 1)
              (("2" (lift-if)
                (("2" (split 1)
                  (("1" (flatten) (("1" (grind) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (expand "nth" 2 2)
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (inst?) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "count_vec_len") nil nil)) nil))
      nil))
    nil)
   ((count_vec_len formula-decl nil nominal_AC_equality nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (get_args const-decl "args" nominal_AC_term_properties nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (count const-decl "nat" nominal_AC_equality nil)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every adt-def-decl "boolean" list_adt nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (string type-eq-decl nil strings nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (count_vec def-decl "list[nat]" nominal_AC_equality nil))
   shostak))
 (count_vec_perm_aux 0
  (count_vec_perm_aux-1 nil 3847550705
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "nth" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (expand "remove" 1)
                  (("1" (expand "length" -3 1)
                    (("1" (lift-if)
                      (("1" (assert)
                        (("1" (prop) (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "length" -2)
                  (("2" (lift-if)
                    (("2" (assert)
                      (("2" (prop)
                        (("2" (expand "remove" 3)
                          (("2" (lift-if)
                            (("2" (assert)
                              (("2"
                                (expand "count_vec" 3 2)
                                (("2"
                                  (expand "sum" 3 2)
                                  (("2"
                                    (expand "count_vec" 3 1)
                                    (("2"
                                      (expand "sum" 3 1)
                                      (("2"
                                        (inst -2 "cdr(args1)")
                                        (("2"
                                          (prop)
                                          (("1" (grind) nil nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (get_args const-decl "args" nominal_AC_term_properties nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (remove def-decl "list[T]" list_aux_equational_reasoning nil)
    (nth def-decl "T" list_props nil)
    (count const-decl "nat" nominal_AC_equality nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (count_vec def-decl "list[nat]" nominal_AC_equality nil)
    (sum def-decl "nat" list_aux_equational_reasoning_nat nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_vec_perm 0
  (count_vec_perm-1 nil 3847549773
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "count_vec" 1 1)
              (("" (lift-if)
                (("" (lemma "perm?_len")
                  (("" (inst?)
                    (("" (assert)
                      (("" (split)
                        (("1" (grind) nil nil)
                         ("2" (flatten)
                          (("2" (lemma "perm?_trans_aux")
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (inst -1 "0")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (skolem -1 "j")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide -5)
                                          (("1"
                                            (expand "nth" -2 1)
                                            (("1"
                                              (expand "sum" 2 1)
                                              (("1"
                                                (lemma
                                                 "count_vec_perm_aux")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "G"
                                                   "args2"
                                                   "f"
                                                   "j"
                                                   "t")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (reveal -7)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "cdr(args1)")
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "G"
                                                                 "remove(args2, j)"
                                                                 "f"
                                                                 "t")
                                                                (("1"
                                                                  (expand
                                                                   "remove"
                                                                   -4
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "count"
                                                                             2)
                                                                            (("1"
                                                                              (hide
                                                                               -3)
                                                                              (("1"
                                                                                (lemma
                                                                                 "ac_perm_args2")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "f")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (use
                                                                                         "perm?_equiv_same_count?")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "same_count?"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "t")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((perm?_len formula-decl nil nominal_AC_equality nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (same_count? const-decl "bool" list_aux_equational_reasoning nil)
    (get_args const-decl "args" nominal_AC_term_properties nil)
    (perm?_equiv_same_count? formula-decl nil nominal_AC_equality nil)
    (ac_perm_args2 formula-decl nil nominal_AC_equality nil)
    (count const-decl "nat" nominal_AC_equality nil)
    (remove def-decl "list[T]" list_aux_equational_reasoning nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (count_vec_perm_aux formula-decl nil nominal_AC_equality nil)
    (nth def-decl "T" list_props nil)
    (perm?_trans_aux formula-decl nil nominal_AC_equality nil)
    (count_vec def-decl "list[nat]" nominal_AC_equality nil)
    (sum def-decl "nat" list_aux_equational_reasoning_nat nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_vec_eq 0
  (count_vec_eq-1 nil 3886591943
   ("" (induct "args1")
    (("1" (skeep)
      (("1" (expand "count_vec" 1 1)
        (("1" (expand "count_vec" 1)
          (("1" (expand "equal?" -1)
            (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "equal?" -2)
            (("2" (split)
              (("1" (propax) nil nil)
               ("2" (flatten)
                (("2" (expand "count_vec" 2)
                  (("2" (assert)
                    (("2" (decompose-equality 2)
                      (("1" (expand "count" 1)
                        (("1" (use "ac_perm_args2")
                          (("1" (assert)
                            (("1" (rewrite "perm?_equiv_same_count?")
                              (("1"
                                (expand "same_count?")
                                (("1" (inst?) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst -3 "G" "cdr(args2)" "f" "t")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (count const-decl "nat" nominal_AC_equality nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ac_perm_args2 formula-decl nil nominal_AC_equality nil)
    (get_args const-decl "args" nominal_AC_term_properties nil)
    (perm?_equiv_same_count? formula-decl nil nominal_AC_equality nil)
    (same_count? const-decl "bool" list_aux_equational_reasoning nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (count_vec def-decl "list[nat]" nominal_AC_equality nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (every adt-def-decl "boolean" list_adt nil))
   shostak))
 (count_vec_get_repeat_lst 0
  (count_vec_get_repeat_lst-1 nil 3847553724
   ("" (induct "n") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (get_args const-decl "args" nominal_AC_term_properties nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (count const-decl "nat" nominal_AC_equality nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (get_repeat_lst def-decl "list[T]" list_aux_equational_reasoning nil)
    (count_vec def-decl "list[nat]" nominal_AC_equality nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (sum def-decl "nat" list_aux_equational_reasoning_nat nil)
    (every adt-def-decl "boolean" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (perm type-eq-decl nil atoms nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (count_vec_get_lst_mult 0
  (count_vec_get_lst_mult-1 nil 3847553336
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "get_lst_mult" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (rewrite "count_vec_append")
                  (("3" (rewrite "sum_append")
                    (("3" (expand "count_vec" 3 3)
                      (("3" (lift-if)
                        (("3" (assert)
                          (("3" (expand "dot_product" 3)
                            (("3" (use "count_vec_get_repeat_lst")
                              (("3"
                                (replace -1)
                                (("3"
                                  (assert)
                                  (("3"
                                    (hide -1)
                                    (("3"
                                      (inst -1 "cdr(args1)")
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (get_repeat_lst def-decl "list[T]" list_aux_equational_reasoning nil)
    (count_vec_append formula-decl nil nominal_AC_equality nil)
    (count_vec_get_repeat_lst formula-decl nil nominal_AC_equality nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sum_append formula-decl nil list_aux_equational_reasoning_nat nil)
    (dot_product def-decl "nat" list_aux_equational_reasoning_nat nil)
    (get_lst_mult def-decl "list[T]" list_aux_equational_reasoning nil)
    (count_vec def-decl "list[nat]" nominal_AC_equality nil)
    (sum def-decl "nat" list_aux_equational_reasoning_nat nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (string type-eq-decl nil strings nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_vec_get_lst_mult2 0
  (count_vec_get_lst_mult2-1 nil 3886774121
   ("" (skeep)
    (("" (prop)
      (("1" (use "perm?_equiv_same_count?")
        (("1" (assert)
          (("1" (expand "same_count?" 1)
            (("1" (skolem 1 "t")
              (("1" (hide 2)
                (("1" (inst -1 "t")
                  (("1" (rewrite "count_vec_get_lst_mult" :dir rl)
                    (("1" (rewrite "count_vec_get_lst_mult" :dir rl)
                      (("1" (rewrite "count_vec_equiv" :dir rl)
                        (("1" (rewrite "count_vec_equiv" :dir rl)
                          (("1" (rewrite "count_flatten" :dir rl)
                            (("1" (rewrite "count_flatten" :dir rl) nil
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (use "perm?_equiv_same_count?")
          (("2" (assert)
            (("2" (hide -2)
              (("2" (expand "same_count?" -1)
                (("2" (inst -1 "t")
                  (("2" (rewrite "count_flatten")
                    (("2" (rewrite "count_flatten")
                      (("2" (rewrite "count_vec_equiv")
                        (("2" (rewrite "count_vec_equiv")
                          (("2" (rewrite "count_vec_get_lst_mult")
                            (("2" (rewrite "count_vec_get_lst_mult")
                              nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((count_flatten formula-decl nil list_aux_equational_reasoning nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (count_vec_equiv formula-decl nil nominal_AC_equality nil)
    (count_vec_get_lst_mult formula-decl nil nominal_AC_equality nil)
    (same_count? const-decl "bool" list_aux_equational_reasoning nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (flatten def-decl "list[T]" list_aux_equational_reasoning nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (string type-eq-decl nil strings nil)
    (get_args const-decl "args" nominal_AC_term_properties nil)
    (get_lst_mult def-decl "list[T]" list_aux_equational_reasoning nil)
    (perm?_equiv_same_count? formula-decl nil nominal_AC_equality nil))
   shostak))
 (count_vec_map 0
  (count_vec_map-1 nil 3848174774
   ("" (induct "args1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "count_vec" 1 1)
            (("2" (expand "map" 1)
              (("2" (expand "count" 1 2) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_args const-decl "args" nominal_AC_term_properties nil)
    (count const-decl "nat" nominal_AC_equality nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (count const-decl "nat" nominal_AC_equality nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (count_vec def-decl "list[nat]" nominal_AC_equality nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (string type-eq-decl nil strings nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (every adt-def-decl "boolean" list_adt nil))
   shostak))
 (member_ac_perm 0
  (member_ac_perm-2 nil 3881091629
   ("" (skeep)
    (("" (iff)
      (("" (prop)
        (("1" (expand "member_ac" -1)
          (("1" (skolem -1 "t")
            (("1" (prop)
              (("1" (rewrite "perm?_equiv_same_count?")
                (("1" (lemma "count_mem[nominal_AC_term]")
                  (("1" (inst -1 "equal?(G)" "args1" "t")
                    (("1" (assert)
                      (("1" (expand "same_count?" -4)
                        (("1" (inst -4 "t")
                          (("1" (lemma "count_gt0[nominal_AC_term]")
                            (("1" (inst -1 "equal?(G)" "args2" "t")
                              (("1"
                                (assert)
                                (("1"
                                  (skolem -1 "i")
                                  (("1"
                                    (expand "member_ac" 1)
                                    (("1"
                                      (inst 1 "nth(args2, i)")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (lemma "equal?_trans")
                                          (("1"
                                            (inst
                                             -1
                                             "G"
                                             "s"
                                             "t"
                                             "nth(args2, i)")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "member_nth_lst")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "member_ac" 1)
          (("2" (expand "member_ac" -1)
            (("2" (rewrite "perm?_equiv_same_count?")
              (("2" (skolem -1 "t")
                (("2" (prop)
                  (("2" (lemma "count_mem[nominal_AC_term]")
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (inst -1 "equal?(G)")
                          (("2" (expand "same_count?" -4)
                            (("2" (inst -4 "t")
                              (("2"
                                (lemma "count_gt0[nominal_AC_term]")
                                (("2"
                                  (inst -1 "equal?(G)" "args1" "t")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skolem -1 "i")
                                      (("2"
                                        (inst 1 "nth(args1, i)")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (lemma "equal?_trans")
                                            (("1"
                                              (inst
                                               -1
                                               "G"
                                               "s"
                                               "t"
                                               "nth(args1, i)")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "member_nth_lst")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member_ac const-decl "bool" nominal_AC_equality nil)
    (count_mem formula-decl nil list_aux_equational_reasoning nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member_nth_lst formula-decl nil list_aux_equational_reasoning nil)
    (equal?_trans formula-decl nil nominal_AC_equality nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count_gt0 formula-decl nil list_aux_equational_reasoning nil)
    (same_count? const-decl "bool" list_aux_equational_reasoning nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (equivalence? const-decl "bool" relations nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (perm?_equiv_same_count? formula-decl nil nominal_AC_equality nil))
   nil)
  (member_ac_perm-1 nil 3846517979
   ("" (skeep)
    (("" (iff)
      (("" (prop)
        (("1" (expand "member_ac" -1)
          (("1" (skolem -1 "t")
            (("1" (prop)
              (("1" (rewrite "perm?_equiv_same_count?")
                (("1" (lemma "count_mem[nominal_AC_term]")
                  (("1" (inst -1 "equal?" "args1" "t")
                    (("1" (assert)
                      (("1" (expand "same_count?" -4)
                        (("1" (inst -4 "t")
                          (("1" (lemma "count_gt0[nominal_AC_term]")
                            (("1" (inst -1 "equal?" "args2" "t")
                              (("1"
                                (assert)
                                (("1"
                                  (skolem -1 "i")
                                  (("1"
                                    (expand "member_ac" 1)
                                    (("1"
                                      (inst 1 "nth(args2, i)")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (lemma "equal?_trans")
                                          (("1"
                                            (inst
                                             -1
                                             "s"
                                             "t"
                                             "nth(args2, i)")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "member_nth_lst")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "member_ac" 1)
          (("2" (expand "member_ac" -1)
            (("2" (rewrite "perm?_equiv_same_count?")
              (("2" (skolem -1 "t")
                (("2" (prop)
                  (("2" (lemma "count_mem[nominal_AC_term]")
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (inst -1 "equal?")
                          (("2" (expand "same_count?" -4)
                            (("2" (inst -4 "t")
                              (("2"
                                (lemma "count_gt0[nominal_AC_term]")
                                (("2"
                                  (inst -1 "equal?" "args1" "t")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skolem -1 "i")
                                      (("2"
                                        (inst 1 "nth(args1, i)")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (lemma "equal?_trans")
                                            (("1"
                                              (inst
                                               -1
                                               "s"
                                               "t"
                                               "nth(args1, i)")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "member_nth_lst")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member_ac const-decl "bool" nominal_AC_equality nil)
    (count_mem formula-decl nil list_aux_equational_reasoning nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil nominal_AC_term_properties nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member_nth_lst formula-decl nil list_aux_equational_reasoning nil)
    (equal?_trans formula-decl nil nominal_AC_equality nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count_gt0 formula-decl nil list_aux_equational_reasoning nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (equivalence? const-decl "bool" relations nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (perm?_equiv_same_count? formula-decl nil nominal_AC_equality nil))
   shostak))
 (member_ac_count_elem2 0
  (member_ac_count_elem2-2 nil 3881091724
   ("" (measure-induct "length(args1)" "args1")
    (("1" (skolem 1 "args1")
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "count_elem2" 1)
            (("1" (lift-if)
              (("1" (prop)
                (("1" (grind) nil nil)
                 ("2" (skolem -3 "s")
                  (("2" (prop)
                    (("2" (case "equal?(G)(s, car(args1))")
                      (("1" (expand "member_ac" 2)
                        (("1" (inst 2 "car(args1)")
                          (("1" (prop)
                            (("1" (lemma "equal?_equiv")
                              (("1"
                                (inst -1 "G")
                                (("1"
                                  (expand "equivalence?" -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "transitive?" -3)
                                      (("1"
                                        (inst -3 "t" "s" "car(args1)")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "member" 1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (inst -1
                         "remove(args1, car(args1), equal?(G))")
                        (("2" (prop)
                          (("1"
                            (inst -1 "G"
                             "remove(args2, car(args1), equal?(G))"
                             "t")
                            (("1" (prop)
                              (("1"
                                (expand "member_ac" -1)
                                (("1"
                                  (skolem -1 "t1")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "member_ac" 3)
                                      (("1"
                                        (inst 3 "t1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "member" 3)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 4)
                                (("2"
                                  (rewrite "perm?_equiv_same_count?")
                                  (("2"
                                    (rewrite "perm?_equiv_same_count?")
                                    (("2"
                                      (expand "same_count?" 1)
                                      (("2"
                                        (skolem 1 "x")
                                        (("2"
                                          (expand "same_count?" -1)
                                          (("2"
                                            (inst -1 "x")
                                            (("2"
                                              (lemma
                                               "count_remove2[nominal_AC_term]")
                                              (("2"
                                                (inst
                                                 -1
                                                 "equal?(G)"
                                                 "args1"
                                                 "car(args1)"
                                                 "x")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (replace -2)
                                                    (("1"
                                                      (lemma
                                                       "count_remove2[nominal_AC_term]")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "equal?(G)"
                                                         "args2"
                                                         "car(args1)"
                                                         "x")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -1)
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (lemma
                                                         "count_remove2[nominal_AC_term]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "equal?(G)"
                                                           "args2"
                                                           "car(args1)"
                                                           "x")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (inst 1 "s")
                                (("3"
                                  (prop)
                                  (("3"
                                    (use "remove_elem_mem[nominal_AC_term]")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "remove" 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (use "remove_elem_len[nominal_AC_term]")
                                  (("1"
                                    (assert)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "equal?_equiv")
                                  (("2"
                                    (expand "equivalence?" -1)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "reflexive?" -1)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (inst -1 "car(args1)")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep) (("2" (rewrite "equal?_equiv") nil nil)) nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (equal?_equiv formula-decl nil nominal_AC_equality nil)
    (transitive? const-decl "bool" relations nil)
    (perm?_equiv_same_count? formula-decl nil nominal_AC_equality nil)
    (same_count? const-decl "bool" list_aux_equational_reasoning nil)
    (count_remove2 formula-decl nil list_aux_equational_reasoning nil)
    (remove_elem_mem formula-decl nil list_aux_equational_reasoning nil)
    (reflexive? const-decl "bool" relations nil)
    (remove_elem_len formula-decl nil list_aux_equational_reasoning nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (remove def-decl "list[T]" list_aux_equational_reasoning nil)
    (count_elem2 def-decl "[list[T], list[nat]]" list_aux_equational_reasoning nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (member_ac const-decl "bool" nominal_AC_equality nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (member def-decl "bool" list_props nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (equivalence? const-decl "bool" relations nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (member_ac_count_elem2-1 nil 3848855193
   ("" (measure-induct "length(args1)" "args1")
    (("1" (skolem 1 "args1")
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "count_elem2" 1)
            (("1" (lift-if)
              (("1" (prop)
                (("1" (grind) nil nil)
                 ("2" (skolem -3 "s")
                  (("2" (prop)
                    (("2" (case "equal?(s, car(args1))")
                      (("1" (expand "member_ac" 2)
                        (("1" (inst 2 "car(args1)")
                          (("1" (prop)
                            (("1" (lemma "equal?_equiv")
                              (("1"
                                (expand "equivalence?" -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "transitive?" -3)
                                    (("1"
                                      (inst -3 "t" "s" "car(args1)")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "member" 1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (inst -1 "remove(args1, car(args1), equal?)")
                        (("2" (prop)
                          (("1"
                            (inst -1
                             "remove(args2, car(args1), equal?)" "t")
                            (("1" (prop)
                              (("1"
                                (expand "member_ac" -1)
                                (("1"
                                  (skolem -1 "t1")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "member_ac" 3)
                                      (("1"
                                        (inst 3 "t1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "member" 3)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 4)
                                (("2"
                                  (rewrite "perm?_equiv_same_count?")
                                  (("2"
                                    (rewrite "perm?_equiv_same_count?")
                                    (("2"
                                      (expand "same_count?" 1)
                                      (("2"
                                        (skolem 1 "x")
                                        (("2"
                                          (expand "same_count?" -1)
                                          (("2"
                                            (inst -1 "x")
                                            (("2"
                                              (lemma
                                               "count_remove2[nominal_AC_term]")
                                              (("2"
                                                (inst
                                                 -1
                                                 "equal?"
                                                 "args1"
                                                 "car(args1)"
                                                 "x")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (replace -2)
                                                    (("1"
                                                      (lemma
                                                       "count_remove2[nominal_AC_term]")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "equal?"
                                                         "args2"
                                                         "car(args1)"
                                                         "x")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -1)
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (lemma
                                                         "count_remove2[nominal_AC_term]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "equal?"
                                                           "args2"
                                                           "car(args1)"
                                                           "x")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (inst 1 "s")
                                (("3"
                                  (prop)
                                  (("3"
                                    (use "remove_elem_mem[nominal_AC_term]")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "remove" 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (use "remove_elem_len[nominal_AC_term]")
                                  (("1"
                                    (assert)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "equal?_equiv")
                                  (("2"
                                    (expand "equivalence?" -1)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "reflexive?" -1)
                                        (("2"
                                          (inst -1 "car(args1)")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep) (("2" (rewrite "equal?_equiv") nil nil)) nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (equal?_equiv formula-decl nil nominal_AC_equality nil)
    (transitive? const-decl "bool" relations nil)
    (perm?_equiv_same_count? formula-decl nil nominal_AC_equality nil)
    (count_remove2 formula-decl nil list_aux_equational_reasoning nil)
    (remove_elem_mem formula-decl nil list_aux_equational_reasoning nil)
    (reflexive? const-decl "bool" relations nil)
    (remove_elem_len formula-decl nil list_aux_equational_reasoning nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count_elem2 def-decl "[list[T], list[nat]]" list_aux_equational_reasoning nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (member_ac const-decl "bool" nominal_AC_equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (member def-decl "bool" list_props nil)
    (equivalence? const-decl "bool" relations nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (constant type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (vars_count_elem2 0
  (vars_count_elem2-2 nil 3881092031
   ("" (skeep)
    (("" (use "subset_antisymmetric[variable]")
      (("" (assert)
        (("" (prop)
          (("1" (expand "subset?" 1)
            (("1" (skeep)
              (("1" (hide 2)
                (("1" (use "vars_args")
                  (("1" (assert)
                    (("1" (skolem -1 "t")
                      (("1" (prop)
                        (("1" (use "count_elem2_mem")
                          (("1" (assert)
                            (("1" (rewrite "vars_args" 1)
                              (("1"
                                (inst 1 "t")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (expand "subset?" 1)
              (("2" (skolem 1 "x")
                (("2" (prop)
                  (("2" (rewrite "vars_args")
                    (("2" (skolem -1 "t")
                      (("2" (prop)
                        (("2" (lemma "count_elem2_mem2")
                          (("2" (inst -1 "equal?(G)" "args1" "t")
                            (("2" (assert)
                              (("2"
                                (skolem -1 "t1")
                                (("2"
                                  (prop)
                                  (("2"
                                    (rewrite "vars_args" 1)
                                    (("2"
                                      (inst 1 "t1")
                                      (("2"
                                        (prop)
                                        (("2"
                                          (use "equal?_vars")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_antisymmetric formula-decl nil sets_lemmas nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (count_elem2 def-decl "[list[T], list[nat]]" list_aux_equational_reasoning nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (equivalence? const-decl "bool" relations nil)
    (vars def-decl "finite_set[variable]" nominal_AC_term_properties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (set type-eq-decl nil sets nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (count_elem2_mem formula-decl nil list_aux_equational_reasoning_more nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning_more nil)
    (subset? const-decl "bool" sets nil)
    (count_elem2_mem2 formula-decl nil list_aux_equational_reasoning_more nil)
    (equal?_vars formula-decl nil nominal_AC_equality nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   nil)
  (vars_count_elem2-1 nil 3848929331
   ("" (skeep)
    (("" (use "subset_antisymmetric[variable]")
      (("" (assert)
        (("" (prop)
          (("1" (expand "subset?" 1)
            (("1" (skeep)
              (("1" (hide 2)
                (("1" (use "vars_args")
                  (("1" (assert)
                    (("1" (skolem -1 "t")
                      (("1" (prop)
                        (("1" (use "count_elem2_mem")
                          (("1" (assert)
                            (("1" (rewrite "vars_args" 1)
                              (("1"
                                (inst 1 "t")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (expand "subset?" 1)
              (("2" (skolem 1 "x")
                (("2" (prop)
                  (("2" (rewrite "vars_args")
                    (("2" (skolem -1 "t")
                      (("2" (prop)
                        (("2" (lemma "count_elem2_mem2")
                          (("2" (inst -1 "equal?" "args1" "t")
                            (("2" (assert)
                              (("2"
                                (skolem -1 "t1")
                                (("2"
                                  (prop)
                                  (("2"
                                    (rewrite "vars_args" 1)
                                    (("2"
                                      (inst 1 "t1")
                                      (("2"
                                        (prop)
                                        (("2"
                                          (use "equal?_vars")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (equal?_vars formula-decl nil nominal_AC_equality nil)
    (count_elem2_mem2 formula-decl nil list_aux_equational_reasoning_more nil)
    (subset? const-decl "bool" sets nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning_more nil)
    (count_elem2_mem formula-decl nil list_aux_equational_reasoning_more nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (constant type-eq-decl nil nominal_AC_term_properties nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (count_elem2 def-decl "[list[T], list[nat]]" list_aux_equational_reasoning nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil))
   shostak))
 (no_pair_ac_count_elem2 0
  (no_pair_ac_count_elem2-1 nil 3849014574
   ("" (skeep)
    (("" (iff)
      (("" (prop)
        (("1" (expand "no_pair_ac?" -1)
          (("1" (expand "no_pair_ac?" 1)
            (("1" (skeep)
              (("1" (use "count_elem2_mem2")
                (("1" (assert)
                  (("1" (skolem -1 "t1")
                    (("1" (prop)
                      (("1" (inst -4 "t1") (("1" (grind) nil nil)) nil)
                       ("2" (inst -4 "t1") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "equal?_equiv") nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "no_pair_ac?" 1)
          (("2" (skeep)
            (("2" (expand "no_pair_ac?" -1)
              (("2" (inst -1 "t")
                (("2" (assert)
                  (("2" (split -1)
                    (("1" (propax) nil nil)
                     ("2" (use "count_elem2_mem")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((count_elem2_mem formula-decl nil list_aux_equational_reasoning_more nil)
    (no_pair_ac? const-decl "bool" nominal_AC_term_properties nil)
    (equal?_equiv formula-decl nil nominal_AC_equality nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (num_arg def-decl "nat" nominal_AC_term_properties nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (G skolem-const-decl "fresh_context" nominal_AC_equality nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning_more nil)
    (every adt-def-decl "boolean" list_adt nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (count_elem2_mem2 formula-decl nil list_aux_equational_reasoning_more nil))
   nil))
 (var_lst_dif_elem_TCC1 0
  (var_lst_dif_elem_TCC1-1 nil 3849439699 ("" (subtype-tcc) nil nil)
   ((atom type-eq-decl nil atoms nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil))
   nil (var_lst_dif_elem subtype "=" "equiv[atom]")))
 (var_lst_dif_elem 0
  (var_lst_dif_elem-1 nil 3849439700
   ("" (skeep)
    (("" (prop)
      (("1" (expand "dif_elem?" 1)
        (("1" (skeep)
          (("1" (rewrite "var_lst_len")
            (("1" (expand "dif_elem?" -1)
              (("1" (inst -1 "i" "j")
                (("1" (assert)
                  (("1" (use "var_lst_nth")
                    (("1" (assert)
                      (("1" (replace -1)
                        (("1" (hide -1)
                          (("1" (use "var_lst_nth")
                            (("1" (assert)
                              (("1"
                                (replace -1)
                                (("1"
                                  (expand "equal?" -4)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "dif_elem?" -1)
        (("2" (expand "dif_elem?" 1)
          (("2" (skeep)
            (("2" (inst -1 "i" "j")
              (("2" (rewrite "var_lst_len")
                (("2" (assert)
                  (("2" (use "var_lst_nth")
                    (("2" (assert)
                      (("2" (replace -1)
                        (("2" (hide -1)
                          (("2" (use "var_lst_nth")
                            (("2" (assert)
                              (("2"
                                (replace -1)
                                (("2"
                                  (replace -4)
                                  (("2" (use "equal?_ref") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (var_lst_nth formula-decl nil nominal_AC_term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (var_lst_len formula-decl nil nominal_AC_term_properties nil)
    (dif_elem? const-decl "bool" list_aux_equational_reasoning nil)
    (equal?_ref formula-decl nil nominal_AC_equality nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (perm type-eq-decl nil atoms nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil))
   shostak))
 (well_formed_count_elem2 0
  (well_formed_count_elem2-1 nil 3849703230
   ("" (skeep)
    (("" (expand "well_formed?" 1)
      (("" (skeep)
        (("" (expand "well_formed?" -1)
          (("" (prop)
            (("1" (inst -3 "t")
              (("1" (assert)
                (("1" (rewrite "subterm_args")
                  (("1" (skolem -1 "t1")
                    (("1" (flatten)
                      (("1" (rewrite "subterm_args")
                        (("1" (inst 2 "t1")
                          (("1" (assert)
                            (("1" (use "count_elem2_mem")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst -3 "t")
              (("2" (assert)
                (("2" (use "count_elem2_mem") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((well_formed? const-decl "bool" nominal_AC_term_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (subterm_args formula-decl nil nominal_AC_term_properties nil)
    (every adt-def-decl "boolean" list_adt nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (count_elem2 def-decl "[list[T], list[nat]]" list_aux_equational_reasoning nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (count_elem2_mem formula-decl nil list_aux_equational_reasoning_more nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning_more nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (count_elem_size 0
  (count_elem_size-1 nil 3884886533
   ("" (induct "args2")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "size" 1 3)
            (("2" (expand "count_elem" 1 1)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (inst?) (("1" (assert) nil nil)) nil)
                   ("2" (inst?)
                    (("2" (use "size_args_append")
                      (("2" (assert)
                        (("2" (expand "size" -1 2)
                          (("2" (expand "size" -1 3)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep) (("3" (rewrite "equal?_equiv") nil nil)) nil))
    nil)
   ((equal?_equiv formula-decl nil nominal_AC_equality nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (increment def-decl "list[nat]" list_aux_equational_reasoning nil)
    (pos? def-decl "[bool, nat]" list_aux_equational_reasoning nil)
    (size_args_append formula-decl nil nominal_AC_term_properties nil)
    (append def-decl "list[T]" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (count_elem def-decl "[list[T], list[nat]]" list_aux_equational_reasoning nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (size def-decl "nat" nominal_AC_term_properties nil)
    (<= const-decl "bool" reals nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (every adt-def-decl "boolean" list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (equivalence? const-decl "bool" relations nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (count_elem_size_cor 0
  (count_elem_size_cor-1 nil 3884889328
   ("" (skeep)
    (("" (use "count_elem_size")
      (("" (assert) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((count_elem_size formula-decl nil nominal_AC_equality nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (size def-decl "nat" nominal_AC_term_properties nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (no_common_args_sym 0
  (no_common_args_sym-1 nil 3886579158 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (no_common_args? const-decl "bool" nominal_AC_equality nil))
   shostak))
 (remove_common_size 0
  (remove_common_size-1 nil 3884889366
   ("" (induct "args1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "remove_common" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (inst?) (("1" (grind) nil nil)) nil)
                 ("2" (expand "size" 2)
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "equal?_equiv") nil nil)) nil))
      nil))
    nil)
   ((equal?_equiv formula-decl nil nominal_AC_equality nil)
    (pos? def-decl "[bool, nat]" list_aux_equational_reasoning nil)
    (remove def-decl "list[T]" list_aux_equational_reasoning nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (remove_common def-decl "list[T]" list_aux_equational_reasoning nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (size def-decl "nat" nominal_AC_term_properties nil)
    (<= const-decl "bool" reals nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (every adt-def-decl "boolean" list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (equivalence? const-decl "bool" relations nil)
    (equal? def-decl "bool" nominal_AC_equality nil))
   shostak))
 (remove_common_no_common 0
  (remove_common_no_common-2 nil 3881092139
   ("" (measure-induct "length(args1)" "args1")
    (("1" (skolem 1 "args1")
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "remove_common" 1 1)
            (("1" (lift-if)
              (("1" (prop)
                (("1" (assert) nil nil)
                 ("2" (expand "no_common_args?" -3)
                  (("2" (inst -3 "car(args1)")
                    (("2" (flatten)
                      (("2" (hide -4)
                        (("2" (prop)
                          (("1" (lemma "count_pos?2[nominal_AC_term]")
                            (("1"
                              (inst -1 "equal?(G)" "args2"
                               "car(args1)")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (expand "count" 1 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1" (assert) nil nil)
                                 ("2" (use "equal?_ref") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (decompose-equality 2)
                  (("3" (inst -1 "cdr(args1)")
                    (("3" (prop)
                      (("1" (inst -1 "G" "args2")
                        (("1" (assert)
                          (("1" (expand "no_common_args?" 1)
                            (("1" (skeep)
                              (("1"
                                (expand "no_common_args?" -1)
                                (("1"
                                  (inst -1 "t")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "count" 1 1)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (prop)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil)
                                     ("3"
                                      (expand "count" -1 1)
                                      (("3"
                                        (lift-if)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (expand "count" -1)
                                      (("4"
                                        (lift-if)
                                        (("4"
                                          (prop)
                                          (("4" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "length" 1 2)
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep) (("2" (rewrite "equal?_equiv") nil nil)) nil))
      nil))
    nil)
   ((equal?_equiv formula-decl nil nominal_AC_equality nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count_pos?2 formula-decl nil list_aux_equational_reasoning nil)
    (equal?_ref formula-decl nil nominal_AC_equality nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (count def-decl "nat" list_aux_equational_reasoning nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (remove_common def-decl "list[T]" list_aux_equational_reasoning nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (no_common_args? const-decl "bool" nominal_AC_equality nil)
    (equivalence? const-decl "bool" relations nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (remove_common_no_common-1 nil 3849697922
   ("" (measure-induct "length(args1)" "args1")
    (("1" (skolem 1 "args1")
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "remove_common" 1 1)
            (("1" (lift-if)
              (("1" (prop)
                (("1" (assert) nil nil)
                 ("2" (expand "no_common_args?" -3)
                  (("2" (inst -3 "car(args1)")
                    (("2" (flatten)
                      (("2" (hide -4)
                        (("2" (prop)
                          (("1" (lemma "count_pos?2[nominal_AC_term]")
                            (("1"
                              (inst -1 "equal?" "args2" "car(args1)")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (expand "count" 1 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1" (assert) nil nil)
                                 ("2" (use "equal?_ref") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (decompose-equality 2)
                  (("3" (inst -1 "cdr(args1)")
                    (("3" (prop)
                      (("1" (inst -1 "args2")
                        (("1" (assert)
                          (("1" (expand "no_common_args?" 1)
                            (("1" (skeep)
                              (("1"
                                (expand "no_common_args?" -1)
                                (("1"
                                  (inst -1 "t")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "count" 1 1)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (prop)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil)
                                     ("3"
                                      (expand "count" -1 1)
                                      (("3"
                                        (lift-if)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (expand "count" -1)
                                      (("4"
                                        (lift-if)
                                        (("4"
                                          (prop)
                                          (("4" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "length" 1 2)
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep) (("2" (rewrite "equal?_equiv") nil nil)) nil))
      nil))
    nil)
   ((equal?_equiv formula-decl nil nominal_AC_equality nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count_pos?2 formula-decl nil list_aux_equational_reasoning nil)
    (equal?_ref formula-decl nil nominal_AC_equality nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (remove_common def-decl "list[T]" list_aux_equational_reasoning nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (no_common_args? const-decl "bool" nominal_AC_equality nil)
    (equivalence? const-decl "bool" relations nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (constant type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (remove_common_sym 0
  (remove_common_sym-1 nil 3849799885
   ("" (skeep)
    (("" (prop)
      (("1" (expand "remove_common" 1) (("1" (propax) nil nil)) nil)
       ("2" (expand "remove_common" 1) (("2" (propax) nil nil)) nil))
      nil))
    nil)
   ((remove_common const-decl "[nominal_AC_term, nominal_AC_term]" nominal_AC_equality nil)) shostak))
 (remove_common_no_pair_ac 0
  (remove_common_no_pair_ac-1 nil 3886494480
   ("" (skeep)
    (("" (expand "no_pair_ac?")
      (("" (skolem 1 "t1")
        (("" (flatten)
          (("" (use "remove_common_mem[nominal_AC_term]")
            (("" (assert)
              (("" (use "get_args_mem_not_pair")
                (("" (use "get_args_mem_not_ac")
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((no_pair_ac? const-decl "bool" nominal_AC_term_properties nil)
    (get_args_mem_not_ac formula-decl nil nominal_AC_term_properties nil)
    (get_args_mem_not_pair formula-decl nil nominal_AC_term_properties nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (every adt-def-decl "boolean" list_adt nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (get_args const-decl "args" nominal_AC_term_properties nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (remove_common_mem formula-decl nil list_aux_equational_reasoning nil))
   shostak))
 (remove_common_no_common2 0
  (remove_common_no_common2-1 nil 3886511346
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "t1" "remove_common(t, s, f, G)`1")
        (("" (name-replace "s1" "remove_common(t, s, f, G)`2")
          (("" (flatten)
            (("" (reveal -1 -2)
              (("" (expand "remove_common" -2)
                (("" (replace -2 3 :dir rl)
                  (("" (use "get_args_get_ac_from_args2")
                    (("" (assert)
                      (("" (split -1)
                        (("1" (replace -1)
                          (("1" (hide -1)
                            (("1" (expand "remove_common" -1)
                              (("1"
                                (replace -1 :dir rl)
                                (("1"
                                  (use "get_args_get_ac_from_args2")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (hide -1 -2 -3)
                                          (("1"
                                            (expand
                                             "no_common_args?"
                                             3)
                                            (("1"
                                              (skolem 3 "u")
                                              (("1"
                                                (name-replace
                                                 "At"
                                                 "get_args(f)(t)")
                                                (("1"
                                                  (name-replace
                                                   "A_s"
                                                   "get_args(f)(s)")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (lemma
                                                       "remove_common_count_gt[nominal_AC_term]")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (use
                                                             "remove_common_count_gt0[nominal_AC_term]")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (use
                                                       "remove_common_count_gt0[nominal_AC_term]")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 -2 4)
                                        (("2"
                                          (use
                                           "remove_common_no_pair_ac")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (use "remove_common_no_pair_ac") nil
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((remove_common_count_gt formula-decl nil list_aux_equational_reasoning nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (remove_common_count_gt0 formula-decl nil list_aux_equational_reasoning nil)
    (no_common_args? const-decl "bool" nominal_AC_equality nil)
    (remove_common_no_pair_ac formula-decl nil nominal_AC_equality nil)
    (every adt-def-decl "boolean" list_adt nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (remove_common def-decl "list[T]" list_aux_equational_reasoning nil)
    (get_args const-decl "args" nominal_AC_term_properties nil)
    (equal? def-decl "bool" nominal_AC_equality nil)
    (get_args_get_ac_from_args2 formula-decl nil nominal_AC_term_properties nil)
    (remove_common const-decl "[nominal_AC_term, nominal_AC_term]" nominal_AC_equality nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (string type-eq-decl nil strings nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)))

