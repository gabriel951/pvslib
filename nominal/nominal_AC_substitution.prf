(nominal_AC_substitution
 (subs_TCC1 0
  (subs_TCC1-1 nil 3804712624 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[nominal_AC_term])" nominal_AC_term_adt nil))
   nil
   (subs termination
    "nominal_AC_substitution.subs(nominal_AC_substitution.sigma_basic, nominal_AC_substitution.t1)"
    "nil")))
 (subs_TCC2 0
  (subs_TCC2-1 nil 3804712624 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[nominal_AC_term])" nominal_AC_term_adt nil))
   nil
   (subs termination
    "nominal_AC_substitution.subs(nominal_AC_substitution.sigma_basic, nominal_AC_substitution.t2)"
    "nil")))
 (subs_TCC3 0
  (subs_TCC3-1 nil 3804712624 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[nominal_AC_term])" nominal_AC_term_adt nil))
   nil
   (subs termination
    "nominal_AC_substitution.subs(nominal_AC_substitution.sigma_basic, nominal_AC_substitution.arg)"
    "nil")))
 (subs_TCC4 0
  (subs_TCC4-1 nil 3804712624 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[nominal_AC_term])" nominal_AC_term_adt nil))
   nil
   (subs termination
    "nominal_AC_substitution.subs(nominal_AC_substitution.sigma_basic, nominal_AC_substitution.arg)"
    "nil")))
 (subs_TCC5 0
  (subs_TCC7-1 nil 3805815347 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[nominal_AC_term])" nominal_AC_term_adt nil))
   nil
   (subs termination
    "nominal_AC_substitution.subs(nominal_AC_substitution.sigma_basic, nominal_AC_substitution.bd)"
    "nil")))
 (subs_TCC6 0
  (subs_TCC5-1 nil 3805034157 ("" (tcc))
   ((<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)) nil
   (subs termination "nominal_AC_substitution.subs(nominal_AC_substitution.tail)" "nil")))
 (subs_TCC7 0
  (subs_TCC6-1 nil 3805815347 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil))
   nil
   (subs subtype "nominal_AC_substitution.args"
    "(list_adt[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]].cons?)")))
 (subs_TCC8 0
  (subs_TCC8-1 nil 3881149702 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil))
   nil
   (subs termination
    "nominal_AC_substitution.subs(nominal_AC_substitution.sigma)(list_adt[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]].cdr(nominal_AC_substitution.args))"
    "nil")))
 (subs_TCC9 0
  (subs_TCC8-1 nil 3805815347 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil))
   nil
   (subs subtype "nominal_AC_substitution.args"
    "(list_adt[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]].cons?)")))
 (subs_TCC10 0
  (subs_TCC10-1 nil 3825514291
   ("" (skeep)
    (("" (lemma "finite_subset[nominal_AC_term]")
      (("" (inst? -1)
        (("" (inst -1 "image(subs(sigma), fin_set_t)")
          (("" (prop)
            (("" (hide 2)
              (("" (expand "subset?" 1)
                (("" (skolem 1 "t1")
                  (("" (prop)
                    (("" (expand "member" -1)
                      (("" (skeep) (("" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_subset formula-decl nil finite_sets nil)
    (finite_image application-judgement "finite_set[R]"
     function_image_aux nil)
    nil (subset? const-decl "bool" sets nil) nil
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil))
   nil
   (subs subtype
    "{t | EXISTS s: booleans.AND(sets[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]].member(nominal_AC_substitution.s, nominal_AC_substitution.fin_set_t), nominal_AC_substitution.t = nominal_AC_substitution.subs(nominal_AC_substitution.sigma)(nominal_AC_substitution.s))}"
    "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]")))
 (supset_dom_TCC1 0
  (supset_dom_TCC1-1 nil 3823268210 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (supset_dom subtype "nominal_AC_substitution.sigma"
    "(list_adt[basic_sub].cons?)")))
 (supset_dom_TCC2 0
  (supset_dom_TCC2-1 nil 3823268210 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (supset_dom termination
    "nominal_AC_substitution.supset_dom(list_adt[basic_sub].cdr(nominal_AC_substitution.sigma))"
    "nil")))
 (supset_dom_TCC3 0
  (supset_dom_TCC3-1 nil 3823268210 ("" (subtype-tcc) nil nil) nil nil
   (supset_dom subtype "nominal_AC_substitution.sigma"
    "(list_adt[basic_sub].cons?)")))
 (supset_dom_correct 0
  (supset_dom_correct-1 nil 3823268392
   ("" (induct "sigma")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "subs" 1)
            (("2" (expand "subs" 1)
              (("2" (inst -1 "X")
                (("2" (assert)
                  (("2" (prop)
                    (("1" (hide 1)
                      (("1" (expand "supset_dom" 1)
                        (("1" (grind) nil nil)) nil))
                      nil)
                     ("2" (expand "subs" -1)
                      (("2" (replace -1 1)
                        (("2" (hide -1)
                          (("2" (expand "subs" 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("2"
                                  (hide 1)
                                  (("2"
                                    (expand "supset_dom" 1)
                                    (("2"
                                      (expand "member" 1)
                                      (("2"
                                        (expand "add" 1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (add const-decl "(nonempty?)" sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    nil (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (supset_dom def-decl "finite_set[variable]" nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil))
   shostak))
 (dom_TCC1 0
  (dom_TCC1-1 nil 3823268323
   ("" (skeep)
    ((""
      (name-replace "dom" "{X |
              subs(sigma)(X) /=
               (*[atom, perm, variable, f_symbol, ac_symbol]
                    (null[[atom, atom]], X))}")
      (("" (case "subset?(dom, supset_dom(sigma))")
        (("1" (lemma "finite_subset[variable]")
          (("1" (inst? -1) (("1" (assert) nil nil)) nil)) nil)
         ("2" (hide 2)
          (("2" (expand "subset?" 1)
            (("2" (skeep)
              (("2" (expand "dom")
                (("2" (expand "member" -1)
                  (("2" (lemma "supset_dom_correct")
                    (("2" (inst? -1) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (/= const-decl "boolean" notequal nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (member const-decl "bool" sets nil)
    (supset_dom_correct formula-decl nil nominal_AC_substitution nil) nil
    (finite_subset formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (supset_dom def-decl "finite_set[variable]" nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil))
   nil
   (dom subtype
    "{X | nominal_AC_substitution.subs(nominal_AC_substitution.sigma)(nominal_AC_substitution.X) /= (nominal_AC_term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].*(list_adt[[atom, atom]].null, nominal_AC_substitution.X))}"
    "finite_set[variable]")))
 (supset_dom_correct2 0
  (supset_dom_correct2-1 nil 3823270009
   ("" (skeep)
    (("" (expand "subset?" 1)
      (("" (skeep)
        (("" (expand "dom" -1)
          (("" (expand "member" -1)
            (("" (lemma "supset_dom_correct")
              (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (supset_dom_correct formula-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (member const-decl "bool" sets nil))
   shostak))
 (img_TCC1 0
  (img_TCC1-1 nil 3823268323
   ("" (skeep)
    (("" (lemma "dom_TCC1")
      (("" (inst -1 "sigma")
        (("" (lemma "is_finite_surj[variable]")
          (("" (inst? -1)
            (("" (assert)
              ((""
                (case "EXISTS(f:[({X |
                     subs(sigma)(X) /=
                      (*[atom, perm, variable, f_symbol, ac_symbol]
                    (null[[atom, atom]], X)) }) -> ({t |
                     EXISTS X:
                       member[variable](X, dom(sigma)) AND subs(sigma)(X) = t})]): surjective?(f)")
                (("1" (skolem -1 "f2")
                  (("1" (skeep)
                    (("1" (lemma "is_finite_surj[nominal_AC_term]")
                      (("1" (inst? -1)
                        (("1" (assert)
                          (("1" (hide 2)
                            (("1" (inst 1 "N" "o(f2, f)")
                              (("1"
                                (hide -3)
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma
                                     "composition_surjective[below[N], {X |
                        subs(sigma)(X) /=
                       (*[atom, perm, variable, f_symbol, ac_symbol]
                    (null[[atom, atom]], X))   }, {t |
                        EXISTS X:
                          member[variable](X, dom(sigma)) AND
                           subs(sigma)(X) = t}]")
                                    (("1" (inst? -1) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (hide -1 -2)
                    (("2" (inst 1 "subs(sigma)")
                      (("1" (expand "surjective?" 1)
                        (("1" (skolem 1 ("t"))
                          (("1" (typepred "t")
                            (("1" (hide -1)
                              (("1"
                                (skeep)
                                (("1"
                                  (inst 1 "X")
                                  (("1"
                                    (assert)
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (expand "dom" -1)
                                    (("2"
                                      (expand "member" -1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (inst 1 "x1")
                          (("2" (typepred "x1")
                            (("2" (expand "dom" 1)
                              (("2"
                                (expand "member" 1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dom_TCC1 subtype-tcc nil nominal_AC_substitution nil)
    (is_finite_surj formula-decl nil finite_sets nil) nil
    (restrict const-decl "R" restrict nil) nil
    (NOT const-decl "[bool -> bool]" booleans nil)
    (O const-decl "T3" function_props nil)
    (< const-decl "bool" reals nil)
    (composition_surjective judgement-tcc nil function_props nil)
    (member const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (surjective? const-decl "bool" functions nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (/= const-decl "boolean" notequal nil)
    (set type-eq-decl nil sets nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (img subtype
    "{t | EXISTS X: booleans.AND(sets[variable].member(nominal_AC_substitution.X, nominal_AC_substitution.dom(nominal_AC_substitution.sigma)), nominal_AC_substitution.subs(nominal_AC_substitution.sigma)(nominal_AC_substitution.X) = nominal_AC_substitution.t)}"
    "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]")))
 (shift_TCC1 0
  (shift_TCC1-1 nil 3855771951 ("" (skeep) (("" (grind) nil nil)) nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil nil (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil))
   nil
   (shift subtype
    "list_adt[[nat, nominal_AC_term_adt[numbers.number, atoms.perm, numbers.number, f_symbol, ac_symbol].nominal_AC_term]].cons((nominal_AC_substitution.start, (nominal_AC_term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].*(list_adt[[atom, atom]].null, ((number_fields.+)(nominal_AC_substitution.start, nominal_AC_substitution.inc))))), list_adt[[nat, (nominal_AC_term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].var?)]].null)"
    "nominal_AC_substitution.sub")))
 (shift_TCC2 0
  (shift_TCC2-1 nil 3855771951 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (shift subtype "(number_fields.-)(nominal_AC_substitution.n, 1)" "nat")))
 (shift_TCC3 0
  (shift_TCC3-1 nil 3855771951 ("" (termination-tcc) nil nil) nil nil
   (shift termination
    "nominal_AC_substitution.shift((number_fields.+)(nominal_AC_substitution.start, 1), (number_fields.-)(nominal_AC_substitution.n, 1), nominal_AC_substitution.inc)"
    "nil")))
 (shift_TCC4 0
  (shift_TCC4-1 nil 3855771951 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (shift subtype "nominal_AC_substitution.inc" "nat")))
 (subs_TCC11 0
  (subs_TCC11-1 nil 3881591215 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    nil (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil))
   nil
   (subs subtype "nominal_AC_substitution.subs(nominal_AC_substitution.rho)(nominal_AC_substitution.X)"
    "(nominal_AC_term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].var?)")))
 (subs_TCC12 0
  (subs_TCC12-1 nil 3881591215 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (subs subtype "nominal_AC_substitution.G"
    "(list_adt[[atom, variable]].cons?)")))
 (subs_TCC13 0
  (subs_TCC13-1 nil 3881591215 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (subs termination
    "nominal_AC_substitution.subs(nominal_AC_substitution.rho, list_adt[[atom, variable]].cdr(nominal_AC_substitution.G))"
    "nil")))
 (subs_TCC14 0
  (subs_TCC14-1 nil 3881591215 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil))
   nil
   (subs subtype "nominal_AC_substitution.G"
    "(list_adt[[atom, variable]].cons?)")))
 (subs_const 0
  (subs_const-1 nil 3805817833
   ("" (induct "sigma") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil) nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (at adt-constructor-decl "[atom -> (atom?)]" nominal_AC_term_adt nil)
    (atom? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil))
   SHOSTAK))
 (subs_unit 0
  (subs_unit-1 nil 3805817862
   ("" (induct "sigma") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   (nil (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (unit adt-constructor-decl "(unit?)" nominal_AC_term_adt nil)
    (unit? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil))
   SHOSTAK))
 (subs_pair 0
  (subs_pair-1 nil 3805818035
   ("" (induct "sigma") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil) nil
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (pair adt-constructor-decl "[[nominal_AC_term, nominal_AC_term] -> (pair?)]" nominal_AC_term_adt
     nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil))
   SHOSTAK))
 (subs_app 0
  (subs_app-1 nil 3807643979
   ("" (induct "sigma")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "subs" 1)
            (("2" (inst? -1)
              (("2" (replace -1 1)
                (("2" (expand "subs" 1 1) (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (app adt-constructor-decl "[[f_symbol, nominal_AC_term] -> (app?)]" nominal_AC_term_adt
     nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil))
   SHOSTAK))
 (subs_ac 0
  (subs_ac-1 nil 3805815755
   ("" (induct "sigma")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("head" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "subs" 1 1)
            (("2" (inst? -1)
              (("2" (replace -1 1)
                (("2" (hide -1)
                  (("2" (expand "subs" 1 1)
                    (("2" (expand "subs" 1 3) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (ac_app adt-constructor-decl "[[ac_symbol, nominal_AC_term] -> (ac_app?)]"
     nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil))
   SHOSTAK))
 (subs_abs 0
  (subs_abs-1 nil 3881149858
   ("" (induct "sigma") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil) nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (abs adt-constructor-decl "[[atom, nominal_AC_term] -> (abs?)]" nominal_AC_term_adt nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil))
   shostak))
 (subs_var 0
  (subs_var-1 nil 3826486141
   ("" (skeep)
    (("" (case "atom?(t)")
      (("1" (lemma "nominal_AC_term_at_eta")
        (("1" (inst? -1)
          (("1" (replace -1 -3 :dir rl)
            (("1" (hide -1)
              (("1" (rewrite "subs_const") (("1" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (case "unit?(t)")
        (("1" (case "t = unit")
          (("1" (replace -1) (("1" (rewrite "subs_unit") nil nil)) nil)
           ("2" (grind) nil nil))
          nil)
         ("2" (case "pair?(t)")
          (("1" (lemma "nominal_AC_term_pair_eta")
            (("1" (inst? -1)
              (("1" (replace -1 -3 :dir rl)
                (("1" (hide -1)
                  (("1" (rewrite "subs_pair") (("1" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "app?(t)")
            (("1" (lemma "nominal_AC_term_app_eta")
              (("1" (inst -1 "t")
                (("1" (replace -1 -3 :dir rl)
                  (("1" (rewrite "subs_app") (("1" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "ac_app?(t)")
              (("1" (lemma "nominal_AC_term_ac_app_eta")
                (("1" (inst? -1)
                  (("1" (replace -1 -3 :dir rl)
                    (("1" (rewrite "subs_ac") (("1" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (case "abs?(t)")
                (("1" (lemma "nominal_AC_term_abs_eta")
                  (("1" (inst?)
                    (("1" (replace -1 -3 :dir rl)
                      (("1" (rewrite "subs_abs")
                        (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((atom? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil) nil
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (a adt-accessor-decl "[(atom?) -> atom]" nominal_AC_term_adt nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (nominal_AC_term_at_eta formula-decl nil nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (nominal_AC_term_pair_eta formula-decl nil nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (nominal_AC_term_ac_app_eta formula-decl nil nominal_AC_term_adt nil)
    (nominal_AC_term_abs_eta formula-decl nil nominal_AC_term_adt nil)
    (subs_abs formula-decl nil nominal_AC_substitution nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (nominal_AC_term_app_eta formula-decl nil nominal_AC_term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (unit adt-constructor-decl "(unit?)" nominal_AC_term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (unit? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil))
   shostak))
 (subs_const2 0
  (subs_const2-1 nil 3855067967
   ("" (skeep)
    (("" (lemma "nominal_AC_term_opt")
      (("" (inst -1 "t")
        (("" (prop)
          (("1" (replace -1) (("1" (rewrite "subs_unit") nil nil)) nil)
           ("2" (replace -2)
            (("2" (rewrite "subs_pair") (("2" (assert) nil nil)) nil))
            nil)
           ("3" (replace -2 -3)
            (("3" (rewrite "subs_app") (("3" (assert) nil nil)) nil))
            nil)
           ("4" (replace -2 -3)
            (("4" (rewrite "subs_ac") (("4" (assert) nil nil)) nil))
            nil)
           ("5" (replace -2 -3)
            (("5" (rewrite "subs_abs" -3) (("5" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nominal_AC_term_opt formula-decl nil nominal_AC_term_properties nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (subs_abs formula-decl nil nominal_AC_substitution nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (subs_pair2 0
  (subs_pair2-1 nil 3832099572
   ("" (induct "sigma")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "subs" -2)
            (("2" (inst -1 "t")
              (("2" (grind)
                (("2" (expand "subs" -1 1)
                  (("2" (grind)
                    (("2" (lemma "subs_var")
                      (("2" (inst? -1) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (subs_var formula-decl nil nominal_AC_substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil) nil
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil))
   shostak))
 (subs_ac2 0
  (subs_ac2-1 nil 3832432317
   ("" (skeep)
    (("" (lemma "nominal_AC_term_opt")
      (("" (inst? -1)
        (("" (assert)
          (("" (prop)
            (("1" (replace -2)
              (("1" (rewrite "subs_const") (("1" (grind) nil nil))
                nil))
              nil)
             ("2" (replace -1)
              (("2" (rewrite "subs_unit") (("2" (grind) nil nil)) nil))
              nil)
             ("3" (replace -2 -3)
              (("3" (rewrite "subs_pair") (("3" (grind) nil nil)) nil))
              nil)
             ("4" (replace -2)
              (("4" (rewrite "subs_app") (("4" (grind) nil nil)) nil))
              nil)
             ("5" (replace -2 -3)
              (("5" (rewrite "subs_ac")
                (("5" (replace -2 1)
                  (("5" (rewrite "subs_ac")
                    (("5" (replace -2 :dir rl) (("5" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("6" (replace -2 -3)
              (("6" (rewrite "subs_abs" -3) (("6" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nominal_AC_term_opt formula-decl nil nominal_AC_term_properties nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_abs formula-decl nil nominal_AC_substitution nil)
    (func? const-decl "bool" nominal_AC_term_properties nil)
    (ord const-decl "upto(6)" nominal_AC_term_adt nil)
    (sym const-decl "string" nominal_AC_term_properties nil)
    (same_func? const-decl "bool" nominal_AC_term_properties nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (a adt-accessor-decl "[(atom?) -> atom]" nominal_AC_term_adt nil)
    (atom? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (subs_ac3 0
  (subs_ac3-1 nil 3849788446
   ("" (skeep) (("" (lemma "subs_ac2") (("" (grind) nil nil)) nil))
    nil)
   ((subs_ac2 formula-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (func? const-decl "bool" nominal_AC_term_properties nil)
    (ord const-decl "upto(6)" nominal_AC_term_adt nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (sym const-decl "string" nominal_AC_term_properties nil)
    (same_func? const-decl "bool" nominal_AC_term_properties nil))
   shostak))
 (subs_is_ac_sym 0
  (subs_is_ac_sym-1 nil 3887807301
   ("" (skeep)
    (("" (expand "is_ac_sym?" -1)
      (("" (flatten)
        (("" (lemma "nominal_AC_term_ac_app_eta")
          (("" (inst -1 "t")
            (("" (replace -3 :dir rl)
              (("" (replace -1 1 :dir rl)
                (("" (rewrite "subs_ac" 1) (("" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nominal_AC_term_ac_app_eta formula-decl nil nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil))
   shostak))
 (subs_are_ac 0
  (subs_are_ac-1 nil 3886492249
   ("" (skeep)
    (("" (expand "are_ac?")
      (("" (flatten)
        (("" (lemma "nominal_AC_term_ac_app_eta")
          (("" (inst -1 "t")
            (("" (replace -4 :dir rl)
              (("" (replace -1 1 :dir rl)
                (("" (rewrite "subs_ac")
                  (("" (assert)
                    (("" (lemma "nominal_AC_term_ac_app_eta")
                      (("" (inst -1 "s")
                        (("" (replace -1 1 :dir rl)
                          (("" (rewrite "subs_ac")
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((are_ac? const-decl "bool" nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nominal_AC_term_ac_app_eta formula-decl nil nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil))
   shostak))
 (subs_func 0
  (subs_func-1 nil 3832601176
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (lemma "nominal_AC_term_opt")
            (("" (inst? -1)
              (("" (prop)
                (("1" (replace -2 -4)
                  (("1" (rewrite "subs_const") (("1" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (replace -1 -3)
                  (("2" (rewrite "subs_unit") (("2" (grind) nil nil))
                    nil))
                  nil)
                 ("3" (replace -2 -4)
                  (("3" (rewrite "subs_pair") (("3" (grind) nil nil))
                    nil))
                  nil)
                 ("4" (replace -2 -4)
                  (("4" (rewrite "subs_app")
                    (("4" (hide -2)
                      (("4" (hide -2)
                        (("4" (lemma "nominal_AC_term_app_eta")
                          (("4" (inst? -1)
                            (("4" (replace -1 1 :dir rl)
                              (("4"
                                (rewrite "subs_app")
                                (("4" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (lemma "subs_ac2")
                  (("5" (inst? -1)
                    (("5" (assert)
                      (("5" (replace -2)
                        (("5" (rewrite "subs_ac")
                          (("5" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (replace -2 -4)
                  (("6" (rewrite "subs_abs" -4) (("6" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_abs formula-decl nil nominal_AC_substitution nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_ac2 formula-decl nil nominal_AC_substitution nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (nominal_AC_term_app_eta formula-decl nil nominal_AC_term_adt nil)
    (sym const-decl "string" nominal_AC_term_properties nil)
    (ord const-decl "upto(6)" nominal_AC_term_adt nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (atom? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (a adt-accessor-decl "[(atom?) -> atom]" nominal_AC_term_adt nil)
    (nominal_AC_term_opt formula-decl nil nominal_AC_term_properties nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (same_func? const-decl "bool" nominal_AC_term_properties nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil) nil
    (func? const-decl "bool" nominal_AC_term_properties nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) nil
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (subs_abs2 0
  (subs_abs2-1 nil 3881765715
   ("" (induct "sigma")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "subs" -2)
            (("2" (inst -1 "t")
              (("2" (grind)
                (("2" (expand "subs" -1 1)
                  (("2" (grind)
                    (("2" (lemma "subs_var")
                      (("2" (inst? -1) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (subs_var formula-decl nil nominal_AC_substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil) nil
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil))
   shostak))
 (subs_basic_ext 0
  (subs_basic_ext-1 nil 3888754761
   ("" (induct "t")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("pi1" "X"))
      (("2" (skeep)
        (("2" (expand "ext" 1 1)
          (("2" (expand "subs" 1 2)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) (("1" (rewrite "ext_append") nil nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep) (("3" (grind) nil nil)) nil)
     ("4" (skolem 1 ("t1" "t2"))
      (("4" (prop)
        (("4" (skeep)
          (("4" (expand "subs" 1 2)
            (("4" (expand "ext" 1 1)
              (("4" (expand "subs" 1 1)
                (("4" (expand "ext" 1 3) (("4" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skolem 1 ("f" "t1"))
      (("5" (prop) (("5" (skeep) (("5" (grind) nil nil)) nil)) nil))
      nil)
     ("6" (skeep) (("6" (skeep) (("6" (grind) nil nil)) nil)) nil)
     ("7" (skeep) (("7" (skeep) (("7" (grind) nil nil)) nil)) nil))
    nil)
   ((ext_append formula-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term_induction formula-decl nil nominal_AC_term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil))
   shostak))
 (subs_ext_pi 0
  (subs_ext_pi-1 nil 3881153059
   ("" (induct "sigma")
    (("1" (skeep)
      (("1" (expand "subs" 1)
        (("1" (expand "subs")
          (("1" (expand "ext" 1)
            (("1" (rewrite "append_null") nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd " "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (inst -1 "X" "pi")
            (("2" (expand "subs" 1)
              (("2" (replace -1)
                (("2" (hide -1)
                  (("2" (expand "subs" 1 3)
                    (("2" (expand "subs" 1 2)
                      (("2" (name-replace "t" "subs(tail)(null * X)")
                        (("2" (lemma "subs_basic_ext")
                          (("2" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_basic_ext formula-decl nil nominal_AC_substitution nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (append_null formula-decl nil list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil))
   nil))
 (subs_ext_pi2 0
  (subs_ext_pi2-1 nil 3881173151
   ("" (skeep)
    (("" (rewrite "subs_ext_pi")
      (("" (case "var?(subs(sigma)(X))")
        (("1" (expand "ext" -2)
          (("1" (assert)
            (("1" (decompose-equality -2)
              (("1" (rewrite "subs_ext_pi")
                (("1" (expand "ext" 1)
                  (("1" (replace -2)
                    (("1" (case "null?(p(subs(sigma)(X)))")
                      (("1" (case "p(subs(sigma)(X)) = null")
                        (("1" (replace -1)
                          (("1" (rewrite "append_null")
                            (("1" (rewrite "append_null") nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (lemma "length_append[[atom, atom]]")
                          (("2" (inst?)
                            (("2" (replace -2)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "length" -1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "ext" -1) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (append def-decl "list[T]" list_props nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append_null formula-decl nil list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (length_append formula-decl nil list_props nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil))
   shostak))
 (basic_subs_ext 0
  (basic_subs_ext-1 nil 3888006415
   ("" (induct "t")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("pi1" "X"))
      (("2" (skeep)
        (("2" (expand "ext" 1 1)
          (("2" (expand "subs" 1 2)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) (("1" (rewrite "ext_append") nil nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep) (("3" (grind) nil nil)) nil)
     ("4" (skolem 1 ("t1" "t2"))
      (("4" (prop)
        (("4" (skeep)
          (("4" (expand "subs" 1 2)
            (("4" (expand "ext" 1 1)
              (("4" (expand "subs" 1 1)
                (("4" (expand "ext" 1 3) (("4" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skolem 1 ("f" "t1"))
      (("5" (prop) (("5" (skeep) (("5" (grind) nil nil)) nil)) nil))
      nil)
     ("6" (skeep) (("6" (skeep) (("6" (grind) nil nil)) nil)) nil)
     ("7" (skeep) (("7" (skeep) (("7" (grind) nil nil)) nil)) nil))
    nil)
   ((ext_append formula-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term_induction formula-decl nil nominal_AC_term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil) nil
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil))
   shostak))
 (subs_ext 0
  (subs_ext-1 nil 3881153086
   ("" (induct "sigma")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "subs" 1)
            (("2" (inst?)
              (("2" (replace -1)
                (("2" (lemma "subs_basic_ext")
                  (("2" (hide -2)
                    (("2" (name-replace "s" "subs(tail)(t)")
                      (("2" (inst?) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_basic_ext formula-decl nil nominal_AC_substitution nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil))
   shostak))
 (subs_fresh 0
  (subs_fresh-1 nil 3888067650
   ("" (induct "t")
    (("1" (skeep)
      (("1" (skeep) (("1" (rewrite "subs_const") nil nil)) nil)) nil)
     ("2" (skeep) (("2" (skeep) (("2" (grind) nil nil)) nil)) nil)
     ("3" (skeep) (("3" (rewrite "subs_unit" -1) nil nil)) nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (rewrite "subs_pair" -3) (("4" (grind) nil nil)) nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (skeep)
        (("5" (rewrite "subs_app" -2)
          (("5" (expand "fresh?" (-2 1)) (("5" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (skeep)
        (("6" (rewrite "subs_ac" -2) (("6" (grind) nil nil)) nil))
        nil))
      nil)
     ("7" (skeep)
      (("7" (skeep)
        (("7" (rewrite "subs_abs" -2) (("7" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((subs_abs formula-decl nil nominal_AC_substitution nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (x const-decl "[fresh_context, bool]" nominal_AC_freshness nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (nominal_AC_term_induction formula-decl nil nominal_AC_term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil) nil
    (fresh? def-decl "[fresh_context, bool]" nominal_AC_freshness nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil))
   shostak))
 (subs_ord 0
  (subs_ord-1 nil 3837025236
   ("" (skeep)
    (("" (lemma "nominal_AC_term_opt")
      (("" (inst?)
        (("" (assert)
          (("" (split -1)
            (("1" (flatten)
              (("1" (replace -2 -3)
                (("1" (rewrite "subs_const") (("1" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (expand "member" 2)
                  (("2" (replace -2 -3)
                    (("2" (rewrite "subs_ext_pi")
                      (("2" (expand "dom" 2)
                        (("2" (flatten)
                          (("2" (replace -4)
                            (("2" (expand "ext" -3)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (replace -1)
              (("3" (rewrite "subs_unit") (("3" (grind) nil nil)) nil))
              nil)
             ("4" (flatten)
              (("4" (replace -2 -3)
                (("4" (rewrite "subs_pair") (("4" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("5" (flatten)
              (("5" (replace -2 -3)
                (("5" (rewrite "subs_app") (("5" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("6" (flatten)
              (("6" (replace -2 -3)
                (("6" (rewrite "subs_ac") (("6" (grind) nil nil)) nil))
                nil))
              nil)
             ("7" (flatten)
              (("7" (replace -2 -3)
                (("7" (rewrite "subs_abs") (("7" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nominal_AC_term_opt formula-decl nil nominal_AC_term_properties nil)
    (subs_abs formula-decl nil nominal_AC_substitution nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (ord const-decl "upto(6)" nominal_AC_term_adt nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (atom? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (a adt-accessor-decl "[(atom?) -> atom]" nominal_AC_term_adt nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (subs_var2 0
  (subs_var2-1 nil 3884202175
   ("" (skeep)
    (("" (lemma "nominal_AC_term_times_eta")
      (("" (inst?)
        (("" (replace -1 1 :dir rl)
          (("" (assert)
            (("" (rewrite "subs_ext_pi" 1)
              (("" (name-replace "t1" "subs(sigma)(V(t))")
                (("" (reveal -1)
                  (("" (lemma "ext_preserves_type")
                    (("" (inst -1 "p(t)" "t1") (("" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nominal_AC_term_times_eta formula-decl nil nominal_AC_term_adt nil)
    (subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (ord const-decl "upto(6)" nominal_AC_term_adt nil)
    (ext_preserves_type formula-decl nil nominal_AC_term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil))
   shostak))
 (subs_ac3_better 0
  (subs_ac3_better-1 nil 3887806989
   ("" (skeep)
    (("" (use "subs_ac3")
      (("" (assert)
        (("" (expand ("member" "dom") 2)
          (("" (flatten)
            (("" (lemma "nominal_AC_term_times_eta")
              (("" (inst?)
                (("" (replace -1 -3 :dir rl)
                  (("" (rewrite "subs_ext_pi" -3)
                    (("" (replace -4) (("" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_ac3 formula-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (nominal_AC_term_times_eta formula-decl nil nominal_AC_term_adt nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil))
   shostak))
 (subs_num_arg_ge1 0
  (subs_num_arg_ge1-1 nil 3842185884
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "num_arg" -2)
            (("" (lift-if)
              (("" (split)
                (("1" (prop)
                  (("1" (lemma "nominal_AC_term_pair_eta")
                    (("1" (inst -1 "t")
                      (("1" (replace -1 :dir rl)
                        (("1" (rewrite "subs_pair")
                          (("1" (expand "num_arg" 1)
                            (("1" (hide-all-but 1)
                              (("1"
                                (lemma "num_arg_ge1")
                                (("1"
                                  (inst -1 "f" "subs(sigma)(term1(t))")
                                  (("1"
                                    (lemma "num_arg_ge1")
                                    (("1"
                                      (inst
                                       -1
                                       "f"
                                       "subs(sigma)(term2(t))")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split -1)
                    (("1" (flatten)
                      (("1" (lemma "nominal_AC_term_ac_app_eta")
                        (("1" (inst -1 "t")
                          (("1" (replace -1 2 :dir rl)
                            (("1" (rewrite "subs_ac")
                              (("1"
                                (expand "num_arg" 2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst -5 "ac_arg(t)")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nominal_AC_term_ac_app_eta formula-decl nil nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (num_arg_ge1 formula-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term_pair_eta formula-decl nil nominal_AC_term_adt nil) nil nil
    (string type-eq-decl nil strings nil)
    (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) nil
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (subs_select_img 0
  (subs_select_img-1 nil 3881312898
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (lemma "nominal_AC_term_opt")
            (("" (inst? -1)
              (("" (prop)
                (("1" (inst 1 "num_arg(f, t)")
                  (("1" (hide -3)
                    (("1" (split 1)
                      (("1" (grind) nil nil)
                       ("2" (flatten)
                        (("2" (hide 2)
                          (("2" (replace -2)
                            (("2" (rewrite "subs_const" 1)
                              (("2"
                                (expand "select" 1)
                                (("2" (rewrite "subs_const") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst 1 "1")
                  (("2" (split 1)
                    (("1" (grind) nil nil)
                     ("2" (flatten)
                      (("2" (expand "select" 1 2)
                        (("2" (assert)
                          (("2" (expand "select" 2 1)
                            (("2" (expand "select" 2 2)
                              (("2"
                                (case "member(V(t), dom(sigma))")
                                (("1"
                                  (expand ("member" "ext") 2)
                                  (("1"
                                    (inst
                                     2
                                     "select(f, subs(sigma)(V(t)))(n)")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (rewrite "subterm_fin_set")
                                        (("1"
                                          (inst 1 "subs(sigma)(V(t))")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand
                                               ("member" "img")
                                               1)
                                              (("1"
                                                (inst 1 "V(t)")
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "select_subterms")
                                              (("2"
                                                (inst
                                                 -1
                                                 "f"
                                                 "n"
                                                 "subs(sigma)(V(t))")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -3 1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (rewrite "subs_ext_pi")
                                            (("2"
                                              (rewrite "ext_select")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "member" 1)
                                  (("2"
                                    (expand "dom" 1)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "subs" -1)
                                        (("2"
                                          (lemma "subs_ext_pi2")
                                          (("2"
                                            (inst
                                             -1
                                             "V(t)"
                                             "null"
                                             "p(t)"
                                             "sigma")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replace -4 :dir rl)
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (expand "select" 1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (inst 1 "1")
                  (("3" (split 1)
                    (("1" (grind) nil nil)
                     ("2" (hide -2)
                      (("2" (replace -1)
                        (("2" (flatten)
                          (("2" (rewrite "subs_unit")
                            (("2" (hide 2)
                              (("2"
                                (expand "select" 1)
                                (("2" (rewrite "subs_unit") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (replace -2 1)
                  (("4" (rewrite "subs_pair")
                    (("4" (replace -2 :dir rl)
                      (("4" (expand "select" 1 1)
                        (("4"
                          (case "n <= num_arg(f, subs(sigma)(term1(t)))")
                          (("1" (assert)
                            (("1" (inst -4 "term1(t)")
                              (("1"
                                (prop)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst 1 "i")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (hide -2)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split -2)
                                              (("1"
                                                (expand "nice_ind?" -2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand
                                                     "select"
                                                     1
                                                     2)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (expand
                                                   "nice_ind?"
                                                   -3)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "select"
                                                       2
                                                       1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "select"
                                                           2
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "select"
                                                             2
                                                             2)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (name-replace "j"
                             "num_arg(f, subs(sigma)(term1(t)))")
                            (("2" (reveal -1)
                              (("2"
                                (assert)
                                (("2"
                                  (inst -4 "term2(t)")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst -1 "f" "n-j" "sigma")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (expand "nice_ind?" -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (inst
                                               2
                                               "i + num_arg(f, term1(t))")
                                              (("1"
                                                (split 2)
                                                (("1"
                                                  (expand
                                                   "nice_ind?"
                                                   1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "num_arg"
                                                         1
                                                         2)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (split -3)
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (expand
                                                         "select"
                                                         1
                                                         2)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand
                                                         "select"
                                                         2
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "select"
                                                             2
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "select"
                                                               2
                                                               2)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (inst 1 "1")
                  (("5" (expand "select" 1 2)
                    (("5" (assert)
                      (("5" (split 1)
                        (("1" (grind) nil nil)
                         ("2" (flatten)
                          (("2" (hide 2)
                            (("2" (replace -2 1)
                              (("2"
                                (rewrite "subs_app")
                                (("2"
                                  (expand "select" 1 1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (case "ac_sym(t) = f")
                  (("1" (replace -1)
                    (("1" (inst -4 "ac_arg(t)")
                      (("1" (prop)
                        (("1" (inst -1 "f" "n" "sigma")
                          (("1" (skeep)
                            (("1" (inst 1 "i")
                              (("1"
                                (expand "nice_ind?" -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split 1)
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split -3)
                                          (("1"
                                            (replace -6 1)
                                            (("1"
                                              (rewrite "subs_ac")
                                              (("1"
                                                (expand "select" 1 2)
                                                (("1"
                                                  (expand "select" 1 1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (expand "select" 2 1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "select" 2 2)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replace -7 2)
                                                      (("2"
                                                        (rewrite
                                                         "subs_ac")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "select"
                                                             2
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst 2 "1")
                    (("2" (split 2)
                      (("1" (grind) nil nil)
                       ("2" (flatten)
                        (("2" (hide 2)
                          (("2" (replace -2 1)
                            (("2" (rewrite "subs_ac")
                              (("2"
                                (expand "select" 1)
                                (("2"
                                  (assert)
                                  (("2" (rewrite "subs_ac") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (inst 1 "1")
                  (("7" (split 1)
                    (("1" (expand "nice_ind?" 1)
                      (("1" (grind) nil nil)) nil)
                     ("2" (flatten)
                      (("2" (hide 2)
                        (("2" (replace -2 1)
                          (("2" (rewrite "subs_abs")
                            (("2" (expand "select" 1)
                              (("2" (rewrite "subs_abs") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_abs formula-decl nil nominal_AC_substitution nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (<= const-decl "bool" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (subs_ext_pi2 formula-decl nil nominal_AC_substitution nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (select_subterms formula-decl nil nominal_AC_term_properties nil)
    (subterm_fin_set formula-decl nil nominal_AC_term_properties nil)
    (ext_select formula-decl nil nominal_AC_term_properties nil)
    (subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (empty? const-decl "bool" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (a adt-accessor-decl "[(atom?) -> atom]" nominal_AC_term_adt nil)
    (atom? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (nominal_AC_term_opt formula-decl nil nominal_AC_term_properties nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    nil (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (ext const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_term_properties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil) nil
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil) nil
    (string type-eq-decl nil strings nil)
    (nice_ind? const-decl "bool" nominal_AC_term_properties nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) nil
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (subs_mem 0
  (subs_mem-1 nil 3855927244
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "subs" 1 1)
            (("2" (expand "member" 1 2)
              (("2" (inst -1 "sigma" "t")
                (("2" (expand "member" 1 1)
                  (("2" (split 1)
                    (("1" (flatten)
                      (("1" (split -1)
                        (("1" (inst 1 "hd") nil nil)
                         ("2" (assert)
                          (("2" (skolem -2 "s") (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (skolem -1 "s") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subs def-decl "args" nominal_AC_substitution nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (args type-eq-decl nil nominal_AC_term_properties nil) nil)
   shostak))
 (subs_len 0
  (subs_len-1 nil 3807636360
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop) (("2" (grind) nil nil)) nil)) nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (subs def-decl "args" nominal_AC_substitution nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (args type-eq-decl nil nominal_AC_term_properties nil) nil)
   SHOSTAK))
 (subs_append 0
  (subs_append-1 nil 3807719446
   ("" (induct "args1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "append" 1 1)
            (("2" (expand "subs" 1 1)
              (("2" (expand "subs" 1 3)
                (("2" (expand "append" 1 2)
                  (("2" (inst? -1) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (append def-decl "list[T]" list_props nil)
    (subs def-decl "args" nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (args type-eq-decl nil nominal_AC_term_properties nil) nil)
   SHOSTAK))
 (subs_append2 0
  (subs_append2-1 nil 3827502580
   ("" (induct "sigma")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "append" 1)
            (("2" (expand "subs" 1 1)
              (("2" (expand "subs" 1 3)
                (("2" (inst? -1)
                  (("2" (replace -1 1) (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (append def-decl "list[T]" list_props nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil))
   shostak))
 (subs_map 0
  (subs_map-1 nil 3807733475
   ("" (induct "args") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (subs def-decl "args" nominal_AC_substitution nil) nil nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (args type-eq-decl nil nominal_AC_term_properties nil) nil)
   SHOSTAK))
 (subs_append_args 0
  (subs_append_args-1 nil 3855861944
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (inst -1 "delta" "sigma")
            (("2" (expand "subs" 1 3)
              (("2" (expand "subs" 1 1)
                (("2" (expand "subs" 1 3)
                  (("2" (replace -1)
                    (("2" (decompose-equality 1)
                      (("2" (rewrite "subs_append2") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (append def-decl "list[T]" list_props nil)
    (subs def-decl "args" nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (args type-eq-decl nil nominal_AC_term_properties nil) nil)
   shostak))
 (subs_map_append_lst_args 0
  (subs_map_append_lst_args-1 nil 3855861574
   ("" (induct "lst_args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "map" 1)
            (("2" (decompose-equality 1)
              (("1" (use "subs_append_args") nil nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (subs_append_args formula-decl nil nominal_AC_substitution nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (append def-decl "list[T]" list_props nil)
    (subs def-decl "args" nominal_AC_substitution nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil))
   shostak))
 (subs_cons 0
  (subs_cons-1 nil 3849638030
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "subs" 1 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "subs" 2 4)
                  (("2" (assert)
                    (("2" (expand "subs" 2 3)
                      (("2" (decompose-equality 2)
                        (("1" (expand "subs" 1 1)
                          (("1" (expand "subs" 1 3)
                            (("1" (expand "subs" 1 4)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (inst -1 "cdr(args1)")
                          (("2" (prop)
                            (("1" (inst?) nil nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_cons_extensionality formula-decl nil list_adt nil) nil
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (subs def-decl "args" nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (subs_get_term_from_args 0
  (subs_get_term_from_args-1 nil 3805815348
   ("" (induct "args1")
    (("1" (skeep)
      (("1" (expand "get_term_from_args" 1 1)
        (("1" (expand "subs" 1 2)
          (("1" (rewrite "subs_unit") (("1" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("t" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_term_from_args" 1 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (case "null?(tail)")
                  (("1" (expand "subs" 1 2)
                    (("1" (expand "subs" 1 3)
                      (("1" (assert)
                        (("1" (expand "get_term_from_args" 1)
                          (("1" (lift-if)
                            (("1" (assert)
                              (("1"
                                (expand "length" 1 1)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -2 2) (("2" (grind) nil nil)) nil))
                  nil)
                 ("2" (lemma "subs_pair")
                  (("2" (inst? -1)
                    (("2" (replace -1 2)
                      (("2" (hide -1)
                        (("2" (expand "subs" 2 3)
                          (("2" (expand "get_term_from_args" 2 2)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (hide -2 1)
                                  (("1"
                                    (grind)
                                    (("1"
                                      (expand "subs" -1)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst? -1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_pair formula-decl nil nominal_AC_substitution nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (subs def-decl "args" nominal_AC_substitution nil)
    (get_term_from_args def-decl "nominal_AC_term" nominal_AC_term_properties nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (args type-eq-decl nil nominal_AC_term_properties nil) nil)
   SHOSTAK))
 (subs_get_ac_from_args 0
  (subs_get_ac_from_args-1 nil 3805818725
   ("" (skeep)
    (("" (expand "get_ac_from_args" 1 1)
      (("" (rewrite "subs_ac")
        (("" (expand "get_ac_from_args")
          (("" (lemma "subs_get_term_from_args")
            (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((get_ac_from_args const-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (subs_get_term_from_args formula-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (get_term_from_args def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (args type-eq-decl nil nominal_AC_term_properties nil) nil
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil))
   SHOSTAK))
 (subs_args_nth_TCC1 0
  (subs_args_nth_TCC1-1 nil 3807635947
   ("" (skeep) (("" (rewrite "subs_len") nil nil)) nil)
   ((subs_len formula-decl nil nominal_AC_substitution nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil))
   nil
   (subs_args_nth subtype "nominal_AC_substitution.i"
    "below[length[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]](subs(sigma)(args))]")))
 (subs_args_nth 0
  (subs_args_nth-1 nil 3807635947
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "nth" 1 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "subs" 2 1)
                  (("2" (expand "nth" 2 2)
                    (("2" (lift-if)
                      (("2" (assert)
                        (("2" (inst? -1) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "subs_len") nil nil)) nil)) nil))
    nil)
   ((subs_len formula-decl nil nominal_AC_substitution nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil) nil
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (subs def-decl "args" nominal_AC_substitution nil))
   SHOSTAK))
 (subs_remove 0
  (subs_remove-1 nil 3807718457
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "subs" 1 1)
            (("2" (expand "remove" 1 1)
              (("2" (lift-if)
                (("2" (assert)
                  (("2" (prop)
                    (("1" (expand "remove" 1) (("1" (assert) nil nil))
                      nil)
                     ("2" (expand "remove" 2 2)
                      (("2" (assert)
                        (("2" (expand "subs" 2 3)
                          (("2" (inst -1 "i-1" "sigma")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (subs def-decl "args" nominal_AC_substitution nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (args type-eq-decl nil nominal_AC_term_properties nil) nil)
   SHOSTAK))
 (args_subs_ac 0
  (args_subs_ac-1 nil 3807641380
   ("" (induct "t")
    (("1" (skolem 1 "a")
      (("1" (skeep)
        (("1" (rewrite "subs_const")
          (("1" (rewrite "get_args_not_pair_ac")
            (("1" (expand "map" 1 2)
              (("1" (expand "map" 1 2)
                (("1" (rewrite "subs_const")
                  (("1" (expand "map" 1)
                    (("1" (expand "map" 1)
                      (("1" (rewrite "get_args_not_pair_ac")
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 1) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("pi" "X"))
      (("2" (skeep)
        (("2" (name-replace "t1" "subs(sigma)(pi * X)")
          (("2" (lemma "get_args_not_pair_ac")
            (("2" (inst -1 "f" "pi * X")
              (("2" (assert)
                (("2" (prop)
                  (("1" (replace -1 1)
                    (("1" (expand "map" 1 2)
                      (("1" (expand "map" 1 2)
                        (("1" (reveal -2)
                          (("1" (replace -1 1)
                            (("1" (expand "map")
                              (("1"
                                (expand "map" 1)
                                (("1"
                                  (expand "flatten")
                                  (("1"
                                    (expand "flatten")
                                    (("1"
                                      (rewrite "append_null")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (rewrite "subs_unit")
        (("3" (rewrite "get_args_not_pair_ac")
          (("1" (expand "map" 1 2)
            (("1" (expand "map" 1 2)
              (("1" (rewrite "subs_unit")
                (("1" (expand "map" 1)
                  (("1" (expand "map" 1)
                    (("1" (expand "flatten") (("1" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 1) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("4" (skolem 1 ("t1" "t2"))
      (("4" (prop)
        (("4" (skeep)
          (("4" (rewrite "subs_pair")
            (("4" (rewrite "get_args_pair")
              (("4" (rewrite "get_args_pair")
                (("4" (inst? -1)
                  (("4" (inst? -2)
                    (("4" (assert)
                      (("4" (rewrite "subs_map")
                        (("4" (rewrite "subs_map")
                          (("4" (rewrite "subs_map")
                            (("4" (rewrite "subs_append")
                              (("4"
                                (rewrite "map_append2")
                                (("4"
                                  (rewrite "flatten_append")
                                  (("4" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skolem 1 ("g" "arg"))
      (("5" (prop)
        (("5" (hide -1)
          (("5" (skeep)
            (("5" (rewrite "get_args_not_pair_ac")
              (("1" (rewrite "get_args_not_pair_ac")
                (("1" (expand "map" 1 2)
                  (("1" (expand "map" 1 2)
                    (("1" (expand "map" 1 1)
                      (("1" (expand "map" 1)
                        (("1" (rewrite "subs_app")
                          (("1" (rewrite "get_args_not_pair_ac")
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil)
               ("2" (rewrite "subs_app") (("2" (grind) nil nil)) nil)
               ("3" (rewrite "subs_app") (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skolem 1 ("g" "arg"))
      (("6" (prop)
        (("6" (skeep)
          (("6" (case "g = f")
            (("1" (replace -1 1)
              (("1" (hide -1)
                (("1" (rewrite "get_args_ac")
                  (("1" (rewrite "subs_ac")
                    (("1" (rewrite "get_args_ac")
                      (("1" (inst? -1) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite "get_args_not_pair_ac")
              (("1" (rewrite "get_args_not_pair_ac")
                (("1" (expand "map" 2 2)
                  (("1" (expand "map" 2 2)
                    (("1" (expand "map" 2 1)
                      (("1" (expand "map" 2)
                        (("1" (rewrite "subs_ac")
                          (("1" (rewrite "get_args_not_pair_ac")
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil)
               ("2" (rewrite "subs_ac") (("2" (grind) nil nil)) nil)
               ("3" (rewrite "subs_ac") (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skolem 1 ("a" "t1"))
      (("7" (prop)
        (("7" (skeep)
          (("7" (rewrite "get_args_not_pair_ac")
            (("1" (rewrite "get_args_not_pair_ac")
              (("1" (expand "map" 1 2)
                (("1" (expand "map" 1 2)
                  (("1" (expand "map" 1)
                    (("1" (expand "map" 1)
                      (("1" (rewrite "subs_abs")
                        (("1" (expand "flatten" 1)
                          (("1" (expand "flatten" 1)
                            (("1" (rewrite "append_null")
                              (("1"
                                (rewrite "get_args_not_pair_ac")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil)
             ("2" (rewrite "subs_abs") (("2" (grind) nil nil)) nil)
             ("3" (rewrite "subs_abs" -1) (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_abs formula-decl nil nominal_AC_substitution nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (abs adt-constructor-decl "[[atom, nominal_AC_term] -> (abs?)]" nominal_AC_term_adt nil)
    (ac_app adt-constructor-decl "[[ac_symbol, nominal_AC_term] -> (ac_app?)]"
     nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (get_args_ac formula-decl nil nominal_AC_term_properties nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (app adt-constructor-decl "[[f_symbol, nominal_AC_term] -> (app?)]" nominal_AC_term_adt
     nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (get_args_pair formula-decl nil nominal_AC_term_properties nil)
    (subs_append formula-decl nil nominal_AC_substitution nil)
    (flatten_append formula-decl nil list_aux_equational_reasoning nil)
    (map_append2 formula-decl nil list_aux_equational_reasoning2parameters nil)
    (subs def-decl "args" nominal_AC_substitution nil)
    (subs_map formula-decl nil nominal_AC_substitution nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (unit adt-constructor-decl "(unit?)" nominal_AC_term_adt nil)
    (unit? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (from_min2max def-decl "list[nat]" list_aux_equational_reasoning nil) nil
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (append_null formula-decl nil list_props nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (append def-decl "list[T]" list_props nil)
    (get_args_not_pair_ac formula-decl nil nominal_AC_term_properties nil)
    (atom? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (at adt-constructor-decl "[atom -> (atom?)]" nominal_AC_term_adt nil)
    (nominal_AC_term_induction formula-decl nil nominal_AC_term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil) nil
    (flatten def-decl "list[T]" list_aux_equational_reasoning nil) nil nil
    (args type-eq-decl nil nominal_AC_term_properties nil) nil
    (string type-eq-decl nil strings nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil))
   SHOSTAK))
 (mem_get_args_subs 0
  (mem_get_args_subs-1 nil 3827583585
   ("" (skeep)
    (("" (expand "get_args" -1)
      (("" (rewrite "map_member4")
        (("" (skolem -1 "n")
          (("" (flatten)
            (("" (lemma "subs_select_img")
              (("" (inst -1 "f" "n" "sigma" "t")
                (("" (skolem -1 "i")
                  (("" (flatten)
                    (("" (assert)
                      (("" (inst 1 "select(f, t)(i)")
                        (("" (split 1)
                          (("1" (expand "get_args" 1)
                            (("1" (rewrite "map_member4")
                              (("1"
                                (inst 1 "i")
                                (("1"
                                  (expand "nice_ind?" -1)
                                  (("1"
                                    (use "from_min2max_mem[nat]")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -3)
                                        (("1"
                                          (flatten)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (subs_select_img formula-decl nil nominal_AC_substitution nil)
    (nice_ind? const-decl "bool" nominal_AC_term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (from_min2max_mem formula-decl nil list_aux_equational_reasoning nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil) nil
    (from_min2max def-decl "list[nat]" list_aux_equational_reasoning nil) nil nil
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil)
    (map_member4 formula-decl nil list_aux_equational_reasoning2parameters nil))
   shostak))
 (subs_get_args1 0
  (subs_get_args1-1 nil 3807695140
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "select" 1)
              (("" (lift-if)
                (("" (split)
                  (("1" (flatten)
                    (("1" (hide 1)
                      (("1" (expand "num_arg" -2)
                        (("1" (assert)
                          (("1" (lemma "num_arg_ge1")
                            (("1" (inst? -1)
                              (("1"
                                (lemma "num_arg_ge1")
                                (("1"
                                  (inst -1 "f" "term2(t)")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (prop)
                      (("2" (lemma "subs_ac")
                        (("2" (lemma "nominal_AC_term_ac_app_eta")
                          (("2" (inst -1 "t")
                            (("2" (replace -1 1 rl)
                              (("2"
                                (rewrite "subs_ac")
                                (("2"
                                  (replace -1 1)
                                  (("2"
                                    (hide -2)
                                    (("2"
                                      (lemma "get_args_ac")
                                      (("2"
                                        (replace -4)
                                        (("2"
                                          (inst? -1)
                                          (("2"
                                            (replace -1 1)
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (reveal -5)
                                                (("2"
                                                  (inst -1 "ac_arg(t)")
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (inst? -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "num_arg"
                                                           -4)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (num_arg_ge1 formula-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term_ac_app_eta formula-decl nil nominal_AC_term_adt nil)
    (get_args_ac formula-decl nil nominal_AC_term_properties nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil) nil nil
    (args type-eq-decl nil nominal_AC_term_properties nil) nil nil
    (string type-eq-decl nil strings nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) nil
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (subs_perm_get_args_ge1 0
  (subs_perm_get_args_ge1-2 nil 3881156297
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 ("t"))
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "select" 1)
              (("" (lift-if)
                (("" (split)
                  (("1" (flatten)
                    (("1" (split)
                      (("1" (flatten)
                        (("1" (expand "delete" 1)
                          (("1" (assert)
                            (("1" (lift-if)
                              (("1"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (lemma "nominal_AC_term_pair_eta")
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (replace -1 1 rl)
                                        (("1"
                                          (rewrite "subs_pair")
                                          (("1"
                                            (replace -1 1)
                                            (("1"
                                              (rewrite "get_args_pair")
                                              (("1"
                                                (lemma "perm?_append")
                                                (("1"
                                                  (inst? -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (lemma
                                                           "subs_get_args1")
                                                          (("1"
                                                            (inst? -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (rewrite
                                                                   "perm?_ref")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           "perm?_ref")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (rewrite "subs_pair")
                                    (("2"
                                      (rewrite "get_args_pair")
                                      (("2"
                                        (lemma "append_assoc[nominal_AC_term]")
                                        (("2"
                                          (inst? -1)
                                          (("2"
                                            (replace -1 2 rl)
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (lemma "nominal_AC_term_pair_eta")
                                                (("2"
                                                  (inst? -1)
                                                  (("2"
                                                    (replace -1 2 rl)
                                                    (("2"
                                                      (rewrite
                                                       "subs_pair")
                                                      (("2"
                                                        (replace -1 2)
                                                        (("2"
                                                          (rewrite
                                                           "get_args_pair")
                                                          (("2"
                                                            (lemma
                                                             "perm?_append")
                                                            (("2"
                                                              (inst?
                                                               -1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   3)
                                                                  (("2"
                                                                    (rewrite
                                                                     "perm?_ref")
                                                                    (("2"
                                                                      (reveal
                                                                       -5)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "term1(t)")
                                                                        (("2"
                                                                          (prop)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "G"
                                                                             "f"
                                                                             "i"
                                                                             "sigma")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "num_arg_ge1")
                                                                                (("1"
                                                                                  (inst?
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (expand "delete" 2 1)
                          (("2" (assert)
                            (("2" (lift-if)
                              (("2"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (lemma "subs_get_args1")
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1 1 rl t)
                                          (("1"
                                            (lemma "nominal_AC_term_pair_eta")
                                            (("1"
                                              (inst? -1)
                                              (("1"
                                                (replace -1 1 rl)
                                                (("1"
                                                  (rewrite "subs_pair")
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (rewrite
                                                       "get_args_pair")
                                                      (("1"
                                                        (lemma
                                                         "perm?_append2")
                                                        (("1"
                                                          (inst? -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (rewrite
                                                                 "perm?_ref")
                                                                (("1"
                                                                  (rewrite
                                                                   "perm?_ref")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (lemma "nominal_AC_term_pair_eta")
                                    (("2"
                                      (inst -1 "t")
                                      (("2"
                                        (rewrite "subs_pair")
                                        (("2"
                                          (replace -1 2 rl)
                                          (("2"
                                            (rewrite "subs_pair")
                                            (("2"
                                              (replace -1 2 nil t)
                                              (("2"
                                                (rewrite
                                                 "get_args_pair")
                                                (("2"
                                                  (rewrite
                                                   "get_args_pair")
                                                  (("2"
                                                    (lemma
                                                     "perm?_append3")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "G"
                                                       "get_args(f)(subs(sigma)(term1(t)))"
                                                       "_"
                                                       "_"
                                                       "get_args(f)(subs(sigma)(term2(t)))")
                                                      (("2"
                                                        (inst? -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide 3)
                                                            (("2"
                                                              (reveal
                                                               -5)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "term2(t)")
                                                                (("2"
                                                                  (prop)
                                                                  (("1"
                                                                    (inst?
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         2)
                                                                        (("1"
                                                                          (lemma
                                                                           "num_arg_ge1")
                                                                          (("1"
                                                                            (inst?
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (expand "delete" 1)
                          (("1" (assert)
                            (("1" (rewrite "subs_ac")
                              (("1"
                                (case "f = ac_sym(t)")
                                (("1"
                                  (replace -1 1 rl t)
                                  (("1"
                                    (rewrite "get_args_ac")
                                    (("1"
                                      (lemma "nominal_AC_term_ac_app_eta")
                                      (("1"
                                        (inst? -1)
                                        (("1"
                                          (replace -1 1 rl)
                                          (("1"
                                            (rewrite "subs_ac")
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (replace -3 1)
                                                (("1"
                                                  (rewrite
                                                   "get_args_ac"
                                                   1)
                                                  (("1"
                                                    (reveal -3)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "ac_arg(t)")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (inst? -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "num_arg"
                                                               -4)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((num_arg_ge1 formula-decl nil nominal_AC_term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (append_assoc formula-decl nil list_props nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (get_args_pair formula-decl nil nominal_AC_term_properties nil)
    (subs_get_args1 formula-decl nil nominal_AC_substitution nil)
    (perm?_ref formula-decl nil nominal_AC_equality nil)
    (perm?_append formula-decl nil nominal_AC_equality nil)
    (nominal_AC_term_pair_eta formula-decl nil nominal_AC_term_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (perm?_append3 formula-decl nil nominal_AC_equality nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (perm?_append2 formula-decl nil nominal_AC_equality nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (nominal_AC_term_ac_app_eta formula-decl nil nominal_AC_term_adt nil)
    (get_args_ac formula-decl nil nominal_AC_term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (append def-decl "list[T]" list_props nil) nil nil
    (perm? def-decl "bool" nominal_AC_equality nil)
    (args type-eq-decl nil nominal_AC_term_properties nil) nil nil
    (string type-eq-decl nil strings nil)
    (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) nil
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (subs_perm_get_args_ge1-1 nil 3807696136
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 ("t"))
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "select" 1)
              (("" (lift-if)
                (("" (split)
                  (("1" (flatten)
                    (("1" (split)
                      (("1" (flatten)
                        (("1" (expand "delete" 1)
                          (("1" (assert)
                            (("1" (lift-if)
                              (("1"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (lemma "nominal_AC_term_pair_eta")
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (replace -1 1 rl)
                                        (("1"
                                          (rewrite "subs_pair")
                                          (("1"
                                            (replace -1 1)
                                            (("1"
                                              (rewrite "get_args_pair")
                                              (("1"
                                                (lemma "perm?_append")
                                                (("1"
                                                  (inst? -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (lemma
                                                           "subs_get_args1")
                                                          (("1"
                                                            (inst? -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (rewrite
                                                                   "perm?_ref")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           "perm?_ref")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (rewrite "subs_pair")
                                    (("2"
                                      (rewrite "get_args_pair")
                                      (("2"
                                        (lemma "append_assoc[nominal_AC_term]")
                                        (("2"
                                          (inst? -1)
                                          (("2"
                                            (replace -1 2 rl)
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (lemma "nominal_AC_term_pair_eta")
                                                (("2"
                                                  (inst? -1)
                                                  (("2"
                                                    (replace -1 2 rl)
                                                    (("2"
                                                      (rewrite
                                                       "subs_pair")
                                                      (("2"
                                                        (replace -1 2)
                                                        (("2"
                                                          (rewrite
                                                           "get_args_pair")
                                                          (("2"
                                                            (lemma
                                                             "perm?_append")
                                                            (("2"
                                                              (inst?
                                                               -1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   3)
                                                                  (("2"
                                                                    (rewrite
                                                                     "perm?_ref")
                                                                    (("2"
                                                                      (reveal
                                                                       -5)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "term1(t)")
                                                                        (("2"
                                                                          (prop)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "f"
                                                                             "i"
                                                                             "sigma")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "num_arg_ge1")
                                                                                (("1"
                                                                                  (inst?
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (expand "delete" 2 1)
                          (("2" (assert)
                            (("2" (lift-if)
                              (("2"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (lemma "subs_get_args1")
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1 1 rl t)
                                          (("1"
                                            (lemma "nominal_AC_term_pair_eta")
                                            (("1"
                                              (inst? -1)
                                              (("1"
                                                (replace -1 1 rl)
                                                (("1"
                                                  (rewrite "subs_pair")
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (rewrite
                                                       "get_args_pair")
                                                      (("1"
                                                        (lemma
                                                         "perm?_append2")
                                                        (("1"
                                                          (inst? -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (rewrite
                                                                 "perm?_ref")
                                                                (("1"
                                                                  (rewrite
                                                                   "perm?_ref")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (lemma "nominal_AC_term_pair_eta")
                                    (("2"
                                      (inst -1 "t")
                                      (("2"
                                        (rewrite "subs_pair")
                                        (("2"
                                          (replace -1 2 rl)
                                          (("2"
                                            (rewrite "subs_pair")
                                            (("2"
                                              (replace -1 2 nil t)
                                              (("2"
                                                (rewrite
                                                 "get_args_pair")
                                                (("2"
                                                  (rewrite
                                                   "get_args_pair")
                                                  (("2"
                                                    (lemma
                                                     "perm?_append3")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "get_args(f)(subs(sigma)(term1(t)))"
                                                       "_"
                                                       "_"
                                                       "get_args(f)(subs(sigma)(term2(t)))")
                                                      (("2"
                                                        (inst? -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide 3)
                                                            (("2"
                                                              (reveal
                                                               -5)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "term2(t)")
                                                                (("2"
                                                                  (prop)
                                                                  (("1"
                                                                    (inst?
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         2)
                                                                        (("1"
                                                                          (lemma
                                                                           "num_arg_ge1")
                                                                          (("1"
                                                                            (inst?
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (expand "delete" 1)
                          (("1" (assert)
                            (("1" (rewrite "subs_ac")
                              (("1"
                                (case "f = ac_sym(t)")
                                (("1"
                                  (replace -1 1 rl t)
                                  (("1"
                                    (rewrite "get_args_ac")
                                    (("1"
                                      (lemma "nominal_AC_term_ac_app_eta")
                                      (("1"
                                        (inst? -1)
                                        (("1"
                                          (replace -1 1 rl)
                                          (("1"
                                            (rewrite "subs_ac")
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (replace -3 1)
                                                (("1"
                                                  (rewrite
                                                   "get_args_ac"
                                                   1)
                                                  (("1"
                                                    (reveal -3)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "ac_arg(t)")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (inst? -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "num_arg"
                                                               -4)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((num_arg_ge1 formula-decl nil nominal_AC_term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (append_assoc formula-decl nil list_props nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (get_args_pair formula-decl nil nominal_AC_term_properties nil)
    (subs_get_args1 formula-decl nil nominal_AC_substitution nil)
    (perm?_ref formula-decl nil nominal_AC_equality nil)
    (perm?_append formula-decl nil nominal_AC_equality nil)
    (nominal_AC_term_pair_eta formula-decl nil nominal_AC_term_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (perm?_append3 formula-decl nil nominal_AC_equality nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (perm?_append2 formula-decl nil nominal_AC_equality nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (nominal_AC_term_ac_app_eta formula-decl nil nominal_AC_term_adt nil)
    (get_args_ac formula-decl nil nominal_AC_term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (append def-decl "list[T]" list_props nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil)
    (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (constant type-eq-decl nil nominal_AC_term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (mem_get_args_subs4 0
  (mem_get_args_subs4-2 "" 3846517822
   ("" (skeep)
    (("" (rewrite "args_subs_ac" 1)
      (("" (rewrite "mem_flatten_map2")
        (("" (inst 1 "subs(sigma)(ti)")
          (("" (assert)
            (("" (rewrite "map_member4") (("" (inst 1 "ti") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((args_subs_ac formula-decl nil nominal_AC_substitution nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (map_member4 formula-decl nil list_aux_equational_reasoning2parameters nil) nil nil nil
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil) nil
    (mem_flatten_map2 formula-decl nil list_aux_equational_reasoning2parameters nil))
   shostak)
  (mem_get_args_subs4-1 nil 3846517719
   ("" (skeep)
    (("" (rewrite "args_subs_ac")
      (("" (rewrite "mem_flatten_map2")
        (("" (inst 1 "subs(sigma)(ti)")
          (("" (assert) (("" (postpone) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (subs_get_repeat_lst 0
  (subs_get_repeat_lst-1 nil 3807719739
   ("" (induct "i")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "get_repeat_lst" 1)
          (("2" (expand "subs" 1 1)
            (("2" (inst? -1) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nat_induction formula-decl nil naturalnumbers nil) nil
    (get_repeat_lst def-decl "list[T]" list_aux_equational_reasoning nil)
    (subs def-decl "args" nominal_AC_substitution nil)
    (args type-eq-decl nil nominal_AC_term_properties nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   SHOSTAK))
 (subs_get_repeat_lst_map 0
  (subs_get_repeat_lst_map-1 nil 3839431405
   ("" (induct "i") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (get_repeat_lst def-decl "list[T]" list_aux_equational_reasoning nil)
    (subs def-decl "args" nominal_AC_substitution nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (subs_get_lst_mult 0
  (subs_get_lst_mult-1 nil 3807718990
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_lst_mult" 1 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "get_lst_mult" 2 2)
                  (("2" (assert)
                    (("2" (expand "subs" 2 2)
                      (("2" (expand "subs" 2 2)
                        (("2" (expand "subs" 2 3)
                          (("2" (rewrite "subs_append")
                            (("2" (rewrite "subs_get_repeat_lst")
                              (("2"
                                (inst? -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_get_repeat_lst formula-decl nil nominal_AC_substitution nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (get_repeat_lst def-decl "list[T]" list_aux_equational_reasoning nil)
    (subs_append formula-decl nil nominal_AC_substitution nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (get_lst_mult def-decl "list[T]" list_aux_equational_reasoning nil)
    (subs def-decl "args" nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (args type-eq-decl nil nominal_AC_term_properties nil) nil)
   SHOSTAK))
 (subs_get_lst_mult2 0
  (subs_get_lst_mult2-1 nil 3839430706
   ("" (induct "lst_args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_lst_mult" 1 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (lemma "map_append[args, args]")
                  (("2" (inst?)
                    (("2" (replace -1)
                      (("2" (hide -1)
                        (("2" (expand "map" 2 3)
                          (("2" (expand "get_lst_mult" 2 2)
                            (("2" (assert)
                              (("2"
                                (inst?)
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (lemma "subs_get_repeat_lst_map")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (replace -1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((map_append formula-decl nil more_map_props nil)
    (subs_get_repeat_lst_map formula-decl nil nominal_AC_substitution nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (get_repeat_lst def-decl "list[T]" list_aux_equational_reasoning nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (get_lst_mult def-decl "list[T]" list_aux_equational_reasoning nil)
    (subs def-decl "args" nominal_AC_substitution nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil))
   shostak))
 (perm?_get_args_subs 0
  (perm?_get_args_subs-1 nil 3807732580
   ("" (lemma "args_subs_ac")
    (("" (skeep)
      (("" (inst? -1)
        (("" (replace -1 1 nil t)
          (("" (lemma "args_subs_ac")
            (("" (inst? -1)
              (("" (replace -1 1 nil t)
                (("" (lemma "perm?_map_get_args")
                  (("" (rewrite "subs_map")
                    (("" (rewrite "subs_map")
                      (("" (inst? -1)
                        (("" (inst -1 "f")
                          (("" (assert)
                            (("" (expand "perm?" -1)
                              (("" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((perm?_map_get_args formula-decl nil nominal_AC_equality nil)
    (perm? const-decl "bool" nominal_AC_equality nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (subs def-decl "args" nominal_AC_substitution nil) nil
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil nominal_AC_term_properties nil) nil
    (subs_map formula-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (args_subs_ac formula-decl nil nominal_AC_substitution nil))
   SHOSTAK))
 (subs_flatten 0
  (subs_flatten-1 nil 3839431699
   ("" (induct "lst_args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "flatten" 1 1)
            (("2" (rewrite "subs_append")
              (("2" (expand "map" 1)
                (("2" (expand "flatten" 1 2)
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_append formula-decl nil nominal_AC_substitution nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil) nil
    (flatten def-decl "list[T]" list_aux_equational_reasoning nil)
    (subs def-decl "args" nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil))
   shostak))
 (vars_subs_t 0
  (vars_subs_t-1 nil 3827504369
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "subset?" 1)
              (("" (skolem 1 "X")
                (("" (prop)
                  (("" (lemma "nominal_AC_term_opt")
                    (("" (inst? -1)
                      (("" (prop)
                        (("1" (replace -2 -3)
                          (("1" (hide-all-but -3)
                            (("1" (rewrite "subs_const")
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (case "member(V(t), dom(sigma))")
                          (("1" (expand "member" -1)
                            (("1" (expand "dom" -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "subs" 1 1)
                                  (("1"
                                    (expand ("member" "union") 2)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (rewrite "vars_finset")
                                        (("1"
                                          (inst 2 "subs(sigma)(V(t))")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "img" 1)
                                              (("1"
                                                (expand "member" 1 1)
                                                (("1"
                                                  (inst 1 "V(t)")
                                                  (("1"
                                                    (expand
                                                     ("member" "dom")
                                                     1)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -2 -3)
                                              (("2"
                                                (rewrite "subs_ext_pi")
                                                (("2"
                                                  (rewrite
                                                   "subs_ext_pi")
                                                  (("2"
                                                    (rewrite
                                                     "ext_vars")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "member" 1)
                            (("2" (expand "dom" 1)
                              (("2"
                                (flatten)
                                (("2"
                                  (replace -3 -4)
                                  (("2"
                                    (rewrite "subs_ext_pi")
                                    (("2"
                                      (replace -1 -4)
                                      (("2"
                                        (rewrite "ext_vars")
                                        (("2"
                                          (expand "vars" -4)
                                          (("2"
                                            (expand "member" -4)
                                            (("2"
                                              (expand "singleton" -4)
                                              (("2"
                                                (replace -4)
                                                (("2"
                                                  (expand
                                                   ("member" "union")
                                                   1)
                                                  (("2"
                                                    (prop)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (replace -1)
                          (("3" (rewrite "subs_unit")
                            (("3" (hide-all-but -2)
                              (("3" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("4" (replace -2)
                          (("4" (rewrite "subs_pair")
                            (("4" (expand "vars" -3)
                              (("4"
                                (expand "member" -3)
                                (("4"
                                  (expand "union" -3)
                                  (("4"
                                    (prop)
                                    (("1"
                                      (hide -2)
                                      (("1"
                                        (reveal -3)
                                        (("1"
                                          (inst -1 "term1(t)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (inst? -1)
                                              (("1"
                                                (expand "subset?" -1)
                                                (("1"
                                                  (inst? -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide -2)
                                                      (("1"
                                                        (expand
                                                         "member")
                                                        (("1"
                                                          (expand
                                                           "union")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (hide 1)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (reveal -2)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (reveal -2)
                                      (("2"
                                        (inst -1 "term2(t)")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst -1 "sigma")
                                            (("1"
                                              (expand "subset?" -1)
                                              (("1"
                                                (inst -1 "X")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -2 -3)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("5" (replace -2 -3)
                          (("5" (rewrite "subs_app")
                            (("5" (expand "vars" -3)
                              (("5"
                                (hide -1)
                                (("5"
                                  (reveal -3)
                                  (("5"
                                    (inst -1 "arg(t)")
                                    (("5"
                                      (prop)
                                      (("1"
                                        (inst? -1)
                                        (("1"
                                          (expand "subset?" -1)
                                          (("1"
                                            (inst -1 "X")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (reveal -4)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (reveal -1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("6" (replace -2 -3)
                          (("6" (rewrite "subs_ac")
                            (("6" (expand "vars" -3)
                              (("6"
                                (lemma "mem_union_map[nominal_AC_term, variable]")
                                (("6"
                                  (inst? -1)
                                  (("6"
                                    (assert)
                                    (("6"
                                      (hide -4)
                                      (("6"
                                        (skolem -1 "ti_sigma")
                                        (("6"
                                          (lemma "subs_ac")
                                          (("6"
                                            (inst
                                             -1
                                             "ac_arg(t)"
                                             "ac_sym(t)"
                                             "sigma")
                                            (("6"
                                              (replace -1 -2 :dir rl)
                                              (("6"
                                                (replace -4 -2 :dir rl)
                                                (("6"
                                                  (hide -1)
                                                  (("6"
                                                    (flatten)
                                                    (("6"
                                                      (reveal -6)
                                                      (("6"
                                                        (lemma
                                                         "mem_get_args_subs")
                                                        (("6"
                                                          (inst? -1)
                                                          (("6"
                                                            (assert)
                                                            (("6"
                                                              (skolem
                                                               -1
                                                               "ti")
                                                              (("6"
                                                                (name-replace
                                                                 "f"
                                                                 "ac_sym(t)")
                                                                (("6"
                                                                  (prop)
                                                                  (("1"
                                                                    (inst
                                                                     -3
                                                                     "ti")
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (expand
                                                                           "subset?"
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "X")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   ("member"
                                                                                    "union")
                                                                                   1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     ("member"
                                                                                      "union")
                                                                                     -1)
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "vars_get_args")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "f"
                                                                                           "t")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             2
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "vars_args")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 2
                                                                                                 "ti")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (use
                                                                         "get_args_size")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "is_ac_sym?"
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "f")
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     ("member"
                                                                      "union")
                                                                     1)
                                                                    (("2"
                                                                      (prop)
                                                                      (("2"
                                                                        (expand
                                                                         ("member"
                                                                          "ext")
                                                                         -2)
                                                                        (("2"
                                                                          (skolem
                                                                           -2
                                                                           "t2")
                                                                          (("2"
                                                                            (prop)
                                                                            (("2"
                                                                              (rewrite
                                                                               "subterm_fin_set")
                                                                              (("2"
                                                                                (skolem
                                                                                 -2
                                                                                 "t2S")
                                                                                (("2"
                                                                                  (prop)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "vars_finset")
                                                                                    (("2"
                                                                                      (inst
                                                                                       1
                                                                                       "t2S")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "vars_subterm")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "X"
                                                                                             "t2"
                                                                                             "t2S")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -4
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "ext_vars")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("7" (replace -2 (-3 1))
                          (("7" (expand "vars" 1 2)
                            (("7" (rewrite "subs_abs")
                              (("7"
                                (expand "vars" -3)
                                (("7"
                                  (reveal -2)
                                  (("7"
                                    (inst -1 "body(t)")
                                    (("7" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_abs formula-decl nil nominal_AC_substitution nil)
    (ac_app adt-constructor-decl "[[ac_symbol, nominal_AC_term] -> (ac_app?)]"
     nominal_AC_term_adt nil)
    nil (args type-eq-decl nil nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil) nil
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (vars_get_args formula-decl nil nominal_AC_term_properties nil) nil
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (get_args_size formula-decl nil nominal_AC_term_properties nil)
    (subterm_fin_set formula-decl nil nominal_AC_term_properties nil)
    (vars_subterm formula-decl nil nominal_AC_term_properties nil)
    (ext const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mem_get_args_subs formula-decl nil nominal_AC_substitution nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (mem_union_map formula-decl nil list_aux_equational_reasoning2parameters nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (ext_vars formula-decl nil nominal_AC_term_properties nil)
    (subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_finset formula-decl nil nominal_AC_term_properties nil)
    (singleton const-decl "(singleton?)" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (a adt-accessor-decl "[(atom?) -> atom]" nominal_AC_term_adt nil)
    (atom? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (nominal_AC_term_opt formula-decl nil nominal_AC_term_properties nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    nil (union const-decl "set" sets nil) nil nil
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) nil
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (vars_subs_t2 0
  (vars_subs_t2-1 nil 3883475475
   ("" (induct "t")
    (("1" (skeep)
      (("1" (skeep)
        (("1" (rewrite "subs_const") (("1" (grind) nil nil)) nil))
        nil))
      nil)
     ("2" (skolem 1 ("pi" "Y"))
      (("2" (skeep)
        (("2" (inst 1 "Y")
          (("2" (prop)
            (("1" (grind) nil nil)
             ("2" (rewrite "subs_ext_pi")
              (("2" (rewrite "ext_vars") nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (rewrite "subs_unit") (("3" (grind) nil nil)) nil)) nil)
     ("4" (skolem 1 ("t1" "t2"))
      (("4" (prop)
        (("4" (skeep)
          (("4" (rewrite "subs_pair")
            (("4" (expand "vars" -3)
              (("4" (expand ("member " "union") -3)
                (("4" (prop)
                  (("1" (inst -2 "X" "sigma")
                    (("1" (prop)
                      (("1" (skeep)
                        (("1" (inst 1 "Y") (("1" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst? -3)
                    (("2" (assert)
                      (("2" (skeep)
                        (("2" (inst 1 "Y") (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skolem 1 ("f" "arg"))
      (("5" (prop)
        (("5" (skeep)
          (("5" (rewrite "subs_app" -2)
            (("5" (expand "vars" -2)
              (("5" (inst?)
                (("5" (assert)
                  (("5" (skeep)
                    (("5" (inst 1 "Y")
                      (("5" (assert) (("5" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skolem 1 ("f " "arg"))
      (("6" (prop)
        (("6" (skeep)
          (("6" (rewrite "subs_ac")
            (("6" (rewrite "vars_ac2")
              (("6" (inst?)
                (("6" (assert)
                  (("6" (skeep)
                    (("6" (inst 1 "Y")
                      (("6" (rewrite "vars_ac2")
                        (("6" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skolem 1 ("a" "t1"))
      (("7" (prop)
        (("7" (skeep)
          (("7" (rewrite "subs_abs" -2)
            (("7" (expand "vars" -2)
              (("7" (inst?)
                (("7" (assert)
                  (("7" (skeep)
                    (("7" (inst 1 "Y")
                      (("7" (assert)
                        (("7" (expand "vars" 1)
                          (("7" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_abs formula-decl nil nominal_AC_substitution nil)
    (string type-eq-decl nil strings nil)
    (vars_ac2 formula-decl nil nominal_AC_term_properties nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (ext_vars formula-decl nil nominal_AC_term_properties nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (nominal_AC_term_induction formula-decl nil nominal_AC_term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil) nil nil
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil))
   shostak))
 (basic_sub_no_effect 0
  (basic_sub_no_effect-1 nil 3831933581
   ("" (induct "t")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil)
     ("6" (skeep)
      (("6" (skeep)
        (("6" (expand "subs" 2)
          (("6" (inst? -1)
            (("6" (assert)
              (("6" (lemma "vars_ac2")
                (("6" (inst? -1) (("6" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (grind) nil nil))
    nil)
   ((string type-eq-decl nil strings nil)
    (vars_ac2 formula-decl nil nominal_AC_term_properties nil)
    (union const-decl "set" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (singleton const-decl "(singleton?)" sets nil)
    (emptyset const-decl "set" sets nil)
    (nominal_AC_term_induction formula-decl nil nominal_AC_term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil) nil
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil))
   shostak))
 (basic_sub_elim_var 0
  (basic_sub_elim_var-1 nil 3835541890
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "subs" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (hide -3) (("1" (grind) nil nil)) nil)
                 ("2" (hide -3)
                  (("2" (hide -3) (("2" (rewrite "ext_vars") nil nil))
                    nil))
                  nil)
                 ("3" (grind) nil nil)
                 ("4" (hide-all-but -2) (("4" (grind) nil nil)) nil)
                 ("5" (expand "vars" -2)
                  (("5" (expand ("member" "union") -2)
                    (("5" (prop)
                      (("1" (inst -3 "term1(t)")
                        (("1" (grind) nil nil)) nil)
                       ("2" (inst -3 "term2(t)")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("6" (expand "vars" -2)
                  (("6" (inst -3 "arg(t)") (("6" (grind) nil nil))
                    nil))
                  nil)
                 ("7" (hide 1 2 3 4 5)
                  (("7" (rewrite "vars_ac2")
                    (("7" (inst -3 "ac_arg(t)") (("7" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("8" (inst -2 "body(t)") (("8" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (vars_ac2 formula-decl nil nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (union const-decl "set" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ext_vars formula-decl nil nominal_AC_term_properties nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil) nil
    (basic_sub type-eq-decl nil nominal_AC_substitution nil) nil
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) nil
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (basic_sub_not_elim_var 0
  (basic_sub_not_elim_var-1 nil 3835542233
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "subs" -1)
              (("" (lift-if)
                (("" (prop)
                  (("1" (grind) nil nil)
                   ("2" (rewrite "ext_vars") nil nil)
                   ("3" (grind) nil nil) ("4" (grind) nil nil)
                   ("5" (expand "vars" -2)
                    (("5" (expand ("member" "union") -2)
                      (("5" (prop)
                        (("1" (reveal -1)
                          (("1" (inst -1 "term1(t)")
                            (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (reveal -1)
                          (("2" (inst -1 "term2(t)")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (hide 1 2 3 4)
                    (("6" (reveal -1)
                      (("6" (expand "vars" -3)
                        (("6" (inst -1 "arg(t)")
                          (("6" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("7" (hide 1 2 3 4 5)
                    (("7" (rewrite "vars_ac2")
                      (("7" (reveal -1)
                        (("7" (inst -1 "ac_arg(t)")
                          (("7" (lemma "nominal_AC_term_ac_app_eta")
                            (("7" (inst?)
                              (("7"
                                (prop)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -2 3 :dir rl)
                                      (("1"
                                        (rewrite "vars_ac2")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("8" (reveal -1)
                    (("8" (expand "vars" -2)
                      (("8" (inst -1 "body(t)")
                        (("8" (prop)
                          (("1" (grind) nil nil) ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (ext_vars formula-decl nil nominal_AC_term_properties nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (string type-eq-decl nil strings nil)
    (vars_ac2 formula-decl nil nominal_AC_term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    nil nil (Union const-decl "set" sets nil)
    (nominal_AC_term_ac_app_eta formula-decl nil nominal_AC_term_adt nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil) nil
    (basic_sub type-eq-decl nil nominal_AC_substitution nil) nil
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) nil
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (dom_basic_sub 0
  (dom_basic_sub-1 nil 3823280262
   ("" (skeep)
    (("" (expand "dom" 1)
      (("" (rewrite "subset_antisymmetric")
        (("1" (hide 2)
          (("1" (expand "subset?" 1)
            (("1" (skeep)
              (("1" (expand "member" -1)
                (("1" (expand "subs" -1)
                  (("1" (expand "subs" -1) (("1" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (expand "subset?" 1)
            (("2" (skeep)
              (("2" (expand "member" 1)
                (("2" (flatten)
                  (("2" (expand "singleton" -1)
                    (("2" (expand "member" -1)
                      (("2" (replace -1 :dir rl)
                        (("2" (expand "subs" -2)
                          (("2" (expand "subs" -2)
                            (("2" (expand "subs" -2 2)
                              (("2"
                                (expand "subs" -2)
                                (("2"
                                  (rewrite "ext_identity")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (ext_identity formula-decl nil nominal_AC_term_properties nil) nil nil nil
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (/= const-decl "boolean" notequal nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (set type-eq-decl nil sets nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil))
   shostak))
 (dom_basic_sub2 0
  (dom_basic_sub2-1 nil 3855920303
   ("" (skeep)
    (("" (decompose-equality 1)
      (("" (iff)
        (("" (prop)
          (("1" (expand "dom" -1) (("1" (grind) nil nil)) nil)
           ("2" (expand "singleton" -1)
            (("2" (replace -1)
              (("2" (expand "dom" 1)
                (("2" (decompose-equality 2)
                  (("2" (iff 1)
                    (("2" (prop)
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_emptyset name-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil) nil nil
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (emptyset const-decl "set" sets nil))
   shostak))
 (dom_null 0
  (dom_null-1 nil 3825713351
   ("" (lemma "subset_antisymmetric[variable]")
    (("" (inst? -1)
      (("" (assert)
        (("" (hide 2)
          (("" (prop) (("1" (grind) nil nil) ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((set type-eq-decl nil sets nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (emptyset const-decl "set" sets nil) nil
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil))
   shostak))
 (dom_append 0
  (dom_append-1 nil 3827502281
   ("" (skeep)
    (("" (expand "subset?" 1)
      (("" (skolem 1 "X")
        (("" (prop)
          (("" (expand "dom" -1)
            (("" (expand "member" -1)
              (("" (flatten)
                (("" (expand "subs" 1)
                  (("" (rewrite "subs_append2")
                    (("" (expand "member" 2)
                      (("" (expand "union" 2)
                        (("" (flatten)
                          (("" (expand "member" 3)
                            (("" (expand "dom" 3)
                              ((""
                                (flatten)
                                ((""
                                  (expand "subs" -1)
                                  ((""
                                    (replace -1 1)
                                    (("" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (union const-decl "set" sets nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil))
   shostak))
 (img_basic_sub 0
  (img_basic_sub-1 nil 3823280584
   ("" (skeep)
    (("" (rewrite "subset_antisymmetric")
      (("1" (expand "subset?" 1)
        (("1" (skolem 1 "s")
          (("1" (prop)
            (("1" (expand "member" -1)
              (("1" (expand "img" -1)
                (("1" (skolem -1 "X1")
                  (("1" (prop)
                    (("1" (expand "subs" -2)
                      (("1" (expand "subs" -2)
                        (("1" (expand "subs" -2 2)
                          (("1" (expand "member" -1)
                            (("1" (expand "dom" -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "subs" 1 1)
                                  (("1"
                                    (grind)
                                    (("1"
                                      (rewrite "ext_identity")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "subset?" 1)
        (("2" (skeep)
          (("2" (expand "member" -1)
            (("2" (expand "singleton" -1)
              (("2" (replace -1 1)
                (("2" (expand "member" 1)
                  (("2" (expand "img" 1)
                    (("2" (inst 1 "X")
                      (("2" (assert)
                        (("2" (expand "subs" 1)
                          (("2" (prop)
                            (("1" (expand "dom" 1)
                              (("1"
                                (grind)
                                (("1"
                                  (rewrite "ext_identity")
                                  (("1"
                                    (replace -1)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind)
                              (("2" (rewrite "ext_identity") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_antisymmetric formula-decl nil sets_lemmas nil)
    (set type-eq-decl nil sets nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (ext_identity formula-decl nil nominal_AC_term_properties nil) nil nil
    (subset? const-decl "bool" sets nil) nil)
   shostak))
 (img_basic_sub2 0
  (img_basic_sub2-1 nil 3882549656
   ("" (skeep)
    (("" (lemma "dom_basic_sub2")
      (("" (inst -1 "X" "t")
        (("" (prop)
          (("1" (rewrite "subset_antisymmetric" 1)
            (("1" (expand "subset?" 1)
              (("1" (skolem 1 "t1")
                (("1" (prop)
                  (("1" (expand ("member" "img") -1)
                    (("1" (skolem -1 "X1")
                      (("1" (prop)
                        (("1" (replace -3)
                          (("1" (expand ("member" "singleton") -1)
                            (("1" (replace -1)
                              (("1"
                                (expand "subs" -2)
                                (("1"
                                  (expand "subs" -2)
                                  (("1"
                                    (expand "subs" -2 2)
                                    (("1"
                                      (expand "subs" -2)
                                      (("1"
                                        (rewrite "ext_identity")
                                        (("1"
                                          (replace -2)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "subset?" 1)
              (("2" (skolem 1 "t1")
                (("2" (prop)
                  (("2" (expand ("member" "singleton") -1)
                    (("2" (replace -1)
                      (("2" (expand ("member" "img") 1)
                        (("2" (inst 1 "X")
                          (("2" (prop)
                            (("1" (replace -2) (("1" (grind) nil nil))
                              nil)
                             ("2" (expand "subs" 1)
                              (("2"
                                (expand "subs" 1)
                                (("2"
                                  (expand "subs" 1 2)
                                  (("2"
                                    (expand "subs" 1)
                                    (("2"
                                      (rewrite "ext_identity")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (rewrite "subset_antisymmetric" 2)
            (("1" (expand "subset?" 1)
              (("1" (skolem 1 "t1")
                (("1" (prop)
                  (("1" (expand ("member" "img") -1)
                    (("1" (skolem -1 "X1")
                      (("1" (prop)
                        (("1" (replace -3) (("1" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "subset?") (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dom_basic_sub2 formula-decl nil nominal_AC_substitution nil)
    (subset? const-decl "bool" sets nil) nil nil
    (ext_identity formula-decl nil nominal_AC_term_properties nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (set type-eq-decl nil sets nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (emptyset const-decl "set" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (img_basic_sub_var 0
  (img_basic_sub_var-1 nil 3882553582
   ("" (skeep)
    (("" (use "img_basic_sub2")
      (("" (expand "subset?" 1)
        (("" (skeep)
          (("" (prop)
            (("1" (replace -1)
              (("1" (rewrite "vars_singleton") nil nil)) nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((img_basic_sub2 formula-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil) nil
    nil (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (empty? const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil) nil
    (vars_singleton formula-decl nil nominal_AC_term_properties nil)
    (subset? const-decl "bool" sets nil))
   shostak))
 (img_null 0
  (img_null-1 nil 3825713276
   ("" (lemma "subset_antisymmetric[nominal_AC_term]")
    (("" (inst? -1)
      (("" (assert)
        (("" (hide 2)
          (("" (prop)
            (("1" (expand "subset?" 1)
              (("1" (skeep)
                (("1" (expand "img" -1)
                  (("1" (expand "member" -1 1)
                    (("1" (skeep)
                      (("1" (lemma "dom_null") (("1" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((set type-eq-decl nil sets nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (emptyset const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil) nil
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (dom_null formula-decl nil nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil))
   shostak))
 (img_dom_emptyset 0
  (img_dom_emptyset-1 nil 3883466617
   ("" (skeep)
    (("" (rewrite "subset_antisymmetric" 1)
      (("1" (expand "subset?" 1)
        (("1" (skeep)
          (("1" (expand ("member" "img") -1)
            (("1" (skeep)
              (("1" (replace -3) (("1" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (grind) nil nil))
      nil))
    nil)
   ((subset_antisymmetric formula-decl nil sets_lemmas nil)
    (set type-eq-decl nil sets nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (emptyset const-decl "set" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil))
   shostak))
 (img_dom_singleton 0
  (img_dom_singleton-1 nil 3883466681
   ("" (skeep)
    (("" (rewrite "subset_antisymmetric" 1)
      (("1" (expand "subset?" 1)
        (("1" (skolem 1 "t")
          (("1" (prop)
            (("1" (expand ("member" "img") -1)
              (("1" (skolem -1 "Y")
                (("1" (flatten)
                  (("1" (replace -3) (("1" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "subset?" 1)
        (("2" (skolem 1 "t")
          (("2" (prop)
            (("2" (expand ("member" "singleton") -1)
              (("2" (expand ("member" "img") 1)
                (("2" (inst 1 "X")
                  (("2" (assert)
                    (("2" (replace -2 1) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_antisymmetric formula-decl nil sets_lemmas nil)
    (set type-eq-decl nil sets nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil))
   shostak))
 (subs_no_effect_t 0
  (subs_no_effect_t-1 nil 3827593353
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (lemma "nominal_AC_term_opt")
            (("" (inst? -1)
              (("" (prop)
                (("1" (replace -2 1)
                  (("1" (rewrite "subs_const") nil nil)) nil)
                 ("2" (expand "disjoint?" -4)
                  (("2" (expand "empty?" -4)
                    (("2" (inst -4 "V(t)")
                      (("2" (expand "intersection" 1)
                        (("2" (expand "member" 1 1)
                          (("2" (prop)
                            (("1" (expand "member" 1)
                              (("1"
                                (expand "dom" 1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "subs" -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -3 1)
                                        (("1"
                                          (rewrite "subs_ext_pi" 1)
                                          (("1"
                                            (expand "subs" 1)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (expand "ext" 1)
                                                (("1"
                                                  (rewrite
                                                   "append_null")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "vars" 1)
                              (("2"
                                (assert)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (replace -1 1)
                  (("3" (rewrite "subs_unit") nil nil)) nil)
                 ("4" (replace -2 1)
                  (("4" (replace -2 -4)
                    (("4" (rewrite "subs_pair")
                      (("4" (expand "vars" -4)
                        (("4" (inst-cp -3 "term1(t)")
                          (("4" (prop)
                            (("1" (inst -1 "sigma")
                              (("1"
                                (prop)
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (inst -4 "term2(t)")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (inst -1 "sigma")
                                        (("1"
                                          (prop)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide -1 -2 -3 2)
                                            (("2"
                                              (expand "disjoint?" 1)
                                              (("2"
                                                (expand "empty?" 1)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (expand
                                                     "disjoint?"
                                                     -2)
                                                    (("2"
                                                      (expand
                                                       "empty?"
                                                       -2)
                                                      (("2"
                                                        (inst -2 "x")
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -1 -2 2)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (replace -2 1)
                  (("5" (replace -2 -4)
                    (("5" (rewrite "subs_app")
                      (("5" (expand "vars" -4)
                        (("5" (inst -3 "arg(t)")
                          (("5" (prop)
                            (("1" (inst -1 "sigma")
                              (("1" (assert) nil nil)) nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (replace -2 1)
                  (("6" (rewrite "subs_ac")
                    (("6" (inst -3 "ac_arg(t)")
                      (("6" (prop)
                        (("1" (inst? -1)
                          (("1" (prop)
                            (("1" (replace -1 1)
                              (("1" (propax) nil nil)) nil)
                             ("2" (hide 2)
                              (("2"
                                (lemma "vars_ac")
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (typepred "ac_arg(t)")
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (expand "disjoint?" 1)
                                        (("2"
                                          (expand "empty?" 1)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (expand "disjoint?" -5)
                                              (("2"
                                                (expand "empty?" -5)
                                                (("2"
                                                  (inst -5 "x")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "member"
                                                       -2)
                                                      (("2"
                                                        (expand
                                                         "intersection"
                                                         -2)
                                                        (("2"
                                                          (expand
                                                           "intersection"
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "member"
                                                             1
                                                             1)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   -1)
                                                                  (("2"
                                                                    (lemma
                                                                     "vars_ac2")
                                                                    (("2"
                                                                      (inst?
                                                                       -1)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "x")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (replace -2 -4)
                  (("7" (replace -2 1)
                    (("7" (expand "vars" -4)
                      (("7" (rewrite "subs_abs")
                        (("7" (decompose-equality 1)
                          (("7" (inst -3 "body(t)")
                            (("7" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((abs adt-constructor-decl "[[atom, nominal_AC_term] -> (abs?)]" nominal_AC_term_adt nil)
    (nominal_AC_term_abs_extensionality formula-decl nil nominal_AC_term_adt nil)
    (subs_abs formula-decl nil nominal_AC_substitution nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (finite_intersection2 application-judgement "finite_set"
     finite_sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    nil nil (Union const-decl "set" sets nil)
    (string type-eq-decl nil strings nil)
    (vars_ac2 formula-decl nil nominal_AC_term_properties nil)
    (vars_ac formula-decl nil nominal_AC_term_properties nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil) nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (union const-decl "set" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (append_null formula-decl nil list_props nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (atom? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (a adt-accessor-decl "[(atom?) -> atom]" nominal_AC_term_adt nil)
    (nominal_AC_term_opt formula-decl nil nominal_AC_term_properties nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) nil
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (subs_no_effect_t2 0
  (subs_no_effect_t2-1 nil 3887956408
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (lemma "nominal_AC_term_opt")
          (("" (inst -1 "t")
            (("" (prop)
              (("1" (hide -3) (("1" (grind) nil nil)) nil)
               ("2" (hide -3)
                (("2" (skeep)
                  (("2" (expand "disjoint?" 1)
                    (("2" (expand "empty?" 1)
                      (("2" (skeep)
                        (("2" (expand ("member " "intersection") -4)
                          (("2" (prop)
                            (("2" (expand ("member" "vars") -5)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "singleton" -5)
                                  (("2"
                                    (replace -5 :dir rl)
                                    (("2"
                                      (expand ("member" "dom") -4)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand "subs" 1)
                                          (("2"
                                            (replace -2 -3)
                                            (("2"
                                              (lemma "subs_ext_pi2")
                                              (("2"
                                                (inst
                                                 -1
                                                 "x"
                                                 "p(t)"
                                                 "null"
                                                 "sigma")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide -2)
                (("3" (skeep) (("3" (grind) nil nil)) nil)) nil)
               ("4" (skeep)
                (("4" (use "nominal_AC_term_pair_eta")
                  (("4" (replace -3 -5)
                    (("4" (rewrite "subs_pair" -5)
                      (("4" (decompose-equality -5)
                        (("4" (replace -3 1 :dir rl)
                          (("4" (expand "vars" 1)
                            (("4" (expand "disjoint?")
                              (("4"
                                (expand "empty?")
                                (("4"
                                  (skeep)
                                  (("4"
                                    (expand
                                     ("member" "intersection")
                                     -7)
                                    (("4"
                                      (flatten)
                                      (("4"
                                        (expand ("member" "union") -8)
                                        (("4"
                                          (prop)
                                          (("1"
                                            (inst -7 "term1(t)")
                                            (("1"
                                              (prop)
                                              (("1"
                                                (inst -1 "sigma")
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst -7 "term2(t)")
                                            (("2"
                                              (prop)
                                              (("1"
                                                (inst?)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("5" (skeep)
                (("5" (replace -2)
                  (("5" (rewrite "subs_app" -4)
                    (("5" (decompose-equality -4)
                      (("5" (expand "vars" 1)
                        (("5" (inst -4 "arg(t)")
                          (("5" (prop)
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("6" (skeep)
                (("6" (replace -2)
                  (("6" (rewrite "subs_ac" -4)
                    (("6" (decompose-equality -4)
                      (("6" (inst -4 "ac_arg(t)")
                        (("6" (prop)
                          (("1" (inst -1 "sigma")
                            (("1" (assert)
                              (("1"
                                (expand "disjoint?")
                                (("1"
                                  (expand "empty?")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (use "vars_ac2")
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("7" (skeep)
                (("7" (replace -2)
                  (("7" (rewrite "subs_abs" -4)
                    (("7" (decompose-equality -4)
                      (("7" (expand "vars" 1)
                        (("7" (inst -4 "body(t)")
                          (("7" (prop)
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nominal_AC_term_opt formula-decl nil nominal_AC_term_properties nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (subs_ext_pi2 formula-decl nil nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (nominal_AC_term_pair_eta formula-decl nil nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (union const-decl "set" sets nil)
    (pair adt-constructor-decl "[[nominal_AC_term, nominal_AC_term] -> (pair?)]" nominal_AC_term_adt
     nil)
    (app adt-constructor-decl "[[f_symbol, nominal_AC_term] -> (app?)]" nominal_AC_term_adt
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (ac_app adt-constructor-decl "[[ac_symbol, nominal_AC_term] -> (ac_app?)]"
     nominal_AC_term_adt nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_intersection2 application-judgement "finite_set"
     finite_sets nil)
    (Union const-decl "set" sets nil) nil nil
    (string type-eq-decl nil strings nil)
    (vars_ac2 formula-decl nil nominal_AC_term_properties nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (abs adt-constructor-decl "[[atom, nominal_AC_term] -> (abs?)]" nominal_AC_term_adt nil)
    (subs_abs formula-decl nil nominal_AC_substitution nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil) nil
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) nil
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (dom_append2 0
  (dom_append2-1 nil 3856869376
   ("" (skeep)
    (("" (rewrite "subset_antisymmetric")
      (("1" (use "dom_append") nil nil)
       ("2" (expand "subset?" 1)
        (("2" (skeep)
          (("2" (expand ("member" "union") -1)
            (("2" (case "member(x, dom(delta))")
              (("1" (assert)
                (("1" (hide -2)
                  (("1" (expand "member")
                    (("1" (expand "dom" -1)
                      (("1" (expand "dom" 1 1)
                        (("1" (flatten)
                          (("1" (expand "subs" -1 1)
                            (("1" (rewrite "subs_append2")
                              (("1"
                                (lemma "subs_no_effect_t")
                                (("1"
                                  (inst -1 "sigma" "null * x")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (expand "subs" 1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "vars" 1 1)
                                        (("2"
                                          (expand "disjoint?" 1)
                                          (("2"
                                            (expand "disjoint?" -3)
                                            (("2"
                                              (expand "empty?")
                                              (("2"
                                                (skolem 1 "y")
                                                (("2"
                                                  (inst -4 "y")
                                                  (("2"
                                                    (expand
                                                     ("member"
                                                      "intersection")
                                                     -1)
                                                    (("2"
                                                      (expand
                                                       ("member"
                                                        "intersection")
                                                       2)
                                                      (("2"
                                                        (expand
                                                         "singleton"
                                                         -1
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "member"
                                                           -1
                                                           2)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (replace
                                                               -2)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (prop)
                (("2" (expand "member" -1)
                  (("2" (expand "dom" -1)
                    (("2" (flatten)
                      (("2" (expand ("member" "dom") 3)
                        (("2" (flatten)
                          (("2" (expand "subs")
                            (("2" (rewrite "subs_append2")
                              (("2"
                                (lemma "subs_no_effect_t")
                                (("2"
                                  (inst
                                   -1
                                   "delta"
                                   "subs(sigma)(null * x)")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (replace -1)
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (expand "disjoint?" 1)
                                      (("2"
                                        (expand "empty?" 1)
                                        (("2"
                                          (skolem 1 "y")
                                          (("2"
                                            (expand
                                             ("member" "intersection")
                                             -1)
                                            (("2"
                                              (prop)
                                              (("2"
                                                (use "vars_subs_t")
                                                (("2"
                                                  (expand "subset?" -1)
                                                  (("2"
                                                    (inst -1 "y")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         ("member"
                                                          "union")
                                                         -1)
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (hide-all-but
                                                             (-1
                                                              -2
                                                              -5))
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "vars"
                                                             -1)
                                                            (("2"
                                                              (expand
                                                               "singleton"
                                                               -1)
                                                              (("2"
                                                                (expand
                                                                 "member"
                                                                 -1
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_antisymmetric formula-decl nil sets_lemmas nil)
    (set type-eq-decl nil sets nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (append def-decl "list[T]" list_props nil)
    (union const-decl "set" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (dom_append formula-decl nil nominal_AC_substitution nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (intersection const-decl "set" sets nil) nil
    (subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil) nil
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (vars_subs_t formula-decl nil nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil))
   shostak))
 (subs_no_effect_args 0
  (subs_no_effect_args-1 nil 3849638234
   ("" (measure-induct "length(args)" "args")
    (("" (skolem 1 "args")
      (("" (prop)
        (("" (skeep)
          (("" (expand "subs" 1 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (lemma "subs_no_effect_t")
                  (("2" (inst -1 "sigma" "car(args)")
                    (("2" (prop)
                      (("1" (replace -1)
                        (("1" (inst -2 "cdr(args)")
                          (("1" (prop)
                            (("1" (inst -1 "sigma")
                              (("1"
                                (prop)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (decompose-equality 2)
                                      nil
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "disjoint?" 1)
                                  (("2"
                                    (expand "empty?" 1)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (expand
                                         ("member" "intersection")
                                         -1)
                                        (("2"
                                          (prop)
                                          (("2"
                                            (expand "disjoint?" -4)
                                            (("2"
                                              (expand "empty?" -4)
                                              (("2"
                                                (inst -4 "x")
                                                (("2"
                                                  (expand
                                                   ("member"
                                                    "intersection")
                                                   3)
                                                  (("2"
                                                    (prop)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "disjoint?" 1)
                        (("2" (expand "empty?" 1)
                          (("2" (skeep)
                            (("2" (expand ("member" "intersection") -1)
                              (("2"
                                (prop)
                                (("2"
                                  (expand "disjoint?" -4)
                                  (("2"
                                    (expand "empty?" -4)
                                    (("2"
                                      (inst -4 "x")
                                      (("2"
                                        (expand
                                         ("member" "intersection")
                                         3)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (subs def-decl "args" nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (subs_no_effect_lst_args 0
  (subs_no_effect_lst_args-1 nil 3896717918
   ("" (induct "lst_args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("args" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "map" 1)
            (("2" (decompose-equality 1)
              (("1" (hide -1)
                (("1" (use "subs_no_effect_args")
                  (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                nil)
               ("2" (inst -1 "sigma")
                (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (subs_no_effect_args formula-decl nil nominal_AC_substitution nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (subs def-decl "args" nominal_AC_substitution nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil))
   shostak))
 (apply_sub_elim_var_t 0
  (apply_sub_elim_var_t-1 nil 3827590809
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (lemma "nominal_AC_term_opt")
            (("" (inst? -1)
              (("" (prop)
                (("1" (replace -2 -5)
                  (("1" (rewrite "subs_const")
                    (("1" (hide-all-but -5) (("1" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replace -2 -5)
                  (("2" (hide -1 -2 -3)
                    (("2" (rewrite "subs_ext_pi")
                      (("2" (rewrite "ext_vars")
                        (("2" (case "member(V(t), dom(sigma))")
                          (("1" (rewrite "vars_finset")
                            (("1" (inst 1 "subs(sigma)(V(t))")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "member" 1)
                                  (("1"
                                    (expand "img" 1)
                                    (("1" (inst 1 "V(t)") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "member" 1)
                            (("2" (expand "dom" 1)
                              (("2"
                                (flatten)
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (expand "vars" -3)
                                    (("2"
                                      (expand
                                       ("member" "singleton")
                                       -3)
                                      (("2"
                                        (replace -3)
                                        (("2"
                                          (expand "member" -2)
                                          (("2"
                                            (expand "dom" -2)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (replace -1 -4)
                  (("3" (rewrite "subs_unit")
                    (("3" (hide-all-but -4) (("3" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("4" (replace -2 -5)
                  (("4" (rewrite "subs_pair")
                    (("4" (expand "vars" -5)
                      (("4" (expand "member" -5)
                        (("4" (hide -1)
                          (("4" (expand "union" -4)
                            (("4" (prop)
                              (("1"
                                (inst -3 "term1(t)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst? -1)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -3 "term2(t)")
                                (("2"
                                  (prop)
                                  (("1"
                                    (inst -1 "X" "sigma")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (hide -1)
                  (("5" (replace -1 -4)
                    (("5" (rewrite "subs_app")
                      (("5" (expand "vars" -4)
                        (("5" (inst -2 "arg(t)")
                          (("5" (prop)
                            (("1" (inst? -1) (("1" (assert) nil nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (hide -1)
                  (("6" (replace -1 -4)
                    (("6" (rewrite "subs_ac")
                      (("6" (expand "vars" -4)
                        (("6" (hide -2)
                          (("6" (lemma "mem_union_map[nominal_AC_term, variable]")
                            (("6" (inst? -1)
                              (("6"
                                (assert)
                                (("6"
                                  (hide -4)
                                  (("6"
                                    (skolem -1 "ti_sigma")
                                    (("6"
                                      (flatten)
                                      (("6"
                                        (lemma "mem_get_args_subs")
                                        (("6"
                                          (lemma "subs_ac")
                                          (("6"
                                            (inst? -1)
                                            (("6"
                                              (replace -1 -3 :dir rl)
                                              (("6"
                                                (hide -1)
                                                (("6"
                                                  (inst? -1)
                                                  (("6"
                                                    (assert)
                                                    (("6"
                                                      (skolem -1 "ti")
                                                      (("6"
                                                        (prop)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           -4)
                                                          (("1"
                                                            (reveal -6)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "ti")
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (inst?
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "get_args"
                                                                   -2)
                                                                  (("2"
                                                                    (rewrite
                                                                     "map_member4")
                                                                    (("2"
                                                                      (skolem
                                                                       -2
                                                                       "i")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (use
                                                                           "ac_select_size")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "is_ac_sym?"
                                                                               1)
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "subterm_fin_set")
                                                            (("2"
                                                              (expand
                                                               ("member"
                                                                "ext")
                                                               -3)
                                                              (("2"
                                                                (skolem
                                                                 -3
                                                                 "ti_sig_p")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (replace
                                                                     -4
                                                                     -7
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (rewrite
                                                                       "ext_vars")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (skolem
                                                                             -1
                                                                             "t2")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "vars_finset")
                                                                                (("2"
                                                                                  (inst
                                                                                   1
                                                                                   "t2")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "vars_subterm")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "X"
                                                                                         "ti_sig_p"
                                                                                         "t2")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (replace -2 -5)
                  (("7" (rewrite "subs_abs" -5)
                    (("7" (expand "vars" -5)
                      (("7" (inst -3 "body(t)")
                        (("7" (prop)
                          (("1" (inst?) (("1" (assert) nil nil)) nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_abs formula-decl nil nominal_AC_substitution nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (ac_app adt-constructor-decl "[[ac_symbol, nominal_AC_term] -> (ac_app?)]"
     nominal_AC_term_adt nil)
    nil (args type-eq-decl nil nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil) nil
    (ext const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_term_properties nil)
    (vars_subterm formula-decl nil nominal_AC_term_properties nil)
    (subterm_fin_set formula-decl nil nominal_AC_term_properties nil)
    (ac_select_size formula-decl nil nominal_AC_term_properties nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (map_member4 formula-decl nil list_aux_equational_reasoning2parameters nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (from_min2max def-decl "list[nat]" list_aux_equational_reasoning nil) nil
    (mem_get_args_subs formula-decl nil nominal_AC_substitution nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (mem_union_map formula-decl nil list_aux_equational_reasoning2parameters nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (union const-decl "set" sets nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (vars_finset formula-decl nil nominal_AC_term_properties nil)
    (singleton const-decl "(singleton?)" sets nil)
    (ext_vars formula-decl nil nominal_AC_term_properties nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (atom? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (a adt-accessor-decl "[(atom?) -> atom]" nominal_AC_term_adt nil)
    (nominal_AC_term_opt formula-decl nil nominal_AC_term_properties nil) nil nil
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    nil (NOT const-decl "[bool -> bool]" booleans nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) nil
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil))
 (apply_sub_not_elim_var_t 0
  (apply_sub_not_elim_var_t-1 nil 3883507823
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (use "nominal_AC_term_opt")
            (("" (prop)
              (("1" (replace -2 -4)
                (("1" (hide-all-but -4) (("1" (grind) nil nil)) nil))
                nil)
               ("2" (hide -3)
                (("2" (replace -2)
                  (("2" (expand "vars" -3)
                    (("2" (expand ("member" "singleton") -3)
                      (("2" (replace -3)
                        (("2" (replace -3 :dir rl)
                          (("2" (expand "dom" 1)
                            (("2" (expand "member" 1)
                              (("2"
                                (flatten)
                                (("2"
                                  (rewrite "subs_ext_pi")
                                  (("2"
                                    (rewrite "ext_vars")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (replace -1 -3)
                (("3" (hide-all-but -3) (("3" (grind) nil nil)) nil))
                nil)
               ("4" (replace -2 -4)
                (("4" (expand "vars" -4)
                  (("4" (expand ("member" "union") -4)
                    (("4" (prop)
                      (("1" (inst?)
                        (("1" (expand "size" -4 2)
                          (("1" (assert)
                            (("1" (assert)
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -3 2)
                                    (("1"
                                      (rewrite "subs_pair")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst -4 "term2(t)")
                        (("2" (expand "size" -4 2)
                          (("2" (assert)
                            (("2" (assert)
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (replace -3 2)
                                    (("2"
                                      (rewrite "subs_pair")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("5" (replace -2 -4)
                (("5" (expand "vars" -4)
                  (("5" (inst -3 "arg(t)")
                    (("5" (expand "size" -3 2)
                      (("5" (assert)
                        (("5" (inst -3 "X" "sigma")
                          (("5" (assert)
                            (("5" (replace -2 2)
                              (("5"
                                (rewrite "subs_app")
                                (("5" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("6" (replace -2 -4)
                (("6" (rewrite "vars_ac2")
                  (("6" (inst -3 "ac_arg(t)")
                    (("6" (expand "size" -3 2)
                      (("6" (assert)
                        (("6" (inst?)
                          (("6" (assert)
                            (("6" (replace -2 2)
                              (("6"
                                (rewrite "subs_ac")
                                (("6" (rewrite "vars_ac2") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("7" (replace -2 -4)
                (("7" (expand "vars" -4)
                  (("7" (inst -3 "body(t)")
                    (("7" (expand "size" -3 2)
                      (("7" (assert)
                        (("7" (inst?)
                          (("7" (assert)
                            (("7" (replace -2 2)
                              (("7"
                                (rewrite "subs_abs" 2)
                                (("7" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (ext_vars formula-decl nil nominal_AC_term_properties nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (union const-decl "set" sets nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (string type-eq-decl nil strings nil)
    (vars_ac2 formula-decl nil nominal_AC_term_properties nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (subs_abs formula-decl nil nominal_AC_substitution nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (nominal_AC_term_opt formula-decl nil nominal_AC_term_properties nil) nil
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil) nil
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) nil
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (vars_img_append 0
  (vars_img_append-1 nil 3827503291
   ("" (skeep)
    (("" (expand "subset?" 1)
      (("" (skolem 1 "X")
        (("" (prop)
          (("" (lemma "vars_finset")
            (("" (inst? -1)
              (("" (assert)
                (("" (hide -2)
                  (("" (skeep)
                    (("" (expand "member" -1)
                      (("" (expand "img" -1)
                        (("" (skolem -1 "Y")
                          (("" (flatten)
                            (("" (expand "subs" -2)
                              ((""
                                (rewrite "subs_append2")
                                ((""
                                  (name-replace
                                   "s"
                                   "subs(sigma)(null * Y)")
                                  ((""
                                    (replace -2 -3 :dir rl)
                                    ((""
                                      (lemma "vars_subs_t")
                                      ((""
                                        (inst? -1)
                                        ((""
                                          (expand "subset?" -1)
                                          ((""
                                            (inst -1 "X")
                                            ((""
                                              (prop)
                                              ((""
                                                (expand "member" -1)
                                                ((""
                                                  (expand "union" -1)
                                                  ((""
                                                    (expand "member" 1)
                                                    ((""
                                                      (expand
                                                       "union"
                                                       1)
                                                      ((""
                                                        (prop)
                                                        ((""
                                                          (hide -3 -4)
                                                          ((""
                                                            (expand
                                                             "s"
                                                             -1)
                                                            ((""
                                                              (lemma
                                                               "vars_subs_t")
                                                              ((""
                                                                (inst?
                                                                 -1)
                                                                ((""
                                                                  (expand
                                                                   "subset?"
                                                                   -1)
                                                                  ((""
                                                                    (inst
                                                                     -1
                                                                     "X")
                                                                    ((""
                                                                      (prop)
                                                                      ((""
                                                                        (expand
                                                                         "union"
                                                                         -1)
                                                                        ((""
                                                                          (expand
                                                                           "member"
                                                                           -1
                                                                           1)
                                                                          ((""
                                                                            (prop)
                                                                            ((""
                                                                              (expand
                                                                               "vars"
                                                                               -1)
                                                                              ((""
                                                                                (expand
                                                                                 "member"
                                                                                 -1)
                                                                                ((""
                                                                                  (expand
                                                                                   "singleton"
                                                                                   -1)
                                                                                  ((""
                                                                                    (replace
                                                                                     -1
                                                                                     :dir
                                                                                     rl)
                                                                                    ((""
                                                                                      (hide
                                                                                       -2)
                                                                                      ((""
                                                                                        (reveal
                                                                                         -7
                                                                                         -8)
                                                                                        ((""
                                                                                          (replace
                                                                                           -3
                                                                                           :dir
                                                                                           rl)
                                                                                          ((""
                                                                                            (case
                                                                                             "member(X, dom(sigma))")
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "apply_sub_elim_var_t")
                                                                                              (("1"
                                                                                                (inst?
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "X")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (reveal
                                                                                                         -6)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "vars_subs_t")
                                                                                                          (("1"
                                                                                                            (inst?
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "subset?"
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "X")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "union"
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "member"
                                                                                                                       -1
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (lemma
                                                                                               "dom_append")
                                                                                              (("2"
                                                                                                (inst?
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "subset?"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "X")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "union"
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "member"
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "member"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "dom"
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "subs"
                                                                                                                   -2)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -3)
                                                                                                                    (("2"
                                                                                                                      (reveal
                                                                                                                       -6)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -3)
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "apply_sub_elim_var_t")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "X"
                                                                                                                             "delta"
                                                                                                                             "null * X")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (append def-decl "list[T]" list_props nil)
    (member const-decl "bool" sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (vars_subs_t formula-decl nil nominal_AC_substitution nil)
    (union const-decl "set" sets nil) nil
    (singleton const-decl "(singleton?)" sets nil)
    (dom_append formula-decl nil nominal_AC_substitution nil)
    (apply_sub_elim_var_t formula-decl nil nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil) nil
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (vars_finset formula-decl nil nominal_AC_term_properties nil))
   shostak))
 (idempotent_null 0
  (idempotent_null-1 nil 3854466108 ("" (grind) nil nil)
   (nil (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (idempotent? const-decl "bool" nominal_AC_substitution nil))
   shostak))
 (var_dom_sub_dif_term 0
  (var_dom_sub_dif_term-1 nil 3827257935
   ("" (induct "t")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("pi" "X"))
      (("2" (skolem 1 ("x" "sig"))
        (("2" (flatten)
          (("2" (expand "dom" -2)
            (("2" (expand "member" -2)
              (("2" (flatten)
                (("2" (expand "subs" 1)
                  (("2" (lemma "subs_ext_pi2")
                    (("2" (expand "member" -2)
                      (("2" (expand "vars" -2)
                        (("2" (expand "singleton")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (grind) nil nil)
     ("4" (skolem 1 ("t1" "t2"))
      (("4" (prop)
        (("4" (skeep)
          (("4" (expand "vars" -3)
            (("4" (rewrite "subs_pair")
              (("4" (expand "union" -3)
                (("4" (expand "member" -3 1)
                  (("4" (prop)
                    (("1" (case "subs(sigma)(t1) /= t1")
                      (("1" (hide -2 -3 -4 -5)
                        (("1" (grind)
                          (("1" (decompose-equality -1) nil nil)) nil))
                        nil)
                       ("2" (hide -5 -3)
                        (("2" (inst -2 "X" "sigma")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (case "subs(sigma)(t2) /= t2")
                      (("1" (hide -2 -3 -4 -5)
                        (("1" (grind)
                          (("1" (decompose-equality -1) nil nil)) nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skolem 1 ("f" "arg"))
      (("5" (prop)
        (("5" (skeep)
          (("5" (rewrite "subs_app")
            (("5" (inst -1 "X" "sigma")
              (("5" (expand "vars" -2)
                (("5" (assert)
                  (("5" (flatten)
                    (("5" (decompose-equality -3) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skolem 1 ("f" "arg"))
      (("6" (prop)
        (("6" (skeep)
          (("6" (rewrite "subs_ac")
            (("6" (decompose-equality)
              (("6" (inst? -2)
                (("6" (assert)
                  (("6" (lemma "vars_ac2")
                    (("6" (inst? -1) (("6" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skolem 1 ("a" "t1"))
      (("7" (prop)
        (("7" (skeep)
          (("7" (rewrite "subs_abs" -4)
            (("7" (decompose-equality -4)
              (("7" (inst -2 "X" "sigma")
                (("7" (assert) (("7" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (abs adt-constructor-decl "[[atom, nominal_AC_term] -> (abs?)]" nominal_AC_term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_abs formula-decl nil nominal_AC_substitution nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ac_app adt-constructor-decl "[[ac_symbol, nominal_AC_term] -> (ac_app?)]"
     nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (string type-eq-decl nil strings nil)
    (vars_ac2 formula-decl nil nominal_AC_term_properties nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (app adt-constructor-decl "[[f_symbol, nominal_AC_term] -> (app?)]" nominal_AC_term_adt
     nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (pair adt-constructor-decl "[[nominal_AC_term, nominal_AC_term] -> (pair?)]" nominal_AC_term_adt
     nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (union const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (subs_ext_pi2 formula-decl nil nominal_AC_substitution nil)
    (emptyset const-decl "set" sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (nominal_AC_term_induction formula-decl nil nominal_AC_term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil) nil
    (/= const-decl "boolean" notequal nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil) nil
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil))
   shostak))
 (idempotent_disjoint_dom_img 0
  (idempotent_disjoint_dom_img-1 nil 3826486318
   ("" (skeep)
    (("" (expand "idempotent?" -1)
      (("" (expand "disjoint?" 1)
        (("" (expand "empty?" 1)
          (("" (skolem 1 "X")
            (("" (expand "member" -2)
              (("" (expand "intersection" -2)
                (("" (flatten)
                  (("" (lemma "vars_finset")
                    (("" (inst? -1)
                      (("" (assert)
                        (("" (hide -4)
                          (("" (skolem -1 "t")
                            (("" (flatten)
                              ((""
                                (expand "img" -1)
                                ((""
                                  (expand "member" -1 1)
                                  ((""
                                    (skolem -1 "Y")
                                    ((""
                                      (inst -3 "Y")
                                      ((""
                                        (flatten)
                                        ((""
                                          (replace -2 -4)
                                          ((""
                                            (hide -1 -2)
                                            ((""
                                              (lemma
                                               "var_dom_sub_dif_term")
                                              ((""
                                                (inst? -1)
                                                ((""
                                                  (inst -1 "X")
                                                  ((""
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((idempotent? const-decl "bool" nominal_AC_substitution nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (var_dom_sub_dif_term formula-decl nil nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (/= const-decl "boolean" notequal nil)
    (vars_finset formula-decl nil nominal_AC_term_properties nil)
    (intersection const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil))
   shostak))
 (idempotent_disjoint_dom_img2 0
  (idempotent_disjoint_dom_img2-1 nil 3827592657
   ("" (skeep)
    (("" (expand "idempotent?" 1)
      (("" (skeep)
        (("" (case "member(X, dom(sigma))")
          (("1" (lemma "subs_no_effect_t")
            (("1" (inst -1 "sigma" "subs(sigma)(X)")
              (("1" (assert)
                (("1" (hide 2)
                  (("1" (expand "disjoint?" 1)
                    (("1" (expand "empty?" 1)
                      (("1" (skeep)
                        (("1" (expand "member" -1)
                          (("1" (expand "intersection" -1)
                            (("1" (prop)
                              (("1"
                                (hide -3)
                                (("1"
                                  (expand "disjoint?" -3)
                                  (("1"
                                    (expand "empty?" -3)
                                    (("1"
                                      (inst -3 "x")
                                      (("1"
                                        (expand "member" 1)
                                        (("1"
                                          (expand "intersection" 1)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (lemma "vars_finset")
                                              (("1"
                                                (inst? -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     1
                                                     "subs(sigma)(X)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "img"
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "member"
                                                           1
                                                           1)
                                                          (("1"
                                                            (reveal -3)
                                                            (("1"
                                                              (inst
                                                               1
                                                               "X")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "member" 1)
            (("2" (expand "dom" 1)
              (("2" (flatten)
                (("2" (replace -1 1)
                  (("2" (expand "subs" -1) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((idempotent? const-decl "bool" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (empty? const-decl "bool" sets nil)
    (vars_finset formula-decl nil nominal_AC_term_properties nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (intersection const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (subs_no_effect_t formula-decl nil nominal_AC_substitution nil))
   shostak))
 (idempotent_cons 0
  (idempotent_cons-1 nil 3882543312
   ("" (skeep)
    (("" (lemma "idempotent_disjoint_dom_img2")
      (("" (inst?)
        (("" (assert)
          (("" (expand "disjoint?" 1)
            (("" (expand "empty?" 1)
              (("" (skeep)
                (("" (hide 2)
                  (("" (expand ("member" "intersection") -1)
                    (("" (prop)
                      ((""
                        (case "dom(cons((X, ext(pi)(t)), null)) = singleton(X)")
                        (("1" (replace -1)
                          (("1" (expand ("member" "singleton") -2)
                            (("1" (replace -2)
                              (("1"
                                (rewrite "vars_finset")
                                (("1"
                                  (skolem -3 "t1")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "img" -3)
                                      (("1"
                                        (expand "member" -3 1)
                                        (("1"
                                          (skolem -3 "X1")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (expand
                                                 ("member" "singleton")
                                                 -3)
                                                (("1"
                                                  (replace -3)
                                                  (("1"
                                                    (expand "subs" -4)
                                                    (("1"
                                                      (expand
                                                       "subs"
                                                       -4)
                                                      (("1"
                                                        (expand
                                                         "subs"
                                                         -4
                                                         2)
                                                        (("1"
                                                          (expand
                                                           "subs"
                                                           -4)
                                                          (("1"
                                                            (rewrite
                                                             "ext_identity")
                                                            (("1"
                                                              (replace
                                                               -4)
                                                              (("1"
                                                                (replace
                                                                 -4
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (rewrite
                                                                   "ext_vars")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -1 -2 2)
                          (("2" (rewrite "subset_antisymmetric")
                            (("1" (expand "subset?")
                              (("1"
                                (skolem 1 "x1")
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand ("member" "singleton") 1)
                                    (("1"
                                      (expand ("member" "dom") -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "subs" 1 1)
                                          (("1"
                                            (expand "subs" 1)
                                            (("1"
                                              (expand "subs" 1 2)
                                              (("1"
                                                (expand "subs" 1)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (reveal 1)
                              (("2"
                                (expand "subset?" 2)
                                (("2"
                                  (skolem 2 "x1")
                                  (("2"
                                    (prop)
                                    (("2"
                                      (expand
                                       ("member" "singleton")
                                       -1)
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (expand ("member" "dom") 2)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (expand "subs" -2)
                                              (("2"
                                                (expand "subs" -2)
                                                (("2"
                                                  (expand "subs" -2 2)
                                                  (("2"
                                                    (expand "subs" -2)
                                                    (("2"
                                                      (rewrite
                                                       "ext_identity")
                                                      (("2"
                                                        (lemma
                                                         "ext_vars")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "pi"
                                                           "t")
                                                          (("2"
                                                            (replace
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (replace
                                                               -3)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((idempotent_disjoint_dom_img2 formula-decl nil nominal_AC_substitution nil)
    (empty? const-decl "bool" sets nil) nil
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil) nil nil
    (ext_vars formula-decl nil nominal_AC_term_properties nil)
    (ext_identity formula-decl nil nominal_AC_term_properties nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (vars_finset formula-decl nil nominal_AC_term_properties nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (apply_sub_elim_var_t2 0
  (apply_sub_elim_var_t2-1 nil 3832791023
   ("" (skeep)
    (("" (lemma "apply_sub_elim_var_t")
      (("" (inst? -1)
        (("" (assert)
          (("" (lemma "idempotent_disjoint_dom_img")
            (("" (inst? -1)
              (("" (assert)
                (("" (expand "disjoint?" -1)
                  (("" (expand "empty?")
                    (("" (inst? -1) (("" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub_elim_var_t formula-decl nil nominal_AC_substitution nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (intersection const-decl "set" sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (empty? const-decl "bool" sets nil)
    (idempotent_disjoint_dom_img formula-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (subs_singleton 0
  (subs_singleton-1 nil 3825698799
   ("" (skeep)
    (("" (grind)
      (("" (lemma "subset_antisymmetric[nominal_AC_term]")
        (("" (inst? -1)
          (("" (assert)
            (("" (hide 2)
              (("" (prop)
                (("1" (expand "subset?" 1)
                  (("1" (skeep)
                    (("1" (expand "subs" -1)
                      (("1" (expand "member" -1)
                        (("1" (skolem -1 "s")
                          (("1" (expand "singleton" -1)
                            (("1" (flatten) (("1" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "subset?" 1)
                  (("2" (skeep)
                    (("2" (expand "member" -1)
                      (("2" (expand "singleton" -1)
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (subs const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil) nil
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil))
   shostak))
 (img_append_subset 0
  (img_append_subset-1 nil 3832613431
   ("" (skeep)
    (("" (expand "subset?" 1)
      (("" (skolem 1 "t")
        (("" (prop)
          (("" (expand "member" 1)
            (("" (expand "union" 1)
              (("" (prop)
                (("" (expand "img" -1)
                  (("" (expand "member" -1 1)
                    (("" (skolem -1 "X")
                      (("" (prop)
                        (("" (expand "subs" -2)
                          (("" (rewrite "subs_append2")
                            (("" (case "member(X, dom(delta))")
                              (("1"
                                (expand "image" 1)
                                (("1"
                                  (expand "image" 1)
                                  (("1"
                                    (expand "member" 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst 1 "subs(delta)(null *X)")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (expand "img" 1)
                                          (("2"
                                            (inst 1 "X")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "member" 1)
                                (("2"
                                  (expand "dom" 1)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand "subs" -1)
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (case
                                           "member(X, dom(sigma))")
                                          (("1"
                                            (hide 1)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (lemma "dom_append")
                                            (("2"
                                              (inst? -1)
                                              (("2"
                                                (hide 2 3)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil) nil nil
    nil nil nil
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (dom_append formula-decl nil nominal_AC_substitution nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (member const-decl "bool" sets nil))
   shostak))
 (idempotent_append 0
  (idempotent_append-1 nil 3835970041
   ("" (skeep)
    (("" (lemma "idempotent_disjoint_dom_img2")
      (("" (inst -1 "append(sigma, delta)")
        (("" (assert)
          (("" (hide 2)
            (("" (expand "disjoint?" 1)
              (("" (expand "empty?" 1)
                (("" (skolem 1 "X")
                  (("" (expand "member" -1)
                    (("" (expand "intersection" -1)
                      (("" (prop)
                        (("" (rewrite "vars_finset")
                          (("" (skolem -2 "t")
                            (("" (prop)
                              ((""
                                (expand "member" -2)
                                ((""
                                  (expand "img" -2)
                                  ((""
                                    (skolem -2 "Y")
                                    ((""
                                      (prop)
                                      ((""
                                        (expand "subs" -3)
                                        ((""
                                          (case
                                           "member(Y, dom(delta))")
                                          (("1"
                                            (rewrite "subs_append2")
                                            (("1"
                                              (name-replace
                                               "t_delta"
                                               "subs(delta)(null * Y)")
                                              (("1"
                                                (case
                                                 "member(t_delta, img(delta))")
                                                (("1"
                                                  (replace
                                                   -5
                                                   -6
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (lemma
                                                     "vars_subs_t")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (expand
                                                         "subset?"
                                                         -1)
                                                        (("1"
                                                          (inst -1 "X")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               ("member"
                                                                "union")
                                                               -1)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -4
                                                                    -10))
                                                                  (("1"
                                                                    (lemma
                                                                     "dom_append")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (expand
                                                                         "subset?"
                                                                         -1)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "X")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               ("member"
                                                                                "union")
                                                                               -1)
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (hide
                                                                                   -3
                                                                                   -4)
                                                                                  (("1"
                                                                                    (reveal
                                                                                     -10)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "idempotent_disjoint_dom_img")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "disjoint?"
                                                                                   -4)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "empty?"
                                                                                     -4)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -4
                                                                                       "X")
                                                                                      (("2"
                                                                                        (expand
                                                                                         ("member"
                                                                                          "intersection")
                                                                                         1)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "dom_append")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (expand
                                                                       "subset?"
                                                                       -1)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "X")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (hide
                                                                             -4
                                                                             -5
                                                                             -6)
                                                                            (("2"
                                                                              (expand
                                                                               ("member"
                                                                                "union")
                                                                               -1)
                                                                              (("2"
                                                                                (prop)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "apply_sub_elim_var_t")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          -2
                                                                                          -7))
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "idempotent_disjoint_dom_img")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -4)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    -2
                                                                                    -3
                                                                                    -7))
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "idempotent_disjoint_dom_img")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "disjoint?"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "empty?"
                                                                                             -1)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "X")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 ("member"
                                                                                                  "intersection")
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "vars_finset")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     1
                                                                                                     "t_delta")
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "t_delta" 1)
                                                  (("2"
                                                    (expand "member" 1)
                                                    (("2"
                                                      (expand "img" 1)
                                                      (("2"
                                                        (inst 1 "Y")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "subs"
                                                             1
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma "dom_append")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (expand "subset?" -1)
                                                (("2"
                                                  (inst -1 "Y")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (hide -3)
                                                      (("2"
                                                        (expand
                                                         ("member"
                                                          "union")
                                                         -1)
                                                        (("2"
                                                          (rewrite
                                                           "subs_append2")
                                                          (("2"
                                                            (expand
                                                             "member"
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "dom"
                                                               1)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "subs"
                                                                   -2)
                                                                  (("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (hide
                                                                       -2)
                                                                      (("2"
                                                                        (lemma
                                                                         "dom_append")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (expand
                                                                             "subset?"
                                                                             -1)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "X")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   ("member"
                                                                                    "union")
                                                                                   -1)
                                                                                  (("2"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "idempotent_disjoint_dom_img")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "disjoint?"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "empty?"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "X")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   ("member"
                                                                                                    "intersection")
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "vars_finset")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "t")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "member"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "img"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               1
                                                                                                               "Y")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "subs"
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "disjoint?"
                                                                                       -8)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "empty?"
                                                                                         -8)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -8
                                                                                           "X")
                                                                                          (("2"
                                                                                            (expand
                                                                                             ("member"
                                                                                              "intersection")
                                                                                             1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "vars_finset")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   1
                                                                                                   "t")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       ("member"
                                                                                                        "img")
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         1
                                                                                                         "Y")
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((idempotent_disjoint_dom_img2 formula-decl nil nominal_AC_substitution nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (vars_finset formula-decl nil nominal_AC_term_properties nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (union const-decl "set" sets nil)
    (apply_sub_elim_var_t formula-decl nil nominal_AC_substitution nil)
    (idempotent_disjoint_dom_img formula-decl nil nominal_AC_substitution nil)
    (idempotent? const-decl "bool" nominal_AC_substitution nil)
    (dom_append formula-decl nil nominal_AC_substitution nil)
    (subset? const-decl "bool" sets nil)
    (vars_subs_t formula-decl nil nominal_AC_substitution nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (append def-decl "list[T]" list_props nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (idempotent_subs_subs_t 0
  (idempotent_subs_subs_t-1 nil 3838415575
   ("" (skeep)
    (("" (lemma "subs_no_effect_t")
      (("" (inst -1 "sigma" "subs(sigma)(t)")
        (("" (assert)
          (("" (expand "disjoint?" 1)
            (("" (expand "empty?" 1)
              (("" (lemma "apply_sub_elim_var_t2")
                (("" (inst?)
                  (("" (skeep)
                    (("" (inst -1 "x")
                      (("" (expand ("member" "intersection") -2)
                        (("" (flatten) (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (apply_sub_elim_var_t2 formula-decl nil nominal_AC_substitution nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    nil (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (subs_divide_not_var 0
  (subs_divide_not_var-1 nil 3835542607
   ("" (measure-induct "length(sigma)" "sigma")
    (("" (skolem 1 "sigma")
      (("" (prop)
        (("" (skeep)
          (("" (expand "subs" 1)
            (("" (expand "subs" 1)
              (("" (lift-if)
                (("" (assert)
                  (("" (prop)
                    (("" (case "var?(subs(cdr(sigma))(X))")
                      (("1" (hide -2)
                        (("1" (expand "subs" -1)
                          (("1"
                            (name-replace "t"
                             "subs(cdr(sigma))(null * X)")
                            (("1" (lemma "nominal_AC_term_times_eta")
                              (("1"
                                (inst?)
                                (("1"
                                  (expand "subs" 2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (inst
                                             3
                                             "null"
                                             "cdr(sigma)"
                                             "car(sigma)"
                                             "p(t)"
                                             "V(t)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "append" 3)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (decompose-equality
                                                     1)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (reveal -2)
                                                    (("2"
                                                      (expand "subs" 1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand "ext" 1)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 3)
                        (("2" (inst -1 "cdr(sigma)")
                          (("2" (prop)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst
                                     4
                                     "cons(car(sigma), delta)"
                                     "delta2"
                                     "sigma_basic"
                                     "pi"
                                     "Y")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "append" 4)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (replace -1 :dir rl)
                                            (("1"
                                              (decompose-equality 4)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nominal_AC_term_times_eta formula-decl nil nominal_AC_term_adt nil) nil
    (list_cons_extensionality formula-decl nil list_adt nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil) nil
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (basic_sub_info 0
  (basic_sub_info-1 nil 3837871004
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "sigma" "cons((X, t), null)")
        (("" (flatten)
          (("" (case "dom(sigma) = singleton(X)")
            (("1" (assert)
              (("1" (case "img(sigma) = singleton(t)")
                (("1" (assert)
                  (("1" (lemma "idempotent_disjoint_dom_img2")
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (expand "disjoint?" 1)
                          (("1" (expand "empty?" 1)
                            (("1" (skolem 1 "Y")
                              (("1"
                                (replace -2)
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (expand "member" -1)
                                    (("1"
                                      (expand "intersection" -1)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (rewrite "vars_singleton")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 3)
                  (("2" (rewrite "subset_antisymmetric")
                    (("1" (hide 2)
                      (("1" (expand "subset?" 1)
                        (("1" (expand "sigma")
                          (("1" (skeep)
                            (("1" (expand "img" -1)
                              (("1"
                                (expand "member" -1 1)
                                (("1"
                                  (skolem -1 "X1")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (replace -3)
                                      (("1"
                                        (expand
                                         ("member" "singleton")
                                         -1)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (expand "subs" -2)
                                            (("1"
                                              (expand "subs" -2)
                                              (("1"
                                                (expand "subs" -2 2)
                                                (("1"
                                                  (expand "subs" -2)
                                                  (("1"
                                                    (rewrite
                                                     "ext_identity")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "sigma" 1)
                      (("2" (expand "subset?" 1)
                        (("2" (skolem 1 "s")
                          (("2" (prop)
                            (("2" (expand "member" 1)
                              (("2"
                                (expand "img" 1)
                                (("2"
                                  (inst 1 "X")
                                  (("2"
                                    (grind)
                                    (("1"
                                      (rewrite "ext_identity")
                                      nil
                                      nil)
                                     ("2"
                                      (rewrite "ext_identity")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 3)
              (("2" (rewrite "subset_antisymmetric")
                (("1" (hide 2)
                  (("1" (expand "subset?" 1)
                    (("1" (skolem 1 "Y")
                      (("1" (prop)
                        (("1" (lemma "supset_dom_correct")
                          (("1" (expand "member" -2)
                            (("1" (expand "dom" -2)
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (expand "sigma" -1)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "subset?" 1)
                  (("2" (expand "sigma" 1)
                    (("2" (grind)
                      (("2" (rewrite "ext_identity")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (supset_dom_correct formula-decl nil nominal_AC_substitution nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (emptyset const-decl "set" sets nil)
    (supset_dom def-decl "finite_set[variable]" nominal_AC_substitution nil) nil
    nil nil nil (ext_identity formula-decl nil nominal_AC_term_properties nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (vars_singleton formula-decl nil nominal_AC_term_properties nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (idempotent_disjoint_dom_img2 formula-decl nil nominal_AC_substitution nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (set type-eq-decl nil sets nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (basic_sub_well_formed 0
  (basic_sub_well_formed-1 nil 3850242798
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (expand "well_formed?" 1)
          (("" (skolem 1 "X1")
            (("" (prop)
              (("1" (expand "subs" -1)
                (("1" (expand "subs" -1)
                  (("1" (expand "subs" -1)
                    (("1" (rewrite "ext_identity")
                      (("1" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (expand "subs" -1)
                  (("2" (expand "subs" -1)
                    (("2" (expand "subs" -1 2)
                      (("2" (expand "subs" -1)
                        (("2" (rewrite "ext_identity")
                          (("2" (lift-if)
                            (("2" (prop)
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil nil (ext_identity formula-decl nil nominal_AC_term_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil) nil
    (member const-decl "bool" sets nil) nil
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil) nil
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil) nil)
   shostak))
 (subterms_subs_x 0
  (subterms_subs_x-1 nil 3887702179
   ("" (skeep)
    (("" (expand "subset?" 1)
      (("" (skolem 1 "t")
        (("" (prop)
          (("" (case "member(X, dom(sigma))")
            (("1" (expand "member" 1)
              (("1" (expand "add" 1)
                (("1" (flatten)
                  (("1" (rewrite "subterm_fin_set")
                    (("1" (inst 2 "subs(sigma)(X)")
                      (("1" (assert)
                        (("1" (expand ("member" "img") 2)
                          (("1" (inst 2 "X") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand ("member" "dom") 1)
              (("2" (flatten)
                (("2" (replace -1) (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil) nil
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subterm_fin_set formula-decl nil nominal_AC_term_properties nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (add const-decl "(nonempty?)" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil))
   shostak))
 (subterms_subs2 0
  (subterms_subs2-1 nil 3881257263
   ("" (measure-induct "size(s)" "s")
    (("" (skolem 1 "s")
      (("" (prop)
        (("" (skeep)
          (("" (hide -1)
            (("" (lemma "nominal_AC_term_opt")
              (("" (inst -1 "s")
                (("" (prop)
                  (("1" (replace -2 -3)
                    (("1" (rewrite "subs_const")
                      (("1" (expand "subterms" -3)
                        (("1" (expand ("member" "singleton") -3)
                          (("1" (inst 1 "s")
                            (("1" (split 1)
                              (("1" (grind) nil nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (replace -2)
                                    (("2"
                                      (rewrite "subs_const")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replace -2 -3)
                    (("2" (inst 1 "s")
                      (("2" (split 1)
                        (("1" (expand "subterms" 1)
                          (("1" (grind) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (case "member(V(s), dom(sigma))")
                            (("1" (assert)
                              (("1"
                                (rewrite "subs_ext_pi")
                                (("1"
                                  (rewrite "ext_subterms" :dir rl)
                                  (("1"
                                    (expand ("member" "ext") -4)
                                    (("1"
                                      (skolem -4 "ti")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (expand ("member" "ext") 2)
                                          (("1"
                                            (inst 2 "ti")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite
                                                 "subterm_fin_set")
                                                (("1"
                                                  (inst
                                                   2
                                                   "subs(sigma)(V(s))")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       ("member "
                                                        "img")
                                                       2)
                                                      (("1"
                                                        (inst 2 "V(s)")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand ("member" "dom") 1)
                              (("2"
                                (flatten)
                                (("2"
                                  (rewrite "subs_ext_pi" -4)
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (expand "ext" -4)
                                      (("2"
                                        (rewrite "append_null")
                                        (("2"
                                          (expand "subterms" -4)
                                          (("2"
                                            (expand
                                             ("member" "singleton")
                                             -4)
                                            (("2"
                                              (replace -3 1)
                                              (("2"
                                                (rewrite
                                                 "subs_ext_pi"
                                                 1)
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (expand "ext" 1)
                                                    (("2"
                                                      (rewrite
                                                       "append_null")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (inst 1 "unit")
                    (("3" (replace -1 -2)
                      (("3" (rewrite "subs_unit" -2)
                        (("3" (expand "subterms" -2)
                          (("3" (expand ("member" "singleton") -2)
                            (("3" (split 1)
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (replace -2 -3)
                    (("4" (rewrite "subs_pair")
                      (("4" (expand "subterms" -3 1)
                        (("4" (expand ("member" "union") -3)
                          (("4" (reveal -2)
                            (("4" (prop)
                              (("1"
                                (inst -2 "term1(s)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skolem -1 "ti")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (inst 1 "ti")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split 1)
                                                (("1"
                                                  (replace -5)
                                                  (("1"
                                                    (expand
                                                     "subterms"
                                                     1)
                                                    (("1"
                                                      (expand
                                                       ("member"
                                                        "union")
                                                       1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -2 "term2(s)")
                                (("2"
                                  (prop)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skolem -1 "t1")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (inst 1 "t1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split 1)
                                                (("1"
                                                  (replace -5)
                                                  (("1"
                                                    (expand
                                                     "subterms"
                                                     1)
                                                    (("1"
                                                      (expand
                                                       ("member"
                                                        "union")
                                                       1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (replace -2 -3)
                    (("5" (rewrite "subs_app")
                      (("5" (expand "subterms" -3)
                        (("5" (expand ("member" "union") -3)
                          (("5" (prop)
                            (("1" (expand ("member" "singleton") -1)
                              (("1"
                                (inst 1 "s")
                                (("1"
                                  (split 1)
                                  (("1"
                                    (rewrite "subterm_reflexive")
                                    nil
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (replace -3 1)
                                      (("2"
                                        (rewrite "subs_app")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (reveal -2)
                              (("2"
                                (inst -1 "arg(s)")
                                (("2"
                                  (prop)
                                  (("1"
                                    (inst -1 "sigma" "t")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skolem -1 "t1")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (inst 1 "t1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split 1)
                                                (("1"
                                                  (replace -5 1)
                                                  (("1"
                                                    (expand
                                                     "subterms"
                                                     1)
                                                    (("1"
                                                      (expand
                                                       ("member"
                                                        "union")
                                                       1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (replace -2 -3)
                    (("6" (rewrite "subs_ac")
                      (("6" (expand "subterms" -3)
                        (("6" (assert)
                          (("6" (expand ("member" "union") -3)
                            (("6" (prop)
                              (("1"
                                (expand "member" -1)
                                (("1"
                                  (expand "singleton" -1)
                                  (("1"
                                    (inst 1 "s")
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (rewrite "subterm_reflexive")
                                        nil
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (replace -3 1)
                                          (("2"
                                            (rewrite "subs_ac")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "mem_union_map")
                                (("2"
                                  (name-replace "f" "ac_sym(s)")
                                  (("2"
                                    (skolem -1 "si")
                                    (("2"
                                      (prop)
                                      (("2"
                                        (lemma "mem_get_args_subs")
                                        (("2"
                                          (inst
                                           -1
                                           "f"
                                           "si"
                                           "sigma"
                                           "s")
                                          (("2"
                                            (prop)
                                            (("1"
                                              (skolem -1 "sj")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (split -2)
                                                  (("1"
                                                    (replace -1 -4)
                                                    (("1"
                                                      (reveal -4)
                                                      (("1"
                                                        (inst -1 "sj")
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skolem
                                                                 -1
                                                                 "t1")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "t1")
                                                                    (("1"
                                                                      (split
                                                                       1)
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (lemma
                                                                           "subterm_transitive")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "t1"
                                                                             "sj"
                                                                             "s")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (use
                                                                                 "get_args_subterms2")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "get_args_size")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "is_ac_sym?"
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "f"
                                                                   1)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst 1 "sj")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (use
                                                             "get_args_subterms2")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               ("member"
                                                                "ext")
                                                               -2)
                                                              (("2"
                                                                (expand
                                                                 ("member"
                                                                  "ext")
                                                                 2)
                                                                (("2"
                                                                  (skolem
                                                                   -2
                                                                   "u")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (rewrite
                                                                       "subterm_fin_set")
                                                                      (("2"
                                                                        (skolem
                                                                         -2
                                                                         "uS")
                                                                        (("2"
                                                                          (prop)
                                                                          (("2"
                                                                            (replace
                                                                             -4
                                                                             -7
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (rewrite
                                                                               "ext_subterms"
                                                                               :dir
                                                                               rl)
                                                                              (("2"
                                                                                (expand
                                                                                 ("member"
                                                                                  "ext")
                                                                                 -7)
                                                                                (("2"
                                                                                  (skolem
                                                                                   -7
                                                                                   "us")
                                                                                  (("2"
                                                                                    (prop)
                                                                                    (("2"
                                                                                      (inst
                                                                                       2
                                                                                       "us")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "subterm_fin_set")
                                                                                          (("2"
                                                                                            (inst
                                                                                             2
                                                                                             "uS")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "subterm_transitive")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "us"
                                                                                                   "u"
                                                                                                   "uS")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -4 1)
                                              (("2"
                                                (rewrite "subs_ac")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("7" (replace -2 -3)
                    (("7" (rewrite "subs_abs")
                      (("7" (expand "subterms" -3)
                        (("7" (expand ("member" "union") -3)
                          (("7" (prop)
                            (("1" (expand ("member" "singleton") -1)
                              (("1"
                                (inst 1 "s")
                                (("1"
                                  (split 1)
                                  (("1"
                                    (rewrite "subterm_reflexive")
                                    nil
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (replace -3 1)
                                      (("2"
                                        (rewrite "subs_abs")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (reveal -2)
                              (("2"
                                (inst -1 "body(s)")
                                (("2"
                                  (prop)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 1 "t1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split 1)
                                              (("1"
                                                (expand "subterms" 1)
                                                (("1"
                                                  (expand
                                                   ("member" "union")
                                                   1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nominal_AC_term_opt formula-decl nil nominal_AC_term_properties nil)
    (a adt-accessor-decl "[(atom?) -> atom]" nominal_AC_term_adt nil)
    (atom? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (append_null formula-decl nil list_props nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (ext_subterms formula-decl nil nominal_AC_term_properties nil)
    (subterm_fin_set formula-decl nil nominal_AC_term_properties nil)
    (subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (unit? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (unit adt-constructor-decl "(unit?)" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (union const-decl "set" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (subterm_reflexive formula-decl nil nominal_AC_term_properties nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (subterm_transitive formula-decl nil nominal_AC_term_properties nil)
    (get_args_subterms2 formula-decl nil nominal_AC_term_properties nil) nil
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (get_args_size formula-decl nil nominal_AC_term_properties nil)
    (mem_get_args_subs formula-decl nil nominal_AC_substitution nil)
    (mem_union_map formula-decl nil list_aux_equational_reasoning2parameters nil) nil
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil nominal_AC_term_properties nil) nil
    (ac_app adt-constructor-decl "[[ac_symbol, nominal_AC_term] -> (ac_app?)]"
     nominal_AC_term_adt nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_abs formula-decl nil nominal_AC_substitution nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    nil (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (ext const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_term_properties nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil) nil nil
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) nil
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (subs_no_effect_subterm 0
  (subs_no_effect_subterm-1 nil 3835354333
   ("" (skeep)
    (("" (lemma "subs_no_effect_t")
      (("" (inst -1 "sigma" "s")
        (("" (assert)
          (("" (lemma "var_dom_sub_dif_term")
            (("" (expand "disjoint?" 1)
              (("" (expand "empty?" 1)
                (("" (skeep)
                  (("" (inst -1 "x" "sigma" "t")
                    (("" (assert)
                      (("" (lemma "vars_subterm")
                        (("" (inst -1 "x" "s" "t")
                          (("" (assert) (("" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (vars_subterm formula-decl nil nominal_AC_term_properties nil)
    (empty? const-decl "bool" sets nil)
    (var_dom_sub_dif_term formula-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (same_func_subs 0
  (same_func_subs-1 nil 3832519537
   ("" (skeep)
    (("" (expand "func?" -1)
      (("" (prop)
        (("1" (lemma "nominal_AC_term_ac_app_eta")
          (("1" (inst? -1)
            (("1" (replace -1 1 :dir rl)
              (("1" (rewrite "subs_ac") (("1" (grind) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (lemma "nominal_AC_term_app_eta")
          (("2" (inst? -1)
            (("2" (replace -1 1 :dir rl)
              (("2" (rewrite "subs_app") (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((func? const-decl "bool" nominal_AC_term_properties nil)
    (nominal_AC_term_app_eta formula-decl nil nominal_AC_term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nominal_AC_term_ac_app_eta formula-decl nil nominal_AC_term_adt nil)
    (ord const-decl "upto(6)" nominal_AC_term_adt nil)
    (sym const-decl "string" nominal_AC_term_properties nil)
    (same_func? const-decl "bool" nominal_AC_term_properties nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil) nil)
   shostak))
 (flatten_pair_subs 0
  (flatten_pair_subs-1 nil 3832438649
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (lemma "nominal_AC_term_opt")
            (("" (inst? -1)
              (("" (hide -2)
                (("" (prop)
                  (("1" (replace -2 -3)
                    (("1" (rewrite "subs_const")
                      (("1" (inst 1 "t")
                        (("1" (replace -2 1)
                          (("1" (rewrite "subs_const")
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "flatten_pair" -3)
                    (("2" (lift-if)
                      (("2" (prop)
                        (("1" (expand "no_pair?" -5)
                          (("1" (inst -5 "subs(sigma)(V(t))")
                            (("1" (prop)
                              (("1"
                                (replace -4 -1)
                                (("1"
                                  (rewrite "subs_ext_pi" -1)
                                  (("1"
                                    (expand "ext" -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lift-if)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "img" 1)
                                (("2"
                                  (expand "member" 1 1)
                                  (("2"
                                    (inst 1 "V(t)")
                                    (("2"
                                      (expand "member" 1 1)
                                      (("2"
                                        (expand "dom" 1)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (replace -5 -2)
                                            (("2"
                                              (rewrite
                                               "subs_ext_pi"
                                               -2)
                                              (("2"
                                                (replace -1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "member" -1)
                          (("2" (prop)
                            (("1" (inst 2 "t")
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (expand "member" -1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (replace -1 -2)
                    (("3" (rewrite "subs_unit")
                      (("3" (inst 1 "unit")
                        (("3" (rewrite "subs_unit")
                          (("3" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("4" (replace -2 -3)
                    (("4" (rewrite "subs_pair")
                      (("4" (expand "flatten_pair" -3)
                        (("4" (rewrite "member_append")
                          (("4" (prop)
                            (("1" (reveal -1)
                              (("1"
                                (inst -1 "term1(t)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 1 "ti")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "flatten_pair" 1)
                                              (("1"
                                                (rewrite
                                                 "member_append")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (reveal -1)
                              (("2"
                                (inst -1 "term2(t)")
                                (("2"
                                  (prop)
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 1 "ti")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "flatten_pair" 1)
                                              (("1"
                                                (rewrite
                                                 "member_append")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (replace -2 -3)
                    (("5" (rewrite "subs_app")
                      (("5" (expand "flatten_pair" -3)
                        (("5" (expand "member" -3)
                          (("5" (prop)
                            (("1" (inst 1 "t")
                              (("1"
                                (expand "flatten_pair" 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "member" 1)
                                    (("1"
                                      (replace -3 1)
                                      (("1"
                                        (rewrite "subs_app")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "member" -1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (replace -2 -3)
                    (("6" (rewrite "subs_ac")
                      (("6" (expand "flatten_pair" -3)
                        (("6" (expand "member" -3)
                          (("6" (expand "member" -3)
                            (("6" (inst 1 "t")
                              (("6"
                                (expand "flatten_pair" 1)
                                (("6"
                                  (assert)
                                  (("6"
                                    (expand "member" 1)
                                    (("6"
                                      (replace -2 1)
                                      (("6"
                                        (rewrite "subs_ac")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("7" (replace -2)
                    (("7" (rewrite "subs_abs" -3)
                      (("7" (expand "flatten_pair" -3)
                        (("7" (expand "member" -3)
                          (("7" (expand "member" -3)
                            (("7" (inst 1 "t")
                              (("7"
                                (expand "flatten_pair" 1)
                                (("7"
                                  (expand "member" 1)
                                  (("7"
                                    (expand "member" 1 1)
                                    (("7"
                                      (prop)
                                      (("7"
                                        (replace -2 1)
                                        (("7"
                                          (rewrite "subs_abs")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((a adt-accessor-decl "[(atom?) -> atom]" nominal_AC_term_adt nil)
    (atom? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (unit? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (unit adt-constructor-decl "(unit?)" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (member_append formula-decl nil list_aux_equational_reasoning nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_abs formula-decl nil nominal_AC_substitution nil)
    (nominal_AC_term_opt formula-decl nil nominal_AC_term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    nil (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) nil
    (flatten_pair def-decl "args" nominal_AC_term_properties nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (member def-decl "bool" list_props nil) nil
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) nil
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (mem_get_args_subs2 0
  (mem_get_args_subs2-1 nil 3834423261
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (lemma "nominal_AC_term_opt")
              (("" (inst -1 "t")
                (("" (prop)
                  (("1" (replace -2)
                    (("1" (rewrite "subs_const")
                      (("1" (lemma "get_args_not_pair_ac")
                        (("1" (inst? -1)
                          (("1" (expand "is_ac_sym?" -1)
                            (("1" (replace -1)
                              (("1"
                                (hide -1)
                                (("1"
                                  (expand "member" -3)
                                  (("1"
                                    (expand "member" -3)
                                    (("1"
                                      (inst 1 "s")
                                      (("1"
                                        (expand "member" 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -3)
                                            (("1"
                                              (rewrite "subs_const")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "member(V(t), dom(sigma))")
                    (("1" (inst 1 "t")
                      (("1" (prop)
                        (("1" (lemma "get_args_not_pair_ac")
                          (("1" (inst -1 "f" "t")
                            (("1" (expand "is_ac_sym?" -1)
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "member" 1)
                      (("2" (expand "dom" 1)
                        (("2" (expand "subs" 1)
                          (("2" (flatten)
                            (("2" (inst 1 "t")
                              (("2"
                                (split 1)
                                (("1"
                                  (lemma "get_args_not_pair_ac")
                                  (("1"
                                    (inst -1 "f" "t")
                                    (("1"
                                      (expand "is_ac_sym?")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (lemma "get_args_not_pair_ac")
                                      (("2"
                                        (inst? -1)
                                        (("2"
                                          (expand "is_ac_sym?" -1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lemma "subs_ext_pi2")
                                              (("2"
                                                (inst
                                                 -1
                                                 "V(t)"
                                                 "null"
                                                 "p(t)"
                                                 "sigma")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (inst 1 "t")
                    (("3" (replace -1)
                      (("3" (rewrite "subs_unit")
                        (("3" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("4" (replace -2 -3)
                    (("4" (rewrite "subs_pair")
                      (("4" (rewrite "get_args_pair")
                        (("4" (rewrite "member_append")
                          (("4" (reveal -2)
                            (("4" (prop)
                              (("1"
                                (inst -2 "term1(t)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skolem -1 "ti")
                                        (("1"
                                          (inst 1 "ti")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -5 1)
                                                  (("1"
                                                    (rewrite
                                                     "get_args_pair")
                                                    (("1"
                                                      (rewrite
                                                       "member_append")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -2 "term2(t)")
                                (("2"
                                  (prop)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skolem -1 "ti")
                                        (("1"
                                          (inst 1 "ti")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -5 1)
                                              (("1"
                                                (rewrite
                                                 "get_args_pair")
                                                (("1"
                                                  (rewrite
                                                   "member_append")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (replace -2)
                    (("5" (rewrite "subs_app")
                      (("5" (lemma "get_args_not_pair_ac")
                        (("5" (inst?)
                          (("5" (assert)
                            (("5" (expand "is_ac_sym?" -1)
                              (("5"
                                (replace -1)
                                (("5"
                                  (hide -1)
                                  (("5"
                                    (expand "member" -3 1)
                                    (("5"
                                      (expand "member" -3 1)
                                      (("5"
                                        (inst 1 "t")
                                        (("5"
                                          (split 1)
                                          (("1"
                                            (lemma
                                             "get_args_not_pair_ac")
                                            (("1"
                                              (inst?)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (hide 2)
                                              (("2"
                                                (replace -2 1)
                                                (("2"
                                                  (rewrite "subs_app")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (case "ac_sym(t) = f")
                    (("1" (replace -1)
                      (("1" (replace -3)
                        (("1" (rewrite "subs_ac")
                          (("1" (rewrite "get_args_ac")
                            (("1" (hide -1 -2 -3)
                              (("1"
                                (reveal -5)
                                (("1"
                                  (inst -1 "ac_arg(t)")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skolem -1 "ti")
                                          (("1"
                                            (inst 1 "ti")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite
                                                   "get_args_ac")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -1 2)
                                      (("2"
                                        (reveal -4)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace -2 -3)
                      (("2" (rewrite "subs_ac")
                        (("2" (lemma "get_args_not_pair_ac")
                          (("2" (inst? -1)
                            (("2" (assert)
                              (("2"
                                (expand "is_ac_sym?" -1)
                                (("2"
                                  (replace -1 -4)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (expand "member" -3)
                                      (("2"
                                        (expand "member" -3 1)
                                        (("2"
                                          (inst 2 "t")
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (lemma
                                               "get_args_not_pair_ac")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "is_ac_sym?"
                                                     -1)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (replace -2 1)
                                                  (("2"
                                                    (rewrite "subs_ac")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("7" (replace -2)
                    (("7" (rewrite "subs_abs")
                      (("7" (lemma "get_args_not_pair_ac")
                        (("7" (inst?)
                          (("7" (assert)
                            (("7" (expand "is_ac_sym?" -1)
                              (("7"
                                (replace -1)
                                (("7"
                                  (expand "member" -4)
                                  (("7"
                                    (expand "member" -4)
                                    (("7"
                                      (inst 1 "t")
                                      (("7"
                                        (split 1)
                                        (("1"
                                          (lemma
                                           "get_args_not_pair_ac")
                                          (("1"
                                            (inst -1 "f" "t")
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (replace -3 1)
                                              (("2"
                                                (rewrite "subs_abs" 1)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nominal_AC_term_opt formula-decl nil nominal_AC_term_properties nil)
    (a adt-accessor-decl "[(atom?) -> atom]" nominal_AC_term_adt nil)
    (atom? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (at adt-constructor-decl "[atom -> (atom?)]" nominal_AC_term_adt nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (get_args_not_pair_ac formula-decl nil nominal_AC_term_properties nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs_ext_pi2 formula-decl nil nominal_AC_substitution nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (from_min2max def-decl "list[nat]" list_aux_equational_reasoning nil) nil
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (member_append formula-decl nil list_aux_equational_reasoning nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_args_pair formula-decl nil nominal_AC_term_properties nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (app adt-constructor-decl "[[f_symbol, nominal_AC_term] -> (app?)]" nominal_AC_term_adt
     nil)
    (ac_app adt-constructor-decl "[[ac_symbol, nominal_AC_term] -> (ac_app?)]"
     nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (get_args_ac formula-decl nil nominal_AC_term_properties nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_abs formula-decl nil nominal_AC_substitution nil)
    (abs adt-constructor-decl "[[atom, nominal_AC_term] -> (abs?)]" nominal_AC_term_adt nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil) nil nil
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil)
    (member def-decl "bool" list_props nil) nil
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) nil
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (mem_get_args_subs3 0
  (mem_get_args_subs3-1 nil 3837031865
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (lemma "nominal_AC_term_opt")
              (("" (inst -1 "t")
                (("" (prop)
                  (("1" (replace -2)
                    (("1" (rewrite "subs_const")
                      (("1" (lemma "get_args_not_pair_ac")
                        (("1" (inst? -1)
                          (("1" (expand "is_ac_sym?" -1)
                            (("1" (replace -1)
                              (("1"
                                (hide -1)
                                (("1"
                                  (expand "member" -3)
                                  (("1"
                                    (expand "member" -3)
                                    (("1"
                                      (inst 1 "s")
                                      (("1"
                                        (expand "member" 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -3)
                                            (("1"
                                              (rewrite "subs_const")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "member(V(t), dom(sigma))")
                    (("1" (inst 1 "t")
                      (("1" (prop)
                        (("1" (lemma "get_args_not_pair_ac")
                          (("1" (inst -1 "f" "t")
                            (("1" (expand "is_ac_sym?" -1)
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "member" 1)
                      (("2" (expand "dom" 1)
                        (("2" (expand "subs" 1)
                          (("2" (flatten)
                            (("2" (inst 1 "t")
                              (("2"
                                (split 1)
                                (("1"
                                  (lemma "get_args_not_pair_ac")
                                  (("1"
                                    (inst -1 "f" "t")
                                    (("1"
                                      (expand "is_ac_sym?")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (lemma "get_args_not_pair_ac")
                                      (("2"
                                        (inst? -1)
                                        (("2"
                                          (expand "is_ac_sym?" -1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lemma "subs_ext_pi2")
                                              (("2"
                                                (inst
                                                 -1
                                                 "V(t)"
                                                 "null"
                                                 "p(t)"
                                                 "sigma")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (inst 1 "t")
                    (("3" (replace -1)
                      (("3" (rewrite "subs_unit")
                        (("3" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("4" (replace -2 -3)
                    (("4" (rewrite "subs_pair")
                      (("4" (rewrite "get_args_pair")
                        (("4" (rewrite "member_append")
                          (("4" (reveal -2)
                            (("4" (prop)
                              (("1"
                                (inst -2 "term1(t)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skolem -1 "ti")
                                        (("1"
                                          (inst 1 "ti")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -5 1)
                                                  (("1"
                                                    (rewrite
                                                     "get_args_pair")
                                                    (("1"
                                                      (rewrite
                                                       "member_append")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -2 "term2(t)")
                                (("2"
                                  (prop)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skolem -1 "ti")
                                        (("1"
                                          (inst 1 "ti")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -5 1)
                                              (("1"
                                                (rewrite
                                                 "get_args_pair")
                                                (("1"
                                                  (rewrite
                                                   "member_append")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (replace -2)
                    (("5" (rewrite "subs_app")
                      (("5" (lemma "get_args_not_pair_ac")
                        (("5" (inst?)
                          (("5" (assert)
                            (("5" (expand "is_ac_sym?" -1)
                              (("5"
                                (replace -1)
                                (("5"
                                  (hide -1)
                                  (("5"
                                    (expand "member" -3 1)
                                    (("5"
                                      (expand "member" -3 1)
                                      (("5"
                                        (inst 1 "t")
                                        (("5"
                                          (split 1)
                                          (("1"
                                            (lemma
                                             "get_args_not_pair_ac")
                                            (("1"
                                              (inst?)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (hide 2)
                                              (("2"
                                                (replace -2 1)
                                                (("2"
                                                  (rewrite "subs_app")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "ord"
                                                       1
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "ord"
                                                         1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (case "ac_sym(t) = f")
                    (("1" (replace -1)
                      (("1" (replace -3)
                        (("1" (rewrite "subs_ac")
                          (("1" (rewrite "get_args_ac")
                            (("1" (hide -1 -2 -3)
                              (("1"
                                (reveal -5)
                                (("1"
                                  (inst -1 "ac_arg(t)")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skolem -1 "ti")
                                          (("1"
                                            (inst 1 "ti")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite
                                                   "get_args_ac")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -1 2)
                                      (("2"
                                        (reveal -4)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace -2 -3)
                      (("2" (rewrite "subs_ac")
                        (("2" (lemma "get_args_not_pair_ac")
                          (("2" (inst? -1)
                            (("2" (assert)
                              (("2"
                                (expand "is_ac_sym?" -1)
                                (("2"
                                  (replace -1 -4)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (expand "member" -3)
                                      (("2"
                                        (expand "member" -3 1)
                                        (("2"
                                          (inst 2 "t")
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (lemma
                                               "get_args_not_pair_ac")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "is_ac_sym?"
                                                     -1)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (replace -2 1)
                                                  (("2"
                                                    (rewrite "subs_ac")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "ord"
                                                         1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("7" (replace -2 -3)
                    (("7" (rewrite "subs_abs" -3)
                      (("7" (rewrite "get_args_not_pair_ac")
                        (("1" (expand "member" -3)
                          (("1" (expand "member" -3)
                            (("1" (inst 1 "t")
                              (("1"
                                (split 1)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (rewrite "get_args_not_pair_ac")
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (expand "is_ac_sym?" -1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (replace -2 1)
                                      (("2"
                                        (rewrite "subs_abs")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "is_ac_sym?" -1)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nominal_AC_term_opt formula-decl nil nominal_AC_term_properties nil)
    (a adt-accessor-decl "[(atom?) -> atom]" nominal_AC_term_adt nil)
    (atom? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (at adt-constructor-decl "[atom -> (atom?)]" nominal_AC_term_adt nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (get_args_not_pair_ac formula-decl nil nominal_AC_term_properties nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs_ext_pi2 formula-decl nil nominal_AC_substitution nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (from_min2max def-decl "list[nat]" list_aux_equational_reasoning nil) nil
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (member_append formula-decl nil list_aux_equational_reasoning nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_args_pair formula-decl nil nominal_AC_term_properties nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (app adt-constructor-decl "[[f_symbol, nominal_AC_term] -> (app?)]" nominal_AC_term_adt
     nil)
    (ac_app adt-constructor-decl "[[ac_symbol, nominal_AC_term] -> (ac_app?)]"
     nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (get_args_ac formula-decl nil nominal_AC_term_properties nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_abs formula-decl nil nominal_AC_substitution nil)
    (abs adt-constructor-decl "[[atom, nominal_AC_term] -> (abs?)]" nominal_AC_term_adt nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ord const-decl "upto(6)" nominal_AC_term_adt nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil) nil nil
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil)
    (member def-decl "bool" list_props nil) nil
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) nil
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (supset_dom_equiv 0
  (supset_dom_equiv-1 nil 3835728990
   ("" (induct "delta")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (expand "member" -1)
              (("1" (expand "supset_dom" -1)
                (("1" (expand "add" -1)
                  (("1" (prop)
                    (("1" (inst 1 "hd`2") (("1" (grind) nil nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem -1 "s")
              (("2" (expand "member" -1)
                (("2" (prop)
                  (("1" (grind) nil nil)
                   ("2" (inst -2 "X") (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (member def-decl "bool" list_props nil)
    (supset_dom def-decl "finite_set[variable]" nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil))
   shostak))
 (supset_dom_append 0
  (supset_dom_append-1 nil 3835550099
   ("" (measure-induct "length(sigma)" "sigma")
    (("" (skolem 1 "sigma")
      (("" (prop)
        (("" (skeep)
          (("" (rewrite "subset_antisymmetric")
            (("1" (hide 2)
              (("1" (expand "subset?" 1)
                (("1" (skolem 1 "X")
                  (("1" (prop)
                    (("1" (expand "supset_dom" -1)
                      (("1" (lift-if)
                        (("1" (prop)
                          (("1" (grind) nil nil)
                           ("2" (expand "append" -1 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "append" -1 1)
                                    (("2"
                                      (inst -2 "cdr(sigma)")
                                      (("2"
                                        (prop)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (replace -1)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (expand "subset?" 1)
                (("2" (skolem 1 "X")
                  (("2" (prop)
                    (("2" (expand "supset_dom" 1)
                      (("2" (case "null?(sigma)")
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (hide -4 1) (("1" (grind) nil nil))
                              nil)
                             ("2" (expand ("member" "union") -2)
                              (("2"
                                (expand "append" 2 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "member" 2)
                                    (("2"
                                      (hide -3)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lift-if)
                          (("2" (split)
                            (("1" (flatten)
                              (("1"
                                (hide -3 1)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand "append" 2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst -2 "cdr(sigma)")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (union const-decl "set" sets nil)
    (append def-decl "list[T]" list_props nil)
    (supset_dom def-decl "finite_set[variable]" nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (nice_disjoint_dom_img 0
  (nice_disjoint_dom_img-2 nil 3881241759
   ("" (measure-induct "length(sigma)" "sigma")
    (("" (skolem 1 "sigma")
      (("" (prop)
        (("" (expand "nice?" -2 :assert? none)
          (("" (split)
            (("1" (grind) nil nil)
             ("2" (flatten)
              (("2" (skoletin -1)
                (("2" (flatten)
                  (("2" (expand "disjoint?" 4)
                    (("2" (expand "empty?" 4)
                      (("2" (skolem 4 "Y")
                        (("2" (expand "member" -6)
                          (("2" (expand "intersection" -6)
                            (("2" (prop)
                              (("2"
                                (expand "member" -6)
                                (("2"
                                  (expand "dom" -6)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand "subs" 4)
                                      (("2"
                                        (expand "subs" 4)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (case
                                             "subs(cdr(sigma))(null * Y) = null * Y")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (case "X = Y")
                                                (("1"
                                                  (replace -1 :dir rl)
                                                  (("1"
                                                    (hide -7)
                                                    (("1"
                                                      (rewrite
                                                       "vars_finset")
                                                      (("1"
                                                        (skolem -7 "s")
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (hide
                                                             -5
                                                             -6)
                                                            (("1"
                                                              (expand
                                                               "member"
                                                               -5)
                                                              (("1"
                                                                (expand
                                                                 "img"
                                                                 -5)
                                                                (("1"
                                                                  (skolem
                                                                   -5
                                                                   "Z")
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (expand
                                                                       "subs"
                                                                       -6)
                                                                      (("1"
                                                                        (expand
                                                                         "subs"
                                                                         -6)
                                                                        (("1"
                                                                          (name-replace
                                                                           "s_pre"
                                                                           "subs(cdr(sigma))(null * Z)")
                                                                          (("1"
                                                                            (lemma
                                                                             "basic_sub_elim_var")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "X"
                                                                               "t"
                                                                               "s_pre")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -6
                                                                                     -7
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       (-7
                                                                                        1))
                                                                                      (("1"
                                                                                        (case
                                                                                         "car(sigma) = (X, t)")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "subs" 5)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst -5 "cdr(sigma)")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (expand
                                                   "disjoint?"
                                                   -1)
                                                  (("1"
                                                    (expand
                                                     "empty?"
                                                     -1)
                                                    (("1"
                                                      (inst -1 "Y")
                                                      (("1"
                                                        (expand
                                                         "member"
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "intersection"
                                                           1)
                                                          (("1"
                                                            (case
                                                             "member(Y, dom(cdr(sigma)))")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -4
                                                                 -5
                                                                 -3)
                                                                (("1"
                                                                  (rewrite
                                                                   "vars_finset"
                                                                   -3)
                                                                  (("1"
                                                                    (skolem
                                                                     -3
                                                                     "s")
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (expand
                                                                         "member"
                                                                         -3)
                                                                        (("1"
                                                                          (expand
                                                                           "img"
                                                                           -3)
                                                                          (("1"
                                                                            (skolem
                                                                             -3
                                                                             "Z")
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (expand
                                                                                 "subs"
                                                                                 -4)
                                                                                (("1"
                                                                                  (expand
                                                                                   "subs"
                                                                                   -4)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "vars_finset"
                                                                                     1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       1
                                                                                       "subs(cdr(sigma))(null * Z)")
                                                                                      (("1"
                                                                                        (case
                                                                                         "X /= Y")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (name-replace
                                                                                             "s_pre"
                                                                                             "subs(cdr(sigma))(null * Z)")
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "img"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     1
                                                                                                     "Z")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "s_pre"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "subs"
                                                                                                         1
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "member"
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "dom"
                                                                                                             -3)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "subs"
                                                                                                                 8)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "member"
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "dom"
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "subs"
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "subs"
                                                                                                                           7
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "subs"
                                                                                                                               7)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (lift-if)
                                                                                                                                  (("1"
                                                                                                                                    (prop)
                                                                                                                                    (("1"
                                                                                                                                      (reveal
                                                                                                                                       -4)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1
                                                                                                                                         :dir
                                                                                                                                         rl)
                                                                                                                                        (("1"
                                                                                                                                          (rewrite
                                                                                                                                           "ext_identity")
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "s_pre"
                                                                                                                                               -5)
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -2)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "subs"
                                                                                                                                                   -5)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (rewrite
                                                                                                                                                       "ext_identity")
                                                                                                                                                      (("1"
                                                                                                                                                        (reveal
                                                                                                                                                         -3)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -1
                                                                                                                                                             :dir
                                                                                                                                                             rl)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -6
                                                                                                                                                               :dir
                                                                                                                                                               rl)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "disjoint?"
                                                                                                                                                                 -5)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "empty?"
                                                                                                                                                                   -5)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     -5
                                                                                                                                                                     "Y")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "member"
                                                                                                                                                                       6)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "intersection"
                                                                                                                                                                         6)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (lemma
                                                                                                                                                                           "supset_dom_correct2")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (inst
                                                                                                                                                                             -1
                                                                                                                                                                             "cdr(sigma)")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (expand
                                                                                                                                                                               "subset?"
                                                                                                                                                                               -1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (inst
                                                                                                                                                                                 -1
                                                                                                                                                                                 "Y")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "basic_sub_not_elim_var")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "X"
                                                                                                   "Y"
                                                                                                   "t"
                                                                                                   "s_pre")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (prop)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "disjoint?"
                                                                                                         -3)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "empty?"
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -3
                                                                                                             "Y")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "member"
                                                                                                               6)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "intersection"
                                                                                                                 6)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "supset_dom_correct2")
                                                                                                                    (("1"
                                                                                                                      (inst?)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "subset?"
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "Y")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (replace
                                                                                                         -4
                                                                                                         -5
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (hide-all-but
                                                                                                           (-5
                                                                                                            1))
                                                                                                          (("2"
                                                                                                            (case
                                                                                                             "car(sigma) = (X, t)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "supset_dom_correct2")
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "subset?"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "Y")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "member"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "dom"
                                                                 1)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (expand
                                                                     "subs"
                                                                     -1)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (1 5))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    nil (ext_identity formula-decl nil nominal_AC_term_properties nil)
    (supset_dom_correct2 formula-decl nil nominal_AC_substitution nil)
    (subset? const-decl "bool" sets nil)
    (basic_sub_not_elim_var formula-decl nil nominal_AC_substitution nil)
    (/= const-decl "boolean" notequal nil) nil
    (vars_finset formula-decl nil nominal_AC_term_properties nil)
    (basic_sub_elim_var formula-decl nil nominal_AC_substitution nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (supset_dom def-decl "finite_set[variable]" nominal_AC_substitution nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil) nil
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (intersection const-decl "set" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    nil (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (nice? def-decl "bool" nominal_AC_substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (nice_disjoint_dom_img-1 nil 3835471821
   ("" (measure-induct "length(sigma)" "sigma")
    (("" (skolem 1 "sigma")
      (("" (prop)
        (("" (expand "nice?" -2 :assert? none)
          (("" (split)
            (("1" (grind) nil nil)
             ("2" (flatten)
              (("2" (skoletin -1)
                (("2" (flatten)
                  (("2" (expand "disjoint?" 4)
                    (("2" (expand "empty?" 4)
                      (("2" (skolem 4 "Y")
                        (("2" (expand "member" -6)
                          (("2" (expand "intersection" -6)
                            (("2" (prop)
                              (("2"
                                (expand "member" -6)
                                (("2"
                                  (expand "dom" -6)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand "subs" 4)
                                      (("2"
                                        (expand "subs" 4)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (case
                                             "subs(cdr(sigma))(variable(Y)) = variable(Y)")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (case "X = Y")
                                                (("1"
                                                  (replace -1 :dir rl)
                                                  (("1"
                                                    (hide -7)
                                                    (("1"
                                                      (rewrite
                                                       "vars_finset")
                                                      (("1"
                                                        (skolem -7 "s")
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (hide
                                                             -5
                                                             -6)
                                                            (("1"
                                                              (expand
                                                               "member"
                                                               -5)
                                                              (("1"
                                                                (expand
                                                                 "img"
                                                                 -5)
                                                                (("1"
                                                                  (skolem
                                                                   -5
                                                                   "Z")
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (expand
                                                                       "subs"
                                                                       -6)
                                                                      (("1"
                                                                        (expand
                                                                         "subs"
                                                                         -6)
                                                                        (("1"
                                                                          (name-replace
                                                                           "s_pre"
                                                                           "subs(cdr(sigma))(variable(Z))")
                                                                          (("1"
                                                                            (lemma
                                                                             "basic_sub_elim_var")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "X"
                                                                               "t"
                                                                               "s_pre")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -6
                                                                                     -7
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       (-7
                                                                                        1))
                                                                                      (("1"
                                                                                        (case
                                                                                         "car(sigma) = (X, t)")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "subs" 5)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst -5 "cdr(sigma)")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (expand
                                                   "disjoint?"
                                                   -1)
                                                  (("1"
                                                    (expand
                                                     "empty?"
                                                     -1)
                                                    (("1"
                                                      (inst -1 "Y")
                                                      (("1"
                                                        (expand
                                                         "member"
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "intersection"
                                                           1)
                                                          (("1"
                                                            (case
                                                             "member(Y, dom(cdr(sigma)))")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -4
                                                                 -5
                                                                 -3)
                                                                (("1"
                                                                  (rewrite
                                                                   "vars_finset"
                                                                   -3)
                                                                  (("1"
                                                                    (skolem
                                                                     -3
                                                                     "s")
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (expand
                                                                         "member"
                                                                         -3)
                                                                        (("1"
                                                                          (expand
                                                                           "img"
                                                                           -3)
                                                                          (("1"
                                                                            (skolem
                                                                             -3
                                                                             "Z")
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (expand
                                                                                 "subs"
                                                                                 -4)
                                                                                (("1"
                                                                                  (expand
                                                                                   "subs"
                                                                                   -4)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "vars_finset"
                                                                                     1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       1
                                                                                       "subs(cdr(sigma))(variable(Z))")
                                                                                      (("1"
                                                                                        (case
                                                                                         "X /= Y")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (name-replace
                                                                                             "s_pre"
                                                                                             "subs(cdr(sigma))(variable(Z))")
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "img"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     1
                                                                                                     "Z")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "s_pre"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "subs"
                                                                                                         1
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "member"
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "dom"
                                                                                                             -3)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "subs"
                                                                                                                 8)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "member"
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "dom"
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "subs"
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "subs"
                                                                                                                           7
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "subs"
                                                                                                                               7)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (lift-if)
                                                                                                                                  (("1"
                                                                                                                                    (prop)
                                                                                                                                    (("1"
                                                                                                                                      (reveal
                                                                                                                                       -4)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1
                                                                                                                                         :dir
                                                                                                                                         rl)
                                                                                                                                        (("1"
                                                                                                                                          (hide
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "s_pre"
                                                                                                                                             -5)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -2)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "subs"
                                                                                                                                                 -5)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (reveal
                                                                                                                                                     -3)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -1
                                                                                                                                                         :dir
                                                                                                                                                         rl)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -6
                                                                                                                                                           :dir
                                                                                                                                                           rl)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "disjoint?"
                                                                                                                                                             -5)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "empty?"
                                                                                                                                                               -5)
                                                                                                                                                              (("1"
                                                                                                                                                                (inst
                                                                                                                                                                 -5
                                                                                                                                                                 "Y")
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "member"
                                                                                                                                                                   6)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "intersection"
                                                                                                                                                                     6)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lemma
                                                                                                                                                                       "supset_dom_correct2")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (inst
                                                                                                                                                                         -1
                                                                                                                                                                         "cdr(sigma)")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "subset?"
                                                                                                                                                                           -1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (inst
                                                                                                                                                                             -1
                                                                                                                                                                             "Y")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "basic_sub_not_elim_var")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "X"
                                                                                                   "Y"
                                                                                                   "t"
                                                                                                   "s_pre")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (prop)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "disjoint?"
                                                                                                         -3)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "empty?"
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -3
                                                                                                             "Y")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "member"
                                                                                                               6)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "intersection"
                                                                                                                 6)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "supset_dom_correct2")
                                                                                                                    (("1"
                                                                                                                      (inst?)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "subset?"
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "Y")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (replace
                                                                                                         -4
                                                                                                         -5
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (hide-all-but
                                                                                                           (-5
                                                                                                            1))
                                                                                                          (("2"
                                                                                                            (case
                                                                                                             "car(sigma) = (X, t)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "supset_dom_correct2")
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "subset?"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "Y")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "member"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "dom"
                                                                 1)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (expand
                                                                     "subs"
                                                                     -1)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (1 5))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (supset_dom_correct2 formula-decl nil nominal_AC_substitution nil)
    (subset? const-decl "bool" sets nil)
    (basic_sub_not_elim_var formula-decl nil nominal_AC_substitution nil)
    (/= const-decl "boolean" notequal nil)
    (vars_finset formula-decl nil nominal_AC_term_properties nil)
    (basic_sub_elim_var formula-decl nil nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (supset_dom def-decl "finite_set[variable]" nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (intersection const-decl "set" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (nice? def-decl "bool" nominal_AC_substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (constant type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (nice_idempotent 0
  (nice_idempotent-1 nil 3835541840
   ("" (skeep)
    (("" (lemma "idempotent_disjoint_dom_img2")
      (("" (inst? -1)
        (("" (assert)
          (("" (use "nice_disjoint_dom_img") (("" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((idempotent_disjoint_dom_img2 formula-decl nil nominal_AC_substitution nil)
    (nice_disjoint_dom_img formula-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (nice_append 0
  (nice_append-1 nil 3835549786
   ("" (induct "sigma")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skolem 1 "delta")
          (("2" (prop)
            (("1" (expand "append" -2)
              (("1" (inst -1 "delta")
                (("1" (expand "nice?" -2)
                  (("1" (expand "nice?" 1)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (rewrite "supset_dom_append")
                              (("1"
                                (prop)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (expand "disjoint?" 1)
                                  (("2"
                                    (expand "empty?" 1)
                                    (("2"
                                      (skolem 1 "X")
                                      (("2"
                                        (expand "disjoint?" -4)
                                        (("2"
                                          (expand "empty?" -4)
                                          (("2"
                                            (inst -4 "X")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((supset_dom_append formula-decl nil nominal_AC_substitution nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (append def-decl "list[T]" list_props nil)
    (nice? def-decl "bool" nominal_AC_substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil))
   shostak))
 (nice_append2 0
  (nice_append2-1 nil 3835686045
   ("" (measure-induct "length(sigma)" "sigma")
    (("" (skolem 1 "sigma")
      (("" (prop)
        (("" (skeep)
          (("" (expand "nice?" -3)
            (("" (prop)
              (("1" (case "sigma = null")
                (("1" (replace -1)
                  (("1" (expand "append" 1) (("1" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil)
               ("2" (name-replace "X" "car(sigma)`1")
                (("2" (name-replace "t" "car(sigma)`2")
                  (("2" (expand "nice?" 4)
                    (("2" (split)
                      (("1" (propax) nil nil)
                       ("2" (flatten)
                        (("2" (expand "append" 2)
                          (("2" (assert)
                            (("2" (reveal -1 -2)
                              (("2"
                                (replace -1)
                                (("2"
                                  (replace -2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (rewrite "supset_dom_append")
                                        (("1"
                                          (hide -6)
                                          (("1"
                                            (expand "member" -1)
                                            (("1"
                                              (expand "union" -1)
                                              (("1"
                                                (inst -7 "X" "t")
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (expand
                                                     ("X" "t")
                                                     1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "member"
                                                         1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -5)
                                        (("2"
                                          (inst -6 "X" "t")
                                          (("2"
                                            (prop)
                                            (("1"
                                              (rewrite
                                               "supset_dom_append")
                                              (("1"
                                                (hide-all-but
                                                 (-1 -4 2))
                                                (("1"
                                                  (expand
                                                   "disjoint?"
                                                   1)
                                                  (("1"
                                                    (expand "empty?" 1)
                                                    (("1"
                                                      (skolem 1 "Y")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand ("X" "t") 1)
                                              (("2"
                                                (expand "member" 1)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (inst -5 "cdr(sigma)")
                                        (("3"
                                          (prop)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skolem 1 ("X1" "t1"))
                                                (("1"
                                                  (inst -6 "X1" "t1")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "member"
                                                         -7
                                                         1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (union const-decl "set" sets nil) nil nil
    (finite_union application-judgement "finite_set" finite_sets nil)
    (supset_dom_append formula-decl nil nominal_AC_substitution nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (append def-decl "list[T]" list_props nil) nil
    (disjoint? const-decl "bool" sets nil)
    (supset_dom def-decl "finite_set[variable]" nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (nice? def-decl "bool" nominal_AC_substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (nice_append_supset_dom 0
  (nice_append_supset_dom-1 nil 3835551120
   ("" (measure-induct "length(sigma)" "sigma")
    (("" (skolem 1 "sigma")
      (("" (prop)
        (("" (skeep)
          (("" (expand "supset_dom" -3)
            (("" (lift-if)
              (("" (split)
                (("1" (grind) nil nil)
                 ("2" (flatten)
                  (("2" (expand "member" -1)
                    (("2" (expand "add" -1)
                      (("2" (prop)
                        (("1" (expand "nice?" -3)
                          (("1" (expand "append" -3)
                            (("1" (assert)
                              (("1"
                                (replace -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (rewrite "supset_dom_append")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst -2 "cdr(sigma)")
                          (("2" (prop)
                            (("1" (inst -1 "X" "delta")
                              (("1"
                                (prop)
                                (("1"
                                  (expand "append" -2)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "nice?" -2)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((add const-decl "(nonempty?)" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (supset_dom_append formula-decl nil nominal_AC_substitution nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (supset_dom def-decl "finite_set[variable]" nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (append def-decl "list[T]" list_props nil)
    (nice? def-decl "bool" nominal_AC_substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (vars_img_sec_proj 0
  (vars_img_sec_proj-1 nil 3836946205
   ("" (measure-induct "length(sigma)" "sigma")
    (("" (skolem 1 "sigma")
      (("" (prop)
        (("" (case "null?(sigma)")
          (("1" (grind) nil nil)
           ("2" (case "sigma = cons(car(sigma), cdr(sigma))")
            (("1"
              (case "sigma = append(cons(car(sigma), null), cdr(sigma))")
              (("1" (expand "subset?" 2)
                (("1" (skolem 2 "X")
                  (("1" (prop)
                    (("1" (replace -1 -4)
                      (("1" (hide -2)
                        (("1" (lemma "vars_img_append")
                          (("1" (inst?)
                            (("1" (expand "subset?" -1)
                              (("1"
                                (inst -1 "X")
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide -4)
                                    (("1"
                                      (expand "member" -1)
                                      (("1"
                                        (expand "union" -1)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (case "null?(cdr(sigma))")
                                            (("1"
                                              (hide -4 -3)
                                              (("1"
                                                (rewrite "vars_finset")
                                                (("1"
                                                  (skolem -2 "t1")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (expand
                                                       "sec_proj"
                                                       2)
                                                      (("1"
                                                        (expand
                                                         "member"
                                                         2)
                                                        (("1"
                                                          (expand
                                                           "vars"
                                                           2)
                                                          (("1"
                                                            (expand
                                                             "union"
                                                             2)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (grind)
                                                                (("1"
                                                                  (rewrite
                                                                   "ext_identity")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst
                                               -3
                                               "cons(car(sigma), null)")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst -3 "cdr(sigma)")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "append" 1)
                (("2" (expand "append" 1) (("2" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("2" (assert) (("2" (decompose-equality 1) nil nil)) nil)
             ("3" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil) nil
    (list_cons_extensionality formula-decl nil list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_img_append formula-decl nil nominal_AC_substitution nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (ext_identity formula-decl nil nominal_AC_term_properties nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil) nil
    (vars_finset formula-decl nil nominal_AC_term_properties nil)
    (union const-decl "set" sets nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sec_proj def-decl "list[T2]" list_aux_equational_reasoning2parameters nil) nil
    (args type-eq-decl nil nominal_AC_term_properties nil) nil
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    nil (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (well_formed_null 0
  (well_formed_null-1 nil 3854466130 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (PRED type-eq-decl nil defined_types nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil (subs const-decl "nominal_AC_term" nominal_AC_substitution nil) nil
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil) nil)
   shostak))
 (well_formed_append 0
  (well_formed_append-2 nil 3881243465
   ("" (skeep)
    (("" (expand "well_formed?" 1)
      (("" (skeep)
        (("" (prop)
          (("1" (expand "subs")
            (("1" (rewrite "subs_append2")
              (("1" (lemma "subs_pair2")
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (prop)
                      (("1" (expand "well_formed?" -4)
                        (("1" (inst -4 "X") (("1" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (name-replace "t1" "subs(delta)(null * X)")
                        (("2" (expand "well_formed?" -3)
                          (("2" (inst -3 "V(t1)")
                            (("2" (expand "subs" -3)
                              (("2"
                                (lemma "nominal_AC_term_times_eta")
                                (("2"
                                  (inst -1 "t1")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (prop)
                                      (("2"
                                        (replace -1 -3 :dir rl)
                                        (("2"
                                          (rewrite "subs_ext_pi")
                                          (("2"
                                            (expand "subs" -3)
                                            (("2"
                                              (expand "ext" -3)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (expand "subs" -1 1)
              (("2" (rewrite "subs_append2")
                (("2" (name-replace "t1" "subs(delta)(null * X)")
                  (("2" (reveal -1)
                    (("2" (name-replace "f" "ac_sym(t)")
                      (("2" (reveal -1)
                        (("2" (lemma "subterms_subs2")
                          (("2" (inst -1 "t1" "sigma" "t")
                            (("2" (assert)
                              (("2"
                                (skolem -1 "t1s")
                                (("2"
                                  (prop)
                                  (("1"
                                    (lemma "subs_ac3")
                                    (("1"
                                      (inst -1 "f" "sigma" "t1s")
                                      (("1"
                                        (expand "is_ac_sym?" -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (lemma
                                               "subs_num_arg_ge1")
                                              (("1"
                                                (inst
                                                 -1
                                                 "f"
                                                 "sigma"
                                                 "t1s")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "well_formed?"
                                                     -10)
                                                    (("1"
                                                      (inst -10 "X")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (hide 3)
                                                          (("1"
                                                            (inst
                                                             -10
                                                             "t1s")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "subs"
                                                                 3)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand
                                               "well_formed?"
                                               -8)
                                              (("2"
                                                (inst -8 "V(t1s)")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (inst
                                                     -8
                                                     "subs(sigma)(V(t1s))")
                                                    (("2"
                                                      (lemma
                                                       "nominal_AC_term_times_eta")
                                                      (("2"
                                                        (inst -1 "t1s")
                                                        (("2"
                                                          (replace
                                                           -1
                                                           -3
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (rewrite
                                                             "subs_ext_pi")
                                                            (("2"
                                                              (replace
                                                               -3
                                                               1)
                                                              (("2"
                                                                (rewrite
                                                                 "ext_num_arg"
                                                                 1)
                                                                (("2"
                                                                  (lemma
                                                                   "ext_preserves_type")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "p(t1s)"
                                                                     "subs(sigma)(V(t1s))")
                                                                    (("2"
                                                                      (expand
                                                                       "ord"
                                                                       -1
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "ord"
                                                                           -1)
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (prop)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (rewrite
                                                                                   "subterm_reflexive")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand ("member" "ext") -2)
                                    (("2"
                                      (skolem -2 "t2")
                                      (("2"
                                        (prop)
                                        (("2"
                                          (rewrite "subterm_fin_set")
                                          (("2"
                                            (skolem -2 "t2S")
                                            (("2"
                                              (prop)
                                              (("2"
                                                (expand
                                                 ("member" "img")
                                                 -2)
                                                (("2"
                                                  (skolem -2 "Y")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "well_formed?"
                                                       -11)
                                                      (("2"
                                                        (inst -11 "Y")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst
                                                             -11
                                                             "t2")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "ext_ac")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "f"
                                                                   "p(t1s)"
                                                                   "t2")
                                                                  (("2"
                                                                    (replace
                                                                     -6)
                                                                    (("2"
                                                                      (expand
                                                                       "is_ac_sym?"
                                                                       -1
                                                                       2)
                                                                      (("2"
                                                                        (expand
                                                                         "is_ac_sym?"
                                                                         -1)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (replace
                                                                               -2
                                                                               :dir
                                                                               rl)
                                                                              (("2"
                                                                                (replace
                                                                                 -7
                                                                                 1
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "ext_num_arg")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil) nil
    (member const-decl "bool" sets nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (act def-decl "atom" atoms nil)
    (append def-decl "list[T]" list_props nil) nil
    (nominal_AC_term_times_eta formula-decl nil nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subs_pair2 formula-decl nil nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subterms_subs2 formula-decl nil nominal_AC_substitution nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ext_preserves_type formula-decl nil nominal_AC_term_properties nil)
    (ord const-decl "upto(6)" nominal_AC_term_adt nil)
    (subterm_reflexive formula-decl nil nominal_AC_term_properties nil)
    (ext_num_arg formula-decl nil nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil) nil
    (subs_num_arg_ge1 formula-decl nil nominal_AC_substitution nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (subs_ac3 formula-decl nil nominal_AC_substitution nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (subterm_fin_set formula-decl nil nominal_AC_term_properties nil)
    (ext_ac formula-decl nil nominal_AC_term_properties nil)
    (ext const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_term_properties nil))
   nil)
  (well_formed_append-1 nil 3846951355
   ("" (skeep)
    (("" (expand "well_formed?" 1)
      (("" (skeep)
        (("" (prop)
          (("1" (expand "subs")
            (("1" (rewrite "subs_append2")
              (("1" (lemma "subs_pair2")
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (prop)
                      (("1" (expand "well_formed?" -4)
                        (("1" (inst -4 "X") (("1" (grind) nil nil))
                          nil))
                        nil)
                       ("2"
                        (name-replace "t1" "subs(delta)(variable(X))")
                        (("2" (expand "well_formed?" -3)
                          (("2" (inst -3 "V(t1)")
                            (("2" (expand "subs" -3)
                              (("2"
                                (lemma "nominal_AC_term_variable_eta")
                                (("2"
                                  (inst -1 "t1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (expand "subs" -1 1)
              (("2" (rewrite "subs_append2")
                (("2" (lemma "subterms_subs")
                  (("2" (name-replace "t1" "subs(delta)(variable(X))")
                    (("2" (inst?)
                      (("2" (expand "subset?" -1)
                        (("2" (inst -1 "t")
                          (("2" (prop)
                            (("2" (hide -2)
                              (("2"
                                (expand ("member" "union") -1)
                                (("2"
                                  (prop)
                                  (("1"
                                    (expand "image" -1)
                                    (("1"
                                      (expand "image" -1)
                                      (("1"
                                        (expand "member" -1)
                                        (("1"
                                          (skolem -1 "t2")
                                          (("1"
                                            (typepred "t2")
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (lemma "subs_func")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "sigma"
                                                   "t2")
                                                  (("1"
                                                    (expand "func?" -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (expand
                                                           "same_func?"
                                                           -1)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (expand
                                                               "ord"
                                                               -2)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (case
                                                                       "ac_app?(t2)")
                                                                      (("1"
                                                                        (hide
                                                                         1
                                                                         2
                                                                         3
                                                                         4
                                                                         5)
                                                                        (("1"
                                                                          (lemma
                                                                           "subs_num_arg_ge1")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "ac_sym(t)"
                                                                             "sigma"
                                                                             "t2")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 2)
                                                                                (("1"
                                                                                  (expand
                                                                                   "sym"
                                                                                   -3)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -5
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -3)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "t1"
                                                                                         -4)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "well_formed?"
                                                                                           -8)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -8
                                                                                             "X")
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -8
                                                                                                 "t2")
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "well_formed?"
                                                           -5)
                                                          (("2"
                                                            (lemma
                                                             "nominal_AC_term_variable_eta")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "t2")
                                                              (("2"
                                                                (inst
                                                                 -6
                                                                 "V(t2)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (prop)
                                                                    (("2"
                                                                      (inst
                                                                       -6
                                                                       "t")
                                                                      (("2"
                                                                        (prop)
                                                                        (("2"
                                                                          (expand
                                                                           "subs"
                                                                           1)
                                                                          (("2"
                                                                            (replace
                                                                             -1)
                                                                            (("2"
                                                                              (replace
                                                                               -4
                                                                               :dir
                                                                               rl)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "subterm_reflexive")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "subterm_fin_set")
                                    (("2"
                                      (skolem -1 "tS")
                                      (("2"
                                        (prop)
                                        (("2"
                                          (expand "img" -1)
                                          (("2"
                                            (expand "member" -1)
                                            (("2"
                                              (expand
                                               "well_formed?"
                                               -4)
                                              (("2"
                                                (skolem -1 "Y")
                                                (("2"
                                                  (prop)
                                                  (("2"
                                                    (inst -5 "Y")
                                                    (("2"
                                                      (prop)
                                                      (("2"
                                                        (inst -5 "t")
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_append2 formula-decl nil nominal_AC_substitution nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil nominal_AC_term_properties nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (member const-decl "bool" sets nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subs_pair2 formula-decl nil nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subterm_reflexive formula-decl nil nominal_AC_term_properties nil)
    (same_func? const-decl "bool" nominal_AC_term_properties nil)
    (ord const-decl "upto(6)" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_num_arg_ge1 formula-decl nil nominal_AC_substitution nil)
    (sym const-decl "string" nominal_AC_term_properties nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (func? const-decl "bool" nominal_AC_term_properties nil)
    (subs_func formula-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (subterm_fin_set formula-decl nil nominal_AC_term_properties nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil))
   shostak))
 (well_formed_subs 0
  (well_formed_subs-1 nil 3846959624
   ("" (skeep)
    (("" (expand "well_formed?" 1)
      (("" (prop)
        (("1" (lemma "subs_pair2")
          (("1" (inst?)
            (("1" (assert)
              (("1" (prop)
                (("1" (grind) nil nil)
                 ("2" (lemma "nominal_AC_term_times_eta")
                  (("2" (inst?)
                    (("2" (expand "well_formed?" -4)
                      (("2" (inst -4 "V(t)")
                        (("2" (assert)
                          (("2" (flatten)
                            (("2" (replace -1 -3 :dir rl)
                              (("2"
                                (rewrite "subs_ext_pi")
                                (("2"
                                  (expand "ext" -3)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skolem 1 "ti_sigma")
          (("2" (prop)
            (("2" (lemma "subterms_subs2")
              (("2" (inst?)
                (("2" (assert)
                  (("2" (skolem -1 "t1")
                    (("2" (flatten)
                      (("2" (prop)
                        (("1" (lemma "subs_ac3")
                          (("1" (name-replace "f" "ac_sym(ti_sigma)")
                            (("1" (reveal -1)
                              (("1"
                                (inst -2 "f" "sigma" "t1")
                                (("1"
                                  (expand "is_ac_sym?" -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (replace -4)
                                        (("1"
                                          (lemma "subs_num_arg_ge1")
                                          (("1"
                                            (inst -1 "f" "sigma" "t1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "well_formed?"
                                                 -9)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst -9 "t1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "well_formed?" -7)
                                        (("2"
                                          (inst -7 "V(t1)")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (lemma "nominal_AC_term_times_eta")
                                              (("2"
                                                (inst -1 "t1")
                                                (("2"
                                                  (replace
                                                   -1
                                                   -4
                                                   :dir
                                                   rl)
                                                  (("2"
                                                    (rewrite
                                                     "subs_ext_pi")
                                                    (("2"
                                                      (lemma "ext_ac")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "f"
                                                         "p(t1)"
                                                         "subs(sigma)(V(t1))")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (replace
                                                             -5
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (expand
                                                               "is_ac_sym?"
                                                               -1
                                                               2)
                                                              (("2"
                                                                (expand
                                                                 "is_ac_sym?"
                                                                 -1)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (inst
                                                                     -10
                                                                     "subs(sigma)(V(t1))")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (prop)
                                                                        (("1"
                                                                          (replace
                                                                           -3
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (replace
                                                                             -7
                                                                             1)
                                                                            (("1"
                                                                              (rewrite
                                                                               "ext_num_arg")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (rewrite
                                                                           "subterm_reflexive")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand ("member" "ext") -2)
                          (("2" (skolem -2 "t2")
                            (("2" (flatten)
                              (("2"
                                (name-replace "f" "ac_sym(ti_sigma)")
                                (("2"
                                  (reveal -1)
                                  (("2"
                                    (lemma "ext_ac")
                                    (("2"
                                      (inst -1 "f" "p(t1)" "t2")
                                      (("2"
                                        (expand "is_ac_sym?" -1 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -5 1 :dir rl)
                                            (("2"
                                              (rewrite "ext_num_arg")
                                              (("2"
                                                (expand
                                                 "is_ac_sym?"
                                                 -1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (rewrite
                                                     "subterm_fin_set")
                                                    (("2"
                                                      (skolem -5 "t2S")
                                                      (("2"
                                                        (prop)
                                                        (("2"
                                                          (expand
                                                           "well_formed?"
                                                           -11)
                                                          (("2"
                                                            (expand
                                                             ("member"
                                                              "image")
                                                             -5)
                                                            (("2"
                                                              (expand
                                                               "img"
                                                               -5)
                                                              (("2"
                                                                (skolem
                                                                 -5
                                                                 "Y")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (inst
                                                                     -12
                                                                     "Y")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst
                                                                           -12
                                                                           "t2")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (subterms_subs2 formula-decl nil nominal_AC_substitution nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ext const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_term_properties nil)
    (subterm_fin_set formula-decl nil nominal_AC_term_properties nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (subs_ac3 formula-decl nil nominal_AC_substitution nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (subs_num_arg_ge1 formula-decl nil nominal_AC_substitution nil) nil
    (ext_ac formula-decl nil nominal_AC_term_properties nil)
    (subterm_reflexive formula-decl nil nominal_AC_term_properties nil)
    (ext_num_arg formula-decl nil nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (subs_pair2 formula-decl nil nominal_AC_substitution nil)
    (nominal_AC_term_times_eta formula-decl nil nominal_AC_term_adt nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (act def-decl "atom" atoms nil)
    (append def-decl "list[T]" list_props nil) nil
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (singleton const-decl "(singleton?)" sets nil)
    (subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil) nil
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil) nil nil
    (union const-decl "set" sets nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (well_formed_num_arg 0
  (well_formed_num_arg-1 nil 3850482223
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skolem 1 "sig")
          (("" (prop)
            (("" (lemma "nominal_AC_term_opt")
              (("" (inst?)
                (("" (prop)
                  (("1" (expand "num_arg" 1 2)
                    (("1" (assert)
                      (("1" (replace -2)
                        (("1" (rewrite "subs_const")
                          (("1" (expand "num_arg" 1)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replace -2 1)
                    (("2" (expand "num_arg" 1 2)
                      (("2" (expand "num_arg" 1)
                        (("2" (expand "well_formed?" -4)
                          (("2" (inst -4 "V(t)")
                            (("2" (expand "subs" -4 1)
                              (("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (prop)
                                      (("2"
                                        (rewrite "subs_ext_pi")
                                        (("2"
                                          (hide -4)
                                          (("2"
                                            (expand "ext" -1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (replace -1)
                    (("3" (expand "num_arg" 1 2)
                      (("3" (rewrite "subs_unit")
                        (("3" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("4" (replace -2 1)
                    (("4" (expand "num_arg" 1 2)
                      (("4" (rewrite "subs_pair")
                        (("4" (expand "num_arg" 1 1)
                          (("4" (inst-cp -3 "term1(t)")
                            (("4" (prop)
                              (("1"
                                (inst -1 "sig")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst -4 "term2(t)")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (inst -1 "sig")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (replace -2)
                    (("5" (rewrite "subs_app")
                      (("5" (expand "num_arg") (("5" (propax) nil nil))
                        nil))
                      nil))
                    nil)
                   ("6" (replace -2 1)
                    (("6" (expand "num_arg" 1 2)
                      (("6" (rewrite "subs_ac")
                        (("6" (expand "num_arg" 1)
                          (("6" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("7" (replace -2)
                    (("7" (rewrite "subs_abs") (("7" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nominal_AC_term_opt formula-decl nil nominal_AC_term_properties nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (a adt-accessor-decl "[(atom?) -> atom]" nominal_AC_term_adt nil)
    (atom? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_abs formula-decl nil nominal_AC_substitution nil) nil nil
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) nil
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (alm_well_formed_subs 0
  (alm_well_formed_subs-3 nil 3849968294
   ("" (expand "alm_well_formed?" 1)
    (("" (skeep)
      (("" (prop)
        (("1" (lemma "subs_pair2")
          (("1" (inst?)
            (("1" (assert)
              (("1" (hide -4)
                (("1" (expand "well_formed?" -3)
                  (("1" (inst -3 "V(t)")
                    (("1" (flatten)
                      (("1" (hide -3)
                        (("1" (expand "subs" 1)
                          (("1" (lemma "nominal_AC_term_times_eta")
                            (("1" (inst -1 "t")
                              (("1"
                                (replace -1 -3 :dir rl)
                                (("1"
                                  (rewrite "subs_ext_pi")
                                  (("1"
                                    (expand "subs" -3)
                                    (("1"
                                      (expand "ext" -3)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skolem 1 "t1")
          (("2" (flatten)
            (("2" (name-replace "f" "ac_sym(t1)")
              (("2" (reveal -1)
                (("2" (lemma "subterms_subs2")
                  (("2" (inst?)
                    (("2" (assert)
                      (("2" (skolem -1 "ts")
                        (("2" (flatten)
                          (("2" (prop)
                            (("1" (lemma "subs_ac3")
                              (("1"
                                (inst -1 "f" "sigma" "ts")
                                (("1"
                                  (expand "is_ac_sym?" -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (inst -9 "ts")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -2 :dir rl)
                                            (("1"
                                              (replace -3 2)
                                              (("1"
                                                (lemma
                                                 "subs_num_arg_ge1")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "f"
                                                   "sigma"
                                                   "ts")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "well_formed?" -7)
                                        (("2"
                                          (hide -8)
                                          (("2"
                                            (inst -7 "V(ts)")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (lemma
                                                 "nominal_AC_term_times_eta")
                                                (("2"
                                                  (inst -1 "ts")
                                                  (("2"
                                                    (replace
                                                     -1
                                                     -3
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (rewrite
                                                       "subs_ext_pi")
                                                      (("2"
                                                        (lemma
                                                         "ext_ac")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "f"
                                                           "p(ts)"
                                                           "subs(sigma)(V(ts))")
                                                          (("2"
                                                            (expand
                                                             "is_ac_sym?")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst
                                                                   -10
                                                                   "subs(sigma)(V(ts))")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (replace
                                                                       -2
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (prop)
                                                                        (("1"
                                                                          (replace
                                                                           -6
                                                                           2)
                                                                          (("1"
                                                                            (rewrite
                                                                             "ext_num_arg")
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (rewrite
                                                                           "subterm_reflexive")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand ("member" "ext") -2)
                              (("2"
                                (skolem -2 "t1p")
                                (("2"
                                  (prop)
                                  (("2"
                                    (replace -3 2 :dir rl)
                                    (("2"
                                      (rewrite "ext_num_arg")
                                      (("2"
                                        (expand "well_formed?" -8)
                                        (("2"
                                          (hide -9)
                                          (("2"
                                            (rewrite "subterm_fin_set")
                                            (("2"
                                              (skolem -2 "t1pS")
                                              (("2"
                                                (prop)
                                                (("2"
                                                  (expand
                                                   ("member" "img")
                                                   -2)
                                                  (("2"
                                                    (skolem -2 "Y")
                                                    (("2"
                                                      (prop)
                                                      (("2"
                                                        (inst -10 "Y")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (lemma
                                                             "ext_ac")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "f"
                                                               "p(ts)"
                                                               "t1p")
                                                              (("2"
                                                                (expand
                                                                 "is_ac_sym?"
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst
                                                                       -12
                                                                       "t1p")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (subterms_subs2 formula-decl nil nominal_AC_substitution nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ext const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_term_properties nil)
    (member const-decl "bool" sets nil)
    (subterm_fin_set formula-decl nil nominal_AC_term_properties nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (subs_ac3 formula-decl nil nominal_AC_substitution nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (subs_num_arg_ge1 formula-decl nil nominal_AC_substitution nil)
    (string type-eq-decl nil strings nil)
    (subterm_reflexive formula-decl nil nominal_AC_term_properties nil)
    (ext_num_arg formula-decl nil nominal_AC_term_properties nil)
    (ext_ac formula-decl nil nominal_AC_term_properties nil) nil
    (subs_pair2 formula-decl nil nominal_AC_substitution nil) nil
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (act def-decl "atom" atoms nil)
    (append def-decl "list[T]" list_props nil)
    (nominal_AC_term_times_eta formula-decl nil nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil) nil)
   nil)
  (alm_well_formed_subs-2 nil 3849968045
   ("" (skeep)
    (("" (expand "well_formed?" 1)
      (("" (prop)
        (("1" (lemma "subs_pair2")
          (("1" (inst?)
            (("1" (assert)
              (("1" (prop)
                (("1" (grind) nil)
                 ("2" (lemma "nominal_AC_term_variable_eta")
                  (("2" (inst?)
                    (("2" (expand "well_formed?" -4)
                      (("2" (inst -4 "V(t)")
                        (("2" (assert)
                          (("2" (grind) nil)))))))))))))))))))
         ("2" (skolem 1 "ti_sigma")
          (("2" (prop)
            (("2" (lemma "subterms_subs")
              (("2" (inst?)
                (("2" (expand "subset?" -1)
                  (("2" (inst -1 "ti_sigma")
                    (("2" (assert)
                      (("2" (expand ("member" "union") -1)
                        (("2" (prop)
                          (("1" (expand "image" -1)
                            (("1" (expand "image" -1)
                              (("1"
                                (expand "member" -1)
                                (("1"
                                  (skolem -1 "ti")
                                  (("1"
                                    (typepred "ti")
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (hide -3)
                                        (("1"
                                          (lemma "subs_ac2")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (replace -3)
                                                  (("1"
                                                    (expand
                                                     "same_func?"
                                                     -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "ord"
                                                         -2)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (case
                                                                 "ac_app?(ti)")
                                                                (("1"
                                                                  (hide
                                                                   1
                                                                   2
                                                                   3
                                                                   4
                                                                   5)
                                                                  (("1"
                                                                    (expand
                                                                     "sym"
                                                                     -3)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -3)
                                                                          (("1"
                                                                            (lemma
                                                                             "subs_num_arg_ge1")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "ti")
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "well_formed?"
                                                                                       -9)
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -9
                                                                                           "ti")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "member"
                                                                                               4)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil)))))))))))))))))))))))))))))))
                                                                 ("2"
                                                                  (grind)
                                                                  nil)))))))))))))))))
                                                 ("2"
                                                  (expand
                                                   "well_formed?"
                                                   -5)
                                                  (("2"
                                                    (lemma
                                                     "nominal_AC_term_variable_eta")
                                                    (("2"
                                                      (inst -1 "ti")
                                                      (("2"
                                                        (inst
                                                         -6
                                                         "V(ti)")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (prop)
                                                            (("2"
                                                              (inst
                                                               -6
                                                               "ti_sigma")
                                                              (("2"
                                                                (prop)
                                                                (("2"
                                                                  (expand
                                                                   "subs"
                                                                   1)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (replace
                                                                       -4
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (rewrite
                                                                         "subterm_reflexive")
                                                                        nil)))))))))))))))))))))))))))))))))))))))))))))
                           ("2" (hide -2)
                            (("2" (rewrite "subterm_fin_set" -1)
                              (("2"
                                (skolem -1 "ti")
                                (("2"
                                  (prop)
                                  (("2"
                                    (expand "img" -1)
                                    (("2"
                                      (expand "member" -1)
                                      (("2"
                                        (expand "well_formed?" -4)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst -5 "X")
                                            (("2"
                                              (prop)
                                              (("2"
                                                (inst -5 "ti_sigma")
                                                (("2"
                                                  (assert)
                                                  nil))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (alm_well_formed_subs-1 nil 3849968006
   ("" (skeep) (("" (postpone) nil nil)) nil) nil shostak))
 (well_formed_basic_sub 0
  (well_formed_basic_sub-1 nil 3882720859
   ("" (skeep)
    (("" (expand "well_formed?")
      (("" (flatten)
        (("" (skolem 2 "Y")
          (("" (prop)
            (("1" (expand "subs" -1)
              (("1" (expand "subs" -1)
                (("1" (expand "subs" -1 2)
                  (("1" (expand "subs" -1)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (rewrite "ext_identity")
                          (("1" (use "ext_preserves_type")
                            (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem 1 "t1")
              (("2" (prop)
                (("2" (expand "subs" -1)
                  (("2" (expand "subs" -1)
                    (("2" (expand "subs" -1 2)
                      (("2" (expand "subs" -1)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("1" (rewrite "ext_identity")
                              (("1"
                                (rewrite "ext_subterms" :dir rl)
                                (("1"
                                  (expand "ext" -2)
                                  (("1"
                                    (expand "member" -2 1)
                                    (("1"
                                      (skolem -2 "t2")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (inst -5 "t2")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case "ac_app?(t2)")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (replace
                                                   -5
                                                   1
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (case
                                                     "ac_sym(t2) = ac_sym(ext(pi)(t2))")
                                                    (("1"
                                                      (replace
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (rewrite
                                                         "ext_num_arg")
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (use "ext_ac")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -5)
                                                (("2"
                                                  (replace -3 :dir rl)
                                                  (("2"
                                                    (use
                                                     "ext_preserves_type")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind -1) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil nil nil (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (ext const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_term_properties nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ext_ac formula-decl nil nominal_AC_term_properties nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (ext_num_arg formula-decl nil nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ext_subterms formula-decl nil nominal_AC_term_properties nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (ext_identity formula-decl nil nominal_AC_term_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (ord const-decl "upto(6)" nominal_AC_term_adt nil)
    (member const-decl "bool" sets nil)
    (ext_preserves_type formula-decl nil nominal_AC_term_properties nil) nil nil)
   shostak))
 (equal_sub_equiv 0
  (equal_sub_equiv-2 nil 3881394289
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 ("t"))
      (("" (prop)
        (("" (skeep)
          (("" (lemma "nominal_AC_term_opt")
            (("" (inst?)
              (("" (prop)
                (("1" (replace -2)
                  (("1" (rewrite "subs_const")
                    (("1" (rewrite "subs_const")
                      (("1" (expand "equal?" 1)
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replace -2)
                  (("2" (expand "equal?" -4)
                    (("2" (inst -4 "V(t)")
                      (("2" (expand "subs" -4)
                        (("2" (rewrite "subs_ext_pi" 1)
                          (("2" (rewrite "subs_ext_pi" 1)
                            (("2" (expand "subs" 1)
                              (("2"
                                (rewrite "equal?_ext_preservation")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (replace -1)
                  (("3" (rewrite "subs_unit")
                    (("3" (rewrite "subs_unit")
                      (("3" (expand "equal?" 1)
                        (("3" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("4" (replace -2)
                  (("4" (rewrite "subs_pair")
                    (("4" (rewrite "subs_pair")
                      (("4" (expand "equal?" 1)
                        (("4" (prop)
                          (("1" (inst -3 "term1(t)")
                            (("1" (prop)
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (inst -3 "term2(t)")
                            (("2" (prop)
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (replace -2)
                  (("5" (rewrite "subs_app")
                    (("5" (rewrite "subs_app")
                      (("5" (expand "equal?" 1)
                        (("5" (inst -3 "arg(t)")
                          (("5" (split -3)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (use "equal?_num_arg2")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (lemma "perm_args_ac")
                  (("6" (inst?)
                    (("6" (inst -1 "ac_sym(t)")
                      (("6" (name-replace "f" "ac_sym(t)")
                        (("6" (assert)
                          (("6" (hide 2)
                            (("6" (prop)
                              (("1"
                                (lemma "subs_get_args1")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (inst -1 "1")
                                    (("1"
                                      (case "num_arg(f, t) = 1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (lemma "subs_get_args1")
                                            (("1"
                                              (inst
                                               -1
                                               "f"
                                               "1"
                                               "sigma"
                                               "t")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (hide -1 -3)
                                                    (("1"
                                                      (inst
                                                       -4
                                                       "select(f, t)(1)")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "ac_perm_args2")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (lemma
                                                             "ac_select_size")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "is_ac_sym?"
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (replace
                                                                       -3)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1)
                                        (("2"
                                          (lemma
                                           "subs_perm_get_args_ge1")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (inst -1 "G" "1")
                                              (("2"
                                                (case
                                                 "num_arg(f, t) > 1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "perm?(G)(get_args(f)(subs(sigma)(t)), append(get_args(f)(subs(sigma)(select(f, t)(1))),
                                                                               get_args(f)(subs(sigma)(delete(f, t)(1)))))")
                                                    (("1"
                                                      (hide
                                                       -6
                                                       -4
                                                       -5
                                                       -7
                                                       1)
                                                      (("1"
                                                        (lemma
                                                         "perm?_sym")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "G"
                                                           "get_args(f)(subs(sigma)(t))"
                                                           "append(get_args(f)(subs(sigma)(select(f, t)(1))),
                                                                   get_args(f)(subs(sigma)(delete(f, t)(1))))")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (lemma
                                                                 "perm?_trans")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "G"
                                                                   "get_args(f)(subs(delta)(t))"
                                                                   "append(get_args(f)(subs(sigma)(select(f, t)(1))),
                                                                   get_args(f)(subs(sigma)(delete(f, t)(1))))"
                                                                   "get_args(f)(subs(sigma)(t))")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       2)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (lemma
                                                                           "perm?_trans")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "G"
                                                                             "get_args(f)(subs(delta)(t))"
                                                                             "append(get_args(f)(subs(delta)(select(f, t)(1))),
                                                                   get_args(f)(subs(delta)(delete(f, t)(1))))"
                                                                             "append(get_args(f)(subs(sigma)(select(f, t)(1))),
                                                                   get_args(f)(subs(sigma)(delete(f, t)(1))))")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 -2
                                                                                 2)
                                                                                (("1"
                                                                                  (use
                                                                                   "perm?_append")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide
                                                                                       2)
                                                                                      (("1"
                                                                                        (reveal
                                                                                         -9
                                                                                         -10)
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "select(f, t)(1)")
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "ac_perm_args2")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "ac_select_size")
                                                                                                (("2"
                                                                                                  (reveal
                                                                                                   -8)
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "is_ac_sym?"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "delete(f, t)(1)")
                                                                                            (("2"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "ac_perm_args2")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "ac_delete_size")
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 3 -2 -5)
                                                      (("2"
                                                        (lemma
                                                         "subs_perm_get_args_ge1")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1)
                                                  (("2"
                                                    (lemma
                                                     "num_arg_ge1")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -2)
                                (("2"
                                  (rewrite "subs_ac")
                                  (("2"
                                    (rewrite "subs_ac")
                                    (("2"
                                      (expand "are_ac?" 1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (replace -2 1)
                  (("7" (rewrite "subs_abs")
                    (("7" (rewrite "subs_abs")
                      (("7" (expand "equal?" 1)
                        (("7" (inst -3 "body(t)")
                          (("7" (prop)
                            (("1" (inst?) (("1" (assert) nil nil)) nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_abs formula-decl nil nominal_AC_substitution nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (perm_args_ac formula-decl nil nominal_AC_equality nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (string type-eq-decl nil strings nil) nil
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (ac_select_size formula-decl nil nominal_AC_term_properties nil)
    (ac_perm_args2 formula-decl nil nominal_AC_equality nil)
    (subs_perm_get_args_ge1 formula-decl nil nominal_AC_substitution nil)
    (num_arg_ge1 formula-decl nil nominal_AC_term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (perm?_append formula-decl nil nominal_AC_equality nil)
    (ac_delete_size formula-decl nil nominal_AC_term_properties nil)
    (perm?_trans formula-decl nil nominal_AC_equality nil)
    (perm?_sym formula-decl nil nominal_AC_equality nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (append def-decl "list[T]" list_props nil) nil
    (perm? def-decl "bool" nominal_AC_equality nil)
    (args type-eq-decl nil nominal_AC_term_properties nil) nil
    (> const-decl "bool" reals nil)
    (subs_get_args1 formula-decl nil nominal_AC_substitution nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (are_ac? const-decl "bool" nominal_AC_term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (equal?_num_arg2 formula-decl nil nominal_AC_equality nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (equal?_ext_preservation formula-decl nil nominal_AC_equality nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (atom? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (a adt-accessor-decl "[(atom?) -> atom]" nominal_AC_term_adt nil)
    (nominal_AC_term_opt formula-decl nil nominal_AC_term_properties nil) nil nil nil
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) nil
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (equal_sub_equiv-1 nil 3842108637
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 ("t"))
      (("" (prop)
        (("" (skeep)
          (("" (lemma "nominal_AC_term_opt")
            (("" (inst?)
              (("" (prop)
                (("1" (replace -2)
                  (("1" (rewrite "subs_const")
                    (("1" (rewrite "subs_const")
                      (("1" (expand "equal?" 1)
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replace -2)
                  (("2" (expand "equal?" -4)
                    (("2" (inst -4 "V(t)")
                      (("2" (expand "subs" -4) (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (replace -1)
                  (("3" (rewrite "subs_unit")
                    (("3" (rewrite "subs_unit")
                      (("3" (expand "equal?" 1)
                        (("3" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("4" (replace -2)
                  (("4" (rewrite "subs_pair")
                    (("4" (rewrite "subs_pair")
                      (("4" (expand "equal?" 1)
                        (("4" (prop)
                          (("1" (inst -3 "term1(t)")
                            (("1" (prop)
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (inst -3 "term2(t)")
                            (("2" (prop)
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (replace -2)
                  (("5" (rewrite "subs_app")
                    (("5" (rewrite "subs_app")
                      (("5" (expand "equal?" 1)
                        (("5" (inst -3 "arg(t)")
                          (("5" (split -3)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (use "equal?_num_arg2")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (lemma "perm_args_ac")
                  (("6" (inst?)
                    (("6" (name-replace "f" "ac_sym(t)")
                      (("6" (inst -1 "f")
                        (("6" (assert)
                          (("6" (hide 2)
                            (("6" (prop)
                              (("1"
                                (lemma "subs_get_args1")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (inst -1 "1")
                                    (("1"
                                      (case "num_arg(f, t) = 1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (lemma "subs_get_args1")
                                            (("1"
                                              (inst
                                               -1
                                               "f"
                                               "1"
                                               "sigma"
                                               "t")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (hide -1 -3)
                                                    (("1"
                                                      (inst
                                                       -4
                                                       "select(f, t)(1)")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "ac_perm_args2")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (lemma
                                                             "ac_select_size")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "is_ac_sym?"
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (replace
                                                                       -3)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1)
                                        (("2"
                                          (lemma
                                           "subs_perm_get_args_ge1")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (inst -1 "1")
                                              (("2"
                                                (case
                                                 "num_arg(f, t) > 1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "perm?(get_args(f)(subs(sigma)(t)), append(get_args(f)(subs(sigma)(select(f, t)(1))),
                                                 get_args(f)(subs(sigma)(delete(f, t)(1)))))")
                                                    (("1"
                                                      (hide
                                                       -6
                                                       -4
                                                       -5
                                                       -7
                                                       1)
                                                      (("1"
                                                        (lemma
                                                         "perm?_sym")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "get_args(f)(subs(sigma)(t))"
                                                           "append(get_args(f)(subs(sigma)(select(f, t)(1))),
                                           get_args(f)(subs(sigma)(delete(f, t)(1))))")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (lemma
                                                                 "perm?_trans")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "get_args(f)(subs(delta)(t))"
                                                                   "append(get_args(f)(subs(sigma)(select(f, t)(1))),
                                           get_args(f)(subs(sigma)(delete(f, t)(1))))"
                                                                   "get_args(f)(subs(sigma)(t))")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       2)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (lemma
                                                                           "perm?_trans")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "get_args(f)(subs(delta)(t))"
                                                                             "append(get_args(f)(subs(delta)(select(f, t)(1))),
                                           get_args(f)(subs(delta)(delete(f, t)(1))))"
                                                                             "append(get_args(f)(subs(sigma)(select(f, t)(1))),
                                           get_args(f)(subs(sigma)(delete(f, t)(1))))")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 -2
                                                                                 2)
                                                                                (("1"
                                                                                  (use
                                                                                   "perm?_append")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide
                                                                                       2)
                                                                                      (("1"
                                                                                        (reveal
                                                                                         -9
                                                                                         -10)
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "select(f, t)(1)")
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "ac_perm_args2")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "ac_select_size")
                                                                                                (("2"
                                                                                                  (reveal
                                                                                                   -8)
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "is_ac_sym?"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "delete(f, t)(1)")
                                                                                            (("2"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "ac_perm_args2")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "ac_delete_size")
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 3 -2 -5)
                                                      (("2"
                                                        (lemma
                                                         "subs_perm_get_args_ge1")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1)
                                                  (("2"
                                                    (lemma
                                                     "num_arg_ge1")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -2)
                                (("2"
                                  (rewrite "subs_ac")
                                  (("2"
                                    (rewrite "subs_ac")
                                    (("2"
                                      (expand "are_ac?" 1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((perm_args_ac formula-decl nil nominal_AC_equality nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (ac_select_size formula-decl nil nominal_AC_term_properties nil)
    (ac_perm_args2 formula-decl nil nominal_AC_equality nil)
    (subs_perm_get_args_ge1 formula-decl nil nominal_AC_substitution nil)
    (num_arg_ge1 formula-decl nil nominal_AC_term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (perm?_append formula-decl nil nominal_AC_equality nil)
    (ac_delete_size formula-decl nil nominal_AC_term_properties nil)
    (perm?_trans formula-decl nil nominal_AC_equality nil)
    (perm?_sym formula-decl nil nominal_AC_equality nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (append def-decl "list[T]" list_props nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (> const-decl "bool" reals nil)
    (subs_get_args1 formula-decl nil nominal_AC_substitution nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (are_ac? const-decl "bool" nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil)
    (equal?_num_arg2 formula-decl nil nominal_AC_equality nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (a adt-accessor-decl "[(atom?) -> atom]" nominal_AC_term_adt nil)
    (nominal_AC_term_opt formula-decl nil nominal_AC_term_properties nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (constant type-eq-decl nil nominal_AC_term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil))
 (equal_sub_equiv_alt 0
  (equal_sub_equiv_alt-2 nil 3881395075
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 ("t"))
      (("" (prop)
        (("" (skeep)
          (("" (lemma "nominal_AC_term_opt")
            (("" (inst?)
              (("" (prop)
                (("1" (replace -2)
                  (("1" (rewrite "subs_const")
                    (("1" (rewrite "subs_const")
                      (("1" (expand "equal?" 1)
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replace -2)
                  (("2" (expand "equal?" -4)
                    (("2" (inst -4 "V(t)")
                      (("2" (expand "subs" -4)
                        (("2" (expand "vars" -5)
                          (("2" (expand "subset?" -5)
                            (("2" (inst -5 "V(t)")
                              (("2"
                                (expand "singleton" -5)
                                (("2"
                                  (expand "member" -5 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (rewrite "subs_ext_pi" 1)
                                      (("2"
                                        (rewrite "subs_ext_pi" 1)
                                        (("2"
                                          (rewrite
                                           "equal?_ext_preservation")
                                          (("2"
                                            (expand "subs" 1)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (replace -1)
                  (("3" (rewrite "subs_unit")
                    (("3" (rewrite "subs_unit")
                      (("3" (expand "equal?" 1)
                        (("3" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("4" (replace -2)
                  (("4" (rewrite "subs_pair")
                    (("4" (rewrite "subs_pair")
                      (("4" (expand "equal?" 1)
                        (("4" (prop)
                          (("1" (inst -3 "term1(t)")
                            (("1" (prop)
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (inst -3 "term2(t)")
                            (("2" (prop)
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (replace -2)
                  (("5" (rewrite "subs_app")
                    (("5" (rewrite "subs_app")
                      (("5" (expand "equal?" 1)
                        (("5" (inst -3 "arg(t)")
                          (("5" (split -3)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (split -1)
                                  (("1"
                                    (use "equal?_num_arg2")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (lemma "perm_args_ac")
                  (("6" (inst?)
                    (("6" (name-replace "f" "ac_sym(t)")
                      (("6" (inst -1 "f")
                        (("6" (assert)
                          (("6" (hide 2)
                            (("6" (prop)
                              (("1"
                                (lemma "subs_get_args1")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (inst -1 "1")
                                    (("1"
                                      (case "num_arg(f, t) = 1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (lemma "subs_get_args1")
                                            (("1"
                                              (inst
                                               -1
                                               "f"
                                               "1"
                                               "sigma"
                                               "t")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (hide -1 -3)
                                                    (("1"
                                                      (inst
                                                       -4
                                                       "select(f, t)(1)")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (lemma
                                                                 "ac_perm_args2")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (lemma
                                                                   "vars_get_args")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "f"
                                                                     "t")
                                                                    (("2"
                                                                      (replace
                                                                       -1
                                                                       -6
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (expand
                                                                         "subset?")
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (inst
                                                                             -7
                                                                             "x")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "vars_args")
                                                                                (("2"
                                                                                  (inst
                                                                                   2
                                                                                   "select(f, t)(1)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (use
                                                                                       "get_args_mem_select1")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (lemma
                                                             "ac_select_size")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "is_ac_sym?"
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (replace
                                                                       -3)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1)
                                        (("2"
                                          (lemma
                                           "subs_perm_get_args_ge1")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (inst -1 "G" "1")
                                              (("2"
                                                (case
                                                 "num_arg(f, t) > 1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "perm?(G)(get_args(f)(subs(sigma)(t)), append(get_args(f)(subs(sigma)(select(f, t)(1))),
                                                                                              get_args(f)(subs(sigma)(delete(f, t)(1)))))")
                                                    (("1"
                                                      (hide
                                                       -6
                                                       -4
                                                       -5
                                                       -7
                                                       1)
                                                      (("1"
                                                        (lemma
                                                         "perm?_sym")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "G"
                                                           "get_args(f)(subs(sigma)(t))"
                                                           "append(get_args(f)(subs(sigma)(select(f, t)(1))),
                                                                               get_args(f)(subs(sigma)(delete(f, t)(1))))")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (lemma
                                                                 "perm?_trans")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "G"
                                                                   "get_args(f)(subs(delta)(t))"
                                                                   "append(get_args(f)(subs(sigma)(select(f, t)(1))),
                                                                               get_args(f)(subs(sigma)(delete(f, t)(1))))"
                                                                   "get_args(f)(subs(sigma)(t))")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       2)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (lemma
                                                                           "perm?_trans")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "G"
                                                                             "get_args(f)(subs(delta)(t))"
                                                                             "append(get_args(f)(subs(delta)(select(f, t)(1))),
                                                                               get_args(f)(subs(delta)(delete(f, t)(1))))"
                                                                             "append(get_args(f)(subs(sigma)(select(f, t)(1))),
                                                                               get_args(f)(subs(sigma)(delete(f, t)(1))))")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 -2
                                                                                 2)
                                                                                (("1"
                                                                                  (use
                                                                                   "perm?_append")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide
                                                                                       2)
                                                                                      (("1"
                                                                                        (reveal
                                                                                         -9
                                                                                         -10)
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "select(f, t)(1)")
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "ac_perm_args2")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "vars_get_args")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "f"
                                                                                                           "t")
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             -4
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "subset?")
                                                                                                              (("2"
                                                                                                                (skeep)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -5
                                                                                                                   "x")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "vars_args")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         2
                                                                                                                         "select(f, t)(1)")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (use
                                                                                                                             "get_args_mem_select1")
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "ac_select_size")
                                                                                                (("2"
                                                                                                  (reveal
                                                                                                   -8)
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "is_ac_sym?"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "delete(f, t)(1)")
                                                                                            (("2"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "ac_perm_args2")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "subset?")
                                                                                                          (("2"
                                                                                                            (skeep)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -3
                                                                                                               "x")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "vars_get_args")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "f"
                                                                                                                       "t")
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -1
                                                                                                                         :dir
                                                                                                                         rl)
                                                                                                                        (("2"
                                                                                                                          (hide
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "vars_get_args")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "f"
                                                                                                                               "delete(f, t)(1)")
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -1
                                                                                                                                 -2
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("2"
                                                                                                                                  (rewrite
                                                                                                                                   "vars_args")
                                                                                                                                  (("2"
                                                                                                                                    (skolem
                                                                                                                                     -2
                                                                                                                                     "ti")
                                                                                                                                    (("2"
                                                                                                                                      (prop)
                                                                                                                                      (("2"
                                                                                                                                        (rewrite
                                                                                                                                         "vars_args")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           1
                                                                                                                                           "ti")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (rewrite
                                                                                                                                               "member_nth2"
                                                                                                                                               -2)
                                                                                                                                              (("2"
                                                                                                                                                (skolem
                                                                                                                                                 -2
                                                                                                                                                 "i")
                                                                                                                                                (("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "get_args_nth")
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -1
                                                                                                                                                     "f"
                                                                                                                                                     "i+1"
                                                                                                                                                     "delete(f, t)(1)")
                                                                                                                                                    (("2"
                                                                                                                                                      (case
                                                                                                                                                       "nice_ind?(i + 1, num_arg(f, delete(f, t)(1)))")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (lemma
                                                                                                                                                           "le_select_delete")
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -3)
                                                                                                                                                            (("1"
                                                                                                                                                              (hide
                                                                                                                                                               -3)
                                                                                                                                                              (("1"
                                                                                                                                                                (inst?)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (prop)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replace
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (rewrite
                                                                                                                                                                         "member_nth2"
                                                                                                                                                                         1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (inst
                                                                                                                                                                           1
                                                                                                                                                                           "1+i")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (lemma
                                                                                                                                                                             "get_args_nth")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (inst
                                                                                                                                                                               -1
                                                                                                                                                                               "f"
                                                                                                                                                                               "2+i"
                                                                                                                                                                               "t")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "nice_ind?")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (use
                                                                                                                                                                                     "num_arg_delete_ge1")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (typepred
                                                                                                                                                                             "i")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (rewrite
                                                                                                                                                                               "get_args_len")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (rewrite
                                                                                                                                                                                 "get_args_len")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (use
                                                                                                                                                                                   "num_arg_delete_ge1")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "nice_ind?"
                                                                                                                                                                       1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (prop)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (grind)
                                                                                                                                                                          nil
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "nice_ind?"
                                                                                                                                                                           1)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "nice_ind?"
                                                                                                                                                                             1
                                                                                                                                                                             2)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (use
                                                                                                                                                                               "num_arg_delete_ge1")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (hide
                                                                                                                                                         -1)
                                                                                                                                                        (("2"
                                                                                                                                                          (typepred
                                                                                                                                                           "i")
                                                                                                                                                          (("2"
                                                                                                                                                            (rewrite
                                                                                                                                                             "get_args_len")
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "nice_ind?"
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "ac_delete_size")
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 3 -2 -5)
                                                      (("2"
                                                        (lemma
                                                         "subs_perm_get_args_ge1")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1)
                                                  (("2"
                                                    (lemma
                                                     "num_arg_ge1")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -2)
                                (("2"
                                  (rewrite "subs_ac")
                                  (("2"
                                    (rewrite "subs_ac")
                                    (("2"
                                      (expand "are_ac?" 1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (replace -2 1)
                  (("7" (rewrite "subs_abs" 1)
                    (("7" (rewrite "subs_abs" 1)
                      (("7" (expand "equal?" 1)
                        (("7" (inst -3 "body(t)")
                          (("7" (prop)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (replace -2 -4)
                                  (("1"
                                    (expand "vars" -4)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_abs formula-decl nil nominal_AC_substitution nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (perm_args_ac formula-decl nil nominal_AC_equality nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (ac_select_size formula-decl nil nominal_AC_term_properties nil)
    (ac_perm_args2 formula-decl nil nominal_AC_equality nil)
    (vars_get_args formula-decl nil nominal_AC_term_properties nil)
    (get_args_mem_select1 formula-decl nil nominal_AC_term_properties nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil) nil
    (args type-eq-decl nil nominal_AC_term_properties nil) nil
    (subs_perm_get_args_ge1 formula-decl nil nominal_AC_substitution nil)
    (num_arg_ge1 formula-decl nil nominal_AC_term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (perm?_append formula-decl nil nominal_AC_equality nil)
    (member_nth2 formula-decl nil list_aux_equational_reasoning nil)
    (get_args_nth formula-decl nil nominal_AC_term_properties nil)
    (nice_ind? const-decl "bool" nominal_AC_term_properties nil)
    (le_select_delete formula-decl nil nominal_AC_term_properties nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nice_ind? def-decl "bool" nominal_AC_term_properties nil)
    (from_min2max def-decl "list[nat]" list_aux_equational_reasoning nil) nil nil
    (emptyset const-decl "set" sets nil)
    (member def-decl "bool" list_props nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (list2set def-decl "set[T]" list2set nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    nil nil nil
    (num_arg_delete_ge1 formula-decl nil nominal_AC_term_properties nil)
    (get_args_len formula-decl nil nominal_AC_term_properties nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (ac_delete_size formula-decl nil nominal_AC_term_properties nil)
    (perm?_trans formula-decl nil nominal_AC_equality nil)
    (perm?_sym formula-decl nil nominal_AC_equality nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (append def-decl "list[T]" list_props nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (> const-decl "bool" reals nil)
    (subs_get_args1 formula-decl nil nominal_AC_substitution nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (are_ac? const-decl "bool" nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil)
    (equal?_num_arg2 formula-decl nil nominal_AC_equality nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (member const-decl "bool" sets nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (equal?_ext_preservation formula-decl nil nominal_AC_equality nil)
    (singleton const-decl "(singleton?)" sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (atom? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (a adt-accessor-decl "[(atom?) -> atom]" nominal_AC_term_adt nil)
    (nominal_AC_term_opt formula-decl nil nominal_AC_term_properties nil) nil nil nil
    (subset? const-decl "bool" sets nil) nil
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) nil
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (equal_sub_equiv_alt-1 nil 3851184149
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 ("t"))
      (("" (prop)
        (("" (skeep)
          (("" (lemma "nominal_AC_term_opt")
            (("" (inst?)
              (("" (prop)
                (("1" (replace -2)
                  (("1" (rewrite "subs_const")
                    (("1" (rewrite "subs_const")
                      (("1" (expand "equal?" 1)
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replace -2)
                  (("2" (expand "equal?" -4)
                    (("2" (inst -4 "V(t)")
                      (("2" (expand "subs" -4)
                        (("2" (assert) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (replace -1)
                  (("3" (rewrite "subs_unit")
                    (("3" (rewrite "subs_unit")
                      (("3" (expand "equal?" 1)
                        (("3" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("4" (replace -2)
                  (("4" (rewrite "subs_pair")
                    (("4" (rewrite "subs_pair")
                      (("4" (expand "equal?" 1)
                        (("4" (prop)
                          (("1" (inst -3 "term1(t)")
                            (("1" (prop)
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (inst -3 "term2(t)")
                            (("2" (prop)
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (replace -2)
                  (("5" (rewrite "subs_app")
                    (("5" (rewrite "subs_app")
                      (("5" (expand "equal?" 1)
                        (("5" (inst -3 "arg(t)")
                          (("5" (split -3)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (split -1)
                                  (("1"
                                    (use "equal?_num_arg2")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (lemma "perm_args_ac")
                  (("6" (inst?)
                    (("6" (name-replace "f" "ac_sym(t)")
                      (("6" (inst -1 "f")
                        (("6" (assert)
                          (("6" (hide 2)
                            (("6" (prop)
                              (("1"
                                (lemma "subs_get_args1")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (inst -1 "1")
                                    (("1"
                                      (case "num_arg(f, t) = 1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (lemma "subs_get_args1")
                                            (("1"
                                              (inst
                                               -1
                                               "f"
                                               "1"
                                               "sigma"
                                               "t")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (hide -1 -3)
                                                    (("1"
                                                      (inst
                                                       -4
                                                       "select(f, t)(1)")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (lemma
                                                                 "ac_perm_args2")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (lemma
                                                                   "vars_get_args")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "f"
                                                                     "t")
                                                                    (("2"
                                                                      (replace
                                                                       -1
                                                                       -6
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (expand
                                                                         "subset?")
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (inst
                                                                             -7
                                                                             "x")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "vars_args")
                                                                                (("2"
                                                                                  (inst
                                                                                   2
                                                                                   "select(f, t)(1)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (use
                                                                                       "get_args_mem_select1")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (lemma
                                                             "ac_select_size")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "is_ac_sym?"
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (replace
                                                                       -3)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1)
                                        (("2"
                                          (lemma
                                           "subs_perm_get_args_ge1")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (inst -1 "1")
                                              (("2"
                                                (case
                                                 "num_arg(f, t) > 1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "perm?(get_args(f)(subs(sigma)(t)), append(get_args(f)(subs(sigma)(select(f, t)(1))),
                                                                get_args(f)(subs(sigma)(delete(f, t)(1)))))")
                                                    (("1"
                                                      (hide
                                                       -6
                                                       -4
                                                       -5
                                                       -7
                                                       1)
                                                      (("1"
                                                        (lemma
                                                         "perm?_sym")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "get_args(f)(subs(sigma)(t))"
                                                           "append(get_args(f)(subs(sigma)(select(f, t)(1))),
                                                       get_args(f)(subs(sigma)(delete(f, t)(1))))")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (lemma
                                                                 "perm?_trans")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "get_args(f)(subs(delta)(t))"
                                                                   "append(get_args(f)(subs(sigma)(select(f, t)(1))),
                                                       get_args(f)(subs(sigma)(delete(f, t)(1))))"
                                                                   "get_args(f)(subs(sigma)(t))")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       2)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (lemma
                                                                           "perm?_trans")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "get_args(f)(subs(delta)(t))"
                                                                             "append(get_args(f)(subs(delta)(select(f, t)(1))),
                                                       get_args(f)(subs(delta)(delete(f, t)(1))))"
                                                                             "append(get_args(f)(subs(sigma)(select(f, t)(1))),
                                                       get_args(f)(subs(sigma)(delete(f, t)(1))))")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 -2
                                                                                 2)
                                                                                (("1"
                                                                                  (use
                                                                                   "perm?_append")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide
                                                                                       2)
                                                                                      (("1"
                                                                                        (reveal
                                                                                         -9
                                                                                         -10)
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "select(f, t)(1)")
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "ac_perm_args2")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "vars_get_args")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "f"
                                                                                                           "t")
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             -4
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "subset?")
                                                                                                              (("2"
                                                                                                                (skeep)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -5
                                                                                                                   "x")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "vars_args")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         2
                                                                                                                         "select(f, t)(1)")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (use
                                                                                                                             "get_args_mem_select1")
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "ac_select_size")
                                                                                                (("2"
                                                                                                  (reveal
                                                                                                   -8)
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "is_ac_sym?"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "delete(f, t)(1)")
                                                                                            (("2"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "ac_perm_args2")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "subset?")
                                                                                                          (("2"
                                                                                                            (skeep)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -3
                                                                                                               "x")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "vars_get_args")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "f"
                                                                                                                       "t")
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -1
                                                                                                                         :dir
                                                                                                                         rl)
                                                                                                                        (("2"
                                                                                                                          (hide
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "vars_get_args")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "f"
                                                                                                                               "delete(f, t)(1)")
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -1
                                                                                                                                 -2
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("2"
                                                                                                                                  (rewrite
                                                                                                                                   "vars_args")
                                                                                                                                  (("2"
                                                                                                                                    (skolem
                                                                                                                                     -2
                                                                                                                                     "ti")
                                                                                                                                    (("2"
                                                                                                                                      (prop)
                                                                                                                                      (("2"
                                                                                                                                        (rewrite
                                                                                                                                         "vars_args")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           1
                                                                                                                                           "ti")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (rewrite
                                                                                                                                               "member_nth2"
                                                                                                                                               -2)
                                                                                                                                              (("2"
                                                                                                                                                (skolem
                                                                                                                                                 -2
                                                                                                                                                 "i")
                                                                                                                                                (("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "get_args_nth")
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -1
                                                                                                                                                     "f"
                                                                                                                                                     "i+1"
                                                                                                                                                     "delete(f, t)(1)")
                                                                                                                                                    (("2"
                                                                                                                                                      (case
                                                                                                                                                       "nice_ind?(i + 1, num_arg(f, delete(f, t)(1)))")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (lemma
                                                                                                                                                           "le_select_delete")
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -3)
                                                                                                                                                            (("1"
                                                                                                                                                              (hide
                                                                                                                                                               -3)
                                                                                                                                                              (("1"
                                                                                                                                                                (inst?)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (prop)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replace
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (rewrite
                                                                                                                                                                         "member_nth2"
                                                                                                                                                                         1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (inst
                                                                                                                                                                           1
                                                                                                                                                                           "1+i")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (lemma
                                                                                                                                                                             "get_args_nth")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (inst
                                                                                                                                                                               -1
                                                                                                                                                                               "f"
                                                                                                                                                                               "2+i"
                                                                                                                                                                               "t")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "nice_ind?")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (use
                                                                                                                                                                                     "num_arg_delete_ge1")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (typepred
                                                                                                                                                                             "i")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (rewrite
                                                                                                                                                                               "get_args_len")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (rewrite
                                                                                                                                                                                 "get_args_len")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (use
                                                                                                                                                                                   "num_arg_delete_ge1")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "nice_ind?"
                                                                                                                                                                       1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (prop)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (grind)
                                                                                                                                                                          nil
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "nice_ind?"
                                                                                                                                                                           1)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "nice_ind?"
                                                                                                                                                                             1
                                                                                                                                                                             2)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (use
                                                                                                                                                                               "num_arg_delete_ge1")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (hide
                                                                                                                                                         -1)
                                                                                                                                                        (("2"
                                                                                                                                                          (typepred
                                                                                                                                                           "i")
                                                                                                                                                          (("2"
                                                                                                                                                            (rewrite
                                                                                                                                                             "get_args_len")
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "nice_ind?"
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "ac_delete_size")
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 3 -2 -5)
                                                      (("2"
                                                        (lemma
                                                         "subs_perm_get_args_ge1")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1)
                                                  (("2"
                                                    (lemma
                                                     "num_arg_ge1")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -2)
                                (("2"
                                  (rewrite "subs_ac")
                                  (("2"
                                    (rewrite "subs_ac")
                                    (("2"
                                      (expand "are_ac?" 1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((perm_args_ac formula-decl nil nominal_AC_equality nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (ac_select_size formula-decl nil nominal_AC_term_properties nil)
    (ac_perm_args2 formula-decl nil nominal_AC_equality nil)
    (vars_get_args formula-decl nil nominal_AC_term_properties nil)
    (get_args_mem_select1 formula-decl nil nominal_AC_term_properties nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (subs_perm_get_args_ge1 formula-decl nil nominal_AC_substitution nil)
    (num_arg_ge1 formula-decl nil nominal_AC_term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (perm?_append formula-decl nil nominal_AC_equality nil)
    (member_nth2 formula-decl nil list_aux_equational_reasoning nil)
    (get_args_nth formula-decl nil nominal_AC_term_properties nil)
    (nice_ind? const-decl "bool" nominal_AC_term_properties nil)
    (le_select_delete formula-decl nil nominal_AC_term_properties nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nice_ind? def-decl "bool" nominal_AC_term_properties nil)
    (from_min2max def-decl "list[nat]" list_aux_equational_reasoning nil)
    (emptyset const-decl "set" sets nil)
    (member def-decl "bool" list_props nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (list2set def-decl "set[T]" list2set nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (num_arg_delete_ge1 formula-decl nil nominal_AC_term_properties nil)
    (get_args_len formula-decl nil nominal_AC_term_properties nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (ac_delete_size formula-decl nil nominal_AC_term_properties nil)
    (perm?_trans formula-decl nil nominal_AC_equality nil)
    (perm?_sym formula-decl nil nominal_AC_equality nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (append def-decl "list[T]" list_props nil)
    (perm? def-decl "bool" nominal_AC_equality nil)
    (> const-decl "bool" reals nil)
    (subs_get_args1 formula-decl nil nominal_AC_substitution nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (are_ac? const-decl "bool" nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil)
    (equal?_num_arg2 formula-decl nil nominal_AC_equality nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (a adt-accessor-decl "[(atom?) -> atom]" nominal_AC_term_adt nil)
    (nominal_AC_term_opt formula-decl nil nominal_AC_term_properties nil)
    (subset? const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (constant type-eq-decl nil nominal_AC_term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (equal_sub_change_eq_terms 0
  (equal_sub_change_eq_terms-2 nil 3881395738
   ("" (skeep)
    (("" (lemma "equal_sub_equiv")
      (("" (inst-cp -1 "G" "delta" "sigma" "t")
        (("" (assert)
          (("" (inst -1 "G" "delta" "sigma" "s")
            (("" (assert)
              (("" (prop)
                (("1" (lemma "equal?_sym")
                  (("1" (inst -1 "G" "subs(sigma)(t)" "subs(delta)(t)")
                    (("1" (assert)
                      (("1" (hide -4)
                        (("1" (lemma "equal?_trans")
                          (("1"
                            (inst -1 "G" "subs(sigma)(t)"
                             "subs(delta)(t)" "subs(sigma)(s)")
                            (("1" (assert)
                              (("1"
                                (hide 2)
                                (("1"
                                  (lemma "equal?_trans")
                                  (("1"
                                    (inst
                                     -1
                                     "G"
                                     "subs(delta)(t)"
                                     "subs(delta)(s)"
                                     "subs(sigma)(s)")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "equal?_trans")
                  (("2"
                    (inst -1 "G" "subs(delta)(t)" "subs(sigma)(t)"
                     "subs(delta)(s)")
                    (("2" (assert)
                      (("2" (hide 2)
                        (("2" (lemma "equal?_trans")
                          (("2"
                            (inst -1 "G" "subs(sigma)(t)"
                             "subs(sigma)(s)" "subs(delta)(s)")
                            (("2" (assert)
                              (("2"
                                (hide 2)
                                (("2"
                                  (lemma "equal?_sym")
                                  (("2"
                                    (inst
                                     -1
                                     "G"
                                     "subs(sigma)(s)"
                                     "subs(delta)(s)")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equal_sub_equiv formula-decl nil nominal_AC_substitution nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil)
    (equal?_trans formula-decl nil nominal_AC_equality nil) nil
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (equal_sub_change_eq_terms-1 nil 3842205504
   ("" (skeep)
    (("" (lemma "equal_sub_equiv")
      (("" (inst-cp -1 "delta" "sigma" "t")
        (("" (assert)
          (("" (inst -1 "delta" "sigma" "s")
            (("" (assert)
              (("" (prop)
                (("1" (lemma "equal?_sym")
                  (("1" (inst -1 "subs(sigma)(t)" "subs(delta)(t)")
                    (("1" (assert)
                      (("1" (hide -4)
                        (("1" (lemma "equal?_trans")
                          (("1"
                            (inst -1 "subs(sigma)(t)" "subs(delta)(t)"
                             "subs(sigma)(s)")
                            (("1" (assert)
                              (("1"
                                (hide 2)
                                (("1"
                                  (lemma "equal?_trans")
                                  (("1"
                                    (inst
                                     -1
                                     "subs(delta)(t)"
                                     "subs(delta)(s)"
                                     "subs(sigma)(s)")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "equal?_trans")
                  (("2"
                    (inst -1 "subs(delta)(t)" "subs(sigma)(t)"
                     "subs(delta)(s)")
                    (("2" (assert)
                      (("2" (hide 2)
                        (("2" (lemma "equal?_trans")
                          (("2"
                            (inst -1 "subs(sigma)(t)" "subs(sigma)(s)"
                             "subs(delta)(s)")
                            (("2" (assert)
                              (("2"
                                (hide 2)
                                (("2"
                                  (lemma "equal?_sym")
                                  (("2"
                                    (inst
                                     -1
                                     "subs(sigma)(s)"
                                     "subs(delta)(s)")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equal_sub_equiv formula-decl nil nominal_AC_substitution nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil)
    (equal?_trans formula-decl nil nominal_AC_equality nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (constant type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (equal_sub_ref 0
  (equal_sub_ref-1 nil 3850318341
   ("" (skeep)
    (("" (expand "equal?" 1)
      (("" (skeep)
        (("" (expand "subs" 1) (("" (rewrite "equal?_ref") nil nil))
          nil))
        nil))
      nil))
    nil)
   (nil (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil) nil
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (equal?_ref formula-decl nil nominal_AC_equality nil))
   shostak))
 (equal_sub_sym 0
  (equal_sub_sym-2 nil 3881407067
   ("" (skeep)
    (("" (iff)
      (("" (prop)
        (("1" (expand "equal?")
          (("1" (skolem 1 "x")
            (("1" (inst -1 "x")
              (("1" (expand "subs")
                (("1" (lemma "equal?_sym")
                  (("1"
                    (inst -1 "G" "subs(gamma)(null * x)"
                     "subs(delta)(null * x)")
                    (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "equal?")
          (("2" (skolem 1 "x")
            (("2" (inst -1 "x")
              (("2" (expand "subs")
                (("2" (lemma "equal?_sym")
                  (("2"
                    (inst -1 "G" "subs(delta)(null * x)"
                     "subs(gamma)(null * x)")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil) nil
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil) (atom type-eq-decl nil atoms nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil))
   nil)
  (equal_sub_sym-1 nil 3851195388
   ("" (skeep)
    (("" (iff)
      (("" (prop)
        (("1" (expand "equal?")
          (("1" (skolem 1 "x")
            (("1" (inst -1 "x")
              (("1" (expand "subs")
                (("1" (lemma "equal?_sym")
                  (("1"
                    (inst -1 "subs(gamma)(variable(x))"
                     "subs(delta)(variable(x))")
                    (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "equal?")
          (("2" (skolem 1 "x")
            (("2" (inst -1 "x")
              (("2" (expand "subs")
                (("2" (lemma "equal?_sym")
                  (("2"
                    (inst -1 "subs(delta)(variable(x))"
                     "subs(gamma)(variable(x))")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (equal?_sym formula-decl nil nominal_AC_equality nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (constant type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil))
   shostak))
 (equal_sub_trans 0
  (equal_sub_trans-2 nil 3881407189
   ("" (skeep)
    (("" (expand "equal?")
      (("" (skeep)
        (("" (inst -1 "X")
          (("" (inst -2 "X")
            (("" (expand "subs")
              (("" (lemma "equal?_trans")
                ((""
                  (inst -1 "G" "subs(delta)(null * X)"
                   "subs(gamma)(null * X)" "subs(sigma)(null * X)")
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil) nil
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (equal?_trans formula-decl nil nominal_AC_equality nil))
   nil)
  (equal_sub_trans-1 nil 3850318367
   ("" (skeep)
    (("" (expand "equal?")
      (("" (skeep)
        (("" (inst -1 "X")
          (("" (inst -2 "X")
            (("" (expand "subs")
              (("" (lemma "equal?_trans")
                ((""
                  (inst -1 "subs(delta)(variable(X))"
                   "subs(gamma)(variable(X))"
                   "subs(sigma)(variable(X))")
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil nominal_AC_term_properties nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (equal?_trans formula-decl nil nominal_AC_equality nil))
   shostak))
 (equal_sub_append 0
  (equal_sub_append-1 nil 3851254672
   ("" (skeep)
    (("" (expand "equal?" 1)
      (("" (skolem 1 "x")
        (("" (expand "subs")
          (("" (rewrite "subs_append2")
            (("" (rewrite "subs_append2")
              (("" (lemma "equal_sub_equiv")
                (("" (inst?) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (subs const-decl "nominal_AC_term" nominal_AC_substitution nil) nil
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (equal_sub_equiv formula-decl nil nominal_AC_substitution nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil))
   shostak))
 (equal_sub_subset 0
  (equal_sub_subset-1 nil 3854466143
   ("" (skeep)
    (("" (expand "subset?" -2)
      (("" (expand "equal?")
        (("" (skolem 1 "x")
          (("" (inst -1 "x")
            (("" (prop)
              (("" (inst -1 "x") (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil) nil)
   shostak))
 (equal_sub_res_sym 0
  (equal_sub_res_sym-1 nil 3888739380
   ("" (skeep)
    (("" (iff)
      (("" (lemma "equal?_sym")
        (("" (prop)
          (("1" (expand "equal?" (-1 1))
            (("1" (skolem 1 "x")
              (("1" (inst -1 "x")
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (expand "subs" (-1 1))
                      (("1"
                        (inst -3 "G" "subs(sigma1)(null*x)"
                         "subs(sigma)(null*x)")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "equal?" (-1 1))
            (("2" (skolem 1 "x")
              (("2" (inst -1 "x")
                (("2" (flatten)
                  (("2" (assert)
                    (("2"
                      (inst -3 "G" "subs(sigma)(x)" "subs(sigma1)(x)")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil) nil
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil) nil
    (equal?_sym formula-decl nil nominal_AC_equality nil))
   shostak))
 (equal_sub_res_trans 0
  (equal_sub_res_trans-2 nil 3881407263
   ("" (skeep)
    (("" (expand "equal?")
      (("" (skolem 1 "x")
        (("" (inst -1 "x")
          (("" (inst -2 "x")
            (("" (prop)
              (("" (expand "subs")
                (("" (lemma "equal?_trans")
                  ((""
                    (inst -1 "G" "subs(delta)(null * x)"
                     "subs(gamma)(null * x)" "subs(sigma)(null * x)")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (equal?_trans formula-decl nil nominal_AC_equality nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil) nil
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil) (atom type-eq-decl nil atoms nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil))
   nil)
  (equal_sub_res_trans-1 nil 3854466339
   ("" (skeep)
    (("" (expand "equal?")
      (("" (skolem 1 "x")
        (("" (inst -1 "x")
          (("" (inst -2 "x")
            (("" (prop)
              (("" (expand "subs")
                (("" (lemma "equal?_trans")
                  ((""
                    (inst -1 "subs(delta)(variable(x))"
                     "subs(gamma)(variable(x))"
                     "subs(sigma)(variable(x))")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (equal?_trans formula-decl nil nominal_AC_equality nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (constant type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil))
   shostak))
 (equal_syn_t 0
  (equal_syn_t-1 nil 3854740553
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 ("t"))
      (("" (prop)
        (("" (skeep)
          (("" (lemma "nominal_AC_term_opt")
            (("" (inst?)
              (("" (prop)
                (("1" (replace -2)
                  (("1" (rewrite "subs_const")
                    (("1" (rewrite "subs_const") nil nil)) nil))
                  nil)
                 ("2" (replace -2)
                  (("2" (expand "equal_syn?" -4)
                    (("2" (inst -4 "V(t)")
                      (("2" (expand "subs" -4)
                        (("2" (assert)
                          (("2" (grind)
                            (("2" (rewrite "subs_ext_pi" 1)
                              (("2"
                                (replace -3)
                                (("2"
                                  (lemma "subs_ext_pi")
                                  (("2"
                                    (inst -1 "V(t)" "p(t)" "sigma1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (replace -1)
                  (("3" (rewrite "subs_unit")
                    (("3" (rewrite "subs_unit") nil nil)) nil))
                  nil)
                 ("4" (replace -2)
                  (("4" (rewrite "subs_pair")
                    (("4" (rewrite "subs_pair")
                      (("4" (decompose-equality 1)
                        (("1" (inst -3 "term1(t)")
                          (("1" (prop)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (inst -3 "term2(t)")
                          (("2" (prop)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (replace -2)
                  (("5" (rewrite "subs_app")
                    (("5" (rewrite "subs_app")
                      (("5" (decompose-equality 1)
                        (("5" (inst -3 "arg(t)")
                          (("5" (split -3)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (replace -2 1)
                  (("6" (rewrite "subs_ac")
                    (("6" (rewrite "subs_ac")
                      (("6" (decompose-equality 1)
                        (("6" (inst -3 "ac_arg(t)")
                          (("6" (prop)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (replace -2 -3)
                                  (("1"
                                    (case
                                     "vars(ac_app(ac_sym(t), ac_arg(t))) = vars(ac_arg(t))")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (hide -3 2)
                                      (("2"
                                        (hide 2)
                                        (("2"
                                          (rewrite
                                           "subset_antisymmetric")
                                          (("1"
                                            (expand "subset?" 1)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (rewrite "vars_ac2")
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "subset?" 1)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (rewrite "vars_ac2")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (replace -2 1)
                  (("7" (rewrite "subs_abs")
                    (("7" (rewrite "subs_abs")
                      (("7" (decompose-equality 1)
                        (("7" (inst -3 "body(t)")
                          (("7" (prop)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (replace -2 -3)
                                  (("1"
                                    (expand "vars" -3)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nominal_AC_term_abs_extensionality formula-decl nil nominal_AC_term_adt nil)
    (abs adt-constructor-decl "[[atom, nominal_AC_term] -> (abs?)]" nominal_AC_term_adt nil)
    (subs_abs formula-decl nil nominal_AC_substitution nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (vars_ac2 formula-decl nil nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil)
    (subset? const-decl "bool" sets nil)
    (nominal_AC_term_ac_app_extensionality formula-decl nil nominal_AC_term_adt nil)
    (ac_app adt-constructor-decl "[[ac_symbol, nominal_AC_term] -> (ac_app?)]"
     nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (nominal_AC_term_app_extensionality formula-decl nil nominal_AC_term_adt nil)
    (app adt-constructor-decl "[[f_symbol, nominal_AC_term] -> (app?)]" nominal_AC_term_adt
     nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nominal_AC_term_pair_extensionality formula-decl nil nominal_AC_term_adt nil)
    (pair adt-constructor-decl "[[nominal_AC_term, nominal_AC_term] -> (pair?)]" nominal_AC_term_adt
     nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (atom? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (a adt-accessor-decl "[(atom?) -> atom]" nominal_AC_term_adt nil)
    (nominal_AC_term_opt formula-decl nil nominal_AC_term_properties nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (equal_syn? const-decl "bool" nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) nil
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (equal_syn_append 0
  (equal_syn_append-1 nil 3891679822
   ("" (skeep)
    (("" (expand "equal_syn?")
      (("" (skolem 1 "x")
        (("" (inst -1 "x")
          (("" (prop)
            (("" (expand "subs")
              (("" (rewrite "subs_append2")
                (("" (rewrite "subs_append2") (("" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equal_syn? const-decl "bool" nominal_AC_substitution nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil))
   shostak))
 (equal_syn_append2 0
  (equal_syn_append2-1 nil 3896383513
   ("" (skeep)
    (("" (expand "equal_syn?" 1)
      (("" (skolem 1 "x")
        (("" (flatten)
          (("" (expand "subs" 1)
            (("" (rewrite "subs_append2")
              (("" (rewrite "subs_append2")
                (("" (use "equal_syn_t")
                  (("" (assert)
                    (("" (hide 2)
                      ((""
                        (case "subset?(vars(subs(sigma)(null * x)), V1)")
                        (("1" (expand "equal_syn?" -2)
                          (("1" (expand "equal_syn?" 1)
                            (("1" (skolem 1 "y")
                              (("1"
                                (flatten)
                                (("1"
                                  (inst -3 "y")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "subset?" -1)
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (expand "subset?" 1)
                            (("2" (skolem 1 "y")
                              (("2"
                                (flatten)
                                (("2"
                                  (use "vars_subs_t")
                                  (("2"
                                    (expand "subset?")
                                    (("2"
                                      (inst?)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equal_syn? const-decl "bool" nominal_AC_substitution nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (equal_syn_t formula-decl nil nominal_AC_substitution nil) nil
    (vars_subs_t formula-decl nil nominal_AC_substitution nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (empty? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (union const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil) nil
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil))
   shostak))
 (equal_syn_subset 0
  (equal_syn_subset-1 nil 3897033742
   ("" (skeep)
    (("" (expand "equal_syn?")
      (("" (expand "subset?")
        (("" (skeep)
          (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((equal_syn? const-decl "bool" nominal_AC_substitution nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subset? const-decl "bool" sets nil))
   shostak))
 (equal_syn_equal 0
  (equal_syn_equal-1 nil 3897591301
   ("" (skeep)
    (("" (expand ("equal_syn?" "equal?"))
      (("" (skolem 1 "x")
        (("" (inst -1 "x")
          (("" (flatten)
            (("" (assert)
              (("" (replace -1) (("" (rewrite "equal?_ref") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equal? const-decl "bool" nominal_AC_substitution nil)
    (equal_syn? const-decl "bool" nominal_AC_substitution nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (equal?_ref formula-decl nil nominal_AC_equality nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" nominal_AC_term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil))
   shostak))
 (idempotent_append_cond 0
  (idempotent_append_cond-2 nil 3881407849
   ("" (skeep)
    (("" (lemma "idempotent_disjoint_dom_img2")
      (("" (inst -1 "append(cons((X, t), null), sigma)")
        (("" (assert)
          (("" (hide 4)
            (("" (expand "disjoint?" 1)
              (("" (expand "empty?" 1)
                (("" (skolem 1 "Y")
                  (("" (expand "member" -1)
                    (("" (expand "intersection" -1)
                      (("" (prop)
                        (("" (lemma "dom_append")
                          (("" (inst?)
                            (("" (assert)
                              ((""
                                (expand "subset?" -1)
                                ((""
                                  (inst -1 "Y")
                                  ((""
                                    (assert)
                                    ((""
                                      (hide -2)
                                      ((""
                                        (lemma "basic_sub_info")
                                        ((""
                                          (inst -1 "X" "t")
                                          ((""
                                            (assert)
                                            ((""
                                              (prop)
                                              ((""
                                                (expand "member" -4)
                                                ((""
                                                  (expand "union" -4)
                                                  ((""
                                                    (prop)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (expand
                                                         "member"
                                                         -1)
                                                        (("1"
                                                          (expand
                                                           "singleton"
                                                           -1)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (rewrite
                                                               "vars_finset")
                                                              (("1"
                                                                (skolem
                                                                 -5
                                                                 "t1")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (expand
                                                                     "member"
                                                                     -5)
                                                                    (("1"
                                                                      (expand
                                                                       "img"
                                                                       -5)
                                                                      (("1"
                                                                        (skolem
                                                                         -5
                                                                         "W")
                                                                        (("1"
                                                                          (prop)
                                                                          (("1"
                                                                            (expand
                                                                             "subs"
                                                                             -6)
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "subs_append2")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "apply_sub_elim_var_t")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "X"
                                                                                     "cons((X, t), null)"
                                                                                     "subs(sigma)(null * W)")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "member"
                                                                                         -1
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "singleton"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -6)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -3)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "vars_singleton"
                                                                                                   -1)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "vars_img_append")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (expand
                                                           "subset?"
                                                           -1)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "Y")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "member"
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   "union"
                                                                   -1)
                                                                  (("2"
                                                                    (prop)
                                                                    (("1"
                                                                      (replace
                                                                       -4)
                                                                      (("1"
                                                                        (rewrite
                                                                         "vars_singleton"
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "disjoint?"
                                                                           -8)
                                                                          (("1"
                                                                            (expand
                                                                             "empty?"
                                                                             -8)
                                                                            (("1"
                                                                              (inst
                                                                               -8
                                                                               "Y")
                                                                              (("1"
                                                                                (expand
                                                                                 "member"
                                                                                 3)
                                                                                (("1"
                                                                                  (expand
                                                                                   "intersection"
                                                                                   3)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "idempotent_disjoint_dom_img")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "sigma")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "disjoint?"
                                                                             -1)
                                                                            (("2"
                                                                              (expand
                                                                               "empty?"
                                                                               -1)
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "Y")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member"
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "intersection"
                                                                                     1)
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((idempotent_disjoint_dom_img2 formula-decl nil nominal_AC_substitution nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (dom_append formula-decl nil nominal_AC_substitution nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (union const-decl "set" sets nil)
    (vars_img_append formula-decl nil nominal_AC_substitution nil)
    (idempotent_disjoint_dom_img formula-decl nil nominal_AC_substitution nil)
    (singleton const-decl "(singleton?)" sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (vars_finset formula-decl nil nominal_AC_term_properties nil)
    (apply_sub_elim_var_t formula-decl nil nominal_AC_substitution nil)
    (vars_singleton formula-decl nil nominal_AC_term_properties nil) nil
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (basic_sub_info formula-decl nil nominal_AC_substitution nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (idempotent_append_cond-1 nil 3838230289
   ("" (skeep)
    (("" (lemma "idempotent_disjoint_dom_img2")
      (("" (inst -1 "append(cons((X, t), null), sigma)")
        (("" (assert)
          (("" (hide 4)
            (("" (expand "disjoint?" 1)
              (("" (expand "empty?" 1)
                (("" (skolem 1 "Y")
                  (("" (expand "member" -1)
                    (("" (expand "intersection" -1)
                      (("" (prop)
                        (("" (lemma "dom_append")
                          (("" (inst?)
                            (("" (assert)
                              ((""
                                (expand "subset?" -1)
                                ((""
                                  (inst -1 "Y")
                                  ((""
                                    (assert)
                                    ((""
                                      (hide -2)
                                      ((""
                                        (lemma "basic_sub_info")
                                        ((""
                                          (inst -1 "X" "t")
                                          ((""
                                            (assert)
                                            ((""
                                              (prop)
                                              ((""
                                                (expand "member" -4)
                                                ((""
                                                  (expand "union" -4)
                                                  ((""
                                                    (prop)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (expand
                                                         "member"
                                                         -1)
                                                        (("1"
                                                          (expand
                                                           "singleton"
                                                           -1)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (rewrite
                                                               "vars_finset")
                                                              (("1"
                                                                (skolem
                                                                 -5
                                                                 "t1")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (expand
                                                                     "member"
                                                                     -5)
                                                                    (("1"
                                                                      (expand
                                                                       "img"
                                                                       -5)
                                                                      (("1"
                                                                        (skolem
                                                                         -5
                                                                         "W")
                                                                        (("1"
                                                                          (prop)
                                                                          (("1"
                                                                            (expand
                                                                             "subs"
                                                                             -6)
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "subs_append2")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "apply_sub_elim_var_t")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "X"
                                                                                     "cons((X, t), null)"
                                                                                     "subs(sigma)(variable(W))")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "member"
                                                                                         -1
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "singleton"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -6)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -3)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "vars_singleton"
                                                                                                   -1)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "vars_img_append")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (expand
                                                           "subset?"
                                                           -1)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "Y")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "member"
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   "union"
                                                                   -1)
                                                                  (("2"
                                                                    (prop)
                                                                    (("1"
                                                                      (replace
                                                                       -4)
                                                                      (("1"
                                                                        (rewrite
                                                                         "vars_singleton"
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "disjoint?"
                                                                           -8)
                                                                          (("1"
                                                                            (expand
                                                                             "empty?"
                                                                             -8)
                                                                            (("1"
                                                                              (inst
                                                                               -8
                                                                               "Y")
                                                                              (("1"
                                                                                (expand
                                                                                 "member"
                                                                                 3)
                                                                                (("1"
                                                                                  (expand
                                                                                   "intersection"
                                                                                   3)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "idempotent_disjoint_dom_img")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "sigma")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "disjoint?"
                                                                             -1)
                                                                            (("2"
                                                                              (expand
                                                                               "empty?"
                                                                               -1)
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "Y")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member"
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "intersection"
                                                                                     1)
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((idempotent_disjoint_dom_img2 formula-decl nil nominal_AC_substitution nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (dom_append formula-decl nil nominal_AC_substitution nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (union const-decl "set" sets nil)
    (vars_img_append formula-decl nil nominal_AC_substitution nil)
    (idempotent_disjoint_dom_img formula-decl nil nominal_AC_substitution nil)
    (singleton const-decl "(singleton?)" sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (vars_finset formula-decl nil nominal_AC_term_properties nil)
    (apply_sub_elim_var_t formula-decl nil nominal_AC_substitution nil)
    (vars_singleton formula-decl nil nominal_AC_term_properties nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (basic_sub_info formula-decl nil nominal_AC_substitution nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (constant type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (subs_size2_map_get_args 0
  (subs_size2_map_get_args-1 nil 3842344349
   ("" (measure-induct "length(args)" "args")
    (("" (skolem 1 "args")
      (("" (prop)
        (("" (skeep)
          (("" (expand "member" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (expand "map" 2 3)
                  (("1" (assert)
                    (("1" (replace -1)
                      (("1" (expand "map" 2 2)
                        (("1" (expand "flatten" 2 1)
                          (("1" (rewrite "map_append2")
                            (("1" (replace -1 :dir rl)
                              (("1"
                                (rewrite "sum_append" 2)
                                (("1"
                                  (lemma "size2_get_args")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "sum(map(size2)(flatten(map(get_args(f))(map(subs(delta))(cdr(args)))))) > 0")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide 3 -3)
                                            (("2"
                                              (expand "length" -3)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "length" -3)
                                                  (("2"
                                                    (lift-if -3)
                                                    (("2"
                                                      (split -3)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (expand
                                                             "map"
                                                             2
                                                             3)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "map"
                                                                 2
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "flatten"
                                                                   2)
                                                                  (("2"
                                                                    (rewrite
                                                                     "map_append2")
                                                                    (("2"
                                                                      (rewrite
                                                                       "sum_append")
                                                                      (("2"
                                                                        (hide
                                                                         -1)
                                                                        (("2"
                                                                          (name-replace
                                                                           "t1"
                                                                           "car(cdr(args))")
                                                                          (("2"
                                                                            (lemma
                                                                             "size2_get_args")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (replace
                                                                                 -1
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "size2_ge0")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst -2 "cdr(args)")
                  (("2" (prop)
                    (("1" (inst -1 "delta" "f" "t")
                      (("1" (assert)
                        (("1" (prop)
                          (("1" (expand "map" 2 3)
                            (("1" (expand "map" 2 2)
                              (("1"
                                (expand "flatten" 2)
                                (("1"
                                  (rewrite "map_append2")
                                  (("1"
                                    (rewrite "sum_append")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "length" 1)
                            (("2" (lift-if)
                              (("2"
                                (split 1)
                                (("1"
                                  (prop)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "length" 2)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (prop)
                                        (("1"
                                          (hide 1)
                                          (("1"
                                            (expand "member" -2)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (expand "map" 3 3)
                                                  (("1"
                                                    (expand "map" 3 2)
                                                    (("1"
                                                      (expand
                                                       "flatten"
                                                       3)
                                                      (("1"
                                                        (rewrite
                                                         "map_append2")
                                                        (("1"
                                                          (rewrite
                                                           "sum_append")
                                                          (("1"
                                                            (expand
                                                             "map"
                                                             3
                                                             4)
                                                            (("1"
                                                              (expand
                                                               "map"
                                                               3
                                                               3)
                                                              (("1"
                                                                (expand
                                                                 "flatten"
                                                                 3)
                                                                (("1"
                                                                  (rewrite
                                                                   "map_append2")
                                                                  (("1"
                                                                    (rewrite
                                                                     "sum_append")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (lemma
                                                                         "size2_get_args")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "f"
                                                                           "subs(delta)(t)")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (case
                                                                                   "sum(map(size2)(get_args(f)(subs(delta)(car(args))))) > 0")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     4)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "size2_get_args")
                                                                                      (("2"
                                                                                        (inst?)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1
                                                                                           :dir
                                                                                           rl)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "size2_ge0")
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (size2_get_args formula-decl nil nominal_AC_term_properties nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (size2_ge0 formula-decl nil nominal_AC_term_properties nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sum_append formula-decl nil list_aux_equational_reasoning_nat nil)
    (map_append2 formula-decl nil list_aux_equational_reasoning2parameters nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil (string type-eq-decl nil strings nil)
    (flatten def-decl "list[T]" list_aux_equational_reasoning nil) nil
    (sum def-decl "nat" list_aux_equational_reasoning_nat nil) nil
    (size2 def-decl "nat" nominal_AC_term_properties nil)
    (> const-decl "bool" reals nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (subs_not_same_size2 0
  (subs_not_same_size2-1 nil 3842302745
   ("" (measure-induct "size(s)" "s")
    (("" (skolem 1 "s")
      (("" (prop)
        (("" (skeep)
          (("" (lemma "nominal_AC_term_opt")
            (("" (inst?)
              (("" (prop)
                (("1" (hide-all-but (-2 -4)) (("1" (grind) nil nil))
                  nil)
                 ("2" (hide-all-but (-1 -3)) (("2" (grind) nil nil))
                  nil)
                 ("3" (replace -2 -4)
                  (("3" (expand "vars" -4)
                    (("3" (expand ("member" "union") -4)
                      (("3" (prop)
                        (("1" (inst -4 "term1(s)")
                          (("1" (prop)
                            (("1" (inst -1 "X" "delta")
                              (("1"
                                (assert)
                                (("1"
                                  (prop)
                                  (("1"
                                    (replace -4 2)
                                    (("1"
                                      (rewrite "subs_pair")
                                      (("1"
                                        (expand "size2" 2 2)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replace -4)
                                    (("2"
                                      (rewrite "subs_pair" 2)
                                      (("2"
                                        (expand "size2" 2 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "vars" -2)
                                            (("2"
                                              (expand
                                               ("member" "singleton")
                                               -2)
                                              (("2"
                                                (replace -2)
                                                (("2"
                                                  (lemma
                                                   "nominal_AC_term_times_eta")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (replace
                                                       -1
                                                       2
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (rewrite
                                                         "subs_ext_pi"
                                                         2)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (rewrite
                                                             "ext_size2")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "size2(subs(delta)(term2(s))) > 0")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (use
                                                                   "size2_ge0")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (skeep)
                                    (("3"
                                      (inst -6 "t")
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (inst -4 "term2(s)")
                          (("2" (prop)
                            (("1" (inst -1 "X" "delta")
                              (("1"
                                (assert)
                                (("1"
                                  (prop)
                                  (("1"
                                    (replace -4 2)
                                    (("1"
                                      (rewrite "subs_pair")
                                      (("1"
                                        (expand "size2" 2 2)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "vars" -2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand
                                         ("member" "singleton")
                                         -2)
                                        (("2"
                                          (replace -4 2)
                                          (("2"
                                            (rewrite "subs_pair")
                                            (("2"
                                              (expand "size2" 2 2)
                                              (("2"
                                                (lemma
                                                 "nominal_AC_term_times_eta")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (replace
                                                     -1
                                                     2
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (rewrite
                                                       "subs_ext_pi"
                                                       2)
                                                      (("2"
                                                        (rewrite
                                                         "ext_size2")
                                                        (("2"
                                                          (case
                                                           "size2(subs(delta)(term1(s))) > 0")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "size2_ge0")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (skeep)
                                    (("3"
                                      (inst -6 "t")
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (replace -2 -4)
                  (("4" (replace -2 2)
                    (("4" (expand "vars" -4)
                      (("4" (inst -3 "arg(s)")
                        (("4" (prop)
                          (("1" (inst -1 "X" "delta")
                            (("1" (prop)
                              (("1"
                                (rewrite "subs_app")
                                (("1"
                                  (expand "size2" 2 2)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "subs_app")
                                (("2"
                                  (lemma "nominal_AC_term_times_eta")
                                  (("2"
                                    (inst -1 "arg(s)")
                                    (("2"
                                      (expand ("member" "vars") -5)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "singleton" -5)
                                          (("2"
                                            (expand "size2" 2 2)
                                            (("2"
                                              (replace -1 2 :dir rl)
                                              (("2"
                                                (rewrite
                                                 "subs_ext_pi"
                                                 2)
                                                (("2"
                                                  (rewrite "ext_size2")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (skeep)
                                (("3"
                                  (inst -6 "t")
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (replace -2 2)
                  (("5" (rewrite "subs_ac" 2)
                    (("5" (expand "size2" 2 2)
                      (("5" (rewrite "subs_ac" 2 :dir rl)
                        (("5" (name-replace "f" "ac_sym(s)")
                          (("5" (replace -2 :dir rl)
                            (("5" (lemma "args_subs_ac")
                              (("5"
                                (inst?)
                                (("5"
                                  (replace -1)
                                  (("5"
                                    (hide -1)
                                    (("5"
                                      (expand "vars" -4)
                                      (("5"
                                        (assert)
                                        (("5"
                                          (rewrite "mem_union_map")
                                          (("5"
                                            (reveal -3)
                                            (("5"
                                              (replace -1)
                                              (("5"
                                                (skolem -5 "t1")
                                                (("5"
                                                  (prop)
                                                  (("5"
                                                    (hide -4)
                                                    (("5"
                                                      (lemma
                                                       "subs_size2_map_get_args")
                                                      (("5"
                                                        (inst
                                                         -1
                                                         "get_args(f)(s)"
                                                         "delta"
                                                         "f"
                                                         "t1")
                                                        (("5"
                                                          (assert)
                                                          (("5"
                                                            (prop)
                                                            (("1"
                                                              (reveal
                                                               -2)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "t1")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "X"
                                                                     "delta")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (expand
                                                                           "subs"
                                                                           2
                                                                           1)
                                                                          (("1"
                                                                            (case
                                                                             "size2(subs(delta)(null * X)) = size2(subs(delta)(t1))")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               -2
                                                                               3)
                                                                              (("2"
                                                                                (lemma
                                                                                 "nominal_AC_term_times_eta")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "t1")
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1
                                                                                     1
                                                                                     :dir
                                                                                     rl)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "subs_ext_pi")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "V(t1)"
                                                                                         "p(t1)"
                                                                                         "delta")
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "ext_size2")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "subs"
                                                                                               1
                                                                                               2)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 ("member"
                                                                                                  "vars"
                                                                                                  "singleton")
                                                                                                 -8)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "singleton"
                                                                                                     -8)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skolem
                                                                           1
                                                                           "t2")
                                                                          (("2"
                                                                            (inst
                                                                             -7
                                                                             "t2")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (hide
                                                                                   -3
                                                                                   4)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "subterm_transitive")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "t2"
                                                                                       "t1"
                                                                                       "s")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (use
                                                                                           "get_args_subterms2")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -1
                                                                     3
                                                                     -7)
                                                                    (("2"
                                                                      (use
                                                                       "get_args_size")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "is_ac_sym?"
                                                                           1)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "get_args_len")
                                                              (("2"
                                                                (inst
                                                                 -6
                                                                 "s")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (rewrite
                                                                     "subterm_reflexive")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (replace -2 2)
                  (("6" (rewrite "subs_abs")
                    (("6" (expand "size2" 2 2)
                      (("6" (inst -3 "body(s)")
                        (("6" (prop)
                          (("1" (inst?)
                            (("1" (assert)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "vars" -3)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (expand "vars" -4)
                                  (("2"
                                    (lemma "nominal_AC_term_times_eta")
                                    (("2"
                                      (inst -1 "body(s)")
                                      (("2"
                                        (replace -1 2 :dir rl)
                                        (("2"
                                          (rewrite "subs_ext_pi")
                                          (("2"
                                            (rewrite "ext_size2")
                                            (("2"
                                              (expand
                                               ("member" "vars")
                                               -5)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "singleton"
                                                   -5)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (skolem 1 "t2")
                                  (("3"
                                    (inst -4 "t2")
                                    (("3"
                                      (flatten)
                                      (("3"
                                        (assert)
                                        (("3"
                                          (expand "subterms" 3)
                                          (("3"
                                            (expand
                                             ("member" "union")
                                             3)
                                            (("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_abs formula-decl nil nominal_AC_substitution nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (args_subs_ac formula-decl nil nominal_AC_substitution nil) nil
    (args type-eq-decl nil nominal_AC_term_properties nil) nil
    (mem_union_map formula-decl nil list_aux_equational_reasoning2parameters nil)
    (subs_size2_map_get_args formula-decl nil nominal_AC_substitution nil)
    (get_args_len formula-decl nil nominal_AC_term_properties nil)
    (subterm_reflexive formula-decl nil nominal_AC_term_properties nil)
    (get_args_subterms2 formula-decl nil nominal_AC_term_properties nil)
    (subterm_transitive formula-decl nil nominal_AC_term_properties nil) nil
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (get_args_size formula-decl nil nominal_AC_term_properties nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil) nil
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (union const-decl "set" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nominal_AC_term_times_eta formula-decl nil nominal_AC_term_adt nil)
    (size2_ge0 formula-decl nil nominal_AC_term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ext_size2 formula-decl nil nominal_AC_term_properties nil)
    (subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (nominal_AC_term_opt formula-decl nil nominal_AC_term_properties nil) nil
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (size2 def-decl "nat" nominal_AC_term_properties nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    nil (string type-eq-decl nil strings nil)
    (> const-decl "bool" reals nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil) nil
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil) nil
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) nil
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (subs_equal_impossible 0
  (subs_equal_impossible-1 nil 3842362315
   ("" (skeep)
    (("" (lemma "equal_size2")
      (("" (inst?)
        (("" (assert)
          (("" (lemma "subs_not_same_size2")
            (("" (inst?)
              (("" (inst -1 "s") (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equal_size2 formula-decl nil nominal_AC_equality nil)
    (subs_not_same_size2 formula-decl nil nominal_AC_substitution nil) nil
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (subs_equal_impossible2 0
  (subs_equal_impossible2-1 nil 3881764069
   ("" (skeep)
    (("" (lemma "equal_size2")
      (("" (inst?)
        (("" (assert)
          (("" (lemma "subs_not_same_size2")
            (("" (inst?)
              (("" (inst -1 "X")
                (("" (assert)
                  (("" (prop)
                    (("" (rewrite "subs_ext_pi" -2)
                      (("" (rewrite "ext_size2")
                        (("" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equal_size2 formula-decl nil nominal_AC_equality nil)
    (subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ext_size2 formula-decl nil nominal_AC_term_properties nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs_not_same_size2 formula-decl nil nominal_AC_substitution nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil) nil
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (count_subs_get_args 0
  (count_subs_get_args-1 nil 3847549538
   ("" (skeep)
    (("" (expand "count" 1)
      (("" (rewrite "args_subs_ac")
        (("" (rewrite "subs_map")
          (("" (rewrite "count_flatten")
            (("" (rewrite "count_vec_equiv") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   (nil (subs_map formula-decl nil nominal_AC_substitution nil) nil
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil) nil
    (count_vec_equiv formula-decl nil nominal_AC_equality nil)
    (subs def-decl "args" nominal_AC_substitution nil) nil nil
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (equivalence? const-decl "bool" relations nil)
    (count_flatten formula-decl nil list_aux_equational_reasoning nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (args_subs_ac formula-decl nil nominal_AC_substitution nil))
   shostak))
 (subs_inst 0
  (subs_inst-1 nil 3850211965
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "delta" "cons((X, t), null)")
        (("" (prop)
          (("" (expand "equal?" 1)
            (("" (skolem 1 "Z")
              (("" (case "Z = X")
                (("1" (replace -1)
                  (("1" (hide -1)
                    (("1" (expand "subs" 1 1)
                      (("1" (expand "subs" 1 2)
                        (("1" (rewrite "subs_append2")
                          (("1" (expand "delta" 1)
                            (("1" (expand "subs" 1 3)
                              (("1"
                                (expand "subs" 1 4)
                                (("1"
                                  (expand "subs" 1 3)
                                  (("1"
                                    (rewrite "ext_identity")
                                    (("1"
                                      (expand "subs" -1 1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "subs" 2 2)
                  (("2" (rewrite "subs_append2")
                    (("2" (expand "delta" 2)
                      (("2" (expand "subs" 2 3)
                        (("2" (expand "subs" 2 4)
                          (("2" (expand "subs" 2 3)
                            (("2" (lift-if)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "subs" 2 1)
                                  (("2" (use "equal?_ref") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equal?_ref formula-decl nil nominal_AC_equality nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    nil nil (ext_identity formula-decl nil nominal_AC_term_properties nil) nil nil
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (subs_inst_correct 0
  (subs_inst_correct-1 nil 3887114578
   ("" (skolem 1 ("G" "X" "pi" "s" "sig"))
    (("" (assert)
      (("" (name-replace "del" "cons((X, ext(reverse(pi))(s)), null)")
        (("" (flatten)
          (("" (reveal -1)
            (("" (case "subs(del)(s) = s")
              (("1" (replace -1)
                (("1" (expand "del" 2)
                  (("1" (expand "subs" 2 2)
                    (("1" (expand "subs" 2 3)
                      (("1" (expand "subs" 2 2)
                        (("1" (rewrite "subs_ext" 2)
                          (("1" (rewrite "equal?_ext_reverse" 2)
                            (("1" (rewrite "subs_ext")
                              (("1" (use "equal?_ref") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (use "subs_no_effect_t")
                (("2" (assert)
                  (("2" (expand "disjoint?" 1)
                    (("2" (expand "empty?")
                      (("2" (skeep)
                        (("2" (expand ("member" "intersection") -1)
                          (("2" (prop)
                            (("2" (replace -3 -1 :dir rl)
                              (("2"
                                (expand "dom")
                                (("2"
                                  (expand "member" -1)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand "subs" 1 1)
                                      (("2"
                                        (expand "subs" 1)
                                        (("2"
                                          (expand "subs" 1 2)
                                          (("2"
                                            (expand "subs" 1)
                                            (("2"
                                              (lift-if)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil) nil nil
    (subs_ext formula-decl nil nominal_AC_substitution nil)
    (equal?_ref formula-decl nil nominal_AC_equality nil)
    (equal?_ext_reverse formula-decl nil nominal_AC_equality nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil) nil
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (subs_unify_alg_aux 0
  (subs_unify_alg_aux-1 nil 3887124100
   ("" (skolem 1 ("G" "del" "del1" "s" "sig" "sig1" "t"))
    (("" (flatten)
      (("" (prop)
        (("1" (lemma "equal_sub_change_eq_terms")
          (("1"
            (inst -1 "G" "del" "s" "append(del1, append(sig1, sig))"
             "t")
            (("1" (assert)
              (("1" (rewrite "subs_append2")
                (("1" (rewrite "subs_append2")
                  (("1" (rewrite "subs_append2")
                    (("1" (rewrite "subs_append2")
                      (("1" (lemma "equal_sub_change_eq_terms")
                        (("1"
                          (inst -1 "G" "del" "subs(sig1)(s)"
                           "append(del1, append(sig1, sig))"
                           "subs(sig1)(t)")
                          (("1" (assert)
                            (("1" (hide -2)
                              (("1"
                                (case
                                 "subs(append(del1, append(sig1, sig)))(subs(sig1)(t)) = subs(del1)(subs(sig1)(subs(sig)(t)))")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (case
                                     "subs(append(del1, append(sig1, sig)))(subs(sig1)(s)) = subs(del1)(subs(sig1)(subs(sig)(s)))")
                                    (("1"
                                      (replace -1)
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (hide -1 -2 2 3)
                                      (("2"
                                        (rewrite "subs_append2")
                                        (("2"
                                          (rewrite "subs_append2")
                                          (("2"
                                            (lemma "subs_no_effect_t")
                                            (("2"
                                              (inst
                                               -1
                                               "sig"
                                               "subs(sig1)(s)")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (lemma
                                                     "subs_no_effect_t")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "sig"
                                                       "s")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (use
                                                               "idempotent_subs_subs_t")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-3 1))
                                                            (("2"
                                                              (expand
                                                               "disjoint?")
                                                              (("2"
                                                                (expand
                                                                 "empty?")
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but
                                                   (-2 -4 1))
                                                  (("2"
                                                    (expand
                                                     "disjoint?")
                                                    (("2"
                                                      (expand "empty?")
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (expand
                                                               ("member"
                                                                "intersection"))
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (use
                                                                     "vars_subs_t")
                                                                    (("2"
                                                                      (expand
                                                                       "subset?")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -1 -2 2 3)
                                  (("2"
                                    (rewrite "subs_append2")
                                    (("2"
                                      (rewrite "subs_append2")
                                      (("2"
                                        (lemma "subs_no_effect_t")
                                        (("2"
                                          (inst
                                           -1
                                           "sig"
                                           "subs(sig1)(t)")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (lemma
                                                   "subs_no_effect_t")
                                                  (("1"
                                                    (inst -1 "sig" "t")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (use
                                                           "idempotent_subs_subs_t")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-2 1))
                                                        (("2"
                                                          (expand
                                                           "disjoint?")
                                                          (("2"
                                                            (expand
                                                             "empty?")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -2 2)
                                                (("2"
                                                  (use "vars_subs_t")
                                                  (("2"
                                                    (expand
                                                     "disjoint?")
                                                    (("2"
                                                      (expand
                                                       "subset?")
                                                      (("2"
                                                        (expand
                                                         "empty?")
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "equal_sub_change_eq_terms")
          (("2"
            (inst -1 "G" "del" "subs(sig1)(s)"
             "append(del1, append(sig1, sig))" "subs(sig1)(t)")
            (("2" (assert)
              (("2" (lemma "equal_sub_change_eq_terms")
                (("2"
                  (inst -1 "G" "del" "s"
                   "append(del1, append(sig1, sig))" "t")
                  (("2" (assert)
                    (("2" (hide -2 -3 2)
                      (("2"
                        (case "subs(append(del1, append(sig1, sig)))(t) = subs(append(del1, append(sig1, sig)))(subs(sig1)(t))")
                        (("1" (replace -1 :dir rl)
                          (("1"
                            (case "subs(append(del1, append(sig1, sig)))(s) = subs(append(del1, append(sig1, sig)))(subs(sig1)(s))")
                            (("1" (assert) nil nil)
                             ("2" (hide -1 -2 2)
                              (("2"
                                (rewrite "subs_append2")
                                (("2"
                                  (rewrite "subs_append2")
                                  (("2"
                                    (rewrite "subs_append2")
                                    (("2"
                                      (rewrite "subs_append2")
                                      (("2"
                                        (lemma "subs_no_effect_t")
                                        (("2"
                                          (inst -1 "sig" "s")
                                          (("2"
                                            (prop)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (lemma
                                                 "subs_no_effect_t")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "sig"
                                                   "subs(sig1)(s)")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (use
                                                         "idempotent_subs_subs_t")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (-2 -4 1))
                                                      (("2"
                                                        (use
                                                         "vars_subs_t")
                                                        (("2"
                                                          (expand
                                                           ("disjoint?"
                                                            "subset?"))
                                                          (("2"
                                                            (expand
                                                             "empty?")
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-1 1))
                                              (("2"
                                                (expand "disjoint?")
                                                (("2"
                                                  (expand "empty?")
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -1 2)
                          (("2" (rewrite "subs_append2")
                            (("2" (rewrite "subs_append2")
                              (("2"
                                (rewrite "subs_append2")
                                (("2"
                                  (rewrite "subs_append2")
                                  (("2"
                                    (lemma "subs_no_effect_t")
                                    (("2"
                                      (inst -1 "sig" "t")
                                      (("2"
                                        (prop)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (lemma "subs_no_effect_t")
                                            (("1"
                                              (inst
                                               -1
                                               "sig"
                                               "subs(sig1)(t)")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (use
                                                     "idempotent_subs_subs_t")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but
                                                   (-2 -4 1))
                                                  (("2"
                                                    (expand
                                                     "disjoint?")
                                                    (("2"
                                                      (expand "empty?")
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (expand
                                                               ("member"
                                                                "intersection"))
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (use
                                                                     "vars_subs_t")
                                                                    (("2"
                                                                      (expand
                                                                       "subset?"
                                                                       -1)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "x")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-1 1))
                                          (("2"
                                            (expand "disjoint?")
                                            (("2"
                                              (expand "empty?")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equal_sub_change_eq_terms formula-decl nil nominal_AC_substitution nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (vars_subs_t formula-decl nil nominal_AC_substitution nil)
    (idempotent_subs_subs_t formula-decl nil nominal_AC_substitution nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (append def-decl "list[T]" list_props nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (subs_unify_alg_aux2 0
  (subs_unify_alg_aux2-1 nil 3888145302
   ("" (skolem 1 ("G" "V" "del" "sig" "sig1"))
    (("" (prop)
      (("" (expand "more_general?" -1)
        (("" (skolem -1 "del1")
          (("" (expand "equal?" 1)
            (("" (skolem 1 "x")
              (("" (expand "subs" 1)
                (("" (rewrite "subs_append2")
                  (("" (case "member(x, V)")
                    (("1" (lemma "equal_sub_change_eq_terms")
                      (("1"
                        (inst -1 "G" "del" "subs(sig1)(null*x)"
                         "append(del1, append(sig1, sig))" "null *x")
                        (("1" (assert)
                          (("1" (rewrite "subs_append2")
                            (("1" (rewrite "subs_append2")
                              (("1"
                                (rewrite "subs_append2")
                                (("1"
                                  (rewrite "subs_append2")
                                  (("1"
                                    (case
                                     "subs(sig)(null * x) = null *x")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (case
                                         "subs(sig)(subs(sig1)(null * x)) = subs(sig1)(null * x)")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (expand "idempotent?" -5)
                                            (("1"
                                              (inst -5 "x")
                                              (("1"
                                                (expand "subs" -5 2)
                                                (("1"
                                                  (expand "subs" -5 3)
                                                  (("1"
                                                    (replace -5)
                                                    (("1"
                                                      (use
                                                       "equal?_ref")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2 3 -1)
                                          (("2"
                                            (lemma "subs_no_effect_t")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide -2 -3 2)
                                                  (("2"
                                                    (expand
                                                     "disjoint?")
                                                    (("2"
                                                      (expand "empty?")
                                                      (("2"
                                                        (skolem 1 "y")
                                                        (("2"
                                                          (inst -3 "y")
                                                          (("2"
                                                            (expand
                                                             ("member"
                                                              "intersection")
                                                             -1)
                                                            (("2"
                                                              (expand
                                                               ("member"
                                                                "intersection")
                                                               1)
                                                              (("2"
                                                                (prop)
                                                                (("2"
                                                                  (use
                                                                   "vars_subs_t")
                                                                  (("2"
                                                                    (expand
                                                                     "subset?")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "y")
                                                                      (("2"
                                                                        (prop)
                                                                        (("2"
                                                                          (expand
                                                                           ("member"
                                                                            "union")
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             "contained?"
                                                                             -5)
                                                                            (("2"
                                                                              (prop)
                                                                              (("1"
                                                                                (expand
                                                                                 "subset?")
                                                                                (("1"
                                                                                  (inst
                                                                                   -6
                                                                                   "y")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -2 2 3)
                                      (("2"
                                        (use "subs_no_effect_t")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "disjoint?" 1)
                                            (("2"
                                              (expand "empty?" 1)
                                              (("2"
                                                (skolem 1 "y")
                                                (("2"
                                                  (expand
                                                   ("member"
                                                    "intersection")
                                                   -1)
                                                  (("2"
                                                    (prop)
                                                    (("2"
                                                      (expand
                                                       "disjoint?"
                                                       -5)
                                                      (("2"
                                                        (expand
                                                         "empty?")
                                                        (("2"
                                                          (inst -5 "y")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "subs_no_effect_t")
                      (("2" (inst -1 "sig1" "null*x")
                        (("2" (assert)
                          (("2" (prop)
                            (("1" (replace -1)
                              (("1" (use "equal?_ref") nil nil)) nil)
                             ("2" (expand "contained?" -4)
                              (("2"
                                (flatten)
                                (("2"
                                  (hide-all-but (-4 1 2))
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_append2 formula-decl nil nominal_AC_substitution nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (equal_sub_change_eq_terms formula-decl nil nominal_AC_substitution nil)
    (empty? const-decl "bool" sets nil)
    (vars_subs_t formula-decl nil nominal_AC_substitution nil)
    (union const-decl "set" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (singleton const-decl "(singleton?)" sets nil) nil
    (contained? const-decl "bool" nominal_AC_substitution nil)
    (subset? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (equal?_ref formula-decl nil nominal_AC_equality nil)
    (idempotent? const-decl "bool" nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil) nil
    (append def-decl "list[T]" list_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil) nil nil)
   shostak))
 (contained_append 0
  (contained_append-1 nil 3851181254
   ("" (skeep)
    (("" (expand "contained?")
      (("" (prop)
        (("1" (expand "subset?" 1)
          (("1" (skeep)
            (("1" (use "dom_append")
              (("1" (expand "subset?" -1)
                (("1" (inst -1 "x")
                  (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (use "vars_img_append")
          (("2" (expand "subset?" 1)
            (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((contained? const-decl "bool" nominal_AC_substitution nil)
    (vars_img_append formula-decl nil nominal_AC_substitution nil)
    (subset? const-decl "bool" sets nil)
    (dom_append formula-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (empty? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   shostak))
 (contained_supset 0
  (contained_supset-1 nil 3851280430
   ("" (skeep)
    (("" (expand "contained?")
      (("" (prop)
        (("1" (expand "subset?" 1)
          (("1" (skeep)
            (("1" (expand "subset?") (("1" (grind) nil nil)) nil))
            nil))
          nil)
         ("2" (expand "subset?")
          (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((contained? const-decl "bool" nominal_AC_substitution nil)
    (subset? const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (empty? const-decl "bool" sets nil))
   shostak))
 (more_general_equal 0
  (more_general_equal-2 nil 3881502908
   ("" (skeep)
    (("" (iff)
      (("" (prop)
        (("1" (expand "more_general?" -1)
          (("1" (skolem -1 "del1")
            (("1" (expand "more_general?")
              (("1" (inst 1 "del1")
                (("1" (lemma "equal_sub_trans")
                  (("1"
                    (inst -1 "G" "sigma1" "sigma"
                     "append(del1, delta)")
                    (("1" (assert)
                      (("1" (rewrite "equal_sub_sym") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "more_general?")
          (("2" (skolem -1 "del")
            (("2" (inst 1 "del")
              (("2" (lemma "equal_sub_trans")
                (("2"
                  (inst -1 "G" "sigma" "sigma1" "append(del, delta)")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (equal_sub_trans formula-decl nil nominal_AC_substitution nil)
    (equal_sub_sym formula-decl nil nominal_AC_substitution nil)
    (append def-decl "list[T]" list_props nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (more_general_equal-1 nil 3851254838
   ("" (skeep)
    (("" (iff)
      (("" (prop)
        (("1" (expand "more_general?" -1)
          (("1" (skolem -1 "del1")
            (("1" (expand "more_general?")
              (("1" (inst 1 "del1")
                (("1" (lemma "equal_sub_trans")
                  (("1"
                    (inst -1 "sigma1" "sigma" "append(del1, delta)")
                    (("1" (assert)
                      (("1" (rewrite "equal_sub_sym") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "more_general?")
          (("2" (skolem -1 "del")
            (("2" (inst 1 "del")
              (("2" (lemma "equal_sub_trans")
                (("2" (inst -1 "sigma" "sigma1" "append(del, delta)")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equal_sub_trans formula-decl nil nominal_AC_substitution nil)
    (equal_sub_sym formula-decl nil nominal_AC_substitution nil)
    (append def-decl "list[T]" list_props nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (constant type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (more_general_append 0
  (more_general_append-2 nil 3881502949
   ("" (skeep)
    (("" (expand "more_general?" -1)
      (("" (skolem -1 "gamma")
        (("" (expand "more_general?" 1)
          (("" (inst 1 "gamma")
            (("" (expand "equal?" 1)
              (("" (skolem 1 "x")
                (("" (expand "subs")
                  (("" (rewrite "subs_append2")
                    (("" (rewrite "subs_append2")
                      (("" (rewrite "subs_append2")
                        (("" (lemma "equal_sub_equiv")
                          ((""
                            (inst -1 "G" "sigma1"
                             "append(gamma, sigma)"
                             "subs(delta)(null * x)")
                            (("" (assert)
                              (("" (rewrite "subs_append2") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil nil (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (append def-decl "list[T]" list_props nil)
    (equal_sub_equiv formula-decl nil nominal_AC_substitution nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil) nil
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (more_general_append-1 nil 3851257011
   ("" (skeep)
    (("" (expand "more_general?" -1)
      (("" (skolem -1 "gamma")
        (("" (expand "more_general?" 1)
          (("" (inst 1 "gamma")
            (("" (expand "equal?" 1)
              (("" (skolem 1 "x")
                (("" (expand "subs")
                  (("" (rewrite "subs_append2")
                    (("" (rewrite "subs_append2")
                      (("" (rewrite "subs_append2")
                        (("" (lemma "equal_sub_equiv")
                          ((""
                            (inst -1 "sigma1" "append(gamma, sigma)"
                             "subs(delta)(variable(x))")
                            (("" (assert)
                              (("" (rewrite "subs_append2") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (append def-decl "list[T]" list_props nil)
    (equal_sub_equiv formula-decl nil nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (constant type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (more_general_supset 0
  (more_general_supset-2 nil 3881503009
   ("" (skeep)
    (("" (expand "more_general?" -1)
      (("" (skolem -1 "sig1")
        (("" (expand "more_general?" 1)
          (("" (inst 1 "sig1")
            (("" (expand "equal?" 1)
              (("" (skolem 1 "x")
                (("" (prop)
                  (("" (expand "equal?" -1)
                    (("" (inst -1 "x")
                      (("" (expand "subset?" -2)
                        (("" (inst -2 "x")
                          (("" (assert)
                            (("" (assert)
                              ((""
                                (expand "subs")
                                ((""
                                  (rewrite "subs_append2")
                                  ((""
                                    (rewrite "subs_append2")
                                    ((""
                                      (case
                                       "subs(delta1)(subs(delta)(null *x)) = subs(delta)(null * x)")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide -1 2)
                                        (("2"
                                          (lemma "subs_no_effect_t")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "disjoint?" 1)
                                                (("2"
                                                  (expand "empty?" 1)
                                                  (("2"
                                                    (skolem 1 "x1")
                                                    (("2"
                                                      (expand
                                                       ("member"
                                                        "intersection")
                                                       -1)
                                                      (("2"
                                                        (prop)
                                                        (("2"
                                                          (use
                                                           "vars_subs_t")
                                                          (("2"
                                                            (expand
                                                             "subset?"
                                                             -1)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "x1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   ("member"
                                                                    "union")
                                                                   -1)
                                                                  (("2"
                                                                    (prop)
                                                                    (("1"
                                                                      (expand
                                                                       "disjoint?"
                                                                       -5)
                                                                      (("1"
                                                                        (expand
                                                                         "empty?"
                                                                         -5)
                                                                        (("1"
                                                                          (inst
                                                                           -5
                                                                           "x1")
                                                                          (("1"
                                                                            (expand
                                                                             ("member"
                                                                              "intersection")
                                                                             2)
                                                                            (("1"
                                                                              (expand
                                                                               "contained?"
                                                                               -5)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (expand
                                                                                   "subset?"
                                                                                   -6)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -6
                                                                                     "x1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "disjoint?"
                                                                       -5)
                                                                      (("2"
                                                                        (expand
                                                                         "empty?"
                                                                         -5)
                                                                        (("2"
                                                                          (inst
                                                                           -5
                                                                           "x1")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil nil (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (vars_subs_t formula-decl nil nominal_AC_substitution nil)
    (union const-decl "set" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (singleton const-decl "(singleton?)" sets nil) nil
    (contained? const-decl "bool" nominal_AC_substitution nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subset? const-decl "bool" sets nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (more_general_supset-1 nil 3851191210
   ("" (skeep)
    (("" (expand "more_general?" -1)
      (("" (skolem -1 "sig1")
        (("" (expand "more_general?" 1)
          (("" (inst 1 "sig1")
            (("" (expand "equal?" 1)
              (("" (skolem 1 "x")
                (("" (prop)
                  (("" (expand "equal?" -1)
                    (("" (inst -1 "x")
                      (("" (expand "subset?" -2)
                        (("" (inst -2 "x")
                          (("" (assert)
                            (("" (assert)
                              ((""
                                (expand "subs")
                                ((""
                                  (rewrite "subs_append2")
                                  ((""
                                    (rewrite "subs_append2")
                                    ((""
                                      (case
                                       "subs(delta1)(subs(delta)(variable(x))) = subs(delta)(variable(x))")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide -1 2)
                                        (("2"
                                          (lemma "subs_no_effect_t")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "disjoint?" 1)
                                                (("2"
                                                  (expand "empty?" 1)
                                                  (("2"
                                                    (skolem 1 "x1")
                                                    (("2"
                                                      (expand
                                                       ("member"
                                                        "intersection")
                                                       -1)
                                                      (("2"
                                                        (prop)
                                                        (("2"
                                                          (use
                                                           "vars_subs_t")
                                                          (("2"
                                                            (expand
                                                             "subset?"
                                                             -1)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "x1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   ("member"
                                                                    "union")
                                                                   -1)
                                                                  (("2"
                                                                    (prop)
                                                                    (("1"
                                                                      (expand
                                                                       "disjoint?"
                                                                       -5)
                                                                      (("1"
                                                                        (expand
                                                                         "empty?"
                                                                         -5)
                                                                        (("1"
                                                                          (inst
                                                                           -5
                                                                           "x1")
                                                                          (("1"
                                                                            (expand
                                                                             ("member"
                                                                              "intersection")
                                                                             2)
                                                                            (("1"
                                                                              (expand
                                                                               "contained?"
                                                                               -5)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (expand
                                                                                   "subset?"
                                                                                   -6)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -6
                                                                                     "x1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "disjoint?"
                                                                       -5)
                                                                      (("2"
                                                                        (expand
                                                                         "empty?"
                                                                         -5)
                                                                        (("2"
                                                                          (inst
                                                                           -5
                                                                           "x1")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (vars_subs_t formula-decl nil nominal_AC_substitution nil)
    (union const-decl "set" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (singleton const-decl "(singleton?)" sets nil)
    (contained? const-decl "bool" nominal_AC_substitution nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (subset? const-decl "bool" sets nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (constant type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (more_general_is_more_general 0
  (more_general_is_more_general-1 nil 3888085268
   ("" (skeep)
    (("" (expand "more_general?")
      (("" (skeep)
        (("" (inst 1 "delta2")
          (("" (expand "equal?" 1)
            (("" (skeep)
              (("" (expand "equal?" -1) (("" (inst -1 "X") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil nil (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil) nil nil)
   shostak))
 (renaming_ord 0
  (renaming_ord-2 nil 3881503064
   ("" (induct "t")
    (("1" (skolem 1 "a")
      (("1" (skeep) (("1" (rewrite "subs_const") nil nil)) nil)) nil)
     ("2" (skolem 1 ("pi" "X"))
      (("2" (skeep)
        (("2" (typepred "rho")
          (("2" (case "member(X, dom(rho))")
            (("1" (expand "renaming?" -2)
              (("1" (flatten)
                (("1" (hide -3)
                  (("1" (inst -2 "subs(rho)(null * X)")
                    (("1" (prop)
                      (("1" (expand "ord" 1 2)
                        (("1" (rewrite "subs_ext_pi" 1)
                          (("1" (expand "subs" 1)
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (expand "member" 1)
                        (("2" (expand "img" 1)
                          (("2" (inst 1 "X")
                            (("2" (assert)
                              (("2"
                                (expand "subs" 1 1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "member" 1)
              (("2" (expand "dom" 1)
                (("2" (flatten)
                  (("2" (expand "subs" -1)
                    (("2" (rewrite "subs_ext_pi" 1)
                      (("2" (expand "subs" 1) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skolem 1 "rho") (("3" (rewrite "subs_unit") nil nil)) nil)
     ("4" (skolem 1 ("t1" "t2"))
      (("4" (prop)
        (("4" (skeep)
          (("4" (rewrite "subs_pair")
            (("4" (assert)
              (("4" (expand "ord" 1) (("4" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skolem 1 ("f" "t"))
      (("5" (prop)
        (("5" (skeep)
          (("5" (rewrite "subs_app")
            (("5" (expand "ord") (("5" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("6" (skolem 1 ("f" "t"))
      (("6" (prop)
        (("6" (skeep)
          (("6" (rewrite "subs_ac")
            (("6" (expand "ord" 1) (("6" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("7" (skolem 1 ("a" "t1"))
      (("7" (prop)
        (("7" (skeep)
          (("7" (rewrite "subs_abs") (("7" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_abs formula-decl nil nominal_AC_substitution nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (nominal_AC_term_induction formula-decl nil nominal_AC_term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil) nil
    (ord const-decl "upto(6)" nominal_AC_term_adt nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil))
   nil)
  (renaming_ord-1 nil 3854626666
   ("" (induct "t")
    (("1" (skolem 1 "a")
      (("1" (skeep) (("1" (rewrite "subs_const") nil nil)) nil)) nil)
     ("2" (skolem 1 "X")
      (("2" (skeep)
        (("2" (typepred "rho")
          (("2" (case "member(X, dom(rho))")
            (("1" (expand "renaming?" -2)
              (("1" (flatten)
                (("1" (hide -3)
                  (("1" (inst -2 "subs(rho)(variable(X))")
                    (("1" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (expand "member" 1)
              (("2" (expand "dom" 1)
                (("2" (flatten)
                  (("2" (expand "subs" -1) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skolem 1 "rho") (("3" (rewrite "subs_unit") nil nil)) nil)
     ("4" (skolem 1 ("t1" "t2"))
      (("4" (prop)
        (("4" (skeep)
          (("4" (rewrite "subs_pair")
            (("4" (assert)
              (("4" (expand "ord" 1) (("4" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skolem 1 ("f" "t"))
      (("5" (prop)
        (("5" (skeep)
          (("5" (rewrite "subs_app")
            (("5" (expand "ord") (("5" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("6" (skolem 1 ("f" "t"))
      (("6" (prop)
        (("6" (skeep)
          (("6" (rewrite "subs_ac")
            (("6" (expand "ord" 1) (("6" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_ac formula-decl nil nominal_AC_substitution nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (nominal_AC_term_induction formula-decl nil nominal_AC_term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (constant type-eq-decl nil nominal_AC_term_properties nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ord const-decl "upto(6)" nominal_AC_term_adt nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil))
   shostak))
 (renaming_is_ac_sym 0
  (renaming_is_ac_sym-1 nil 3854656903
   ("" (skeep)
    (("" (lemma "renaming_ord")
      (("" (inst -1 "rho" "t")
        (("" (case "is_ac_sym?(subs(rho)(t),f)")
          (("1" (assert)
            (("1" (expand "is_ac_sym?" -1)
              (("1" (flatten)
                (("1" (expand "ord" -3)
                  (("1" (assert)
                    (("1" (case "ac_app?(t)")
                      (("1" (assert)
                        (("1" (expand "is_ac_sym?" 1)
                          (("1" (lemma "nominal_AC_term_ac_app_eta")
                            (("1" (inst -1 "t")
                              (("1"
                                (replace -1 -4 :dir rl)
                                (("1"
                                  (rewrite "subs_ac")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "is_ac_sym?(t, f)")
            (("1" (assert)
              (("1" (hide 2)
                (("1" (expand "is_ac_sym?")
                  (("1" (flatten)
                    (("1" (lemma "nominal_AC_term_ac_app_eta")
                      (("1" (inst -1 "t")
                        (("1" (replace -1 :dir rl)
                          (("1" (rewrite "subs_ac")
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((renaming_ord formula-decl nil nominal_AC_substitution nil) nil
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil)
    (ord const-decl "upto(6)" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (nominal_AC_term_ac_app_eta formula-decl nil nominal_AC_term_adt nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (renaming_ord2 0
  (renaming_ord2-1 nil 3854905163
   ("" (skeep)
    (("" (lemma "renaming_ord")
      (("" (split 1)
        (("1" (grind) nil nil) ("2" (grind) nil nil)
         ("3" (grind) nil nil) ("4" (grind) nil nil)
         ("5" (grind) nil nil) ("6" (grind) nil nil)
         ("7" (grind) nil nil) ("8" (grind) nil nil)
         ("9" (grind) nil nil) ("10" (grind) nil nil)
         ("11" (grind) nil nil) ("12" (grind) nil nil)
         ("13" (grind) nil nil) ("14" (grind) nil nil))
        nil))
      nil))
    nil)
   ((renaming_ord formula-decl nil nominal_AC_substitution nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (ord const-decl "upto(6)" nominal_AC_term_adt nil))
   shostak))
 (renaming_var 0
  (renaming_var-1 nil 3854724395
   ("" (skeep)
    (("" (expand "subs")
      (("" (use "renaming_ord") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (ord const-decl "upto(6)" nominal_AC_term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (renaming_ord formula-decl nil nominal_AC_substitution nil))
   shostak))
 (renaming_susp_var 0
  (renaming_susp_var-1 nil 3881507261
   ("" (skeep)
    (("" (case "member(X, dom(rho))")
      (("1" (typepred "rho")
        (("1" (expand "renaming?")
          (("1" (flatten)
            (("1" (inst -1 "subs(rho)(X)")
              (("1" (split -1)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (expand "subs" -2)
                      (("1" (rewrite "subs_ext_pi" 1)
                        (("1" (expand "subs" 1 1)
                          (("1" (lemma "nominal_AC_term_times_eta")
                            (("1" (expand "subs" -2)
                              (("1"
                                (inst -1 "subs(rho)(null * X)")
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (replace -1 :dir rl)
                                    (("1"
                                      (expand "ext" 1)
                                      (("1"
                                        (rewrite "append_null")
                                        (("1"
                                          (expand "subs" 1 2)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (expand ("member" "img") 1)
                    (("2" (inst 1 "X") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (grind)
        (("2" (lemma "subs_ext_pi2")
          (("2" (inst -1 "X" "null" "pi" "rho")
            (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((renaming type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (append_null formula-decl nil list_props nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil) nil
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (nominal_AC_term_times_eta formula-decl nil nominal_AC_term_adt nil)
    (subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subs_ext_pi2 formula-decl nil nominal_AC_substitution nil))
   shostak))
 (renaming_var3_TCC1 0
  (renaming_var3_TCC1-1 nil 3881511322
   ("" (skeep)
    (("" (lemma "renaming_ord2")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((renaming_ord2 formula-decl nil nominal_AC_substitution nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (renaming_var3 subtype
    "nominal_AC_substitution.subs(nominal_AC_substitution.rho)(nominal_AC_substitution.t)"
    "(nominal_AC_term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].var?)")))
 (renaming_var3_TCC2 0
  (renaming_var3_TCC2-1 nil 3881511322
   ("" (skeep)
    (("" (expand "subs" 1)
      (("" (lemma "renaming_ord2")
        (("" (assert)
          (("" (inst -1 "rho" "null * V(t)") (("" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (renaming_ord2 formula-decl nil nominal_AC_substitution nil))
   nil
   (renaming_var3 subtype
    "nominal_AC_substitution.subs(nominal_AC_substitution.rho)(nominal_AC_term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].V(nominal_AC_substitution.t))"
    "(nominal_AC_term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].var?)")))
 (renaming_var3 0
  (renaming_var3-1 nil 3881511338
   ("" (skeep)
    (("" (lemma "nominal_AC_term_times_eta")
      (("" (inst -1 "t")
        (("" (replace -1 1 :dir rl)
          (("" (assert)
            (("" (rewrite "subs_ext_pi")
              (("" (typepred "rho")
                (("" (expand "renaming?" -1)
                  (("" (flatten)
                    (("" (case "member(V(t), dom(rho))")
                      (("1" (inst -2 "subs(rho)(V(t))")
                        (("1" (prop)
                          (("1" (expand "ext" 1 1)
                            (("1" (assert) nil nil)) nil)
                           ("2" (expand "member" 1)
                            (("2" (expand "img" 1)
                              (("2" (inst 1 "V(t)") nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -1 -2) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nominal_AC_term_times_eta formula-decl nil nominal_AC_term_adt nil)
    (subs_ext_pi formula-decl nil nominal_AC_substitution nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil))
   shostak))
 (renaming_susp_var2 0
  (renaming_susp_var2-1 nil 3893407503
   ("" (skeep)
    (("" (lemma "renaming_susp_var")
      (("" (inst -1 "V(s)" "p(s)" "rho")
        (("" (assert)
          (("" (flatten)
            (("" (lemma "nominal_AC_term_times_eta")
              (("" (inst -1 "s")
                (("" (replace -1 1 :dir rl)
                  (("" (replace -3) (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((renaming_susp_var formula-decl nil nominal_AC_substitution nil)
    (nominal_AC_term_times_eta formula-decl nil nominal_AC_term_adt nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil) nil)
   shostak))
 (renaming_susp_var_ext 0
  (renaming_susp_var_ext-1 nil 3893443333
   ("" (skeep)
    (("" (use "renaming_susp_var2")
      (("" (assert)
        (("" (flatten)
          (("" (replace -2) (("" (rewrite "subs_ext") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((renaming_susp_var2 formula-decl nil nominal_AC_substitution nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subs_ext formula-decl nil nominal_AC_substitution nil)
    (reverse def-decl "list[T]" list_props nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil))
   shostak))
 (renaming_num_arg 0
  (renaming_num_arg-1 nil 3855260386
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "num_arg" 1 2)
            (("" (lift-if)
              (("" (split 1)
                (("1" (flatten)
                  (("1" (lemma "nominal_AC_term_pair_eta")
                    (("1" (inst -1 "t")
                      (("1" (replace -1 1 :dir rl)
                        (("1" (rewrite "subs_pair" 1)
                          (("1" (assert)
                            (("1" (expand "num_arg" 1 1)
                              (("1"
                                (inst-cp -3 "term1(t)")
                                (("1"
                                  (split -4)
                                  (("1"
                                    (inst -1 "f" "rho")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -4 "term2(t)")
                                          (("1"
                                            (split -4)
                                            (("1"
                                              (inst -1 "f" "rho")
                                              nil
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (lemma "nominal_AC_term_ac_app_eta")
                        (("1" (inst -1 "t")
                          (("1" (replace -1 1 :dir rl)
                            (("1" (rewrite "subs_ac")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "num_arg" 1 1)
                                  (("1"
                                    (inst -4 "ac_arg(t)")
                                    (("1"
                                      (split -4)
                                      (("1"
                                        (inst -1 "f" "rho")
                                        nil
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "num_arg" 2)
                        (("2" (lift-if)
                          (("2" (split 2)
                            (("1" (flatten)
                              (("1"
                                (lemma "renaming_ord2")
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (lemma "renaming_ord2")
                                    (("1"
                                      (inst -1 "rho" "t")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide 1 2 3 4)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "nominal_AC_term_ac_app_eta")
                                                (("1"
                                                  (inst -1 "t")
                                                  (("1"
                                                    (replace
                                                     -1
                                                     -4
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (rewrite
                                                       "subs_ac"
                                                       -4)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((renaming_ord2 formula-decl nil nominal_AC_substitution nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (nominal_AC_term_ac_app_eta formula-decl nil nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nominal_AC_term_pair_eta formula-decl nil nominal_AC_term_adt nil) nil nil
    (string type-eq-decl nil strings nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) nil
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (renaming_select 0
  (renaming_select-1 nil 3855260906
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "select" 1 2)
            (("" (lift-if)
              (("" (split 1)
                (("1" (flatten)
                  (("1" (split 1)
                    (("1" (flatten)
                      (("1" (lemma "nominal_AC_term_pair_eta")
                        (("1" (inst -1 "t")
                          (("1" (replace -1 1 :dir rl)
                            (("1" (rewrite "subs_pair")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "select" 1 1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (rewrite "renaming_num_arg")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -4 "term1(t)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (inst -1 "f" "i" "rho")
                                              nil
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (lemma "nominal_AC_term_pair_eta")
                        (("2" (inst -1 "t")
                          (("2" (replace -1 2 :dir rl)
                            (("2" (rewrite "subs_pair")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "select" 2 1)
                                  (("2"
                                    (rewrite "renaming_num_arg")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (inst -3 "term2(t)")
                                        (("2"
                                          (prop)
                                          (("1" (inst?) nil nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (lemma "nominal_AC_term_ac_app_eta")
                        (("1" (inst -1 "t")
                          (("1" (replace -1 1 :dir rl)
                            (("1" (rewrite "subs_ac" 1)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "select" 1 1)
                                  (("1"
                                    (inst -4 "ac_arg(t)")
                                    (("1"
                                      (split -4)
                                      (("1" (inst?) nil nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "select" 2 1)
                        (("2" (lift-if)
                          (("2" (lemma "renaming_ord2")
                            (("2" (split 2)
                              (("1"
                                (flatten)
                                (("1"
                                  (hide 1 2)
                                  (("1"
                                    (inst -2 "rho" "t")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (case "ac_app?(t)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "nominal_AC_term_ac_app_eta")
                                          (("1"
                                            (inst -1 "t")
                                            (("1"
                                              (replace -1 -4 :dir rl)
                                              (("1"
                                                (rewrite "subs_ac")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst -3 "rho" "t")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((renaming_ord2 formula-decl nil nominal_AC_substitution nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (nominal_AC_term_ac_app_eta formula-decl nil nominal_AC_term_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (renaming_num_arg formula-decl nil nominal_AC_substitution nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nominal_AC_term_pair_eta formula-decl nil nominal_AC_term_adt nil) nil
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) nil
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (renaming_delete 0
  (renaming_delete-1 nil 3855262117
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "delete" 1 2)
            (("" (lift-if)
              (("" (split 1)
                (("1" (flatten)
                  (("1" (lemma "nominal_AC_term_pair_eta")
                    (("1" (inst -1 "t")
                      (("1" (split 1)
                        (("1" (flatten)
                          (("1" (split 1)
                            (("1" (flatten)
                              (("1"
                                (expand "delete" 1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (split 1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (replace -6 1 :dir rl)
                                                (("1"
                                                  (rewrite "subs_pair")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (replace -5 1 :dir rl)
                                                (("2"
                                                  (rewrite "subs_pair")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (rewrite
                                                       "renaming_num_arg")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (replace -4 1 :dir rl)
                                              (("2"
                                                (rewrite "subs_pair")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (rewrite
                                                     "renaming_num_arg")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (hide 2)
                                        (("2"
                                          (use "renaming_ord2")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (rewrite "subs_pair" 2)
                                (("2"
                                  (replace -2 2 :dir rl)
                                  (("2"
                                    (rewrite "subs_pair" 2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "delete" 2 1)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (split 1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (rewrite
                                                     "renaming_num_arg")
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (inst
                                                     -5
                                                     "term1(t)")
                                                    (("2"
                                                      (split -5)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "f"
                                                         "i"
                                                         "rho")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           2)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (rewrite
                                                 "renaming_num_arg")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split 2)
                            (("1" (flatten)
                              (("1"
                                (expand "delete" 1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (split 1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (replace -4 -1 :dir rl)
                                            (("1"
                                              (rewrite "subs_pair" -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite
                                                   "renaming_num_arg")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (replace -4 -1 :dir rl)
                                                (("1"
                                                  (rewrite
                                                   "subs_pair"
                                                   -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite
                                                       "renaming_num_arg")
                                                      (("1"
                                                        (replace
                                                         -4
                                                         1
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (rewrite
                                                           "subs_pair")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (replace -3 1 :dir rl)
                                                (("2"
                                                  (rewrite
                                                   "subs_pair"
                                                   1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (rewrite
                                                       "renaming_num_arg")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (hide 2)
                                        (("2"
                                          (replace -2 1 :dir rl)
                                          (("2"
                                            (rewrite "subs_pair")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (rewrite "subs_pair" 2)
                                (("2"
                                  (replace -1 2 :dir rl)
                                  (("2"
                                    (rewrite "subs_pair")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "delete" 2 1)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (rewrite
                                                 "renaming_num_arg")
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (split 2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (rewrite
                                                     "renaming_num_arg")
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (rewrite
                                                     "renaming_num_arg")
                                                    (("2"
                                                      (rewrite
                                                       "renaming_num_arg")
                                                      (("2"
                                                        (inst
                                                         -3
                                                         "term2(t)")
                                                        (("2"
                                                          (split -3)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (split 1)
                        (("1" (flatten)
                          (("1" (expand "delete" 1)
                            (("1" (lift-if)
                              (("1"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (hide -5 1)
                                    (("1"
                                      (lemma "renaming_ord2")
                                      (("1"
                                        (inst -1 "rho" "t")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (hide 1)
                                    (("2"
                                      (split 1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (rewrite "subs_unit" 1)
                                              nil
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (rewrite
                                               "renaming_num_arg"
                                               1)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (rewrite "subs_unit")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (rewrite "subs_ac" 2)
                            (("2" (expand "delete" 2 1)
                              (("2"
                                (lift-if)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (hide 1)
                                      (("1"
                                        (hide -4)
                                        (("1"
                                          (lemma "renaming_ord2")
                                          (("1"
                                            (inst -1 "rho" "t")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (hide 1)
                                      (("2"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (rewrite
                                                 "renaming_num_arg")
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (replace -2)
                                                (("2"
                                                  (replace -4)
                                                  (("2"
                                                    (lemma
                                                     "nominal_AC_term_ac_app_eta")
                                                    (("2"
                                                      (inst -1 "t")
                                                      (("2"
                                                        (replace -5)
                                                        (("2"
                                                          (replace
                                                           -1
                                                           2
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (rewrite
                                                             "subs_ac")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst
                                                                 -6
                                                                 "ac_arg(t)")
                                                                (("2"
                                                                  (split
                                                                   -6)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "f"
                                                                     "i"
                                                                     "rho")
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (lemma "nominal_AC_term_ac_app_eta")
                                            (("2"
                                              (inst -1 "t")
                                              (("2"
                                                (replace -1 1 :dir rl)
                                                (("2"
                                                  (rewrite "subs_ac" 1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "delete" 2 1)
                        (("2" (lift-if)
                          (("2" (split 2)
                            (("1" (flatten)
                              (("1"
                                (hide -2 1)
                                (("1"
                                  (lemma "renaming_ord2")
                                  (("1"
                                    (inst?)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (hide 1 -3)
                                    (("1"
                                      (lemma "renaming_ord2")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide 1 2 3 4)
                                              (("1"
                                                (lemma
                                                 "nominal_AC_term_ac_app_eta")
                                                (("1"
                                                  (inst -1 "t")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace
                                                       -1
                                                       -4
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (rewrite
                                                         "subs_ac")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (rewrite "subs_unit" 2)
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nominal_AC_term_ac_app_eta formula-decl nil nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil) nil
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (renaming_ord2 formula-decl nil nominal_AC_substitution nil)
    (renaming_num_arg formula-decl nil nominal_AC_substitution nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (nominal_AC_term_pair_eta formula-decl nil nominal_AC_term_adt nil) nil
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) nil
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (subs_context_mem_TCC1 0
  (subs_context_mem_TCC1-1 nil 3891679801 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (injective? const-decl "bool" functions nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil) nil nil
    nil (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil))
   nil
   (subs_context_mem subtype
    "nominal_AC_substitution.subs(nominal_AC_substitution.rho)(nominal_AC_substitution.X)"
    "(nominal_AC_term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].var?)")))
 (subs_context_mem 0
  (subs_context_mem-1 nil 3881593939
   ("" (induct "G")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "subs" -5)
            (("2" (expand "member" -5)
              (("2" (expand "member" 1)
                (("2" (flatten)
                  (("2" (prop)
                    (("1" (decompose-equality 1)
                      (("1" (hide -3)
                        (("1" (expand "subs" -2 2)
                          (("1" (name-replace "Y" "hd`2")
                            (("1" (typepred "rho")
                              (("1"
                                (expand "renaming?")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (case "member(X1, dom(rho))")
                                    (("1"
                                      (case "member(Y, dom(rho))")
                                      (("1"
                                        (inst -4 "X1" "Y")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "subs" 1)
                                            (("1"
                                              (lemma
                                               "renaming_susp_var")
                                              (("1"
                                                (inst
                                                 -1
                                                 "X1"
                                                 "null"
                                                 "rho")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (replace -2 1)
                                                    (("1"
                                                      (lemma
                                                       "renaming_susp_var")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "Y"
                                                         "null"
                                                         "rho")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (replace
                                                             -2)
                                                            (("1"
                                                              (expand
                                                               "subs"
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst -6 "Y")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (expand "Y" 1)
                                            (("1"
                                              (expand "subset?" -6)
                                              (("1"
                                                (inst -6 "hd`2")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "vars" 4)
                                                    (("1"
                                                      (expand
                                                       ("member"
                                                        "add"))
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "vars_finset" 1)
                                            (("2"
                                              (inst 1 "subs(rho)(X1)")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (expand
                                                   ("member" "img")
                                                   1)
                                                  (("1"
                                                    (inst 1 "X1")
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "subs" 1)
                                                  (("2"
                                                    (lemma
                                                     "renaming_susp_var")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "X1"
                                                       "null"
                                                       "rho")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (replace -2)
                                                          (("2"
                                                            (expand
                                                             "vars"
                                                             1)
                                                            (("2"
                                                              (expand
                                                               ("member"
                                                                "singleton")
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   ("member"
                                                                    "dom")
                                                                   2)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "subs"
                                                                       -3)
                                                                      (("2"
                                                                        (replace
                                                                         -3)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (case "member(Y, dom(rho))")
                                      (("1"
                                        (inst -6 "X1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (rewrite "vars_finset" 3)
                                            (("1"
                                              (inst 3 "subs(rho)(Y)")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (expand
                                                   ("member" "img")
                                                   1)
                                                  (("1"
                                                    (inst 1 "Y")
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "renaming_susp_var")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "Y"
                                                     "null"
                                                     "rho")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand
                                                         "subs"
                                                         1)
                                                        (("2"
                                                          (replace -2)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "vars"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 ("member"
                                                                  "singleton")
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   ("member "
                                                                    "dom")
                                                                   2)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "subs"
                                                                       -4)
                                                                      (("2"
                                                                        (replace
                                                                         -4)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand ("member" "dom") 1)
                                        (("2"
                                          (expand ("member" "dom") 2)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (expand "subs" (-1 -2))
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (replace -2)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst -2 "V1" "X1" "a" "rho")
                      (("2" (assert)
                        (("2" (prop)
                          (("1" (hide-all-but (-3 1))
                            (("1" (expand "subset?" 1)
                              (("1"
                                (skeep)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "subs" 1 1)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (typepred "rho")
          (("3" (expand "renaming?" -1)
            (("3" (case "member(X1, dom(rho))")
              (("1" (flatten)
                (("1" (inst -2 "subs(rho)(X1)")
                  (("1" (assert)
                    (("1" (expand ("member" "img") 1)
                      (("1" (inst 1 "X1") nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (expand ("member" "dom") 1)
                (("2" (flatten)
                  (("2" (replace -1) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (renaming_susp_var formula-decl nil nominal_AC_substitution nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (add const-decl "(nonempty?)" sets nil) nil
    (singleton const-decl "(singleton?)" sets nil) nil
    (vars_finset formula-decl nil nominal_AC_term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (empty? const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (subs def-decl "fresh_context" nominal_AC_substitution nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (member def-decl "bool" list_props nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil) nil
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (subset? const-decl "bool" sets nil)
    (vars def-decl "finite_set[variable]" nominal_AC_freshness nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil))
   shostak))
 (subs_context_mem2_TCC1 0
  (subs_context_mem2_TCC1-1 nil 3891679801 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil) nil
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil))
   nil
   (subs_context_mem2 subtype
    "nominal_AC_substitution.subs(nominal_AC_substitution.rho)(nominal_AC_substitution.X)"
    "(nominal_AC_term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].var?)")))
 (subs_context_mem2 0
  (subs_context_mem2-1 nil 3881673145
   ("" (induct "G")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand ("member" "cons") -2)
            (("2" (expand "subs" 1 2)
              (("2" (expand "member" 1)
                (("2" (flatten)
                  (("2" (split -2)
                    (("1" (decompose-equality -1)
                      (("1" (assert) nil nil)) nil)
                     ("2" (inst -2 "X" "a" "rho")
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (expand "subs" 1)
          (("3" (use "renaming_ord") (("3" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((ord const-decl "upto(6)" nominal_AC_term_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (renaming_ord formula-decl nil nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (subs def-decl "fresh_context" nominal_AC_substitution nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil))
   shostak))
 (renaming_fresh 0
  (renaming_fresh-1 nil 3881658188
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (lemma "nominal_AC_term_opt")
            (("" (inst?)
              (("" (prop)
                (("1" (replace -2 -7)
                  (("1" (rewrite "subs_const")
                    (("1" (expand "fresh" -7)
                      (("1" (expand "fresh" 1) (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -3)
                  (("2" (lemma "renaming_susp_var")
                    (("2" (inst -1 "V(t)" " p(t)" " rho")
                      (("2" (flatten)
                        (("2" (replace -4 -8)
                          (("2" (replace -2)
                            (("2" (expand "fresh" -8)
                              (("2"
                                (expand "fresh" 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (name-replace
                                     "b"
                                     "act(reverse(p(t)))(a)")
                                    (("2"
                                      (lemma "subs_context_mem")
                                      (("2"
                                        (inst
                                         -1
                                         "G"
                                         "V1"
                                         "V(t)"
                                         "b"
                                         "rho")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (prop)
                                            (("2"
                                              (hide-all-but (-4 -6 1))
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (replace -1)
                  (("3" (rewrite "subs_unit")
                    (("3" (expand "fresh" 1) (("3" (propax) nil nil))
                      nil))
                    nil))
                  nil)
                 ("4" (replace -2 -7)
                  (("4" (rewrite "subs_pair")
                    (("4" (expand "fresh" -7)
                      (("4" (flatten)
                        (("4" (expand "fresh" 1)
                          (("4" (assert)
                            (("4" (prop)
                              (("1"
                                (inst -3 "term1(t)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst -1 "G" "V1" "a" "rho")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (hide-all-but (-2 -4 1))
                                          (("1"
                                            (expand "subset?" 1)
                                            (("1"
                                              (skeep)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -3 "term2(t)")
                                (("2"
                                  (prop)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (inst -1 "V1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (hide-all-but (-2 -4 1))
                                            (("1"
                                              (expand "subset?")
                                              (("1"
                                                (skeep)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (replace -2 -7)
                  (("5" (rewrite "subs_app")
                    (("5" (expand "fresh" -7)
                      (("5" (expand "fresh" 1)
                        (("5" (assert)
                          (("5" (inst -3 "arg(t)")
                            (("5" (prop)
                              (("1"
                                (inst -1 "G" "V1" "a" "rho")
                                (("1"
                                  (assert)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (hide-all-but (-2 -4 1))
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (replace -2 -7)
                  (("6" (rewrite "subs_ac")
                    (("6" (expand "fresh" -7)
                      (("6" (expand "fresh" 1)
                        (("6" (assert)
                          (("6" (inst -3 "ac_arg(t)")
                            (("6" (prop)
                              (("1"
                                (inst?)
                                (("1"
                                  (inst -1 "V1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (hide-all-but (-2 -4 1))
                                        (("1"
                                          (expand "subset?" 1)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (expand "subset?" -3)
                                              (("1"
                                                (inst -3 "x")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (use "vars_ac2")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (replace -2 -7)
                  (("7" (rewrite "subs_abs" -7)
                    (("7" (expand "fresh" -7)
                      (("7" (prop)
                        (("1" (expand "fresh" 1)
                          (("1" (assert) nil nil)) nil)
                         ("2" (expand "fresh" 2)
                          (("2" (assert)
                            (("2" (inst -4 "body(t)")
                              (("2"
                                (prop)
                                (("1"
                                  (inst -1 "G" "V1" "a" "rho")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (hide-all-but (-3 -5 1))
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_abs formula-decl nil nominal_AC_substitution nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (string type-eq-decl nil strings nil)
    (vars_ac2 formula-decl nil nominal_AC_term_properties nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_context_mem formula-decl nil nominal_AC_substitution nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (act def-decl "atom" atoms nil)
    (reverse def-decl "list[T]" list_props nil)
    (renaming_susp_var formula-decl nil nominal_AC_substitution nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (atom? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (a adt-accessor-decl "[(atom?) -> atom]" nominal_AC_term_adt nil)
    (nominal_AC_term_opt formula-decl nil nominal_AC_term_properties nil) nil
    (subs def-decl "fresh_context" nominal_AC_substitution nil)
    (fresh def-decl "bool" nominal_AC_freshness nil)
    (vars def-decl "finite_set[variable]" nominal_AC_freshness nil) nil
    (subset? const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    nil (member const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) nil
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (renaming_fresh2 0
  (renaming_fresh2-1 nil 3881675414
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (lemma "nominal_AC_term_opt")
            (("" (inst?)
              (("" (prop)
                (("1" (expand "fresh" -4)
                  (("1" (assert)
                    (("1" (replace -2)
                      (("1" (rewrite "subs_const")
                        (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "fresh" -4)
                  (("2" (assert)
                    (("2" (lemma "renaming_ord2")
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (flatten)
                            (("2" (hide 1 2 3 4 5 6)
                              (("2"
                                (expand "fresh" 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (lemma "renaming_susp_var")
                                    (("2"
                                      (inst -1 "V(t)" "p(t)" "rho")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (replace -5 1)
                                          (("2"
                                            (replace -2)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (name-replace
                                                 "b"
                                                 "act(reverse(p(t)))(a)")
                                                (("2"
                                                  (use
                                                   "subs_context_mem2")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide -2)
                  (("3" (replace -1)
                    (("3" (rewrite "subs_unit") (("3" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("4" (replace -2 -4)
                  (("4" (replace -2 1)
                    (("4" (rewrite "subs_pair")
                      (("4" (expand "fresh" (-4 1))
                        (("4" (flatten)
                          (("4" (prop)
                            (("1" (inst -3 "term1(t)")
                              (("1"
                                (prop)
                                (("1"
                                  (inst?)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (inst -3 "term2(t)")
                              (("2"
                                (prop)
                                (("1"
                                  (inst?)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (replace -2 -4)
                  (("5" (replace -2 1)
                    (("5" (rewrite "subs_app" 1)
                      (("5" (expand "fresh" (-4 1))
                        (("5" (inst -3 "arg(t)")
                          (("5" (prop)
                            (("1" (inst?) (("1" (assert) nil nil)) nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (replace -2 -4)
                  (("6" (replace -2 1)
                    (("6" (rewrite "subs_ac")
                      (("6" (expand "fresh" (-4 1))
                        (("6" (inst -3 "ac_arg(t)")
                          (("6" (prop)
                            (("1" (inst?) (("1" (grind) nil nil)) nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (replace -2 -4)
                  (("7" (replace -2 1)
                    (("7" (rewrite "subs_abs" 1)
                      (("7" (expand "fresh" (-4 1))
                        (("7" (prop)
                          (("7" (inst -4 "body(t)")
                            (("7" (prop)
                              (("1"
                                (inst?)
                                (("1" (grind) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_abs formula-decl nil nominal_AC_substitution nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (renaming_ord2 formula-decl nil nominal_AC_substitution nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_context_mem2 formula-decl nil nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (act def-decl "atom" atoms nil)
    (reverse def-decl "list[T]" list_props nil)
    (renaming_susp_var formula-decl nil nominal_AC_substitution nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (atom? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (a adt-accessor-decl "[(atom?) -> atom]" nominal_AC_term_adt nil)
    (nominal_AC_term_opt formula-decl nil nominal_AC_term_properties nil) nil
    (subs def-decl "fresh_context" nominal_AC_substitution nil)
    (fresh def-decl "bool" nominal_AC_freshness nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) nil
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (renaming_equal 0
  (renaming_equal-3 nil 3881503958
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (lemma "nominal_AC_term_opt")
              (("" (inst -1 "t")
                (("" (prop)
                  (("1" (replace -2 -6)
                    (("1" (rewrite "subs_const")
                      (("1" (expand "equal?" -6)
                        (("1" (lemma "renaming_ord2")
                          (("1" (inst -1 "rho" "s")
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (hide 1 2 3 4 5 6)
                                  (("1"
                                    (lemma "nominal_AC_term_at_eta")
                                    (("1"
                                      (inst -1 "s")
                                      (("1"
                                        (replace -1 -8 :dir rl)
                                        (("1"
                                          (rewrite "subs_const" -8)
                                          (("1"
                                            (expand "equal?" 1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "member(V(t), dom(rho))")
                    (("1" (lemma "renaming_ord2")
                      (("1" (inst -1 "rho" "t")
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (hide 1 2 3 4 5 6)
                              (("1"
                                (expand "equal?" -8)
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (lemma "nominal_AC_term_times_eta")
                                      (("1"
                                        (inst -1 "subs(rho)(t)")
                                        (("1"
                                          (lemma "renaming_ord2")
                                          (("1"
                                            (inst -1 "rho" "s")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (hide 1 2 3 4 5 6)
                                                  (("1"
                                                    (case
                                                     "member(V(s), dom(rho))")
                                                    (("1"
                                                      (typepred "rho")
                                                      (("1"
                                                        (expand
                                                         "renaming?"
                                                         -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "V(t)"
                                                               "V(s)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "subs"
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "equal?"
                                                                         1)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (inst
                                                                               -14
                                                                               "a")
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "subs_context_mem")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "G"
                                                                                     "V1"
                                                                                     "V(t)"
                                                                                     "a"
                                                                                     "rho")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "subset?"
                                                                                           -10)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -10
                                                                                             "V(t)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "vars"
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   ("member "
                                                                                                    "singleton")
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "subset?"
                                                                                           -10)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -10
                                                                                             "V(t)")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (use
                                                                                                 "renaming_var3")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (typepred
                                                                                 "a")
                                                                                (("2"
                                                                                  (expand
                                                                                   "ds")
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "renaming_susp_var")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "V(t)"
                                                                                         "p(t)"
                                                                                         "rho")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "nominal_AC_term_times_eta")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "t")
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   -4
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -3
                                                                                                     -4)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         -1
                                                                                                         -2
                                                                                                         -3)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "renaming_susp_var")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "V(s)"
                                                                                                             "p(s)"
                                                                                                             "rho")
                                                                                                            (("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "nominal_AC_term_times_eta")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "s")
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     -4
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -3
                                                                                                                       -4)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "renaming_susp_var")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "V(t)"
                                                                           "null"
                                                                           "rho")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (replace
                                                                               -2)
                                                                              (("2"
                                                                                (lemma
                                                                                 "renaming_susp_var")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "V(s)"
                                                                                   "null"
                                                                                   "rho")
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -2)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -1
                                                                                         -2
                                                                                         -3
                                                                                         -4)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "renaming_var3")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "rho"
                                                                                             "t")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "renaming_var3")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "rho"
                                                                                                   "s")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst -7 "V(s)")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split -7)
                                                          (("1"
                                                            (expand
                                                             "vars"
                                                             -8)
                                                            (("1"
                                                              (expand
                                                               "subset?"
                                                               -8)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "vars_finset")
                                                            (("2"
                                                              (inst
                                                               1
                                                               "subs(rho)(V(t))")
                                                              (("2"
                                                                (expand
                                                                 "member"
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "img"
                                                                   1)
                                                                  (("2"
                                                                    (lemma
                                                                     "renaming_susp_var")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "V(t)"
                                                                       "p(t)"
                                                                       "rho")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand
                                                                           "vars"
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "singleton"
                                                                               1)
                                                                              (("2"
                                                                                (prop)
                                                                                (("1"
                                                                                  (inst
                                                                                   1
                                                                                   "V(t)")
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   ("member"
                                                                                    "dom")
                                                                                   2)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "nominal_AC_term_times_eta")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "s")
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1
                                                                                           -14
                                                                                           :dir
                                                                                           rl)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "renaming_susp_var")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "V(s)"
                                                                                               "p(s)"
                                                                                               "rho")
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -6)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -12
                                                                                                           -16)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -5)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "member(V(s), dom(rho))")
                      (("1" (inst -4 "V(t)")
                        (("1" (split -4)
                          (("1" (expand "subset?" -4)
                            (("1" (inst -4 "V(t)")
                              (("1" (grind) nil nil)) nil))
                            nil)
                           ("2" (expand "member" 2)
                            (("2" (expand "dom" 2)
                              (("2"
                                (flatten)
                                (("2"
                                  (lemma "nominal_AC_term_times_eta")
                                  (("2"
                                    (inst -1 "t")
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (expand "subs" -3)
                                        (("2"
                                          (lemma "renaming_susp_var")
                                          (("2"
                                            (inst
                                             -1
                                             "V(t)"
                                             "p(t)"
                                             "rho")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (replace -3 -9 :dir rl)
                                                (("2"
                                                  (replace -2)
                                                  (("2"
                                                    (expand
                                                     "equal?"
                                                     -9)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (lemma
                                                         "renaming_susp_var")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "V(s)"
                                                           "p(s)"
                                                           "rho")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (lemma
                                                               "nominal_AC_term_times_eta")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "s")
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   -13
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (replace
                                                                     -3)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (rewrite
                                                                         "vars_finset")
                                                                        (("2"
                                                                          (inst
                                                                           1
                                                                           "subs(rho)(V(s))")
                                                                          (("2"
                                                                            (prop)
                                                                            (("1"
                                                                              (expand
                                                                               ("member"
                                                                                "img")
                                                                               1)
                                                                              (("1"
                                                                                (inst
                                                                                 1
                                                                                 "V(s)")
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "vars"
                                                                               1)
                                                                              (("2"
                                                                                (expand
                                                                                 ("member"
                                                                                  "singleton")
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "subs"
                                                                                   -13)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -8)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "subs"
                                                                                         1)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (expand "member" 1)
                        (("2" (expand "dom" 1)
                          (("2" (flatten)
                            (("2" (expand "member" 1)
                              (("2"
                                (expand "dom" 1)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (lemma "renaming_susp_var")
                                    (("2"
                                      (inst -1 "V(t)" "p(t)" "rho")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (replace -6 -10)
                                          (("2"
                                            (replace -2)
                                            (("2"
                                              (lemma "nominal_AC_term_times_eta")
                                              (("2"
                                                (inst -1 "s")
                                                (("2"
                                                  (replace
                                                   -1
                                                   -11
                                                   :dir
                                                   rl)
                                                  (("2"
                                                    (lemma
                                                     "renaming_susp_var")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "V(s)"
                                                       "p(s)"
                                                       "rho")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (replace -2)
                                                          (("2"
                                                            (expand
                                                             "equal?"
                                                             -13)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 "equal?"
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (prop)
                                                                    (("1"
                                                                      (replace
                                                                       -6
                                                                       -13)
                                                                      (("1"
                                                                        (replace
                                                                         -7
                                                                         -13)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (inst
                                                                         -14
                                                                         "a")
                                                                        (("2"
                                                                          (lemma
                                                                           "subs_context_mem")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "G"
                                                                             "V1"
                                                                             "V(t)"
                                                                             "a"
                                                                             "rho")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (prop)
                                                                                (("2"
                                                                                  (expand
                                                                                   "subset?"
                                                                                   -11)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -11
                                                                                     "V(t)")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "vars"
                                                                                         3)
                                                                                        (("2"
                                                                                          (expand
                                                                                           ("member"
                                                                                            "singleton")
                                                                                           3)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (assert)
                        (("3" (lemma "renaming_ord2")
                          (("3" (inst?)
                            (("3" (assert)
                              (("3"
                                (flatten)
                                (("3"
                                  (hide 1 2 3 4 5 6)
                                  (("3"
                                    (expand "equal?" -7)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (flatten)
                                        (("3"
                                          (lemma "renaming_ord2")
                                          (("3"
                                            (inst -1 "rho" "s")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (replace -1)
                    (("3" (rewrite "subs_unit")
                      (("3" (expand "equal?" -5)
                        (("3" (expand "equal?" 1)
                          (("3" (lemma "renaming_ord2")
                            (("3" (inst -1 "rho" "s")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (lemma "nominal_AC_term_pair_eta")
                    (("4" (replace -3 -7)
                      (("4" (rewrite "subs_pair")
                        (("4" (expand "equal?" -7)
                          (("4" (flatten)
                            (("4" (lemma "renaming_ord2")
                              (("4"
                                (inst -1 "rho" "s")
                                (("4"
                                  (assert)
                                  (("4"
                                    (flatten)
                                    (("4"
                                      (hide 1 2 3 4 5 6)
                                      (("4"
                                        (inst -2 "s")
                                        (("4"
                                          (expand "equal?" 1)
                                          (("4"
                                            (assert)
                                            (("4"
                                              (reveal -4)
                                              (("4"
                                                (prop)
                                                (("1"
                                                  (inst -1 "term1(t)")
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "G"
                                                       "V1"
                                                       "rho"
                                                       "term1(s)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (hide-all-but
                                                               (-6
                                                                -4
                                                                1))
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-2
                                                                -7
                                                                1))
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (replace
                                                               -2
                                                               -9
                                                               :dir
                                                               rl)
                                                              (("3"
                                                                (rewrite
                                                                 "subs_pair")
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst -1 "term2(t)")
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "G"
                                                       "V1"
                                                       "rho"
                                                       "term2(s)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (hide-all-but
                                                             (-4 -6 1))
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-2 -7 1))
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (replace
                                                             -2
                                                             -10
                                                             :dir
                                                             rl)
                                                            (("3"
                                                              (rewrite
                                                               "subs_pair")
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (replace -2 -6)
                    (("5" (rewrite "subs_app")
                      (("5" (expand "equal?" -6)
                        (("5" (flatten)
                          (("5" (case "app?(s)")
                            (("1" (lemma "nominal_AC_term_app_eta")
                              (("1"
                                (inst -1 "s")
                                (("1"
                                  (replace -1 -11 :dir rl)
                                  (("1"
                                    (rewrite "subs_app")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (reveal -3)
                                        (("1"
                                          (inst -1 "arg(t)")
                                          (("1"
                                            (split)
                                            (("1"
                                              (inst
                                               -1
                                               "G"
                                               "V1"
                                               "rho"
                                               "arg(s)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (expand "equal?" 1)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (replace
                                                         -2
                                                         -10
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (rewrite
                                                           "subs_app")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (use
                                                         "equal?_num_arg2")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-4 -6 1))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide-all-but
                                                     (-1 -7 1))
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "renaming_ord2")
                              (("2"
                                (inst -1 "rho" "s")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (name-replace "f" "ac_sym(t)")
                    (("6" (replace -2 -6)
                      (("6" (rewrite "subs_ac" -6)
                        (("6" (expand "equal?" -6)
                          (("6" (flatten)
                            (("6" (skolem -8 ("i" "j"))
                              (("6"
                                (flatten)
                                (("6"
                                  (rewrite "subs_ac" :dir rl)
                                  (("6"
                                    (replace -2 :dir rl)
                                    (("6"
                                      (expand "equal?" 1)
                                      (("6"
                                        (assert)
                                        (("6"
                                          (case "ac_app?(s)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "ac_sym(t) = ac_sym(s)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst 1 "i" "j")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (expand
                                                         "f"
                                                         -11)
                                                        (("1"
                                                          (rewrite
                                                           "renaming_num_arg")
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "renaming_num_arg")
                                                        (("2"
                                                          (expand
                                                           "f"
                                                           -13)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (reveal -3)
                                                        (("3"
                                                          (reveal -1)
                                                          (("3"
                                                            (replace
                                                             -1)
                                                            (("3"
                                                              (inst
                                                               -2
                                                               "select(f, t)(i)")
                                                              (("3"
                                                                (split
                                                                 -2)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "G"
                                                                   "V1"
                                                                   "rho"
                                                                   "select(f, s)(j)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         (-7
                                                                          1))
                                                                        (("1"
                                                                          (lemma
                                                                           "vars_select")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "f"
                                                                             "i"
                                                                             "t")
                                                                            (("1"
                                                                              (expand
                                                                               "subset?"
                                                                               1)
                                                                              (("1"
                                                                                (skeep)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (-8
                                                                          1))
                                                                        (("2"
                                                                          (lemma
                                                                           "vars_select")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "f"
                                                                             "j"
                                                                             "s")
                                                                            (("2"
                                                                              (expand
                                                                               "subset?"
                                                                               1)
                                                                              (("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (rewrite
                                                                         "renaming_select")
                                                                        (("3"
                                                                          (rewrite
                                                                           "renaming_select")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -6
                                                                   -15
                                                                   -16
                                                                   2)
                                                                  (("2"
                                                                    (lemma
                                                                     "ac_select_size")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "f"
                                                                       "i"
                                                                       "t")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (rewrite
                                                         "renaming_delete")
                                                        (("4"
                                                          (rewrite
                                                           "renaming_delete")
                                                          (("4"
                                                            (reveal -3)
                                                            (("4"
                                                              (reveal
                                                               -1)
                                                              (("4"
                                                                (replace
                                                                 -1)
                                                                (("4"
                                                                  (inst
                                                                   -2
                                                                   "delete(f, t)(i)")
                                                                  (("4"
                                                                    (split
                                                                     -2)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "G"
                                                                       "V1"
                                                                       "rho"
                                                                       "delete(f, s)(j)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide
                                                                           2)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-7
                                                                                1))
                                                                              (("1"
                                                                                (lemma
                                                                                 "vars_delete")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "f"
                                                                                   "i"
                                                                                   "t")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "subset?"
                                                                                     1)
                                                                                    (("1"
                                                                                      (skeep)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (-8
                                                                                1))
                                                                              (("2"
                                                                                (lemma
                                                                                 "vars_delete")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "f"
                                                                                   "j"
                                                                                   "s")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "subset?"
                                                                                     1)
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -6
                                                                       -15
                                                                       -16
                                                                       2)
                                                                      (("2"
                                                                        (lemma
                                                                         "ac_delete_size")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "f"
                                                                           "i"
                                                                           "t")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (replace -3 1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       "nominal_AC_term_ac_app_eta")
                                                      (("2"
                                                        (inst -1 "s")
                                                        (("2"
                                                          (replace
                                                           -1
                                                           -9
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (rewrite
                                                             "subs_ac")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (hide-all-but (-6 1))
                                              (("2"
                                                (lemma "renaming_ord2")
                                                (("2"
                                                  (inst -1 "rho" "s")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("7" (replace -2 -6)
                    (("7" (rewrite "subs_abs")
                      (("7" (expand "equal?" -6)
                        (("7" (case "abs?(s)")
                          (("1" (lemma "nominal_AC_term_abs_eta")
                            (("1" (inst -1 "s")
                              (("1"
                                (prop)
                                (("1"
                                  (reveal -3)
                                  (("1"
                                    (inst -1 "body(t)")
                                    (("1"
                                      (expand "size" -1 2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (inst -1 "G" "body(s)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -4 -3 :dir rl)
                                                (("1"
                                                  (rewrite "subs_abs")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (replace
                                                         -4
                                                         -2
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (rewrite
                                                           "subs_abs")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "equal?"
                                                               1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-8 -6 1))
                                                        (("2"
                                                          (expand
                                                           "subset?"
                                                           1)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide-all-but
                                                         (-3 -9 1))
                                                        (("3"
                                                          (expand
                                                           "subset?"
                                                           1)
                                                          (("3"
                                                            (skeep)
                                                            (("3"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -3 1 :dir rl)
                                  (("2"
                                    (rewrite "subs_abs")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -3 -2 :dir rl)
                                        (("2"
                                          (rewrite "subs_abs")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "equal?" 2)
                                              (("2"
                                                (name-replace
                                                 "a"
                                                 "abstr(t)")
                                                (("2"
                                                  (name-replace
                                                   "b"
                                                   "abstr(s)")
                                                  (("2"
                                                    (reveal -1 -2)
                                                    (("2"
                                                      (replace
                                                       -5
                                                       -3
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (rewrite
                                                         "subs_abs")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (lemma
                                                               "renaming_fresh")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "V1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         (-5
                                                                          -11
                                                                          1))
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (name-replace
                                                               "pi"
                                                               "cons[[atom, atom]]((a, b), null)")
                                                              (("2"
                                                                (rewrite
                                                                 "subs_ext"
                                                                 -4
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (reveal
                                                                   -6)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "body(t)")
                                                                    (("2"
                                                                      (prop)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "V1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-10
                                                                                  1
                                                                                  -8))
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (rewrite
                                                                                 "ext_vars")
                                                                                (("2"
                                                                                  (hide-all-but
                                                                                   (-11
                                                                                    1
                                                                                    -5))
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (hide -7)
                              (("2"
                                (lemma "renaming_ord2")
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nominal_AC_term_opt formula-decl nil nominal_AC_term_properties nil)
    (a adt-accessor-decl "[(atom?) -> atom]" nominal_AC_term_adt nil)
    (atom? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (renaming_ord2 formula-decl nil nominal_AC_substitution nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    nil (nominal_AC_term_at_eta formula-decl nil nominal_AC_term_adt nil)
    (nominal_AC_term_times_eta formula-decl nil nominal_AC_term_adt nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (vars_finset formula-decl nil nominal_AC_term_properties nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (ds const-decl "set[atom]" atoms nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil) nil nil nil
    (subs_context_mem formula-decl nil nominal_AC_substitution nil)
    (renaming_var3 formula-decl nil nominal_AC_substitution nil)
    (singleton const-decl "(singleton?)" sets nil)
    (renaming_susp_var formula-decl nil nominal_AC_substitution nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (nominal_AC_term_pair_eta formula-decl nil nominal_AC_term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (nominal_AC_term_app_eta formula-decl nil nominal_AC_term_adt nil)
    (equal?_num_arg2 formula-decl nil nominal_AC_equality nil)
    (renaming_num_arg formula-decl nil nominal_AC_substitution nil) nil
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (ac_select_size formula-decl nil nominal_AC_term_properties nil)
    (vars_select formula-decl nil nominal_AC_term_properties nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    nil nil (Union const-decl "set" sets nil)
    (injective? const-decl "bool" functions nil)
    (setof type-eq-decl nil defined_types nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil) nil
    (list2set def-decl "set[T]" list2set nil) nil
    (from_min2max def-decl "list[nat]" list_aux_equational_reasoning nil)
    (renaming_select formula-decl nil nominal_AC_substitution nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (ac_delete_size formula-decl nil nominal_AC_term_properties nil) nil nil nil
    nil nil
    (ac_app adt-constructor-decl "[[ac_symbol, nominal_AC_term] -> (ac_app?)]"
     nominal_AC_term_adt nil)
    nil nil nil nil nil (emptyset const-decl "set" sets nil)
    (vars_delete formula-decl nil nominal_AC_term_properties nil)
    (renaming_delete formula-decl nil nominal_AC_substitution nil)
    (nominal_AC_term_ac_app_eta formula-decl nil nominal_AC_term_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_abs formula-decl nil nominal_AC_substitution nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ext_vars formula-decl nil nominal_AC_term_properties nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (subs_ext formula-decl nil nominal_AC_substitution nil)
    (renaming_fresh formula-decl nil nominal_AC_substitution nil)
    (nominal_AC_term_abs_eta formula-decl nil nominal_AC_term_adt nil)
    (vars def-decl "finite_set[variable]" nominal_AC_freshness nil) nil
    (subs def-decl "fresh_context" nominal_AC_substitution nil) nil nil
    (subset? const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    nil (member const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) nil
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (renaming_equal-2 nil 3855663183
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (lemma "nominal_AC_term_opt")
              (("" (inst -1 "t")
                (("" (prop)
                  (("1" (replace -2 -6)
                    (("1" (rewrite "subs_const")
                      (("1" (expand "equal?" -6)
                        (("1" (lemma "renaming_ord2")
                          (("1" (inst -1 "rho" "s")
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (hide 1 2 3 4 5)
                                  (("1"
                                    (lemma "nominal_AC_term_const_eta")
                                    (("1"
                                      (inst -1 "s")
                                      (("1"
                                        (replace -1 -8 :dir rl)
                                        (("1"
                                          (rewrite "subs_const" -8)
                                          (("1"
                                            (expand "equal?" 1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "member(V(t), dom(rho))")
                    (("1" (lemma "renaming_ord2")
                      (("1" (inst -1 "rho" "t")
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (hide 1 2 3 4 5)
                              (("1"
                                (expand "equal?" -8)
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma "nominal_AC_term_variable_eta")
                                    (("1"
                                      (inst -1 "subs(rho)(t)")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (lemma "renaming_ord2")
                                          (("1"
                                            (inst -1 "rho" "s")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (hide 1 2 3 4 5)
                                                  (("1"
                                                    (case
                                                     "member(V(s), dom(rho))")
                                                    (("1"
                                                      (typepred "rho")
                                                      (("1"
                                                        (expand
                                                         "renaming?"
                                                         -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "V(t)"
                                                               "V(s)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "subs"
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "equal?"
                                                                         1)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (lemma
                                                                             "nominal_AC_term_variable_eta")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "s")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "nominal_AC_term_variable_eta")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "t")
                                                                          (("2"
                                                                            (replace
                                                                             -1)
                                                                            (("2"
                                                                              (lemma
                                                                               "nominal_AC_term_variable_eta")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "s")
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst -7 "V(s)")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split -7)
                                                          (("1"
                                                            (expand
                                                             "vars"
                                                             -8)
                                                            (("1"
                                                              (expand
                                                               "subset?"
                                                               -8)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "vars_finset")
                                                            (("2"
                                                              (inst
                                                               1
                                                               "s")
                                                              (("2"
                                                                (expand
                                                                 "member"
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "img"
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "vars"
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "singleton"
                                                                       1)
                                                                      (("2"
                                                                        (inst
                                                                         1
                                                                         "V(t)")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "subs"
                                                                             1
                                                                             1)
                                                                            (("2"
                                                                              (lemma
                                                                               "nominal_AC_term_variable_eta")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "t")
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "member"
                                                                                     2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "dom"
                                                                                       2)
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "nominal_AC_term_variable_eta")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "s")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "subs"
                                                                                               -3)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "member(V(s), dom(rho))")
                      (("1" (inst -4 "V(t)")
                        (("1" (split -4)
                          (("1" (expand "subset?" -4)
                            (("1" (inst -4 "V(t)")
                              (("1" (grind) nil nil)) nil))
                            nil)
                           ("2" (expand "member" 2)
                            (("2" (expand "dom" 2)
                              (("2"
                                (flatten)
                                (("2"
                                  (lemma "nominal_AC_term_variable_eta")
                                  (("2"
                                    (inst -1 "t")
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (expand "subs" -3)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (replace -3)
                                            (("2"
                                              (expand "equal?" -7)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (rewrite
                                                   "vars_finset")
                                                  (("2"
                                                    (inst 1 "t")
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (expand
                                                         "img"
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "member"
                                                           1
                                                           1)
                                                          (("1"
                                                            (inst
                                                             1
                                                             "V(s)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "subs"
                                                                 1)
                                                                (("1"
                                                                  (lemma
                                                                   "nominal_AC_term_variable_eta")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "s")
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         "nominal_AC_term_variable_eta")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (expand "member" 1)
                        (("2" (expand "dom" 1)
                          (("2" (flatten)
                            (("2" (expand "member" 1)
                              (("2"
                                (expand "dom" 1)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (lemma "nominal_AC_term_variable_eta")
                                    (("2"
                                      (inst -1 "t")
                                      (("2"
                                        (expand "subs" -2)
                                        (("2"
                                          (expand "subs" -3)
                                          (("2"
                                            (lemma "nominal_AC_term_variable_eta")
                                            (("2"
                                              (inst -1 "s")
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (replace -2)
                                                  (("2"
                                                    (replace -3)
                                                    (("2"
                                                      (replace -4)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (lemma "renaming_ord2")
                        (("3" (inst -1 "rho" "t")
                          (("3" (assert)
                            (("3" (flatten)
                              (("3"
                                (hide 1 2 3 4 5)
                                (("3"
                                  (expand "equal?" -7)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (lemma "renaming_ord2")
                                      (("3"
                                        (inst -1 "rho" "s")
                                        (("3" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (replace -1)
                    (("3" (rewrite "subs_unit")
                      (("3" (expand "equal?" -5)
                        (("3" (expand "equal?" 1)
                          (("3" (lemma "renaming_ord2")
                            (("3" (inst -1 "rho" "s")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (lemma "nominal_AC_term_pair_eta")
                    (("4" (replace -3 -7)
                      (("4" (rewrite "subs_pair")
                        (("4" (expand "equal?" -7)
                          (("4" (flatten)
                            (("4" (lemma "renaming_ord2")
                              (("4"
                                (inst -1 "rho" "s")
                                (("4"
                                  (assert)
                                  (("4"
                                    (flatten)
                                    (("4"
                                      (hide 1 2 3 4 5)
                                      (("4"
                                        (inst -2 "s")
                                        (("4"
                                          (expand "equal?" 1)
                                          (("4"
                                            (assert)
                                            (("4"
                                              (reveal -4)
                                              (("4"
                                                (prop)
                                                (("1"
                                                  (inst -1 "term1(t)")
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "V1"
                                                       "rho"
                                                       "term1(s)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (hide-all-but
                                                               (-6
                                                                -4
                                                                1))
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-2
                                                                -7
                                                                1))
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (replace
                                                               -2
                                                               -9
                                                               :dir
                                                               rl)
                                                              (("3"
                                                                (rewrite
                                                                 "subs_pair")
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst -1 "term2(t)")
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "V1"
                                                       "rho"
                                                       "term2(s)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (hide-all-but
                                                             (-4 -6 1))
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-2 -7 1))
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (replace
                                                             -2
                                                             -10
                                                             :dir
                                                             rl)
                                                            (("3"
                                                              (rewrite
                                                               "subs_pair")
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (replace -2 -6)
                    (("5" (rewrite "subs_app")
                      (("5" (expand "equal?" -6)
                        (("5" (flatten)
                          (("5" (case "app?(s)")
                            (("1" (lemma "nominal_AC_term_app_eta")
                              (("1"
                                (inst -1 "s")
                                (("1"
                                  (replace -1 -11 :dir rl)
                                  (("1"
                                    (rewrite "subs_app")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (reveal -3)
                                        (("1"
                                          (inst -1 "arg(t)")
                                          (("1"
                                            (split)
                                            (("1"
                                              (inst
                                               -1
                                               "V1"
                                               "rho"
                                               "arg(s)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (expand "equal?" 1)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (replace
                                                         -2
                                                         -10
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (rewrite
                                                           "subs_app")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (use
                                                         "equal?_num_arg2")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-4 -6 1))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide-all-but
                                                     (-1 -7 1))
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "renaming_ord2")
                              (("2"
                                (inst -1 "rho" "s")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (name-replace "f" "ac_sym(t)")
                    (("6" (replace -2 -6)
                      (("6" (rewrite "subs_ac" -6)
                        (("6" (expand "equal?" -6)
                          (("6" (flatten)
                            (("6" (skolem -8 ("i" "j"))
                              (("6"
                                (flatten)
                                (("6"
                                  (rewrite "subs_ac" :dir rl)
                                  (("6"
                                    (replace -2 :dir rl)
                                    (("6"
                                      (expand "equal?" 1)
                                      (("6"
                                        (assert)
                                        (("6"
                                          (case "ac_app?(s)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "ac_sym(t) = ac_sym(s)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst 1 "i" "j")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (expand
                                                         "f"
                                                         -11)
                                                        (("1"
                                                          (rewrite
                                                           "renaming_num_arg")
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "renaming_num_arg")
                                                        (("2"
                                                          (expand
                                                           "f"
                                                           -13)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (reveal -3)
                                                        (("3"
                                                          (reveal -1)
                                                          (("3"
                                                            (replace
                                                             -1)
                                                            (("3"
                                                              (inst
                                                               -2
                                                               "select(f, t)(i)")
                                                              (("3"
                                                                (split
                                                                 -2)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "V1"
                                                                   "rho"
                                                                   "select(f, s)(j)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         (-7
                                                                          1))
                                                                        (("1"
                                                                          (lemma
                                                                           "vars_select")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "f"
                                                                             "i"
                                                                             "t")
                                                                            (("1"
                                                                              (expand
                                                                               "subset?"
                                                                               1)
                                                                              (("1"
                                                                                (skeep)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (-8
                                                                          1))
                                                                        (("2"
                                                                          (lemma
                                                                           "vars_select")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "f"
                                                                             "j"
                                                                             "s")
                                                                            (("2"
                                                                              (expand
                                                                               "subset?"
                                                                               1)
                                                                              (("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (rewrite
                                                                         "renaming_select")
                                                                        (("3"
                                                                          (rewrite
                                                                           "renaming_select")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -6
                                                                   -15
                                                                   -16
                                                                   2)
                                                                  (("2"
                                                                    (lemma
                                                                     "ac_select_size")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "f"
                                                                       "i"
                                                                       "t")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (rewrite
                                                         "renaming_delete")
                                                        (("4"
                                                          (rewrite
                                                           "renaming_delete")
                                                          (("4"
                                                            (reveal -3)
                                                            (("4"
                                                              (reveal
                                                               -1)
                                                              (("4"
                                                                (replace
                                                                 -1)
                                                                (("4"
                                                                  (inst
                                                                   -2
                                                                   "delete(f, t)(i)")
                                                                  (("4"
                                                                    (split
                                                                     -2)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "V1"
                                                                       "rho"
                                                                       "delete(f, s)(j)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide
                                                                           2)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-7
                                                                                1))
                                                                              (("1"
                                                                                (lemma
                                                                                 "vars_delete")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "f"
                                                                                   "i"
                                                                                   "t")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "subset?"
                                                                                     1)
                                                                                    (("1"
                                                                                      (skeep)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (-8
                                                                                1))
                                                                              (("2"
                                                                                (lemma
                                                                                 "vars_delete")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "f"
                                                                                   "j"
                                                                                   "s")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "subset?"
                                                                                     1)
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -6
                                                                       -15
                                                                       -16
                                                                       2)
                                                                      (("2"
                                                                        (lemma
                                                                         "ac_delete_size")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "f"
                                                                           "i"
                                                                           "t")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (replace -3 1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       "nominal_AC_term_ac_app_eta")
                                                      (("2"
                                                        (inst -1 "s")
                                                        (("2"
                                                          (replace
                                                           -1
                                                           -9
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (rewrite
                                                             "subs_ac")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (hide-all-but (-6 1))
                                              (("2"
                                                (lemma "renaming_ord2")
                                                (("2"
                                                  (inst -1 "rho" "s")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nominal_AC_term_opt formula-decl nil nominal_AC_term_properties nil)
    (a adt-accessor-decl "[(atom?) -> atom]" nominal_AC_term_adt nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (renaming_ord2 formula-decl nil nominal_AC_substitution nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (vars_finset formula-decl nil nominal_AC_term_properties nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (nominal_AC_term_pair_eta formula-decl nil nominal_AC_term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (nominal_AC_term_app_eta formula-decl nil nominal_AC_term_adt nil)
    (equal?_num_arg2 formula-decl nil nominal_AC_equality nil)
    (renaming_num_arg formula-decl nil nominal_AC_substitution nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (ac_select_size formula-decl nil nominal_AC_term_properties nil)
    (vars_select formula-decl nil nominal_AC_term_properties nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (Union const-decl "set" sets nil)
    (injective? const-decl "bool" functions nil)
    (setof type-eq-decl nil defined_types nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (list2set def-decl "set[T]" list2set nil)
    (from_min2max def-decl "list[nat]" list_aux_equational_reasoning nil)
    (renaming_select formula-decl nil nominal_AC_substitution nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (ac_delete_size formula-decl nil nominal_AC_term_properties nil)
    (ac_app adt-constructor-decl "[[ac_symbol, nominal_AC_term] -> (ac_app?)]"
     nominal_AC_term_adt nil)
    (emptyset const-decl "set" sets nil)
    (vars_delete formula-decl nil nominal_AC_term_properties nil)
    (renaming_delete formula-decl nil nominal_AC_substitution nil)
    (nominal_AC_term_ac_app_eta formula-decl nil nominal_AC_term_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subs_ac formula-decl nil nominal_AC_substitution nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (subset? const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (constant type-eq-decl nil nominal_AC_term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (renaming_equal-1 nil 3855662707
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (lemma "nominal_AC_term_opt")
              (("" (inst -1 "t")
                (("" (prop)
                  (("1" (replace -2 -6)
                    (("1" (rewrite "subs_const")
                      (("1" (expand "equal?" -6)
                        (("1" (lemma "renaming_ord2")
                          (("1" (inst -1 "rho" "s")
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (hide 1 2 3 4 5)
                                  (("1"
                                    (lemma "nominal_AC_term_const_eta")
                                    (("1"
                                      (inst -1 "s")
                                      (("1"
                                        (replace -1 -8 :dir rl)
                                        (("1"
                                          (rewrite "subs_const" -8)
                                          (("1"
                                            (expand "equal?" 1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "member(V(t), dom(rho))")
                    (("1" (lemma "renaming_ord2")
                      (("1" (inst -1 "rho" "t")
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (hide 1 2 3 4 5)
                              (("1"
                                (expand "equal?" -8)
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma "nominal_AC_term_variable_eta")
                                    (("1"
                                      (inst -1 "subs(rho)(t)")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (lemma "renaming_ord2")
                                          (("1"
                                            (inst -1 "rho" "s")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (hide 1 2 3 4 5)
                                                  (("1"
                                                    (case
                                                     "member(V(s), dom(rho))")
                                                    (("1"
                                                      (typepred "rho")
                                                      (("1"
                                                        (expand
                                                         "renaming?"
                                                         -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "V(t)"
                                                               "V(s)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "subs"
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "equal?"
                                                                         1)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (lemma
                                                                             "nominal_AC_term_variable_eta")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "s")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "nominal_AC_term_variable_eta")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "t")
                                                                          (("2"
                                                                            (replace
                                                                             -1)
                                                                            (("2"
                                                                              (lemma
                                                                               "nominal_AC_term_variable_eta")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "s")
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst -7 "V(s)")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split -7)
                                                          (("1"
                                                            (expand
                                                             "vars"
                                                             -8)
                                                            (("1"
                                                              (expand
                                                               "subset?"
                                                               -8)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "vars_finset")
                                                            (("2"
                                                              (inst
                                                               1
                                                               "s")
                                                              (("2"
                                                                (expand
                                                                 "member"
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "img"
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "vars"
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "singleton"
                                                                       1)
                                                                      (("2"
                                                                        (inst
                                                                         1
                                                                         "V(t)")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "subs"
                                                                             1
                                                                             1)
                                                                            (("2"
                                                                              (lemma
                                                                               "nominal_AC_term_variable_eta")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "t")
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "member"
                                                                                     2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "dom"
                                                                                       2)
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "nominal_AC_term_variable_eta")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "s")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "subs"
                                                                                               -3)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "member(V(s), dom(rho))")
                      (("1" (inst -4 "V(t)")
                        (("1" (split -4)
                          (("1" (expand "subset?" -4)
                            (("1" (inst -4 "V(t)")
                              (("1" (grind) nil nil)) nil))
                            nil)
                           ("2" (expand "member" 2)
                            (("2" (expand "dom" 2)
                              (("2"
                                (flatten)
                                (("2"
                                  (lemma "nominal_AC_term_variable_eta")
                                  (("2"
                                    (inst -1 "t")
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (expand "subs" -3)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (replace -3)
                                            (("2"
                                              (expand "equal?" -7)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (rewrite
                                                   "vars_finset")
                                                  (("2"
                                                    (inst 1 "t")
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (expand
                                                         "img"
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "member"
                                                           1
                                                           1)
                                                          (("1"
                                                            (inst
                                                             1
                                                             "V(s)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "subs"
                                                                 1)
                                                                (("1"
                                                                  (lemma
                                                                   "nominal_AC_term_variable_eta")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "s")
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         "nominal_AC_term_variable_eta")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (expand "member" 1)
                        (("2" (expand "dom" 1)
                          (("2" (flatten)
                            (("2" (expand "member" 1)
                              (("2"
                                (expand "dom" 1)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (lemma "nominal_AC_term_variable_eta")
                                    (("2"
                                      (inst -1 "t")
                                      (("2"
                                        (expand "subs" -2)
                                        (("2"
                                          (expand "subs" -3)
                                          (("2"
                                            (lemma "nominal_AC_term_variable_eta")
                                            (("2"
                                              (inst -1 "s")
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (replace -2)
                                                  (("2"
                                                    (replace -3)
                                                    (("2"
                                                      (replace -4)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (lemma "renaming_ord2")
                        (("3" (inst -1 "rho" "t")
                          (("3" (assert)
                            (("3" (flatten)
                              (("3"
                                (hide 1 2 3 4 5)
                                (("3"
                                  (expand "equal?" -7)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (lemma "renaming_ord2")
                                      (("3"
                                        (inst -1 "rho" "s")
                                        (("3" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (replace -1)
                    (("3" (rewrite "subs_unit")
                      (("3" (expand "equal?" -5)
                        (("3" (expand "equal?" 1)
                          (("3" (lemma "renaming_ord2")
                            (("3" (inst -1 "rho" "s")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (lemma "nominal_AC_term_pair_eta")
                    (("4" (replace -3 -7)
                      (("4" (rewrite "subs_pair")
                        (("4" (expand "equal?" -7)
                          (("4" (flatten)
                            (("4" (lemma "renaming_ord2")
                              (("4"
                                (inst -1 "rho" "s")
                                (("4"
                                  (assert)
                                  (("4"
                                    (flatten)
                                    (("4"
                                      (hide 1 2 3 4 5)
                                      (("4"
                                        (inst -2 "s")
                                        (("4"
                                          (expand "equal?" 1)
                                          (("4"
                                            (assert)
                                            (("4"
                                              (reveal -4)
                                              (("4"
                                                (prop)
                                                (("1"
                                                  (inst -1 "term1(t)")
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide-all-but
                                                         (-6 -4 1))
                                                        (("1"
                                                          (grind)
                                                          (("1"
                                                            (hide-all-but
                                                             (-2 -7 1))
                                                            (("1"
                                                              (grind)
                                                              (("1"
                                                                (grind)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-4
                                                                    -6
                                                                    1))
                                                                  (("1"
                                                                    (grind)
                                                                    (("1"
                                                                      (grind)
                                                                      (("1"
                                                                        (grind)
                                                                        (("1"
                                                                          (postpone)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (postpone)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (postpone)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (postpone) nil nil) ("6" (postpone) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (renaming_equal2 0
  (renaming_equal2-1 nil 3881672376
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (lemma "nominal_AC_term_opt")
            (("" (inst?)
              (("" (prop)
                (("1" (expand "equal?" -4)
                  (("1" (assert)
                    (("1" (replace -2 1)
                      (("1" (replace -4 1)
                        (("1" (rewrite "subs_const")
                          (("1" (expand "equal?" 1)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "equal?" -4)
                  (("2" (assert)
                    (("2" (flatten)
                      (("2" (use "renaming_susp_var")
                        (("2" (flatten)
                          (("2" (expand "equal?" 1)
                            (("2" (assert)
                              (("2"
                                (lemma "renaming_susp_var")
                                (("2"
                                  (inst -1 "V(s)" "p(s)" "rho")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lemma "nominal_AC_term_times_eta")
                                        (("2"
                                          (inst -1 "s")
                                          (("2"
                                            (prop)
                                            (("1"
                                              (replace -1)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (replace -1 1 :dir rl)
                                              (("2"
                                                (replace -7 1)
                                                (("2"
                                                  (replace -3)
                                                  (("2"
                                                    (replace -5)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skeep)
                                              (("3"
                                                (inst -11 "a")
                                                (("1"
                                                  (lemma
                                                   "subs_context_mem2")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "G"
                                                     "V(t)"
                                                     "a"
                                                     "rho")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -8 1)
                                                        (("1"
                                                          (replace -6)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "a")
                                                  (("2"
                                                    (replace -8 1)
                                                    (("2"
                                                      (replace -8 -1)
                                                      (("2"
                                                        (replace -6)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (replace
                                                             -2
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (replace
                                                               -4
                                                               -1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (replace -1)
                  (("3" (rewrite "subs_unit")
                    (("3" (expand "equal?" -3)
                      (("3" (expand "equal?" 1)
                        (("3" (replace -3)
                          (("3" (rewrite "subs_unit") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (replace -2 1)
                  (("4" (rewrite "subs_pair")
                    (("4" (expand "equal?" -4)
                      (("4" (assert)
                        (("4" (flatten)
                          (("4" (lemma "renaming_ord2")
                            (("4" (inst -1 "rho" "s")
                              (("4"
                                (assert)
                                (("4"
                                  (flatten)
                                  (("4"
                                    (hide 1 2 3 4 5 6)
                                    (("4"
                                      (expand "equal?" 1)
                                      (("4"
                                        (assert)
                                        (("4"
                                          (lemma "nominal_AC_term_pair_eta")
                                          (("4"
                                            (inst -1 "s")
                                            (("4"
                                              (replace -1 1 :dir rl)
                                              (("4"
                                                (rewrite "subs_pair" 1)
                                                (("4"
                                                  (assert)
                                                  (("4"
                                                    (prop)
                                                    (("1"
                                                      (inst
                                                       -5
                                                       "term1(t)")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst
                                                       -5
                                                       "term2(t)")
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (expand "equal?" -4)
                  (("5" (assert)
                    (("5" (flatten)
                      (("5" (lemma "nominal_AC_term_app_eta")
                        (("5" (inst -1 "s")
                          (("5" (replace -1 1 :dir rl)
                            (("5" (replace -3 1)
                              (("5"
                                (rewrite "subs_app" 1)
                                (("5"
                                  (rewrite "subs_app" 1)
                                  (("5"
                                    (expand "equal?" 1)
                                    (("5"
                                      (assert)
                                      (("5"
                                        (case
                                         "equal?(subs(rho, G))(subs(rho)(arg(t)), subs(rho)(arg(s)))")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (use "equal?_num_arg2")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (inst -4 "arg(t)")
                                            (("2"
                                              (prop)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (name-replace "f" "ac_sym(t)")
                  (("6" (reveal -1)
                    (("6" (expand "equal?" -5)
                      (("6" (assert)
                        (("6" (flatten)
                          (("6" (replace -1)
                            (("6" (skeep)
                              (("6"
                                (lemma "renaming_is_ac_sym")
                                (("6"
                                  (inst -1 "f" "rho" "t")
                                  (("6"
                                    (expand "is_ac_sym?")
                                    (("6"
                                      (flatten)
                                      (("6"
                                        (lemma "renaming_is_ac_sym")
                                        (("6"
                                          (inst -1 "f" "rho" "s")
                                          (("6"
                                            (expand "is_ac_sym?" -1)
                                            (("6"
                                              (assert)
                                              (("6"
                                                (flatten)
                                                (("6"
                                                  (expand "equal?" 1)
                                                  (("6"
                                                    (assert)
                                                    (("6"
                                                      (inst 1 "i" "j")
                                                      (("6"
                                                        (prop)
                                                        (("1"
                                                          (replace
                                                           -4
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (hide-all-but
                                                             (-12 1))
                                                            (("1"
                                                              (use
                                                               "renaming_num_arg")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace
                                                           -4
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (hide-all-but
                                                             (-14 1))
                                                            (("2"
                                                              (use
                                                               "renaming_num_arg")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (replace
                                                           -4
                                                           :dir
                                                           rl)
                                                          (("3"
                                                            (rewrite
                                                             "renaming_select"
                                                             1)
                                                            (("3"
                                                              (rewrite
                                                               "renaming_select"
                                                               1)
                                                              (("3"
                                                                (inst
                                                                 -8
                                                                 "select(f, t)(i)")
                                                                (("3"
                                                                  (prop)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (use
                                                                     "ac_select_size")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "is_ac_sym?"
                                                                         1)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (replace
                                                           -4
                                                           :dir
                                                           rl)
                                                          (("4"
                                                            (rewrite
                                                             "renaming_delete"
                                                             1)
                                                            (("4"
                                                              (rewrite
                                                               "renaming_delete"
                                                               1)
                                                              (("4"
                                                                (inst
                                                                 -8
                                                                 "delete(f, t)(i)")
                                                                (("4"
                                                                  (prop)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (use
                                                                     "ac_delete_size")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (replace -2 -4)
                  (("7" (replace -2 1)
                    (("7" (rewrite "subs_abs")
                      (("7" (expand "equal?" -4)
                        (("7" (flatten)
                          (("7" (lemma "nominal_AC_term_abs_eta")
                            (("7" (inst -1 "s")
                              (("7"
                                (replace -1 1 :dir rl)
                                (("7"
                                  (rewrite "subs_abs" 1)
                                  (("7"
                                    (prop)
                                    (("1"
                                      (expand "equal?" 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -6 "body(t)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "equal?" 2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (name-replace
                                           "pi"
                                           "cons((abstr(t), abstr(s)), null)")
                                          (("2"
                                            (prop)
                                            (("1"
                                              (use "renaming_fresh2")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (inst -6 "body(t)")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (rewrite
                                                     "subs_ext"
                                                     1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_abs formula-decl nil nominal_AC_substitution nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (subs_ext formula-decl nil nominal_AC_substitution nil)
    (renaming_fresh2 formula-decl nil nominal_AC_substitution nil)
    (nominal_AC_term_abs_eta formula-decl nil nominal_AC_term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ac_delete_size formula-decl nil nominal_AC_term_properties nil)
    (delete def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (renaming_delete formula-decl nil nominal_AC_substitution nil)
    (ac_select_size formula-decl nil nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (renaming_select formula-decl nil nominal_AC_substitution nil)
    (renaming_num_arg formula-decl nil nominal_AC_substitution nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (renaming_is_ac_sym formula-decl nil nominal_AC_substitution nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (equal?_num_arg2 formula-decl nil nominal_AC_equality nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (nominal_AC_term_app_eta formula-decl nil nominal_AC_term_adt nil)
    (nominal_AC_term_pair_eta formula-decl nil nominal_AC_term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (renaming_ord2 formula-decl nil nominal_AC_substitution nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subs_context_mem2 formula-decl nil nominal_AC_substitution nil) nil nil nil
    nil (ds const-decl "set[atom]" atoms nil)
    (set type-eq-decl nil sets nil)
    (nominal_AC_term_times_eta formula-decl nil nominal_AC_term_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (renaming_susp_var formula-decl nil nominal_AC_substitution nil)
    (a adt-accessor-decl "[(atom?) -> atom]" nominal_AC_term_adt nil)
    (atom? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (nominal_AC_term_opt formula-decl nil nominal_AC_term_properties nil) nil
    (subs def-decl "fresh_context" nominal_AC_substitution nil) nil
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) nil
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (renaming_get_args 0
  (renaming_get_args-1 nil 3855664898
   ("" (skeep)
    (("" (expand "get_args" 1)
      (("" (rewrite "subs_map" :dir rl)
        (("" (use "list_extensionality[nominal_AC_term]")
          (("" (assert)
            (("" (hide 2)
              (("" (prop)
                (("1" (rewrite "map_length" 1)
                  (("1" (rewrite "map_length" 1)
                    (("1" (rewrite "map_length" 1)
                      (("1" (rewrite "renaming_num_arg") nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (typepred "n")
                    (("2" (rewrite "map_nth_rw")
                      (("1" (rewrite "map_nth_rw")
                        (("1" (rewrite "map_nth_rw")
                          (("1" (rewrite "renaming_num_arg")
                            (("1" (use "renaming_select") nil nil))
                            nil)
                           ("2" (rewrite "map_length")
                            (("2" (rewrite "renaming_num_arg") nil
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "renaming_num_arg")
                          (("2" (assert)
                            (("2" (rewrite "map_length")
                              (("2" (rewrite "map_length") nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite "renaming_num_arg")
                        (("2" (rewrite "map_length") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (list_extensionality formula-decl nil list_aux_equational_reasoning nil) nil
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (nth def-decl "T" list_props nil)
    (renaming_select formula-decl nil nominal_AC_substitution nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (map_length formula-decl nil more_map_props nil)
    (renaming_num_arg formula-decl nil nominal_AC_substitution nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil) nil
    (from_min2max def-decl "list[nat]" list_aux_equational_reasoning nil)
    (select def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (string type-eq-decl nil strings nil) nil
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subs_map formula-decl nil nominal_AC_substitution nil))
   shostak))
 (renaming_var2_TCC1 0
  (renaming_var2_TCC1-1 nil 3856971990
   ("" (skeep)
    (("" (lemma "renaming_ord2")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((renaming_ord2 formula-decl nil nominal_AC_substitution nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (renaming_var2 subtype
    "nominal_AC_substitution.subs(nominal_AC_substitution.rho)(nominal_AC_substitution.s)"
    "(nominal_AC_term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].var?)")))
 (renaming_var2 0
  (renaming_var2-2 nil 3881667942
   ("" (measure-induct "size(t)" "t")
    (("1" (skolem 1 "t")
      (("1" (prop)
        (("1" (skeep)
          (("1" (lemma "nominal_AC_term_opt")
            (("1" (inst -1 "t")
              (("1" (split -1)
                (("1" (flatten)
                  (("1" (expand "vars" 1 2)
                    (("1" (assert)
                      (("1" (replace -2 1)
                        (("1" (rewrite "subs_const")
                          (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (prop)
                    (("1" (case "var?(subs(rho)(t))")
                      (("1" (expand "vars" -2)
                        (("1" (assert)
                          (("1" (hide -5)
                            (("1" (expand "member" -2)
                              (("1"
                                (expand "singleton" -2)
                                (("1"
                                  (case
                                   "subs(rho)(V(s)) = subs(rho)(V(t))")
                                  (("1"
                                    (hide -3)
                                    (("1"
                                      (lemma "nominal_AC_term_times_eta")
                                      (("1"
                                        (inst -1 "s")
                                        (("1"
                                          (case
                                           "member(V(s), dom(rho))")
                                          (("1"
                                            (case
                                             "member(V(t), dom(rho))")
                                            (("1"
                                              (typepred "rho")
                                              (("1"
                                                (expand "renaming?" -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst
                                                     -2
                                                     "V(t)"
                                                     "V(s)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "vars"
                                                         1)
                                                        (("1"
                                                          (expand
                                                           ("member"
                                                            "singleton")
                                                           1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst -7 "V(t)")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (expand "vars" -9)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "vars_finset")
                                                    (("2"
                                                      (inst
                                                       1
                                                       "subs(rho)(V(s))")
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (expand
                                                           "img"
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "member"
                                                             1
                                                             1)
                                                            (("1"
                                                              (inst
                                                               1
                                                               "V(s)")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "member"
                                                             2)
                                                            (("2"
                                                              (expand
                                                               "dom"
                                                               2)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (replace
                                                                     -4)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case
                                             "member(V(t), dom(rho))")
                                            (("1"
                                              (inst -7 "V(s)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite
                                                   "vars_finset")
                                                  (("1"
                                                    (inst
                                                     3
                                                     "subs(rho)(V(t))")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (expand
                                                         ("member"
                                                          "img")
                                                         1)
                                                        (("1"
                                                          (inst
                                                           1
                                                           "V(t)")
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           ("member"
                                                            "dom")
                                                           2)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (replace
                                                               -2)
                                                              (("2"
                                                                (replace
                                                                 -4
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand
                                               ("member" "dom")
                                               2)
                                              (("2"
                                                (expand
                                                 ("member" "dom")
                                                 1)
                                                (("2"
                                                  (prop)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (replace -2)
                                                      (("2"
                                                        (decompose-equality
                                                         -4)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "subs" 1)
                                    (("2"
                                      (use "renaming_susp_var")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (replace -2)
                                          (("2"
                                            (lemma "renaming_susp_var")
                                            (("2"
                                              (inst
                                               -1
                                               "V(t)"
                                               "null"
                                               "rho")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (replace -2)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       "renaming_var3")
                                                      (("2"
                                                        (inst-cp
                                                         -1
                                                         "rho"
                                                         "s")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "rho"
                                                           "t")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (-2 1))
                        (("2" (use "renaming_ord2")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (expand "vars" -1)
                      (("2" (assert)
                        (("2" (expand "singleton" -1)
                          (("2" (expand "member" -1)
                            (("2" (hide -4)
                              (("2"
                                (use "renaming_var3")
                                (("2"
                                  (assert)
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (lemma "renaming_susp_var")
                                      (("2"
                                        (inst -1 "V(t)" "p(t)" "rho")
                                        (("2"
                                          (replace -5 1)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (replace -2)
                                              (("2"
                                                (replace -4)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (replace -1)
                  (("3" (rewrite "subs_unit")
                    (("3" (expand "vars" 1)
                      (("3" (expand "member" 1)
                        (("3" (hide-all-but 1) (("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (flatten)
                  (("4" (replace -2 1)
                    (("4" (rewrite "subs_pair" 1)
                      (("4" (expand "vars" 1)
                        (("4" (expand "member" 1 1)
                          (("4" (expand "union" 1 1)
                            (("4" (expand "member" 1 3)
                              (("4"
                                (expand "union" 1)
                                (("4"
                                  (inst-cp -3 "term1(t)")
                                  (("4"
                                    (split -4)
                                    (("1"
                                      (inst -1 "V1" "rho" "s")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (inst -4 "term2(t)")
                                            (("1"
                                              (split -4)
                                              (("1"
                                                (inst
                                                 -1
                                                 "V1"
                                                 "rho"
                                                 "s")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (hide 2)
                                                      (("3"
                                                        (replace -3 -7)
                                                        (("3"
                                                          (expand
                                                           "vars"
                                                           -7)
                                                          (("3"
                                                            (expand
                                                             "subset?")
                                                            (("3"
                                                              (skolem
                                                               1
                                                               "y")
                                                              (("3"
                                                                (inst
                                                                 -7
                                                                 "y")
                                                                (("3"
                                                                  (flatten)
                                                                  (("3"
                                                                    (hide
                                                                     -2
                                                                     -3)
                                                                    (("3"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil)
                                           ("3"
                                            (hide-all-but (-2 -7 1))
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-2 -7 1))
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (flatten)
                  (("5" (replace -2 1)
                    (("5" (rewrite "subs_app")
                      (("5" (expand "vars" 1 1)
                        (("5" (expand "vars" 1 2)
                          (("5" (inst -3 "arg(t)")
                            (("5" (split -3)
                              (("1"
                                (inst -1 "V1" "rho" "s")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -1)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil)
                                     ("3"
                                      (replace -2 -6)
                                      (("3"
                                        (expand "vars" -6)
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (flatten)
                  (("6" (lemma "vars_get_args")
                    (("6" (name-replace "f" "ac_sym(t)")
                      (("6" (inst -1 "f" "t")
                        (("6" (replace -1 1 :dir rl)
                          (("6" (lemma "vars_get_args")
                            (("6" (inst -1 "f" "subs(rho)(t)")
                              (("6"
                                (replace -1 :dir rl)
                                (("6"
                                  (hide -1 -2)
                                  (("6"
                                    (rewrite "renaming_get_args")
                                    (("6"
                                      (prop)
                                      (("1"
                                        (rewrite "vars_args" -1)
                                        (("1"
                                          (skolem -1 "ti")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (rewrite
                                               "subs_map"
                                               :dir
                                               rl)
                                              (("1"
                                                (rewrite "map_member4")
                                                (("1"
                                                  (skolem -1 "ti2")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (inst -6 "ti2")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "V1"
                                                           "rho"
                                                           "s")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (rewrite
                                                                 "vars_args")
                                                                (("1"
                                                                  (inst
                                                                   1
                                                                   "ti2")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (reveal
                                                                 -4)
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (expand
                                                                     "subset?")
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (inst
                                                                         -11
                                                                         "x")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (rewrite
                                                                             "vars_args"
                                                                             3)
                                                                            (("2"
                                                                              (inst
                                                                               3
                                                                               "ti2")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (use
                                                           "get_args_size")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "is_ac_sym?"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "f"
                                                                 1)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite "vars_args")
                                        (("2"
                                          (skolem -1 "ti")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (inst -5 "ti")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "V1"
                                                   "rho"
                                                   "s")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (rewrite
                                                         "vars_args"
                                                         1)
                                                        (("1"
                                                          (inst
                                                           1
                                                           "subs(rho)(ti)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (rewrite
                                                               "subs_map"
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (rewrite
                                                                 "map_member4")
                                                                (("1"
                                                                  (inst
                                                                   1
                                                                   "ti")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (reveal -4)
                                                        (("2"
                                                          (replace
                                                           -1
                                                           -9
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (expand
                                                             "subset?")
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst
                                                                 -10
                                                                 "x")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (rewrite
                                                                     "vars_args"
                                                                     3)
                                                                    (("2"
                                                                      (inst
                                                                       3
                                                                       "ti")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use "get_args_size")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "is_ac_sym?"
                                                       1)
                                                      (("2"
                                                        (expand "f" 1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (flatten)
                  (("7" (replace -2 -7)
                    (("7" (expand "vars" -7)
                      (("7" (replace -2 1)
                        (("7" (rewrite "subs_abs" 1)
                          (("7" (expand "vars" 1)
                            (("7" (inst -3 "body(t)")
                              (("7"
                                (expand "size" -3 2)
                                (("7"
                                  (assert)
                                  (("7"
                                    (inst?)
                                    (("7"
                                      (inst -3 "V1")
                                      (("7"
                                        (assert)
                                        (("7" (prop) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (use "renaming_ord2") (("2" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((body adt-accessor-decl "[(abs?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" nominal_AC_term_adt nil)
    (abs? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_abs formula-decl nil nominal_AC_substitution nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_map formula-decl nil nominal_AC_substitution nil)
    (get_args_size formula-decl nil nominal_AC_term_properties nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil) nil
    (map_member4 formula-decl nil list_aux_equational_reasoning2parameters nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil) nil
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (subs def-decl "args" nominal_AC_substitution nil) nil
    (renaming_get_args formula-decl nil nominal_AC_substitution nil)
    (string type-eq-decl nil strings nil)
    (vars_get_args formula-decl nil nominal_AC_term_properties nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (empty? const-decl "bool" sets nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (union const-decl "set" sets nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (nominal_AC_term_times_eta formula-decl nil nominal_AC_term_adt nil)
    (vars_finset formula-decl nil nominal_AC_term_properties nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (renaming_susp_var formula-decl nil nominal_AC_substitution nil)
    (renaming_var3 formula-decl nil nominal_AC_substitution nil)
    (singleton const-decl "(singleton?)" sets nil)
    (renaming_ord2 formula-decl nil nominal_AC_substitution nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (a adt-accessor-decl "[(atom?) -> atom]" nominal_AC_term_adt nil)
    (atom? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (emptyset const-decl "set" sets nil)
    (nominal_AC_term_opt formula-decl nil nominal_AC_term_properties nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil) nil
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (subset? const-decl "bool" sets nil) nil nil
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) nil
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (renaming_var2-1 nil 3856971990
   ("" (measure-induct "size(t)" "t")
    (("1" (skolem 1 "t")
      (("1" (prop)
        (("1" (skeep)
          (("1" (lemma "nominal_AC_term_opt")
            (("1" (inst -1 "t")
              (("1" (split -1)
                (("1" (flatten)
                  (("1" (expand "vars" 1 2)
                    (("1" (assert)
                      (("1" (replace -2 1)
                        (("1" (rewrite "subs_const")
                          (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (prop)
                    (("1" (case "var?(subs(rho)(t))")
                      (("1" (expand "vars" -2)
                        (("1" (assert)
                          (("1" (hide -5)
                            (("1" (expand "member" -2)
                              (("1"
                                (expand "singleton" -2)
                                (("1"
                                  (case
                                   "subs(rho)(V(s)) = subs(rho)(V(t))")
                                  (("1"
                                    (hide -3)
                                    (("1"
                                      (lemma "nominal_AC_term_variable_eta")
                                      (("1"
                                        (inst -1 "s")
                                        (("1"
                                          (case
                                           "member(V(s), dom(rho))")
                                          (("1"
                                            (case
                                             "member(V(t), dom(rho))")
                                            (("1"
                                              (typepred "rho")
                                              (("1"
                                                (expand "renaming?" -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst
                                                     -2
                                                     "V(t)"
                                                     "V(s)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "vars"
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "singleton"
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "member"
                                                             1
                                                             1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst -7 "V(t)")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (expand "vars" -9)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "vars_finset")
                                                    (("2"
                                                      (inst 1 "t")
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (expand
                                                           "img"
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "member"
                                                             1
                                                             1)
                                                            (("1"
                                                              (inst
                                                               1
                                                               "V(s)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "member"
                                                                   2)
                                                                  (("1"
                                                                    (expand
                                                                     "dom"
                                                                     2)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (replace
                                                                           -7
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "vars"
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "singleton"
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "member"
                                                               1)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case
                                             "member(V(t), dom(rho))")
                                            (("1"
                                              (inst -7 "V(s)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite
                                                   "vars_finset")
                                                  (("1"
                                                    (inst 3 "s")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (expand
                                                         ("member"
                                                          "img")
                                                         1)
                                                        (("1"
                                                          (inst
                                                           1
                                                           "V(t)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               ("member"
                                                                "dom")
                                                               2)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (replace
                                                                   -2)
                                                                  (("1"
                                                                    (replace
                                                                     -3)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand
                                               ("member" "dom")
                                               2)
                                              (("2"
                                                (expand
                                                 ("member" "dom")
                                                 1)
                                                (("2"
                                                  (prop)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (replace -2)
                                                      (("2"
                                                        (replace -3)
                                                        (("2"
                                                          (replace
                                                           -7
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "nominal_AC_term_variable_eta")
                                    (("2"
                                      (inst -1 "s")
                                      (("2"
                                        (expand "subs" 1)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (replace -5 :dir rl)
                                            (("2"
                                              (lemma
                                               "nominal_AC_term_variable_eta")
                                              (("2"
                                                (inst
                                                 -1
                                                 "subs(rho)(t)")
                                                (("2"
                                                  (replace
                                                   -1
                                                   1
                                                   :dir
                                                   rl)
                                                  (("2"
                                                    (lemma
                                                     "nominal_AC_term_variable_eta")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "subs(rho)(s)")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (-2 1))
                        (("2" (use "renaming_ord2")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (expand "vars" -1)
                      (("2" (assert)
                        (("2" (expand "singleton" -1)
                          (("2" (expand "member" -1)
                            (("2" (case "t = s")
                              (("1"
                                (replace -1)
                                (("1"
                                  (case "var?(subs(rho)(s))")
                                  (("1"
                                    (expand "vars" 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "member" 1)
                                        (("1"
                                          (expand "singleton" 1)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (-6 1))
                                    (("2"
                                      (use "renaming_ord2")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -4 -5)
                                (("2"
                                  (lemma "nominal_AC_term_variable_eta")
                                  (("2"
                                    (inst -1 "t")
                                    (("2"
                                      (lemma "nominal_AC_term_variable_eta")
                                      (("2"
                                        (inst -1 "s")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (replace -1)
                  (("3" (rewrite "subs_unit")
                    (("3" (expand "vars" 1)
                      (("3" (expand "member" 1)
                        (("3" (hide-all-but 1) (("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (flatten)
                  (("4" (replace -2 1)
                    (("4" (rewrite "subs_pair" 1)
                      (("4" (expand "vars" 1)
                        (("4" (expand "member" 1 1)
                          (("4" (expand "union" 1 1)
                            (("4" (expand "member" 1 3)
                              (("4"
                                (expand "union" 1)
                                (("4"
                                  (inst-cp -3 "term1(t)")
                                  (("4"
                                    (split -4)
                                    (("1"
                                      (inst -1 "V1" "rho" "s")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (inst -4 "term2(t)")
                                            (("1"
                                              (split -4)
                                              (("1"
                                                (inst
                                                 -1
                                                 "V1"
                                                 "rho"
                                                 "s")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (hide 2)
                                                      (("3"
                                                        (replace -3 -7)
                                                        (("3"
                                                          (expand
                                                           "vars"
                                                           -7)
                                                          (("3"
                                                            (expand
                                                             "subset?")
                                                            (("3"
                                                              (skolem
                                                               1
                                                               "y")
                                                              (("3"
                                                                (inst
                                                                 -7
                                                                 "y")
                                                                (("3"
                                                                  (flatten)
                                                                  (("3"
                                                                    (hide
                                                                     -2
                                                                     -3)
                                                                    (("3"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil)
                                           ("3"
                                            (hide-all-but (-2 -7 1))
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-2 -7 1))
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (flatten)
                  (("5" (replace -2 1)
                    (("5" (rewrite "subs_app")
                      (("5" (expand "vars" 1 1)
                        (("5" (expand "vars" 1 2)
                          (("5" (inst -3 "arg(t)")
                            (("5" (split -3)
                              (("1"
                                (inst -1 "V1" "rho" "s")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -1)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil)
                                     ("3"
                                      (replace -2 -6)
                                      (("3"
                                        (expand "vars" -6)
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (flatten)
                  (("6" (lemma "vars_get_args")
                    (("6" (name-replace "f" "ac_sym(t)")
                      (("6" (inst -1 "f" "t")
                        (("6" (replace -1 1 :dir rl)
                          (("6" (lemma "vars_get_args")
                            (("6" (inst -1 "f" "subs(rho)(t)")
                              (("6"
                                (replace -1 :dir rl)
                                (("6"
                                  (hide -1 -2)
                                  (("6"
                                    (rewrite "renaming_get_args")
                                    (("6"
                                      (prop)
                                      (("1"
                                        (rewrite "vars_args" -1)
                                        (("1"
                                          (skolem -1 "ti")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (rewrite
                                               "subs_map"
                                               :dir
                                               rl)
                                              (("1"
                                                (rewrite "map_member4")
                                                (("1"
                                                  (skolem -1 "ti2")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (inst -6 "ti2")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "V1"
                                                           "rho"
                                                           "s")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (rewrite
                                                                 "vars_args")
                                                                (("1"
                                                                  (inst
                                                                   1
                                                                   "ti2")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (reveal
                                                                 -4)
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (expand
                                                                     "subset?")
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (inst
                                                                         -11
                                                                         "x")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (rewrite
                                                                             "vars_args"
                                                                             3)
                                                                            (("2"
                                                                              (inst
                                                                               3
                                                                               "ti2")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (use
                                                           "get_args_size")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "is_ac_sym?"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "f"
                                                                 1)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite "vars_args")
                                        (("2"
                                          (skolem -1 "ti")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (inst -5 "ti")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "V1"
                                                   "rho"
                                                   "s")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (rewrite
                                                         "vars_args"
                                                         1)
                                                        (("1"
                                                          (inst
                                                           1
                                                           "subs(rho)(ti)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (rewrite
                                                               "subs_map"
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (rewrite
                                                                 "map_member4")
                                                                (("1"
                                                                  (inst
                                                                   1
                                                                   "ti")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (reveal -4)
                                                        (("2"
                                                          (replace
                                                           -1
                                                           -9
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (expand
                                                             "subset?")
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst
                                                                 -10
                                                                 "x")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (rewrite
                                                                     "vars_args"
                                                                     3)
                                                                    (("2"
                                                                      (inst
                                                                       3
                                                                       "ti")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use "get_args_size")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "is_ac_sym?"
                                                       1)
                                                      (("2"
                                                        (expand "f" 1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (use "renaming_ord2") (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" nominal_AC_term_adt nil)
    (ac_app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_map formula-decl nil nominal_AC_substitution nil)
    (get_args_size formula-decl nil nominal_AC_term_properties nil)
    (is_ac_sym? const-decl "bool" nominal_AC_term_properties nil)
    (map_member4 formula-decl nil list_aux_equational_reasoning2parameters nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (subs def-decl "args" nominal_AC_substitution nil)
    (renaming_get_args formula-decl nil nominal_AC_substitution nil)
    (string type-eq-decl nil strings nil)
    (vars_get_args formula-decl nil nominal_AC_term_properties nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" nominal_AC_term_adt nil)
    (arg adt-accessor-decl "[(app?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (app? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_app formula-decl nil nominal_AC_substitution nil)
    (empty? const-decl "bool" sets nil)
    (term1 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> nominal_AC_term]" nominal_AC_term_adt nil)
    (pair? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (subs_pair formula-decl nil nominal_AC_substitution nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (union const-decl "set" sets nil)
    (subs_unit formula-decl nil nominal_AC_substitution nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (vars_finset formula-decl nil nominal_AC_term_properties nil)
    (singleton const-decl "(singleton?)" sets nil)
    (renaming_ord2 formula-decl nil nominal_AC_substitution nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (a adt-accessor-decl "[(atom?) -> atom]" nominal_AC_term_adt nil)
    (subs_const formula-decl nil nominal_AC_substitution nil)
    (emptyset const-decl "set" sets nil)
    (nominal_AC_term_opt formula-decl nil nominal_AC_term_properties nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (subset? const-decl "bool" sets nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (constant type-eq-decl nil nominal_AC_term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (renaming_pos_TCC1 0
  (renaming_pos_TCC1-1 nil 3888583022
   ("" (skeep) (("" (rewrite "equal?_equiv") nil nil)) nil)
   ((equal?_equiv formula-decl nil nominal_AC_equality nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil))
   nil
   (renaming_pos subtype "nominal_AC_equality.equal?(nominal_AC_substitution.G)"
    "equiv[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]")))
 (renaming_pos_TCC2 0
  (renaming_pos_TCC1-1 nil 3881672375
   ("" (skeep) (("" (rewrite "equal?_equiv") nil nil)) nil)
   ((equal?_equiv formula-decl nil nominal_AC_equality nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (subs def-decl "fresh_context" nominal_AC_substitution nil))
   nil
   (renaming_pos subtype
    "nominal_AC_equality.equal?(nominal_AC_substitution.subs(nominal_AC_substitution.rho, nominal_AC_substitution.G))"
    "equiv[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]")))
 (renaming_pos 0
  (renaming_pos-1 nil 3855666300
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "subs" 1 2)
            (("2" (expand "pos?" 1)
              (("2" (lift-if)
                (("2" (split 1)
                  (("1" (flatten)
                    (("1" (lift-if)
                      (("1" (split 1)
                        (("1" (propax) nil nil)
                         ("2" (flatten)
                          (("2" (hide 2)
                            (("2" (lemma "renaming_equal2")
                              (("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (lift-if)
                      (("2" (prop)
                        (("1" (hide 1)
                          (("1" (hide -2)
                            (("1" (lemma "renaming_equal")
                              (("1"
                                (inst -1 "G" "V1" "rho" "hd" "t")
                                (("1"
                                  (assert)
                                  (("1"
                                    (prop)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst -1 "G" "V1" "rho" "t")
                          (("2" (prop)
                            (("1" (replace -1) (("1" (propax) nil nil))
                              nil)
                             ("2" (hide-all-but (-3 1))
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "equal?_equiv") nil nil)) nil)) nil)
     ("4" (hide 2)
      (("4" (skeep) (("4" (rewrite "equal?_equiv") nil nil)) nil))
      nil))
    nil)
   ((equal?_equiv formula-decl nil nominal_AC_equality nil)
    (renaming_equal2 formula-decl nil nominal_AC_substitution nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (renaming_equal formula-decl nil nominal_AC_substitution nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (empty? const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (subs def-decl "args" nominal_AC_substitution nil) nil
    (pos? def-decl "[bool, nat]" list_aux_equational_reasoning nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subs def-decl "fresh_context" nominal_AC_substitution nil) nil
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil) nil
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (subset? const-decl "bool" sets nil) nil nil
    (vars def-decl "finite_set[variable]" nominal_AC_freshness nil)
    (equivalence? const-decl "bool" relations nil) nil)
   shostak))
 (renaming_count 0
  (renaming_count-1 nil 3855678247
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "subs" 1 2)
            (("2" (expand "count" 1 1)
              (("2" (lift-if)
                (("2" (split 1)
                  (("1" (flatten)
                    (("1" (expand "count" 1 2)
                      (("1" (lift-if)
                        (("1" (split 1)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (inst -3 "G" "V1" "rho" "t")
                                (("1"
                                  (prop)
                                  (("1"
                                    (hide-all-but (-5 1))
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (hide 2)
                              (("2"
                                (hide -2)
                                (("2"
                                  (lemma "renaming_equal")
                                  (("2"
                                    (inst -1 "G" "V1" "rho" "hd" "t")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (prop)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (expand "count" 2 2)
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (use "renaming_equal2")
                            (("1" (assert) nil nil)) nil)
                           ("2" (inst -1 "G" "V1" "rho" "t")
                            (("2" (prop)
                              (("2"
                                (hide-all-but (-3 1))
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "equal?_equiv") nil nil)) nil)) nil)
     ("4" (hide 2)
      (("4" (skeep) (("4" (rewrite "equal?_equiv") nil nil)) nil))
      nil))
    nil)
   ((equal?_equiv formula-decl nil nominal_AC_equality nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (renaming_equal formula-decl nil nominal_AC_substitution nil)
    (renaming_equal2 formula-decl nil nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (empty? const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (subs def-decl "args" nominal_AC_substitution nil) nil nil
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil) nil
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (subset? const-decl "bool" sets nil) nil nil
    (vars def-decl "finite_set[variable]" nominal_AC_freshness nil)
    (equivalence? const-decl "bool" relations nil) nil
    (subs def-decl "fresh_context" nominal_AC_substitution nil))
   shostak))
 (renaming_remove 0
  (renaming_remove-1 nil 3855675008
   ("" (induct "args")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "remove" 1 1)
            (("2" (lift-if)
              (("2" (split 1)
                (("1" (flatten)
                  (("1" (expand "subs" 1 2)
                    (("1" (expand "remove" 1 2)
                      (("1" (lift-if)
                        (("1" (split 1)
                          (("1" (flatten)
                            (("1" (inst -3 "G" "V1" "rho" "t")
                              (("1"
                                (assert)
                                (("1"
                                  (prop)
                                  (("1"
                                    (hide-all-but (-5 1))
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (hide -2 -3 2)
                              (("2"
                                (use "renaming_equal2")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "subs" 2 1)
                    (("2" (expand "remove" 2 2)
                      (("2" (lift-if)
                        (("2" (split 2)
                          (("1" (grind) nil nil)
                           ("2" (flatten)
                            (("2" (hide 1)
                              (("2"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (hide -2 1)
                                    (("1"
                                      (lemma "renaming_equal")
                                      (("1"
                                        (inst
                                         -1
                                         "G"
                                         "V1"
                                         "rho"
                                         "hd"
                                         "t")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (hide-all-but (-4 1))
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2"
                                              (expand "subs" -1 3)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (hide 1 3)
                                    (("2"
                                      (decompose-equality 1)
                                      (("1"
                                        (expand "subs" 1 2)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (inst -1 "G" "V1" "rho" "t")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "subs" 1 2)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide 1)
                                                (("2"
                                                  (prop)
                                                  (("2"
                                                    (hide-all-but
                                                     (-3 1))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "equal?_equiv") nil nil)) nil)) nil)
     ("4" (hide 2)
      (("4" (skeep) (("4" (rewrite "equal?_equiv") nil nil)) nil))
      nil))
    nil)
   ((equal?_equiv formula-decl nil nominal_AC_equality nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (renaming_equal formula-decl nil nominal_AC_substitution nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (renaming_equal2 formula-decl nil nominal_AC_substitution nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil) nil nil
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (subs def-decl "args" nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subs def-decl "fresh_context" nominal_AC_substitution nil) nil
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil) nil
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (subset? const-decl "bool" sets nil) nil nil
    (vars def-decl "finite_set[variable]" nominal_AC_freshness nil)
    (equivalence? const-decl "bool" relations nil) nil)
   shostak))
 (renaming_remove_common_TCC1 0
  (renaming_remove_common_TCC1-1 nil 3881696354
   ("" (skeep) (("" (rewrite "equal?_equiv") nil nil)) nil)
   ((equal?_equiv formula-decl nil nominal_AC_equality nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (subs def-decl "fresh_context" nominal_AC_substitution nil))
   nil
   (renaming_remove_common subtype
    "nominal_AC_equality.equal?(nominal_AC_substitution.subs(nominal_AC_substitution.rho, nominal_AC_substitution.G))"
    "equiv[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]")))
 (renaming_remove_common_TCC2 0
  (renaming_remove_common_TCC2-1 nil 3888583022
   ("" (skeep) (("" (rewrite "equal?_equiv") nil nil)) nil)
   ((equal?_equiv formula-decl nil nominal_AC_equality nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil))
   nil
   (renaming_remove_common subtype "nominal_AC_equality.equal?(nominal_AC_substitution.G)"
    "equiv[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]")))
 (renaming_remove_common 0
  (renaming_remove_common-1 nil 3855665362
   ("" (induct "args1")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "remove_common" 1 1)
            (("2" (lift-if)
              (("2" (split 1)
                (("1" (flatten)
                  (("1" (hide-all-but -1) (("1" (grind) nil nil)) nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (expand "subs" -1 1)
                        (("1" (expand "subs" 1 1)
                          (("1" (expand "subs" 1 3)
                            (("1" (rewrite "subs_remove")
                              (("1"
                                (hide -2)
                                (("1"
                                  (expand "remove_common" 1 2)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (use "renaming_pos")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (replace -1 :dir rl)
                                                (("1"
                                                  (reveal -3)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "G"
                                                     "V1"
                                                     "remove(args2, pos?(hd, args2, equal?(G))`2)"
                                                     "rho")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (hide-all-but
                                                             (-5 1))
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-6 1))
                                                            (("2"
                                                              (expand
                                                               "subset?")
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (inst
                                                                   -2
                                                                   "x")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (rewrite
                                                                       "vars_args")
                                                                      (("2"
                                                                        (skolem
                                                                         -1
                                                                         "t")
                                                                        (("2"
                                                                          (prop)
                                                                          (("2"
                                                                            (rewrite
                                                                             "vars_args"
                                                                             2)
                                                                            (("2"
                                                                              (inst
                                                                               2
                                                                               "t")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (use
                                                                                   "remove_mem[nominal_AC_term]")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (-4 1))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (use "renaming_pos")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (-3 1))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "subs" 1 1)
                        (("2" (expand "subs" 2 1)
                          (("2" (expand "subs" 2 2)
                            (("2" (expand "remove_common" 2 2)
                              (("2"
                                (lift-if)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (hide -2 1)
                                      (("1"
                                        (use "renaming_pos")
                                        (("1"
                                          (prop)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide-all-but (-3 1))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "subs" 2 5)
                                      (("2"
                                        (decompose-equality 2)
                                        (("2"
                                          (inst
                                           -1
                                           "G"
                                           "V1"
                                           "args2"
                                           "rho")
                                          (("2"
                                            (assert)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "equal?_equiv") nil nil)) nil)) nil)
     ("4" (hide 2)
      (("4" (skeep) (("4" (rewrite "equal?_equiv") nil nil)) nil))
      nil))
    nil)
   ((equal?_equiv formula-decl nil nominal_AC_equality nil)
    (empty? const-decl "bool" sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    nil (pos? def-decl "[bool, nat]" list_aux_equational_reasoning nil)
    (subs_remove formula-decl nil nominal_AC_substitution nil)
    (renaming_pos formula-decl nil nominal_AC_substitution nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (remove_mem formula-decl nil list_aux_equational_reasoning nil) nil
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (subs def-decl "args" nominal_AC_substitution nil)
    (remove_common def-decl "list[T]" list_aux_equational_reasoning nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil) nil
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (subset? const-decl "bool" sets nil) nil
    (vars def-decl "finite_set[variable]" nominal_AC_freshness nil)
    (equivalence? const-decl "bool" relations nil) nil
    (subs def-decl "fresh_context" nominal_AC_substitution nil))
   shostak))
 (renaming_count_elem2_TCC1 0
  (renaming_count_elem2_TCC1-1 nil 3881683467
   ("" (skeep) (("" (rewrite "equal?_equiv") nil nil)) nil)
   ((equal?_equiv formula-decl nil nominal_AC_equality nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (subs def-decl "fresh_context" nominal_AC_substitution nil))
   nil
   (renaming_count_elem2 subtype
    "nominal_AC_equality.equal?(nominal_AC_substitution.subs(nominal_AC_substitution.rho, nominal_AC_substitution.G))"
    "equiv[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]")))
 (renaming_count_elem2_TCC2 0
  (renaming_count_elem2_TCC2-1 nil 3888583022
   ("" (skeep) (("" (rewrite "equal?_equiv") nil nil)) nil)
   ((equal?_equiv formula-decl nil nominal_AC_equality nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil))
   nil
   (renaming_count_elem2 subtype "nominal_AC_equality.equal?(nominal_AC_substitution.G)"
    "equiv[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]")))
 (renaming_count_elem2 0
  (renaming_count_elem2-1 nil 3855673691
   ("" (measure-induct "length(args)" "args")
    (("1" (skolem 1 "args")
      (("1" (prop)
        (("1" (skeep)
          (("1" (prop)
            (("1" (expand "subs" 1 1)
              (("1" (lift-if)
                (("1" (prop)
                  (("1" (grind) nil nil)
                   ("2" (expand "count_elem2" 2 2)
                    (("2" (assert)
                      (("2" (expand "subs" 2 4)
                        (("2" (expand "count_elem2" 2 1)
                          (("2" (decompose-equality 2)
                            (("2"
                              (case "cons(subs(rho)(car(args)), subs(rho)(cdr(args))) = subs(rho)(args)")
                              (("1"
                                (replace -1)
                                (("1"
                                  (use "renaming_remove")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (replace -1 :dir rl)
                                        (("1"
                                          (inst
                                           -3
                                           "remove(args, car(args), equal?(G))")
                                          (("1"
                                            (split -3)
                                            (("1"
                                              (inst -1 "G" "V1" "rho")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (hide -1 -2 -3 2)
                                                      (("1"
                                                        (expand
                                                         "subset?")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (inst
                                                             -2
                                                             "x")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (rewrite
                                                                 "vars_args")
                                                                (("1"
                                                                  (rewrite
                                                                   "vars_args")
                                                                  (("1"
                                                                    (skolem
                                                                     -1
                                                                     "t")
                                                                    (("1"
                                                                      (inst
                                                                       2
                                                                       "t")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (use
                                                                             "remove_elem_mem2[nominal_AC_term]")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "remove" 1)
                                              (("2"
                                                (rewrite
                                                 "equal?_ref"
                                                 1)
                                                (("2"
                                                  (hide-all-but (1 3))
                                                  (("2"
                                                    (lemma
                                                     "remove_elem_len[nominal_AC_term]")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "equal?(G)"
                                                       "cdr(args)"
                                                       "car(args)")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-4 1))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "subs" 1 3)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "count_elem2" 1 2)
              (("2" (lift-if)
                (("2" (split 1)
                  (("1" (flatten) (("1" (grind) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (expand "count_elem2" 2 1)
                      (("2" (lift-if)
                        (("2" (split 2)
                          (("1" (flatten)
                            (("1" (hide -2 -3 1)
                              (("1" (grind) nil nil)) nil))
                            nil)
                           ("2" (flatten)
                            (("2" (hide 1)
                              (("2"
                                (decompose-equality 1)
                                (("1"
                                  (expand "subs" 1 1)
                                  (("1"
                                    (use "renaming_count")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -1 2)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (hide-all-but (-2 1))
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "subs" 1 2)
                                  (("2"
                                    (use "renaming_remove")
                                    (("2"
                                      (prop)
                                      (("1"
                                        (replace -1 :dir rl)
                                        (("1"
                                          (inst
                                           -2
                                           "remove(args, car(args), equal?(G))")
                                          (("1"
                                            (split -2)
                                            (("1"
                                              (inst -1 "G" "V1" "rho")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (hide-all-but
                                                     (-3 1))
                                                    (("1"
                                                      (expand
                                                       "subset?")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst -2 "x")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (rewrite
                                                               "vars_args")
                                                              (("1"
                                                                (rewrite
                                                                 "vars_args")
                                                                (("1"
                                                                  (skolem
                                                                   -1
                                                                   "t")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (inst
                                                                       2
                                                                       "t")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (use
                                                                           "remove_elem_mem2[nominal_AC_term]")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "remove" 1)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (rewrite
                                                   "equal?_ref")
                                                  (("2"
                                                    (hide 2 -1 -2 -3)
                                                    (("2"
                                                      (lemma
                                                       "remove_elem_len[nominal_AC_term]")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "equal?(G)"
                                                         "cdr(args)"
                                                         "car(args)")
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-3 1))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep) (("2" (rewrite "equal?_equiv") nil nil)) nil)) nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "equal?_equiv") nil nil)) nil)) nil)
     ("4" (hide 2)
      (("4" (skeep) (("4" (rewrite "equal?_equiv") nil nil)) nil)) nil)
     ("5" (hide 2)
      (("5" (skeep) (("5" (rewrite "equal?_equiv") nil nil)) nil))
      nil))
    nil)
   ((equal?_equiv formula-decl nil nominal_AC_equality nil)
    (renaming_count formula-decl nil nominal_AC_substitution nil) nil
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (renaming_remove formula-decl nil nominal_AC_substitution nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (remove_elem_len formula-decl nil list_aux_equational_reasoning nil)
    (equal?_ref formula-decl nil nominal_AC_equality nil)
    (remove_elem_mem2 formula-decl nil list_aux_equational_reasoning nil)
    (vars_args formula-decl nil nominal_AC_term_properties nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    nil (car adt-accessor-decl "[(cons?) -> T]" list_adt nil) nil
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (equiv type-eq-decl nil list_aux_equational_reasoning nil)
    (count_elem2 def-decl "[list[T], list[nat]]" list_aux_equational_reasoning nil)
    (subs def-decl "args" nominal_AC_substitution nil)
    (fresh_context type-eq-decl nil nominal_AC_freshness nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil) nil
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (subset? const-decl "bool" sets nil) nil
    (vars def-decl "finite_set[variable]" nominal_AC_freshness nil)
    (equivalence? const-decl "bool" relations nil) nil
    (subs def-decl "fresh_context" nominal_AC_substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (args type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (renaming_equal_syn_TCC1 0
  (renaming_equal_syn_TCC1-1 nil 3891679801 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) nil
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil))
   nil
   (renaming_equal_syn subtype
    "nominal_AC_substitution.subs(nominal_AC_substitution.rho)(nominal_AC_substitution.Y)"
    "(nominal_AC_term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].var?)")))
 (renaming_equal_syn 0
  (renaming_equal_syn-2 nil 3881684040
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "sig1" "cons((Y, t), null)")
        ((""
          (name-replace "sig1_"
           "cons((V(subs(rho)(Y)), subs(rho)(t)), null)")
          (("" (prop)
            (("" (expand "equal_syn?" 1)
              (("" (skolem 1 "Z")
                (("" (prop)
                  (("" (reveal -1 -2)
                    (("" (expand "subs" 1)
                      (("" (rewrite "subs_append2")
                        (("" (rewrite "subs_append2")
                          (("" (case "Z = Y")
                            (("1" (replace -1)
                              (("1"
                                (expand "sig1" 1)
                                (("1"
                                  (expand "subs" 1 4)
                                  (("1"
                                    (expand "subs" 1 5)
                                    (("1"
                                      (expand "subs" 1 4)
                                      (("1"
                                        (rewrite "ext_identity")
                                        (("1"
                                          (expand "sig1_" 1)
                                          (("1"
                                            (expand "subs" 1 1)
                                            (("1"
                                              (expand "subs" 1 4)
                                              (("1"
                                                (expand "subs" 1 2)
                                                (("1"
                                                  (case
                                                   "var?(subs(rho)(null * Y))")
                                                  (("1"
                                                    (expand "subs" 1 1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "renaming_susp_var")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "Y"
                                                           "null"
                                                           "rho")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (replace
                                                               -2)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (rewrite
                                                                   "ext_identity")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (typepred "rho")
                                                      (("2"
                                                        (lemma
                                                         "renaming_ord2")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "rho"
                                                           "null * Y")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "sig1" 2)
                              (("2"
                                (expand "subs" 2 4)
                                (("2"
                                  (expand "subs" 2 5)
                                  (("2"
                                    (expand "subs" 2 4)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "sig1_" 2)
                                        (("2"
                                          (expand "subs" 2 1)
                                          (("2"
                                            (expand "subs" 2 4)
                                            (("2"
                                              (case
                                               "var?(subs(rho)(null * Z))")
                                              (("1"
                                                (expand "subs" 2 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (case
                                                       "subs(rho)(Z) = subs(rho)(Y)")
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (case
                                                           "member(Y, dom(rho)) AND member(Z, dom(rho))")
                                                          (("1"
                                                            (typepred
                                                             "rho")
                                                            (("1"
                                                              (expand
                                                               "renaming?"
                                                               -1)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (inst
                                                                   -2
                                                                   "Y"
                                                                   "Z")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "NOT member(Y, dom(rho)) AND member(Z, dom(rho))")
                                                            (("1"
                                                              (hide 1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (case
                                                                   "member(null * Y, img(rho))")
                                                                  (("1"
                                                                    (inst
                                                                     -7
                                                                     "Y")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (rewrite
                                                                         "vars_finset")
                                                                        (("1"
                                                                          (inst
                                                                           3
                                                                           "null * Y")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "member"
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "img"
                                                                       1)
                                                                      (("2"
                                                                        (inst
                                                                         1
                                                                         "Z")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "member"
                                                                             2)
                                                                            (("2"
                                                                              (expand
                                                                               "dom"
                                                                               2)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "NOT member(Z, dom(rho)) AND member(Y, dom(rho))")
                                                                (("1"
                                                                  (hide
                                                                   1
                                                                   2)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (case
                                                                       "member(null * Z, img(rho))")
                                                                      (("1"
                                                                        (inst
                                                                         -7
                                                                         "Z")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (rewrite
                                                                             "vars_finset")
                                                                            (("1"
                                                                              (inst
                                                                               3
                                                                               "null * Z")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "member"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "img"
                                                                           1)
                                                                          (("2"
                                                                            (inst
                                                                             1
                                                                             "Y")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "member"
                                                                                 2)
                                                                                (("2"
                                                                                  (expand
                                                                                   "dom"
                                                                                   2)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "NOT member(Z, dom(rho)) AND NOT member(Y, dom(rho))")
                                                                  (("1"
                                                                    (hide
                                                                     1
                                                                     2
                                                                     3)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "member"
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "member"
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "dom"
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "dom"
                                                                               2)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("1"
                                                                                      (decompose-equality
                                                                                       -3)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (prop)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (split 3)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "subs"
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "subs"
                                                               -1
                                                               1)
                                                              (("1"
                                                                (lemma
                                                                 "renaming_susp_var")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "Z"
                                                                   "null"
                                                                   "rho")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (replace
                                                                       -2)
                                                                      (("1"
                                                                        (lemma
                                                                         "renaming_susp_var")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "Y"
                                                                           "null"
                                                                           "rho")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (replace
                                                                               -2
                                                                               2)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "subs"
                                                                                   -5
                                                                                   2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "subs"
                                                                                     2)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (lemma
                                                             "renaming_susp_var")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "Z"
                                                               "null"
                                                               "rho")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (replace
                                                                   -2)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (use
                                                 "renaming_susp_var")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil) nil
    (equal_syn? const-decl "bool" nominal_AC_substitution nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    nil (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (vars_finset formula-decl nil nominal_AC_term_properties nil) nil nil
    (renaming_susp_var formula-decl nil nominal_AC_substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (renaming_ord2 formula-decl nil nominal_AC_substitution nil)
    (ext_identity formula-decl nil nominal_AC_term_properties nil) nil
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (renaming_equal_syn-1 nil 3856960560
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "sig1" "cons((Y, t), null)")
        ((""
          (name-replace "sig1_"
           "cons((V(subs(rho)(Y)), subs(rho)(t)), null)")
          (("" (prop)
            (("" (expand "equal_syn?" 1)
              (("" (skolem 1 "Z")
                (("" (prop)
                  (("" (reveal -1 -2)
                    (("" (expand "subs" 1)
                      (("" (rewrite "subs_append2")
                        (("" (rewrite "subs_append2")
                          (("" (case "Z = Y")
                            (("1" (replace -1)
                              (("1"
                                (expand "sig1" 1)
                                (("1"
                                  (expand "subs" 1 4)
                                  (("1"
                                    (expand "subs" 1 5)
                                    (("1"
                                      (expand "subs" 1 4)
                                      (("1"
                                        (expand "sig1_" 1)
                                        (("1"
                                          (expand "subs" 1 1)
                                          (("1"
                                            (expand "subs" 1 4)
                                            (("1"
                                              (expand "subs" 1 2)
                                              (("1"
                                                (case
                                                 "var?(subs(rho)(variable(Y)))")
                                                (("1"
                                                  (expand "subs" 1 1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (typepred "rho")
                                                    (("2"
                                                      (lemma
                                                       "renaming_ord2")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "rho"
                                                         "variable(Y)")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "sig1" 2)
                              (("2"
                                (expand "subs" 2 4)
                                (("2"
                                  (expand "subs" 2 5)
                                  (("2"
                                    (expand "subs" 2 4)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "sig1_" 2)
                                        (("2"
                                          (expand "subs" 2 1)
                                          (("2"
                                            (expand "subs" 2 4)
                                            (("2"
                                              (case
                                               "var?(subs(rho)(variable(Z)))")
                                              (("1"
                                                (expand "subs" 2 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (case
                                                       "subs(rho)(Z) = subs(rho)(Y)")
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (case
                                                           "member(Y, dom(rho)) AND member(Z, dom(rho))")
                                                          (("1"
                                                            (typepred
                                                             "rho")
                                                            (("1"
                                                              (expand
                                                               "renaming?"
                                                               -1)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (inst
                                                                   -2
                                                                   "Y"
                                                                   "Z")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "NOT member(Y, dom(rho)) AND member(Z, dom(rho))")
                                                            (("1"
                                                              (hide 1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (case
                                                                   "member(variable(Y), img(rho))")
                                                                  (("1"
                                                                    (inst
                                                                     -7
                                                                     "Y")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (rewrite
                                                                         "vars_finset")
                                                                        (("1"
                                                                          (inst
                                                                           3
                                                                           "variable(Y)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "member"
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "img"
                                                                       1)
                                                                      (("2"
                                                                        (inst
                                                                         1
                                                                         "Z")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "member"
                                                                             2)
                                                                            (("2"
                                                                              (expand
                                                                               "dom"
                                                                               2)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "NOT member(Z, dom(rho)) AND member(Y, dom(rho))")
                                                                (("1"
                                                                  (hide
                                                                   1
                                                                   2)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (case
                                                                       "member(variable(Z), img(rho))")
                                                                      (("1"
                                                                        (inst
                                                                         -7
                                                                         "Z")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (rewrite
                                                                             "vars_finset")
                                                                            (("1"
                                                                              (inst
                                                                               3
                                                                               "variable(Z)")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "member"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "img"
                                                                           1)
                                                                          (("2"
                                                                            (inst
                                                                             1
                                                                             "Y")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "member"
                                                                                 2)
                                                                                (("2"
                                                                                  (expand
                                                                                   "dom"
                                                                                   2)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "NOT member(Z, dom(rho)) AND NOT member(Y, dom(rho))")
                                                                  (("1"
                                                                    (hide
                                                                     1
                                                                     2
                                                                     3)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "member"
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "member"
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "dom"
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "dom"
                                                                               2)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("1"
                                                                                      (decompose-equality
                                                                                       -3)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (prop)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (split 3)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "subs"
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "subs"
                                                               -1
                                                               1)
                                                              (("1"
                                                                (lemma
                                                                 "nominal_AC_term_variable_eta")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "subs(rho)(variable(Z))")
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         (-1
                                                                          2))
                                                                        (("1"
                                                                          (grind)
                                                                          (("1"
                                                                            (lemma
                                                                             "nominal_AC_term_variable_eta")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "subs(rho)(variable(Y))")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "nominal_AC_term_variable_eta")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "subs(rho)(variable(Z))")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 3)
                                                (("2"
                                                  (lemma
                                                   "renaming_ord2")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "rho"
                                                     "variable(Z)")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (equal_syn? const-decl "bool" nominal_AC_substitution nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (vars_finset formula-decl nil nominal_AC_term_properties nil)
    (renaming_ord2 formula-decl nil nominal_AC_substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (constant type-eq-decl nil nominal_AC_term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (renaming_prot_vars 0
  (renaming_prot_vars-1 nil 3882706630
   ("" (skeep)
    (("" (prop)
      (("1" (case "member(V(t), dom(rho))")
        (("1" (rewrite "renaming_var3" -2)
          (("1" (expand "disjoint?" -4)
            (("1" (expand "empty?" -4)
              (("1" (inst -4 "V(subs(rho)(V(t)))")
                (("1" (expand ("member" "intersection") 2)
                  (("1" (prop)
                    (("1" (expand ("member" "union") 1)
                      (("1" (prop)
                        (("1" (rewrite "vars_finset")
                          (("1" (inst 2 "subs(rho)(V(t))")
                            (("1" (prop)
                              (("1"
                                (expand ("member" "img") 1)
                                (("1" (inst 1 "V(t)") nil nil))
                                nil)
                               ("2"
                                (case "var?(subs(rho)(V(t)))")
                                (("1"
                                  (expand "vars" 1)
                                  (("1"
                                    (assert)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2" (use "renaming_var") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "member" 1)
          (("2" (expand "dom" 1)
            (("2" (flatten)
              (("2" (lemma "renaming_susp_var")
                (("2" (inst -1 "V(t)" "p(t)" "rho")
                  (("2" (flatten)
                    (("2" (lemma "nominal_AC_term_times_eta")
                      (("2" (inst -1 "t")
                        (("2" (replace -1 -5 :dir rl)
                          (("2" (replace -3)
                            (("2" (assert)
                              (("2"
                                (replace -4)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "disjoint?" -3)
        (("2" (expand "empty?" -3)
          (("2" (inst -3 "V(t)")
            (("2" (expand ("member" "intersection") 2)
              (("2" (prop)
                (("2" (expand ("member" "union") 1)
                  (("2" (prop)
                    (("2" (expand ("member" "dom") 1)
                      (("2" (flatten)
                        (("2" (lemma "renaming_susp_var")
                          (("2" (inst -1 "V(t)" "p(t)" "rho")
                            (("2" (flatten)
                              (("2"
                                (use "nominal_AC_term_times_eta")
                                (("2"
                                  (replace -1 2 :dir rl)
                                  (("2"
                                    (replace -3)
                                    (("2"
                                      (replace -4)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (nominal_AC_term_times_eta formula-decl nil nominal_AC_term_adt nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (renaming_susp_var formula-decl nil nominal_AC_substitution nil)
    (renaming_var3 formula-decl nil nominal_AC_substitution nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (vars_finset formula-decl nil nominal_AC_term_properties nil)
    (renaming_var formula-decl nil nominal_AC_substitution nil) nil
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (disjoint? const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil))
   shostak))
 (shift_cor 0
  (shift_cor-1 nil 3855771951
   ("" (measure-induct "n" "n")
    (("" (skolem 1 "n")
      (("" (prop)
        (("" (skeep)
          (("" (split 1)
            (("1" (flatten)
              (("1" (expand "shift" 1)
                (("1" (lift-if)
                  (("1" (split 1)
                    (("1" (flatten)
                      (("1" (expand "subs" 1)
                        (("1" (expand "subs" 1 2)
                          (("1" (replace -1)
                            (("1" (case "k = start")
                              (("1"
                                (replace -1)
                                (("1"
                                  (expand "subs" 1)
                                  (("1"
                                    (expand "ext" 1)
                                    (("1"
                                      (rewrite "append_null")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (-1 -2 -3 1))
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "subs" 2 1)
                        (("2" (inst -3 "n-1")
                          (("1" (assert)
                            (("1" (inst -3 "inc" "k" "pi" "start+1")
                              (("1"
                                (assert)
                                (("1"
                                  (split -3)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (replace -2)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (grind)
                                    (("2"
                                      (rewrite "append_null")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand "shift" 2)
                (("2" (lift-if)
                  (("2" (split 2)
                    (("1" (flatten) (("1" (grind) nil nil)) nil)
                     ("2" (flatten)
                      (("2" (inst -1 "n-1")
                        (("1" (assert) (("1" (grind) nil nil)) nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil (append_null formula-decl nil list_props nil)
    (ext def-decl "nominal_AC_term" nominal_AC_term_properties nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (shift def-decl "sub" nominal_AC_substitution nil) nil
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (shift_append_equal_syn 0
  (shift_append_equal_syn-1 nil 3855773349
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (expand "equal_syn?" 1)
          (("" (skolem 1 "x")
            (("" (prop)
              (("" (expand "subs" 1)
                (("" (rewrite "subs_append2")
                  (("" (lemma "shift_cor")
                    (("" (expand "shift" 1)
                      (("" (expand "shift" 1)
                        (("" (lift-if)
                          (("" (split 1)
                            (("1" (prop)
                              (("1"
                                (expand "subs" 1 3)
                                (("1" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (name-replace
                                 "Z1"
                                 "select_greater[nat](finset2list(V1))")
                                (("2"
                                  (name-replace
                                   "Z1_"
                                   "select_greater[nat](finset2list(V1_))")
                                  (("2"
                                    (inst
                                     -1
                                     "Z1_ - Z1"
                                     "x"
                                     "n"
                                     "null"
                                     "1+Z1")
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (lemma
                                           "finset2list_mem[variable]")
                                          (("1"
                                            (inst -1 "V1" "x")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "Z1" -2)
                                                (("1"
                                                  (use
                                                   "select_greater_lt[nat]")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (replace -1)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (equal_syn? const-decl "bool" nominal_AC_substitution nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil) nil
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (renaming type-eq-decl nil nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (finset2list_mem formula-decl nil list_aux_equational_reasoning nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (select_greater_lt formula-decl nil list_aux_equational_reasoning nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil nil
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (select_greater def-decl "nat" list_aux_equational_reasoning nil)
    (finset2list def-decl "list[T]" list_aux_equational_reasoning nil) nil nil
    (shift_cor formula-decl nil nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil))
   shostak))
 (shift_dom 0
  (shift_dom-2 nil 3881685678
   ("" (skeep)
    (("" (expand "subset?" 1)
      (("" (skeep)
        (("" (expand "dom" -1)
          (("" (expand "member" -1 1)
            (("" (flatten)
              (("" (lemma "shift_cor")
                (("" (inst -1 "inc" "x" "n" "null" "start")
                  (("" (assert)
                    (("" (expand "subs" 1 1)
                      (("" (prop)
                        (("" (rewrite "mem_list2set" :dir rl)
                          (("" (use "from_min2max_mem[nat]")
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (from_min2max def-decl "list[nat]" list_aux_equational_reasoning nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (mem_list2set formula-decl nil list_aux_equational_reasoning nil)
    (from_min2max_mem formula-decl nil list_aux_equational_reasoning nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (shift_cor formula-decl nil nominal_AC_substitution nil)
    (member const-decl "bool" sets nil))
   nil)
  (shift_dom-1 nil 3855935873
   ("" (skeep)
    (("" (expand "subset?" 1)
      (("" (skeep)
        (("" (expand "dom" -1)
          (("" (expand "member" -1 1)
            (("" (flatten)
              (("" (lemma "shift_cor")
                (("" (inst -1 "inc" "x" "n" "start")
                  (("" (assert)
                    (("" (expand "subs" 1 1)
                      (("" (prop)
                        (("" (rewrite "mem_list2set" :dir rl)
                          (("" (use "from_min2max_mem[nat]")
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (mem_list2set formula-decl nil list_aux_equational_reasoning nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (from_min2max def-decl "list[nat]" list_aux_equational_reasoning nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (from_min2max_mem formula-decl nil list_aux_equational_reasoning nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (shift_cor formula-decl nil nominal_AC_substitution nil)
    (member const-decl "bool" sets nil))
   shostak))
 (shift_dom2 0
  (shift_dom2-2 nil 3881685745
   ("" (skeep)
    (("" (use "shift_dom")
      (("" (prop)
        (("1" (rewrite "subset_antisymmetric")
          (("1" (hide 2)
            (("1" (hide -2)
              (("1" (expand "subset?" 1)
                (("1" (skeep)
                  (("1" (rewrite "mem_list2set" :dir rl)
                    (("1" (use "from_min2max_mem[nat]")
                      (("1" (assert)
                        (("1" (lemma "shift_cor")
                          (("1" (inst -1 "inc" "x" "n" "null" "start")
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "dom" 1)
                                    (("1"
                                      (expand "member" 1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "subs" -5)
                                          (("1"
                                            (replace -5)
                                            (("1"
                                              (decompose-equality -1)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (rewrite "subset_antisymmetric")
          (("1" (expand "subset?" 1)
            (("1" (skeep)
              (("1" (hide 1 2 -3)
                (("1" (lemma "shift_cor")
                  (("1" (inst -1 "inc" "x" "n" "null" "start")
                    (("1" (expand "member" -2)
                      (("1" (expand "dom" -2)
                        (("1" (flatten)
                          (("1" (expand "subs" 1)
                            (("1" (prop)
                              (("1"
                                (replace -3)
                                (("1"
                                  (replace -4)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "subset?" 1)
            (("2" (skeep)
              (("2" (expand "member" -1)
                (("2" (expand "emptyset" -1) (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((shift_dom formula-decl nil nominal_AC_substitution nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (set type-eq-decl nil sets nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (shift def-decl "sub" nominal_AC_substitution nil) nil
    (list2set def-decl "set[T]" list2set nil)
    (from_min2max def-decl "list[nat]" list_aux_equational_reasoning nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (from_min2max_mem formula-decl nil list_aux_equational_reasoning nil)
    (shift_cor formula-decl nil nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mem_list2set formula-decl nil list_aux_equational_reasoning nil)
    (subset? const-decl "bool" sets nil))
   nil)
  (shift_dom2-1 nil 3856530319
   ("" (skeep)
    (("" (use "shift_dom")
      (("" (prop)
        (("1" (rewrite "subset_antisymmetric")
          (("1" (hide 2)
            (("1" (hide -2)
              (("1" (expand "subset?" 1)
                (("1" (skeep)
                  (("1" (rewrite "mem_list2set" :dir rl)
                    (("1" (use "from_min2max_mem[nat]")
                      (("1" (assert)
                        (("1" (lemma "shift_cor")
                          (("1" (inst -1 "inc" "x" "n" "start")
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "dom" 1)
                                    (("1"
                                      (expand "member" 1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "subs" -5)
                                          (("1"
                                            (replace -5)
                                            (("1"
                                              (decompose-equality -1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (rewrite "subset_antisymmetric")
          (("1" (expand "subset?" 1)
            (("1" (skeep)
              (("1" (hide 1 2 -3)
                (("1" (lemma "shift_cor")
                  (("1" (inst -1 "inc" "x" "n" "start")
                    (("1" (expand "member" -2)
                      (("1" (expand "dom" -2)
                        (("1" (flatten)
                          (("1" (expand "subs" 1)
                            (("1" (prop)
                              (("1"
                                (replace -3)
                                (("1"
                                  (replace -4)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "subset?" 1)
            (("2" (skeep)
              (("2" (expand "member" -1)
                (("2" (expand "emptyset" -1) (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((shift_dom formula-decl nil nominal_AC_substitution nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil nominal_AC_term_properties nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (shift def-decl "sub" nominal_AC_substitution nil)
    (list2set def-decl "set[T]" list2set nil)
    (from_min2max def-decl "list[nat]" list_aux_equational_reasoning nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (from_min2max_mem formula-decl nil list_aux_equational_reasoning nil)
    (shift_cor formula-decl nil nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mem_list2set formula-decl nil list_aux_equational_reasoning nil)
    (subset? const-decl "bool" sets nil))
   shostak))
 (shift_dom_disjoint 0
  (shift_dom_disjoint-1 nil 3896731371
   ("" (skolem 1 ("V" "V_" "n"))
    (("" (assert)
      (("" (name-replace "rho" "shift(V, V_, n)")
        (("" (reveal -1)
          (("" (expand "shift" -1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (name-replace "Z" "select_greater[nat](V)")
                  (("2" (reveal -1)
                    (("2" (name-replace "Z_" "select_greater[nat](V_)")
                      (("2" (reveal -1)
                        (("2" (use "shift_dom")
                          (("1" (replace -4)
                            (("1" (expand "subset?" -1)
                              (("1"
                                (expand "disjoint?" 2)
                                (("1"
                                  (expand "empty?")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (expand
                                       ("member" "intersection")
                                       -5)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (rewrite
                                               "mem_list2set"
                                               :dir
                                               rl)
                                              (("1"
                                                (rewrite
                                                 "mem_list2set"
                                                 :dir
                                                 rl)
                                                (("1"
                                                  (use
                                                   "from_min2max_mem[nat]")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (lemma
                                                         "select_greater_lt[nat]")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "V"
                                                           "x")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((select_greater def-decl "nat" list_aux_equational_reasoning nil)
    (shift_dom formula-decl nil nominal_AC_substitution nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil nil
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subset? const-decl "bool" sets nil)
    (from_min2max def-decl "list[nat]" list_aux_equational_reasoning nil)
    (mem_list2set formula-decl nil list_aux_equational_reasoning nil)
    (from_min2max_mem formula-decl nil list_aux_equational_reasoning nil)
    (select_greater_lt formula-decl nil list_aux_equational_reasoning nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_intersection2 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil) nil nil nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (shift_img 0
  (shift_img-1 nil 3855935756
   ("" (skeep)
    (("" (expand "subset?")
      (("" (skeep)
        (("" (rewrite "mem_list2set" :dir rl)
          (("" (rewrite "vars_finset")
            (("" (skolem -1 "t")
              (("" (prop)
                (("" (expand "img" -1)
                  (("" (expand "member" -1 1)
                    (("" (skolem -1 "X")
                      (("" (prop)
                        (("" (lemma "shift_dom")
                          (("" (inst -1 "inc" "n" "start")
                            (("" (expand "subset?" -1)
                              ((""
                                (inst -1 "X")
                                ((""
                                  (prop)
                                  ((""
                                    (rewrite "mem_list2set" :dir rl)
                                    ((""
                                      (use "from_min2max_mem[nat]")
                                      ((""
                                        (assert)
                                        ((""
                                          (lemma "shift_cor")
                                          ((""
                                            (inst
                                             -1
                                             "inc"
                                             "X"
                                             "n"
                                             "null"
                                             "start")
                                            ((""
                                              (assert)
                                              ((""
                                                (flatten)
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (expand "subs" -6)
                                                    ((""
                                                      (replace -6)
                                                      ((""
                                                        (replace -1)
                                                        ((""
                                                          (expand
                                                           "vars"
                                                           -7)
                                                          ((""
                                                            (expand
                                                             "member"
                                                             -7)
                                                            ((""
                                                              (expand
                                                               "singleton"
                                                               -7)
                                                              ((""
                                                                (replace
                                                                 -7)
                                                                ((""
                                                                  (lemma
                                                                   "from_min2max_mem[nat]")
                                                                  ((""
                                                                    (inst
                                                                     -1
                                                                     "inc+start"
                                                                     "inc + start + n"
                                                                     "X+inc")
                                                                    ((""
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (subset? const-decl "bool" sets nil)
    (mem_list2set formula-decl nil list_aux_equational_reasoning nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (from_min2max def-decl "list[nat]" list_aux_equational_reasoning nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (shift_dom formula-decl nil nominal_AC_substitution nil)
    (from_min2max_mem formula-decl nil list_aux_equational_reasoning nil)
    (shift_cor formula-decl nil nominal_AC_substitution nil) nil
    (singleton const-decl "(singleton?)" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (shift def-decl "sub" nominal_AC_substitution nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (TRUE const-decl "bool" booleans nil) nil
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (perm type-eq-decl nil atoms nil)
    (vars_finset formula-decl nil nominal_AC_term_properties nil))
   shostak))
 (shift_img2 0
  (shift_img2-1 nil 3856530659
   ("" (skeep)
    (("" (lemma "shift_img")
      (("" (inst?)
        (("" (prop)
          (("1" (rewrite "subset_antisymmetric")
            (("1" (hide 2 -2)
              (("1" (expand "subset?" 1)
                (("1" (skeep)
                  (("1" (rewrite "mem_list2set" :dir rl)
                    (("1" (rewrite "vars_finset" 1)
                      (("1" (inst 1 "null * x")
                        (("1" (expand "vars" 1 1)
                          (("1" (expand "singleton" 1 1)
                            (("1" (expand "member" 1 2)
                              (("1"
                                (use "from_min2max_mem[nat]")
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "member" 1)
                                      (("1"
                                        (expand "img" 1)
                                        (("1"
                                          (inst 1 "x - inc")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (use "shift_dom2")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (rewrite
                                                       "mem_list2set"
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (lemma
                                                         "from_min2max_mem[nat]")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "start"
                                                           "start + n"
                                                           "x-inc")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "shift_cor")
                                              (("2"
                                                (inst
                                                 -1
                                                 "inc"
                                                 "x-inc"
                                                 "n"
                                                 "null"
                                                 "start")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "subs" 1 1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (rewrite "subset_antisymmetric")
            (("1" (expand "subset?" 1)
              (("1" (skolem 1 "t")
                (("1" (prop)
                  (("1" (expand "img" -1)
                    (("1" (expand "member" -1 1)
                      (("1" (skolem -1 "x")
                        (("1" (prop)
                          (("1" (use "shift_dom2")
                            (("1" (assert)
                              (("1"
                                (replace -1)
                                (("1"
                                  (expand "member" -2)
                                  (("1"
                                    (expand "emptyset" -2)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "subset?" 1)
              (("2" (skeep)
                (("2" (expand "member" -1)
                  (("2" (expand "emptyset" -1) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((shift_img formula-decl nil nominal_AC_substitution nil)
    (vars_finset formula-decl nil nominal_AC_term_properties nil) nil
    (member const-decl "bool" sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil nil (shift_cor formula-decl nil nominal_AC_substitution nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (shift_dom2 formula-decl nil nominal_AC_substitution nil)
    (from_min2max_mem formula-decl nil list_aux_equational_reasoning nil)
    (singleton const-decl "(singleton?)" sets nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (mem_list2set formula-decl nil list_aux_equational_reasoning nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (from_min2max def-decl "list[nat]" list_aux_equational_reasoning nil)
    (list2set def-decl "set[T]" list2set nil) nil
    (shift def-decl "sub" nominal_AC_substitution nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil) nil
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (set type-eq-decl nil sets nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (shift_renaming 0
  (shift_renaming-1 nil 3856283944
   ("" (skeep)
    (("" (expand "renaming?")
      (("" (prop)
        (("1" (skeep)
          (("1" (expand "member" -1)
            (("1" (expand "img" -1)
              (("1" (skolem -1 "x")
                (("1" (prop)
                  (("1" (lemma "shift_cor")
                    (("1" (inst -1 "inc" "x" "n" "null" "start")
                      (("1" (grind) nil nil)) nil))
                    nil)
                   ("2" (expand "subs" -2)
                    (("2" (lemma "shift_cor")
                      (("2" (inst?)
                        (("2" (split -1)
                          (("1" (flatten)
                            (("1" (replace -3)
                              (("1"
                                (replace -5)
                                (("1"
                                  (replace -5 :dir rl)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (replace -1)
                              (("2"
                                (replace -3 2 :dir rl)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skolem 1 ("x" "y"))
          (("2" (prop)
            (("2" (lemma "shift_cor")
              (("2" (inst -1 "inc" "x" "n" "null" "start")
                (("2" (assert)
                  (("2" (split -1)
                    (("1" (flatten)
                      (("1" (expand "subs" -6)
                        (("1" (replace -3)
                          (("1" (lemma "shift_cor")
                            (("1"
                              (inst -1 "inc" "y" "n" "null" "start")
                              (("1"
                                (assert)
                                (("1"
                                  (split -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (replace -3)
                                      (("1"
                                        (decompose-equality -9)
                                        nil
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (hide-all-but (-6 1))
                                      (("2"
                                        (use "shift_dom")
                                        (("2"
                                          (expand "subset?" -1)
                                          (("2"
                                            (inst -1 "y")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (rewrite
                                                 "mem_list2set"
                                                 :dir
                                                 rl)
                                                (("2"
                                                  (use
                                                   "from_min2max_mem[nat]")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (hide-all-but (-2 1))
                        (("2" (use "shift_dom")
                          (("2" (expand "subset?" -1)
                            (("2" (inst -1 "x")
                              (("2"
                                (assert)
                                (("2"
                                  (rewrite "mem_list2set" :dir rl)
                                  (("2"
                                    (use "from_min2max_mem[nat]")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((renaming? const-decl "bool" nominal_AC_substitution nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (TRUE const-decl "bool" booleans nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" nominal_AC_term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil)
    (subset? const-decl "bool" sets nil)
    (from_min2max_mem formula-decl nil list_aux_equational_reasoning nil)
    (mem_list2set formula-decl nil list_aux_equational_reasoning nil) nil
    (from_min2max def-decl "list[nat]" list_aux_equational_reasoning nil)
    (shift_dom formula-decl nil nominal_AC_substitution nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (shift_cor formula-decl nil nominal_AC_substitution nil)
    (member const-decl "bool" sets nil))
   shostak))
 (shift_renaming_cor 0
  (shift_renaming_cor-1 nil 3896774426
   ("" (skeep)
    (("" (expand "shift" 1)
      (("" (prop)
        (("1" (grind) nil nil)
         ("2" (use "shift_renaming") (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   (nil (shift_renaming formula-decl nil nominal_AC_substitution nil) nil nil
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (select_greater def-decl "nat" list_aux_equational_reasoning nil)
    (atom type-eq-decl nil atoms nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil)
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil) nil)
   shostak))
 (shift_append_renaming 0
  (shift_append_renaming-1 nil 3856282589
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "rho1" "shift(V1, V1_, n)")
        (("" (reveal -1)
          (("" (expand "shift" -1)
            (("" (expand "shift" -1)
              (("" (lift-if)
                (("" (prop)
                  (("1" (replace -2 :dir rl)
                    (("1" (rewrite "append_null")
                      (("1" (assert) nil nil)) nil))
                    nil)
                   ("2"
                    (name-replace "Z"
                     "select_greater[nat](finset2list(V1))")
                    (("2"
                      (name-replace "Z_"
                       "select_greater[nat](finset2list(V1_))")
                      (("2" (typepred "rho")
                        (("2"
                          (case "disjoint?(dom(rho), vars(img(rho1)))")
                          (("1" (case "disjoint?(dom(rho), dom(rho1))")
                            (("1" (use "shift_renaming")
                              (("1"
                                (expand "renaming?" 2)
                                (("1"
                                  (prop)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (expand "member" -1)
                                      (("1"
                                        (expand "img" -1)
                                        (("1"
                                          (skolem -1 "x")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (use "dom_append")
                                              (("1"
                                                (expand "subset?" -1)
                                                (("1"
                                                  (inst -1 "x")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       ("member"
                                                        "union")
                                                       -1)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (expand
                                                           "subs"
                                                           -3)
                                                          (("1"
                                                            (rewrite
                                                             "subs_append2"
                                                             -3)
                                                            (("1"
                                                              (case
                                                               "member(x, dom(rho1))")
                                                              (("1"
                                                                (expand
                                                                 "disjoint?"
                                                                 -6)
                                                                (("1"
                                                                  (expand
                                                                   "empty?"
                                                                   -6)
                                                                  (("1"
                                                                    (inst
                                                                     -6
                                                                     "x")
                                                                    (("1"
                                                                      (expand
                                                                       ("member"
                                                                        "intersection")
                                                                       2)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "member"
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "dom"
                                                                   1)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "subs"
                                                                       -1)
                                                                      (("2"
                                                                        (replace
                                                                         -1)
                                                                        (("2"
                                                                          (typepred
                                                                           "rho")
                                                                          (("2"
                                                                            (expand
                                                                             "renaming?"
                                                                             -1)
                                                                            (("2"
                                                                              (prop)
                                                                              (("2"
                                                                                (hide
                                                                                 -2)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "t")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member"
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "img"
                                                                                         1)
                                                                                        (("2"
                                                                                          (inst
                                                                                           1
                                                                                           "x")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "subs"
                                                                                               1)
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "subs"
                                                           -3)
                                                          (("2"
                                                            (rewrite
                                                             "subs_append2")
                                                            (("2"
                                                              (lemma
                                                               "subs_no_effect_t")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "rho"
                                                                 "subs(rho1)(null * x)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (prop)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "renaming?"
                                                                         -5)
                                                                        (("1"
                                                                          (prop)
                                                                          (("1"
                                                                            (hide
                                                                             -6)
                                                                            (("1"
                                                                              (inst
                                                                               -5
                                                                               "t")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   ("member"
                                                                                    "img")
                                                                                   2)
                                                                                  (("1"
                                                                                    (inst
                                                                                     2
                                                                                     "x")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "subs"
                                                                                         2
                                                                                         1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "disjoint?"
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "empty?"
                                                                         1)
                                                                        (("2"
                                                                          (skolem
                                                                           1
                                                                           "y")
                                                                          (("2"
                                                                            (expand
                                                                             ("member"
                                                                              "intersection")
                                                                             -1)
                                                                            (("2"
                                                                              (prop)
                                                                              (("2"
                                                                                (use
                                                                                 "vars_subs_t")
                                                                                (("2"
                                                                                  (expand
                                                                                   "subset?"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "y")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         ("member"
                                                                                          "union")
                                                                                         -1)
                                                                                        (("2"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "disjoint?"
                                                                                             -9)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "empty?"
                                                                                               -9)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -9
                                                                                                 "y")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   ("member"
                                                                                                    "intersection")
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "vars"
                                                                                             -1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "singleton"
                                                                                               -1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "member"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "disjoint?"
                                                                                                     -8)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "empty?"
                                                                                                       -8)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -8
                                                                                                         "x")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           ("member"
                                                                                                            "intersection")
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "subs" -2)
                                              (("2"
                                                (rewrite
                                                 "subs_append2")
                                                (("2"
                                                  (lemma
                                                   "renaming_susp_var")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "x"
                                                     "null"
                                                     "rho1")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (replace -2)
                                                        (("1"
                                                          (lemma
                                                           "renaming_susp_var")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "V(subs(rho1)(x))"
                                                             "null"
                                                             "rho")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (replace
                                                                 -2)
                                                                (("1"
                                                                  (replace
                                                                   -6
                                                                   1
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "shift_renaming")
                                                      (("2"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skolem 1 ("x" "y"))
                                    (("2"
                                      (prop)
                                      (("2"
                                        (use "dom_append")
                                        (("2"
                                          (expand "subset?" -1)
                                          (("2"
                                            (inst -1 "x")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide -2)
                                                (("2"
                                                  (lemma "dom_append")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "rho"
                                                     "rho1")
                                                    (("2"
                                                      (expand
                                                       "subset?"
                                                       -1)
                                                      (("2"
                                                        (inst -1 "y")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide -3)
                                                            (("2"
                                                              (expand
                                                               ("member"
                                                                "union")
                                                               -1)
                                                              (("2"
                                                                (expand
                                                                 ("member"
                                                                  "union")
                                                                 -2)
                                                                (("2"
                                                                  (expand
                                                                   "subs"
                                                                   -3)
                                                                  (("2"
                                                                    (rewrite
                                                                     "subs_append2")
                                                                    (("2"
                                                                      (rewrite
                                                                       "subs_append2")
                                                                      (("2"
                                                                        (case
                                                                         "disjoint?(vars(img(rho)), vars(img(rho1)))")
                                                                        (("1"
                                                                          (prop)
                                                                          (("1"
                                                                            (lemma
                                                                             "subs_no_effect_t")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "rho1"
                                                                               "null * x")
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "subs_no_effect_t")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "rho1"
                                                                                         "null * y")
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "renaming?"
                                                                                               -9)
                                                                                              (("1"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -10
                                                                                                   "x"
                                                                                                   "y")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "subs"
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "vars"
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "disjoint?"
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "empty?"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (skolem
                                                                                                   1
                                                                                                   "Y")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     ("member"
                                                                                                      "intersection")
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (prop)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         ("member"
                                                                                                          "singleton")
                                                                                                         -2)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -2)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "disjoint?"
                                                                                                             -8)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "empty?")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -8
                                                                                                                 "y")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   ("member"
                                                                                                                    "intersection")
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "vars"
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "disjoint?"
                                                                                     1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "empty?"
                                                                                       1)
                                                                                      (("2"
                                                                                        (skolem
                                                                                         1
                                                                                         "X")
                                                                                        (("2"
                                                                                          (expand
                                                                                           ("member"
                                                                                            "intersection")
                                                                                           -1)
                                                                                          (("2"
                                                                                            (prop)
                                                                                            (("2"
                                                                                              (expand
                                                                                               ("member"
                                                                                                "singleton")
                                                                                               -2)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "disjoint?"
                                                                                                   -8)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "empty?"
                                                                                                     -8)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -8
                                                                                                       "x")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         ("member"
                                                                                                          "intersection")
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (lemma
                                                                             "subs_no_effect_t")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "rho"
                                                                               "subs(rho1)(null * x)")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "subs_no_effect_t")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "rho1"
                                                                                           "null * y")
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -10)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "renaming?")
                                                                                                  (("1"
                                                                                                    (prop)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -7
                                                                                                       -11)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -6
                                                                                                         "subs(rho1)(null * x)")
                                                                                                        (("1"
                                                                                                          (prop)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -9
                                                                                                               "subs(rho)(null * y)")
                                                                                                              (("1"
                                                                                                                (prop)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "disjoint?"
                                                                                                                     -6)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "empty?"
                                                                                                                       -6)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -6
                                                                                                                         "V(subs(rho)(null * y))")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           ("member"
                                                                                                                            "intersection")
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (prop)
                                                                                                                            (("1"
                                                                                                                              (rewrite
                                                                                                                               "vars_finset")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 1
                                                                                                                                 "subs(rho)(null * y)")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "vars"
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "member"
                                                                                                                                       1
                                                                                                                                       2)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "singleton"
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           ("member"
                                                                                                                                            "img")
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             1
                                                                                                                                             "y")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "subs"
                                                                                                                                                 1
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (propax)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (replace
                                                                                                                               -6)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -6
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("2"
                                                                                                                                  (rewrite
                                                                                                                                   "vars_finset")
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     1
                                                                                                                                     "subs(rho1)(null * x)")
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "member"
                                                                                                                                       1
                                                                                                                                       2)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "vars"
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "singleton"
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "member"
                                                                                                                                               1)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "img"
                                                                                                                                                 1)
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   1
                                                                                                                                                   "x")
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       "subs"
                                                                                                                                                       1
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (propax)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   ("member"
                                                                                                                    "img")
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     1
                                                                                                                     "y")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "subs"
                                                                                                                         1
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             ("member"
                                                                                                              "img")
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               1
                                                                                                               "x")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "subs"
                                                                                                                   1
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "disjoint?"
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "empty?"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (skolem
                                                                                                   1
                                                                                                   "Y")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     ("member"
                                                                                                      "intersection")
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "vars"
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "member"
                                                                                                         -1
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "singleton"
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -2)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "disjoint?"
                                                                                                                 -8)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "empty?"
                                                                                                                   -8)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -8
                                                                                                                     "y")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       ("member"
                                                                                                                        "intersection")
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "disjoint?"
                                                                                     1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "empty?"
                                                                                       1)
                                                                                      (("2"
                                                                                        (skolem
                                                                                         1
                                                                                         "X")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "member"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "intersection"
                                                                                             -1)
                                                                                            (("2"
                                                                                              (prop)
                                                                                              (("2"
                                                                                                (use
                                                                                                 "vars_subs_t")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "subset?"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "X")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         ("member"
                                                                                                          "union")
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (prop)
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             (-1
                                                                                                              -2
                                                                                                              -10))
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "disjoint?"
                                                                                                               -3)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "empty?"
                                                                                                                 -3)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -3
                                                                                                                   "X")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     ("member"
                                                                                                                      "intersection")
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "vars"
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "singleton"
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "member"
                                                                                                                 -1
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (hide-all-but
                                                                                                                     (-2
                                                                                                                      -4
                                                                                                                      -9))
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "disjoint?"
                                                                                                                       -3)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "empty?"
                                                                                                                         -3)
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -3
                                                                                                                           "x")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             ("member"
                                                                                                                              "intersection")
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (lemma
                                                                             "subs_no_effect_t")
                                                                            (("3"
                                                                              (inst
                                                                               -1
                                                                               "rho1"
                                                                               "null * x")
                                                                              (("3"
                                                                                (prop)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "subs_no_effect_t")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "rho"
                                                                                         "subs(rho1)(null * y)")
                                                                                        (("1"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -10)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "renaming?")
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -7
                                                                                                     -11)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -9
                                                                                                       "subs(rho)(null * x)")
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "member(subs(rho)(null * x), img(rho))")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "disjoint?"
                                                                                                               -4)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "empty?"
                                                                                                                 -4)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -4
                                                                                                                   "V(subs(rho)(null *x))")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "member"
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "intersection"
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (prop)
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "vars_finset")
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             1
                                                                                                                             "subs(rho)(null * x)")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "vars"
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   ("member"
                                                                                                                                    "singleton")
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (replace
                                                                                                                           -4)
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "vars_finset")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               1
                                                                                                                               "subs(rho1)(null * y)")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "vars"
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "member"
                                                                                                                                     1
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "singleton"
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "member"
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "img"
                                                                                                                                           1)
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             1
                                                                                                                                             "y")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "subs"
                                                                                                                                                 1
                                                                                                                                                 1)
                                                                                                                                                (("2"
                                                                                                                                                  (propax)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             ("member"
                                                                                                              "img")
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               1
                                                                                                               "x")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "subs"
                                                                                                                   1
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "disjoint?"
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "empty?"
                                                                                               1)
                                                                                              (("2"
                                                                                                (skolem
                                                                                                 1
                                                                                                 "y1")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   ("member"
                                                                                                    "intersection")
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (prop)
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "vars_subs_t")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "subset?"
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "y1")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               ("member"
                                                                                                                "union")
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (hide
                                                                                                                 -3)
                                                                                                                (("2"
                                                                                                                  (prop)
                                                                                                                  (("1"
                                                                                                                    (hide-all-but
                                                                                                                     (-1
                                                                                                                      -2
                                                                                                                      -9))
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "disjoint?"
                                                                                                                       -3)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "empty?"
                                                                                                                         -3)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -3
                                                                                                                           "y1")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             ("member"
                                                                                                                              "intersection")
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "vars"
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "singleton"
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "member"
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (hide-all-but
                                                                                                                             (-2
                                                                                                                              -4
                                                                                                                              -8))
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "disjoint?"
                                                                                                                               -3)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "empty?"
                                                                                                                                 -3)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -3
                                                                                                                                   "y")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     ("member"
                                                                                                                                      "intersection")
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "vars"
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "disjoint?"
                                                                                     1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "empty?"
                                                                                       1)
                                                                                      (("2"
                                                                                        (skolem
                                                                                         1
                                                                                         "x1")
                                                                                        (("2"
                                                                                          (expand
                                                                                           ("member"
                                                                                            "intersection")
                                                                                           -1)
                                                                                          (("2"
                                                                                            (prop)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "member"
                                                                                               -2)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "singleton"
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "disjoint?"
                                                                                                     -8)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "empty?"
                                                                                                       -8)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -8
                                                                                                         "x")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           ("member"
                                                                                                            "intersection")
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (replace
                                                                             -9)
                                                                            (("4"
                                                                              (expand
                                                                               "renaming?"
                                                                               -5)
                                                                              (("4"
                                                                                (flatten)
                                                                                (("4"
                                                                                  (lemma
                                                                                   "subs_no_effect_t")
                                                                                  (("4"
                                                                                    (inst
                                                                                     -1
                                                                                     "rho"
                                                                                     "subs(rho1)(null * x)")
                                                                                    (("4"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "subs_no_effect_t")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "rho"
                                                                                               "subs(rho1)(null * y)")
                                                                                              (("1"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -7
                                                                                                     "x"
                                                                                                     "y")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "subs"
                                                                                                         2)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "disjoint?"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "empty?"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (skolem
                                                                                                       1
                                                                                                       "y1")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         ("member"
                                                                                                          "intersection")
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "vars_subs_t")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "subset?"
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "y1")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     ("member"
                                                                                                                      "union")
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (hide-all-but
                                                                                                                         (-1
                                                                                                                          -2
                                                                                                                          -11))
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "disjoint?"
                                                                                                                           -3)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "empty?"
                                                                                                                             -3)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -3
                                                                                                                               "y1")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 ("member"
                                                                                                                                  "intersection")
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (expand
                                                                                                                         "vars"
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "member"
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "singleton"
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (hide-all-but
                                                                                                                                 (-2
                                                                                                                                  -5
                                                                                                                                  -10))
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "disjoint?"
                                                                                                                                   -3)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "empty?"
                                                                                                                                     -3)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -3
                                                                                                                                       "y")
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         ("member"
                                                                                                                                          "intersection")
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "disjoint?"
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "empty?"
                                                                                           1)
                                                                                          (("2"
                                                                                            (skolem
                                                                                             1
                                                                                             "x1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               ("member"
                                                                                                "intersection")
                                                                                               -1)
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (use
                                                                                                   "vars_subs_t")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "subset?"
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "x1")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -3)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             ("member"
                                                                                                              "union")
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (prop)
                                                                                                              (("1"
                                                                                                                (hide-all-but
                                                                                                                 (-1
                                                                                                                  -2
                                                                                                                  -10))
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "disjoint?"
                                                                                                                   -3)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "empty?"
                                                                                                                     -3)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -3
                                                                                                                       "x1")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         ("member"
                                                                                                                          "intersection")
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "vars"
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "singleton"
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "member"
                                                                                                                     -1
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (hide-all-but
                                                                                                                         (-2
                                                                                                                          -3
                                                                                                                          -9))
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "disjoint?"
                                                                                                                           -3)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "empty?"
                                                                                                                             -3)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -3
                                                                                                                               "x")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 ("member"
                                                                                                                                  "intersection")
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -1
                                                                           -2)
                                                                          (("2"
                                                                            (expand
                                                                             "disjoint?"
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "empty?"
                                                                               1)
                                                                              (("2"
                                                                                (skolem
                                                                                 1
                                                                                 "x1")
                                                                                (("2"
                                                                                  (expand
                                                                                   ("member"
                                                                                    "intersection")
                                                                                   -1)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("2"
                                                                                      (prop)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "subset?"
                                                                                         -9)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -9
                                                                                           "x1")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -7
                                                                                               -2
                                                                                               :dir
                                                                                               rl)
                                                                                              (("2"
                                                                                                (use
                                                                                                 "shift_img")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "subset?"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "x1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         "mem_list2set"
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (use
                                                                                                           "from_min2max_mem2[nat]")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "Z_"
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "select_greater_lt[nat]")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "finset2list(V1_)"
                                                                                                                   "x1")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "finset2list_mem")
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2" (hide 3)
                              (("2"
                                (expand "disjoint?" 1)
                                (("2"
                                  (expand "empty?" 1)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (expand
                                       ("member" "intersection")
                                       -1)
                                      (("2"
                                        (prop)
                                        (("2"
                                          (expand "subset?" -6)
                                          (("2"
                                            (inst -6 "x")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (replace
                                                   -4
                                                   -1
                                                   :dir
                                                   rl)
                                                  (("2"
                                                    (use "shift_dom")
                                                    (("2"
                                                      (expand
                                                       "subset?"
                                                       -1)
                                                      (("2"
                                                        (inst -1 "x")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (rewrite
                                                             "mem_list2set"
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (use
                                                               "from_min2max_mem2[nat]")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "Z"
                                                                   -1)
                                                                  (("2"
                                                                    (lemma
                                                                     "select_greater_lt[nat]")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "finset2list(V1)"
                                                                       "x")
                                                                      (("2"
                                                                        (prop)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (rewrite
                                                                           "finset2list_mem")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "disjoint?" 1)
                            (("2" (expand "empty?" 1)
                              (("2"
                                (skeep)
                                (("2"
                                  (expand ("member" "intersection") -1)
                                  (("2"
                                    (prop)
                                    (("2"
                                      (replace -4 -2 :dir rl)
                                      (("2"
                                        (use "shift_img")
                                        (("1"
                                          (expand "subset?" -1)
                                          (("1"
                                            (inst -1 "x")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite
                                                 "mem_list2set"
                                                 :dir
                                                 rl)
                                                (("1"
                                                  (use
                                                   "from_min2max_mem2[nat]")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "subset?"
                                                       -7)
                                                      (("1"
                                                        (inst -7 "x")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "select_greater_lt[nat]")
                                                            (("1"
                                                              (reveal
                                                               -5
                                                               -6)
                                                              (("1"
                                                                (inst
                                                                 -3
                                                                 "finset2list(V1)"
                                                                 "x")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (rewrite
                                                                     "finset2list_mem")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    nil (renaming type-eq-decl nil nominal_AC_substitution nil)
    (renaming? const-decl "bool" nominal_AC_substitution nil)
    (append_null formula-decl nil list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (disjoint? const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" nominal_AC_substitution nil) nil
    (img const-decl
     "finite_set[nominal_AC_term[atom, perm, variable, f_symbol, ac_symbol]]"
     nominal_AC_substitution nil)
    (shift_dom formula-decl nil nominal_AC_substitution nil)
    (shift_renaming formula-decl nil nominal_AC_substitution nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil nil
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (renaming_susp_var formula-decl nil nominal_AC_substitution nil)
    (V adt-accessor-decl "[(var?) -> variable]" nominal_AC_term_adt nil) nil
    (dom_append formula-decl nil nominal_AC_substitution nil)
    (union const-decl "set" sets nil)
    (subs_no_effect_t formula-decl nil nominal_AC_substitution nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil) nil
    (vars_subs_t formula-decl nil nominal_AC_substitution nil) nil
    (subs const-decl "nominal_AC_term" nominal_AC_substitution nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (subs_append2 formula-decl nil nominal_AC_substitution nil)
    (var? adt-recognizer-decl "[nominal_AC_term -> boolean]" nominal_AC_term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" nominal_AC_term_adt
       nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (subset? const-decl "bool" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (from_min2max_mem2 formula-decl nil list_aux_equational_reasoning nil)
    (finset2list_mem formula-decl nil list_aux_equational_reasoning nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (select_greater_lt formula-decl nil list_aux_equational_reasoning nil)
    (mem_list2set formula-decl nil list_aux_equational_reasoning nil)
    (from_min2max def-decl "list[nat]" list_aux_equational_reasoning nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (shift_img formula-decl nil nominal_AC_substitution nil)
    (vars_finset formula-decl nil nominal_AC_term_properties nil) nil nil
    (NOT const-decl "[bool -> bool]" booleans nil) nil
    (select_greater def-decl "nat" list_aux_equational_reasoning nil)
    (finset2list def-decl "list[T]" list_aux_equational_reasoning nil) nil
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil nominal_AC_substitution nil)
    (basic_sub type-eq-decl nil nominal_AC_substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (nominal_AC_term type-decl nil nominal_AC_term_adt nil)
    (ac_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (f_symbol type-eq-decl nil nominal_AC_term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_AC_term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)))

